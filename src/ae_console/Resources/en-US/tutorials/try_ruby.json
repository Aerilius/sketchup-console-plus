{
    "1": {
        "lang": "EN",
        "title": "Got 30 minutes? Give Ruby a shot right now!",
        "chapter": "Y",
        "answer": "",
        "ok": "",
        "error": "",
        "text": "<p>Ruby is a programming language from Japan which is revolutionizing\nsoftware development.</p>\n\n<p>The beauty of Ruby is found in its balance between simplicity and power.</p>\n\n<p>This tutorial guides you through the basics. At any time, you can skip a step by typing <tt>skip</tt> and pressing <kbd>Enter</kbd>, show the solution with <tt>show</tt> or leave the tutorial with <tt>quit</tt>. Press <kbd>Enter</kbd> to start learning.</p> This tutorial is based on TryRuby by Ivo Herweijer.\n",
        "load_code": ""
    },
    "2": {
        "lang": "EN",
        "title": "Using the editor",
        "chapter": "N",
        "answer": "^\\d{1,}$",
        "ok": "Good! You did a bit of math. See how the answer popped out?",
        "error": "Type 2 + 6 in the editor",
        "text": "<p>The console window will soon look like a conversation between you and Ruby. The editor section at the bottom is where you type your Ruby code, hit the <kbd>Enter</kbd> key and\nwatch it run!</p>\n\n<p>For example, try typing some math. Like:</p>\n\n<pre><code>2 + 6\n</code></pre>\n\n",
        "load_code": ""
    },
    "3": {
        "lang": "EN",
        "title": "Numbers and Math",
        "chapter": "N",
        "answer": "^[0-9\\.,-]{1,}$",
        "ok": "Good",
        "error": "",
        "text": "<p>Ruby recognizes numbers and mathematical symbols. You could try some other math like:</p>\n\n<pre><code>4 * 10\n5 - 12\n30 / 4\n</code></pre>\n",
        "load_code": ""
    },
    "4": {
        "lang": "EN",
        "title": "Putting it differently",
        "chapter": "N",
        "answer": "^[0-9\\.,-]{1,}$",
        "ok": "Well put",
        "error": "",
        "text": "<p>Did you notice that if you typed more than one formula you only saw the answer for the last one.\nWhat is going on?</p>\n\n<p>So when you entered 2 or more formula&rsquo;s, Ruby only showed the result of the last formula.</p>\n\n<p>Of course you have the power to control the screen! Just type <strong>puts</strong> before each formula\n(with a space in between). Puts means: <em>&lsquo;put something on the screen&rsquo;</em>.</p>\n\n<p>Try this:</p>\n\n<pre><code>puts 4 * 10\nputs 5 - 12\nputs 30 / 4\n</code></pre>\n\n<p>Now remove the puts from the last formula and see what happens.</p>\n",
        "load_code": ""
    },
    "5": {
        "lang": "EN",
        "title": "Say Your Name",
        "chapter": "N",
        "answer": "[a-zA-Z]{1,1}",
        "ok": "Perfect, you've formed a string from the letters of your name",
        "error": "",
        "text": "<p>Sure, computers are handy and fast for math. Let&rsquo;s move on. Want to see your name reversed?</p>\n\n<p>First type your first name in quotes like this:</p>\n\n<pre><code>&quot;Jimmy&quot;\n</code></pre>\n",
        "load_code": ""
    },
    "6": {
        "lang": "EN",
        "title": "Say Your Name Backwards",
        "chapter": "N",
        "answer": "\\w+",
        "ok": "dooG",
        "error": "",
        "text": "<p>A string is a set of characters the computer can process. Imagine the letters are on a string of\nlaundry line and the quotes are clothespins holding the ends. The quotes mark the beginning and end.</p>\n\n<p>To reverse your name, type: </p>\n\n<pre><code>&quot;Jimmy&quot;.reverse\n</code></pre>\n\n<p>(Don&rsquo;t forget the dot!)</p>\n",
        "load_code": ""
    },
    "7": {
        "lang": "EN",
        "title": "Counting the Letters",
        "chapter": "N",
        "answer": "^\\d+$",
        "ok": "Yep. Length is also a 'method'",
        "error": "",
        "text": "<p>You have used the reverse <strong>method</strong> on your name! By enclosing your name in quotes, you made a string. Then you called the reverse method, which works on strings to flip all the letters backwards.</p>\n\n<p>Now, let us see how many letters are in your name:</p>\n\n<pre><code>&quot;Jimmy&quot;.length\n</code></pre>\n",
        "load_code": ""
    },
    "8": {
        "lang": "EN",
        "title": "On Repeat",
        "chapter": "N",
        "answer": "(\\w+)",
        "ok": "Nice to meet you.Nice to meet you.Nice to meet you.",
        "error": "",
        "text": "<p>Now, you&rsquo;re probably wondering what any of this is good for.</p>\n\n<p>Well, I&rsquo;m sure you&rsquo;ve been to a website that screamed, <strong>Hey, your password is too short!</strong></p>\n\n<p>See, some programs use that simple <strong>.length</strong> code.</p>\n\n<p>Watch this. Let&rsquo;s multiply your name by 5. </p>\n\n<pre><code>&quot;Jimmy&quot; * 5\n</code></pre>\n",
        "load_code": ""
    },
    "9": {
        "lang": "EN",
        "title": "Hey, Summary #1 Already",
        "chapter": "Y",
        "answer": "^NoMethodError(.*)$",
        "ok": "Nope, it is not possible to reverse a number. Press <kbd>Enter</kbd> to proceed.",
        "error": "",
        "text": "<p>Let&rsquo;s look at what you&rsquo;ve learned in the first minute.</p>\n\n<h3>The editor</h3>\n\n<p>Typing code into the editor and evaluating it gives you an answer in the ouput section.\n(Almost) all code gives an answer.</p>\n\n<h3>Numbers and strings</h3>\n\n<p>Numbers and strings are Ruby&rsquo;s math and text objects.</p>\n\n<h3>Methods</h3>\n\n<p>You&rsquo;ve used English-language methods like reverse and length. And symbolic methods like the\nmultiplication method: *<br>\n<strong>Methods mean action!</strong></p>\n\n<p>This is the essence of your learning. Taking simple things, toying with them and turning them into\nnew things. Feeling comfortable yet? I promise you are.</p>\n\n<h2>Okay,</h2>\n\n<p>let&rsquo;s do something uncomfortable. Try reversing a number:</p>\n\n<pre><code>40.reverse\n</code></pre>\n",
        "load_code": ""
    },
    "10": {
        "lang": "EN",
        "title": "Stop, You're Barking Mad!",
        "chapter": "N",
        "answer": "^\\d{1,}$",
        "ok": "Only strings can be reversed",
        "error": "",
        "text": "<p>You can&rsquo;t reverse the number forty. I guess you can hold your monitor up to the mirror, but reversing a number just doesn&rsquo;t make sense.</p>\n\n<p>Ruby has tossed an error message. Ruby is telling you there is no method reverse for numbers.</p>\n\n<p>Maybe if you turn the number into a string first:</p>\n\n<pre><code>40.to_s.reverse\n</code></pre>\n",
        "load_code": ""
    },
    "11": {
        "lang": "EN",
        "title": "Boys are Different From Girls",
        "chapter": "N",
        "answer": "\\[\\]",
        "ok": "Great, that's an empty list",
        "error": "",
        "text": "<p>And numbers are different from strings.</p>\n\n<p>While you can use methods on any object in Ruby, some methods only work on certain types of things.\nBut you can always convert between different types using Ruby&rsquo;s &ldquo;to&rdquo; methods.</p>\n\n<ul>\n<li><strong>to_s</strong> converts things to <strong>s</strong>trings</li>\n<li><strong>to_i</strong> converts things to <strong>i</strong>ntegers (numbers)</li>\n<li><strong>to_a</strong> converts things to <strong>a</strong>rrays</li>\n</ul>\n\n<p><strong>What are arrays?!</strong></p>\n\n<p>They are lists. Type in a pair of brackets: </p>\n\n<pre><code>[]\n</code></pre>\n",
        "load_code": ""
    },
    "12": {
        "lang": "EN",
        "title": "Standing in Line",
        "chapter": "N",
        "answer": "^\\[(\\d+)(,\\s*\\d+){3,}\\]$",
        "ok": "Excellent",
        "error": "Try adding a fouth number to the list",
        "text": "<p>Lists (arrays) store things <strong>in some order</strong>.</p>\n\n<p>Like standing in line for popcorn. You are behind someone and you wouldn&rsquo;t dream of pushing them aside,\nright? And the guy behind you, you&rsquo;ve got a close eye on him, right?</p>\n\n<p>Here&rsquo;s a list for you. Lottery numbers: </p>\n\n<pre><code>[12, 47, 35]\n</code></pre>\n\n<p>Try adding a number to this list: type a comma after 35 followed by a number. The space is optional.</p>\n",
        "load_code": ""
    },
    "13": {
        "lang": "EN",
        "title": "One Raises Its Hand",
        "chapter": "N",
        "answer": "^47$",
        "ok": "Okay",
        "error": "",
        "text": "<p>A list of lottery numbers. Which one is the highest?</p>\n\n<p>Try: </p>\n\n<pre><code>[12, 47, 35].max\n</code></pre>\n",
        "load_code": ""
    },
    "14": {
        "lang": "EN",
        "title": "Tucking a List Away",
        "chapter": "N",
        "answer": "^\\[(\\d+)(,\\s*\\d+){2,}\\]$",
        "ok": "Saved!",
        "error": "",
        "text": "<p>Good, good. But it&rsquo;s annoying to have to retype that list every time you need it, isn&rsquo;t it?</p>\n\n<p>Let&rsquo;s save our numbers inside a ticket like so: </p>\n\n<pre><code>ticket = [12, 47, 35]\n</code></pre>\n",
        "load_code": ""
    },
    "15": {
        "lang": "EN",
        "title": "Now Type Ticket",
        "chapter": "N",
        "answer": "\\[(\\d+(, )?){2,}\\]",
        "ok": "Restored!",
        "error": "",
        "text": "<p>Now, type:</p>\n\n<pre><code>ticket\n</code></pre>\n",
        "load_code": "ticket%20=%20[12,%2047,%2035]"
    },
    "16": {
        "lang": "EN",
        "title": "Saved, Tucked Away",
        "chapter": "N",
        "answer": "\\[12, 35, 47\\]",
        "ok": "You've sorted the list",
        "error": "",
        "text": "<p>You&rsquo;ve hung on to your lotto numbers, tucking them away inside a <strong>variable</strong> called ticket.\nBut any other name, like <em>jimmyslist</em>, would have been fine to.</p>\n\n<p>Programming, you will discover, is mostly about working with variables.</p>\n\n<p>Let&rsquo;s put your lotto numbers in order, how about?</p>\n\n<p>Use: </p>\n\n<pre><code>ticket.sort!\n</code></pre>\n\n<p>You had a list. You sorted the list. The ticket variable is now changed.<br>\nDid you notice that the <em>sort!</em> method has a big, bright exclamation at the end?<br>\nA lot of times Ruby methods shout like that if they alter the variable for good.\nIt&rsquo;s nothin special, just a mark.</p>\n",
        "load_code": "ticket%20=%20[12,%2047,%2035]"
    },
    "17": {
        "lang": "EN",
        "title": "Elemental",
        "chapter": "N",
        "answer": "^(12|35|47)$",
        "ok": "Ok",
        "error": "Almost",
        "text": "<p>So we stored our lotto numbers inside variable ticket. How to get &lsquo;em out again?</p>\n\n<p>We already saw that we can get the highest number with <strong>max</strong>. Similarly you can\nget the <strong>first</strong> or the <strong>last</strong> element of the list.\nBut what if you want a specific element?</p>\n\n<h3>[ ]</h3>\n\n<p>Ruby uses the square brackets [ ] to target an element.\nThe square brackets are very common in Ruby.\nThey are like sights used to line up a target. Exactly.\nThese brackets mean, &ldquo;I am looking for ____&rdquo; Ready, aim.</p>\n\n<p>Let&rsquo;s get all of our lotto numbers:</p>\n\n<pre><code>puts ticket[0]\nputs ticket[1]\nputs ticket[2]\n</code></pre>\n\n<p>Why do we use [0], [1], [2]?</p>\n\n<p>And not [1], [2] and [3]? Is that some kind of Japanese Zen thing?\nNo, we computer people just like to begin counting from zero. It&rsquo;s not just a Ruby thing,\nthis <em>zero based indexing</em> is used in most programming languages.</p>\n",
        "load_code": "ticket%20=%20[12,%2047,%2035]"
    },
    "18": {
        "lang": "EN",
        "title": "Summary #2 is Upon Us",
        "chapter": "Y",
        "answer": "\\w+",
        "ok": "Does it rhyme?",
        "error": "",
        "text": "<p>Now, look how your second minute went:</p>\n\n<h3>Errors</h3>\n\n<p>If you try to reverse a number or do anything fishy, Ruby will tell you so.</p>\n\n<h3>Arrays</h3>\n\n<p>Arrays are lists for storing things in some order.\nWe also know how to create array&rsquo;s and get items from array&rsquo;s.</p>\n\n<h3>Variables</h3>\n\n<p>Variables save a thing and give it a name. You used the equals sign to do this. Like:\nticket = [14, 37, 18].</p>\n\n<h3>2/8</h3>\n\n<p>In all there are eight sections. You are two-eighths of the way there! This is simple stuff,\ndon&rsquo;t you think? Good stuff up ahead.</p>\n\n<p>Let&rsquo;s change directions for a moment. I&rsquo;ve stuffed a bit of poetry for you in a certain variable.\nTake a look. Type:</p>\n\n<pre><code>puts poem\n</code></pre>\n",
        "load_code": "poem%20=%20%22My%20toast%20has%20flown%20from%20my%20hand%5CnAnd%20my%20toast%20has%20gone%20to%20the%20moon.%5CnBut%20when%20I%20saw%20it%20on%20television,%5CnPlanting%20our%20flag%20on%20Halley's%20comet,%5CnMore%20still%20did%20I%20want%20to%20eat%20it.%5Cn%22"
    },
    "19": {
        "lang": "EN",
        "title": "Sadly, You Hate Toast Poetry",
        "chapter": "N",
        "answer": "(toast){0}",
        "ok": "Excellent",
        "error": "Still smells like toast to me",
        "text": "<p>Look, it&rsquo;s okay. You don&rsquo;t have to like it. Hack it up, be my guest. Instead of toast, go for a\nmelon or something. Try this to see the new poem:</p>\n\n<pre><code>poem.gsub(&quot;toast&quot;, &quot;honeydew&quot;)\n</code></pre>\n\n<p>The <strong>gsub</strong> method is short for global substitute. It replaces all occurences of &ldquo;toast&rdquo; with\n&ldquo;honeydew&rdquo;.</p>\n",
        "load_code": "prev"
    },
    "20": {
        "lang": "EN",
        "title": "Ready, Aim",
        "chapter": "N",
        "answer": "^\\n.ti tae ot (.+)",
        "ok": "Okay, sure.  So the whole poem has been turned backwards.",
        "error": "",
        "text": "<p>Here&rsquo;s a question: what happens when we reverse this whole poem? </p>\n\n<pre><code>poem.reverse\n</code></pre>\n",
        "load_code": "prev"
    },
    "21": {
        "lang": "EN",
        "title": "Too Much Reversal",
        "chapter": "N",
        "answer": "^\\[\"More still did (.+)",
        "ok": "Yes, almost what we want",
        "error": "",
        "text": "<p>So the whole poem&rsquo;s been turned backwards, letter-by-letter. I really wanted to just reverse the lines though.\nMove the last line up to first and the first line down to last.</p>\n\n<p>Backwards, but not <strong>that</strong> backwards.</p>\n\n<p>Here&rsquo;s how:</p>\n\n<pre><code>poem.lines.reverse\n</code></pre>\n",
        "load_code": "prev"
    },
    "22": {
        "lang": "EN",
        "title": "Ringlets of Chained Methods",
        "chapter": "N",
        "answer": "^More still did (.+)",
        "ok": "Good show, my friend! The join method took that array of lines and put them together into a string.",
        "error": "",
        "text": "<p>So what do you see? What happened there? You typed <strong>poem.lines.reverse</strong> and what happened?</p>\n\n<p>Two things happened. You turned the poem into a list using lines.\nLines decides the way the string is split up and converts it into an Array.</p>\n\n<p>Then, you reversed that list. You had each line. You reversed them. That&rsquo;s it.</p>\n\n<p>Let&rsquo;s tack one more method on the end there:</p>\n\n<pre><code>puts poem.lines.reverse.join\n</code></pre>\n\n<p>Combining methods like this is called <em>method chaining</em>.</p>\n",
        "load_code": "prev"
    },
    "23": {
        "lang": "EN",
        "title": "Of All the Summaries, #3 is Here Now",
        "chapter": "Y",
        "answer": "\\{\\}",
        "ok": "You've made an empty hash!",
        "error": "",
        "text": "<h3>Exclamations</h3>\n\n<p>Methods may have exclamations (and also question marks) in their name.\nThese are just there to better explain what their function is. No big deal.</p>\n\n<h3>String manipulation</h3>\n\n<p>Search and change strings</p>\n\n<h3>Chaining</h3>\n\n<p>Chaining methods lets you get a lot more done. Break up a poem, reverse it, reassemble it:\n<strong>poem.lines.reverse.join</strong></p>\n\n<p>At this point, you may want to tinker with the poem a bit more. A complete list of all the String\nmethods is <a href=\"http://ruby-doc.org/core/classes/String.html\" target=\"_blank\">here</a>.</p>\n\n<p>Go ahead and try a few, such as: poem.downcase or poem.swapcase</p>\n\n<h2>Ready?</h2>\n\n<p>When you feel ready to move on, type:</p>\n\n<pre><code>books = {}\n</code></pre>\n",
        "load_code": "prev"
    },
    "24": {
        "lang": "EN",
        "title": "A Wee Blank Book",
        "chapter": "N",
        "answer": "^(splendid|quite_good|mediocre|quite_not_good|abysmal)$",
        "ok": "Yes that's a new review",
        "error": "Use one of splendid, quite_good, mediocre, quite_not_good, abysmal. Don't forget the colon",
        "text": "<p>You&rsquo;ve made an empty <strong>hash</strong>. A hash is like an array, only every one of its elements has a name.</p>\n\n<p>We&rsquo;re going to stuff some miniature book reviews in our new hash. Here&rsquo;s our rating system:</p>\n\n<ul>\n<li>:splendid &rarr; a masterpiece</li>\n<li>:quite_good &rarr; enjoyed, sure, yes</li>\n<li>:mediocre &rarr; equal parts great and terrible</li>\n<li>:quite_not_good &rarr; notably bad</li>\n<li>:abysmal &rarr; steaming wreck</li>\n</ul>\n\n<p>To rate a book, put the title in square brackets and put the rating after the equals. For example:</p>\n\n<pre><code>books[&quot;Gravitys Rainbow&quot;] = :splendid\n</code></pre>\n\n<blockquote>\n<p>By now I think it is only fair to tell you that all lessons in TryRuby are separate from each other.\nSo if you go crazy typing book reviews here, you can only use &lsquo;em in this lesson.<br>\nIf you want to use your reviews in the next lesson you should copy/paste them.<br>\nDon&rsquo;t worry about this too much, each lesson has plenty of predefined stuff for you to play around with.</p>\n</blockquote>\n",
        "load_code": "books%20=%20%7B%7D"
    },
    "25": {
        "lang": "EN",
        "title": "More Bite-Size Reviews",
        "chapter": "N",
        "answer": "[3-9]",
        "ok": "See, the length method works on strings, array's and hashes.",
        "error": "",
        "text": "<p>Keep going, fill it up with reviews. And, if you want to see the whole list, just type: <strong>puts books</strong></p>\n\n<p>Again, the ratings are: :splendid, :quite_good, :mediocre, :quite_not_good and :abysmal.</p>\n\n<p>These ratings are not strings. When you place a colon in front of a simple word, you get a <strong>symbol</strong>.\nSymbols are cheaper than strings (in terms of computer memory.) If you use a word over and over in your program,\nuse a symbol. Rather than having thousands of copies of that word in memory, the computer will store the symbol only\n<strong>once</strong>.</p>\n\n<p>More importantly, a symbol tells you that is not just any old word but has a meaning within your program.</p>\n\n<p>Enter 2 more bookreviews, use <strong>books.length</strong> to see how many reviews there are in the hash:</p>\n\n<pre><code>books[&quot;The deep end&quot;]  = :abysmal\nbooks[&quot;Living colors&quot;] = :mediocre\n\nputs books\n\nputs books.length\n</code></pre>\n",
        "load_code": "books%20=%20%7B%22Gravitys%20Rainbow%22%20=%3E%20:splendid%7D"
    },
    "26": {
        "lang": "EN",
        "title": "Wait, Did I Like Gravity's Rainbow?",
        "chapter": "N",
        "answer": "^(splendid|quite_good|mediocre|quite_not_good|abysmal)$",
        "ok": "I liked it a lot",
        "error": "",
        "text": "<p>One great thing about Ruby is that names are often reused, which means fewer names you need to remember.</p>\n\n<p>Remember how we retrieved items from an array using a number:<br>\n<strong>puts ticket[1]</strong>.</p>\n\n<p>For a hash this works the same way, except we don&rsquo;t use a number to get an element but a name.</p>\n\n<p>So, if you&rsquo;d like to look up one of your old reviews, again put the title in the square. But leave off the equals.\nJust like this:</p>\n\n<pre><code>puts books[&quot;Gravitys Rainbow&quot;]\n</code></pre>\n",
        "load_code": "books%20=%20%7B%22Gravitys%20Rainbow%22%20=%3E%20:splendid,%20%22The%20deep%20end%22%20=%3E%20:abysmal,%20%22Living%20colors%22%20=%3E%20:mediocre%7D"
    },
    "27": {
        "lang": "EN",
        "title": "Hashes as Pairs",
        "chapter": "N",
        "answer": "^\\[\".*\"\\]",
        "ok": "You found the keys",
        "error": "",
        "text": "<p>Keep in mind that hashes won&rsquo;t keep things in order. That&rsquo;s not their job. It&rsquo;ll just pair up\ntwo things: a <strong>key</strong> and a <strong>value</strong>.</p>\n\n<p>In your reviews, the book&rsquo;s title is the key and the rating is the value.</p>\n\n<p>If you want to just see the titles of all the books you&rsquo;ve reviewed:</p>\n\n<pre><code>books.keys\n</code></pre>\n\n<p>You can also try this with .values instead of .keys.</p>\n",
        "load_code": "prev"
    },
    "28": {
        "lang": "EN",
        "title": "Are You Harsh?",
        "chapter": "N",
        "answer": "\"mediocre\"",
        "ok": "Great, wow! You've made a scorecard of your ratings",
        "error": "",
        "text": "<p>So are you giving out harsh, unfair reviews? Let&rsquo;s keep score with a new hash <strong>ratings</strong>:</p>\n\n<p>Then, okay, now let&rsquo;s count up your reviews. Just stay with me. Type:</p>\n\n<pre><code>ratings = Hash.new {0}\n\nbooks.values.each { |rate|\n  ratings[rate] += 1\n}\n\nputs ratings\n</code></pre>\n\n<p>The straight line in the code is the pipe character, probably located right above the Enter key\non your keyboard.</p>\n\n<p>That <em>+= 1</em> line means: increase the value by 1.</p>\n\n<p>Don&rsquo;t worry if you don&rsquo;t understand everything that is going on here. It will be revealed later.</p>\n",
        "load_code": "books%20=%20%7B%22Gravitys%20Rainbow%22%20=%3E%20:splendid,%20%22The%20deep%20end%22%20=%3E%20:abysmal,%20%22Living%20colors%22%20=%3E%20:mediocre,%20%22Bumblebees%22%20=%3E%20:mediocre%7D"
    },
    "29": {
        "lang": "EN",
        "title": "A Tally",
        "chapter": "N",
        "answer": "\\w+",
        "ok": "Yodelay!",
        "error": "",
        "text": "<p>One of the amazing new things we&rsquo;ve just used is a <strong>block</strong>. We&rsquo;re going to explore these more\nin this and the next lesson. But, basically, a block is a bit of Ruby code surrounded by curly\nbraces.</p>\n\n<p>Let&rsquo;s try another block:</p>\n\n<pre><code>5.times { print &quot;Odelay! &quot; }\n</code></pre>\n\n<p>Blocks are always attached to methods. Like the <strong>times</strong> method, which takes the block and runs\nthe code over and over. (In our example: five times.)</p>\n",
        "load_code": ""
    },
    "30": {
        "lang": "EN",
        "title": "Have you got the time?",
        "chapter": "N",
        "answer": "^[0-9]$",
        "ok": "You timed it just right!",
        "error": "Run the block 0 to 9 times",
        "text": "<p>As we saw in the first example with a block (when counting ratings) we can pass a value to the block. Which\nvalues are <strong>passed</strong> is determined by the method that is running the block.</p>\n\n<p>The values that are <strong>received</strong> by the block are placed in the variable name at the beginning of the block,\nbetween two pipe symbols: |</p>\n\n<p>Let&rsquo;s try that with this block:</p>\n\n<pre><code>5.times { |time|\n  puts time\n}\n</code></pre>\n\n<p>Here, method <strong>.times</strong> sends a value to variable <strong>|time|</strong>. But note that variable time is only known within the block.</p>\n\n<blockquote>\n<p>Did you notice that you can split code over multiple lines. This makes it a bit easier to read.</p>\n</blockquote>\n",
        "load_code": ""
    },
    "31": {
        "lang": "EN",
        "title": "Now Arriving at Summary #4",
        "chapter": "Y",
        "answer": "",
        "ok": "",
        "error": "",
        "text": "<p>This last lesson was a bit longer. You&rsquo;ve probably used up three minutes learning about:</p>\n\n<h3>Hashes</h3>\n\n<p>The little dictionary with the curly pages: <strong>{}</strong></p>\n\n<h3>Symbols</h3>\n\n<p>Tiny, efficient code words with a colon, like: <strong>:splendid</strong></p>\n\n<h3>Blocks</h3>\n\n<p>Chunks of code which can be tacked on to many of Ruby&rsquo;s methods. Here&rsquo;s the code you used to\nbuild a scorecard:<br>\n<strong>books.values.each { |rate| ratings[rate] += 1 }</strong></p>\n\n<h3>Next</h3>\n\n<p>In the next lesson we will delve al little bit deeper into methods.</p>\n",
        "load_code": ""
    },
    "32": {
        "lang": "EN",
        "title": "To (be) or not to (be)",
        "chapter": "N",
        "answer": "",
        "ok": "",
        "error": "",
        "text": "<p>One other little thing we haven&rsquo;t really talked about openly: method arguments.\nRemember when we changed the poem a little bit? We used:\n<strong>poem.gsub(&ldquo;toast&rdquo;, &ldquo;honeydew&rdquo;)</strong></p>\n\n<p>The gsub method needs 2 arguments, which we passed to gsub by including two strings between\nparenthesis. <em>Arguments tell the method exactly what to do.</em></p>\n\n<h3>Parenthesis</h3>\n\n<p>Actually, most of the time Ruby doesn&rsquo;t mind if you omit the parenthesis. So this would have\nworked too:\n<strong>poem.gsub &ldquo;toast&rdquo;, &ldquo;honeydew&rdquo;</strong></p>\n\n<p>We have already used another method with a parameter. Many times in fact, though it was not very\nobvious:</p>\n\n<pre><code>puts &quot;Hello&quot;\nputs(&quot;Hello&quot;)\n</code></pre>\n\n<p>Yes <strong>puts</strong> is also a method. Using puts with or without parenthesis is the same to Ruby, but the\nversion without parenthesis is a bit easier to read. And it saves you valuable typing time!</p>\n\n<blockquote>\n<p>So I guess the conclusion is that you can do whatever you like with parenthesis as long as your\ncode reads nicely.</p>\n</blockquote>\n\n<h3>to (be) or not to (be)</h3>\n\n<p>So if <em>to</em> is a method and <em>be</em> is an argument we now know the answer to this age old question.\nIt is really just a matter of preference whether you want <em>to be</em> or <em>to(be)</em>.</p>\n\n<p>Are you in the mood for more Shakespeare? Read on.</p>\n",
        "load_code": "poem%20=%20%22My%20toast%20has%20flown%20from%20my%20hand%5CnAnd%20my%20toast%20has%20gone%20to%20the%20moon.%5CnYada%20yada%20yada%5Cn%22"
    },
    "33": {
        "lang": "EN",
        "title": "The Taming of the Shrew",
        "chapter": "N",
        "answer": "^tame",
        "ok": "Good good!",
        "error": "",
        "text": "<p>You totally know how to use Ruby now. I mean you&rsquo;ve got down the essentials.\nYou just need to keep learning more methods and try out more complex blocks.</p>\n\n<p>But there&rsquo;s one side of Ruby we haven&rsquo;t settled. Making your own methods.\n<strong>Ahem!</strong> Let&rsquo;s get it over with then.</p>\n\n<p>Next to using Ruby&rsquo;s built in methods (like puts, sort, times) you can define\nyour own methods. Why is that a good idea? Two reasons:</p>\n\n<h3>To make your program shorter</h3>\n\n<p>If you have to do the same thing in more than one part of your code it is easier\nto put that code in a separate method. Your code will be shorter.</p>\n\n<h3>To make your code easier to read</h3>\n\n<p>Suppose your program needs to do a lot of different things.\nYou <strong>could</strong> stuff all code into one long piece. But it would be very difficult to\nread and understand that code later.</p>\n\n<p>Instead you should cut up your code in different methods and give each method an easy to\nunderstand English name. You will thank yourself later.</p>\n\n<p>So how do we define a method? Like this:</p>\n\n<pre><code>def tame( number_of_shrews )\nend\n</code></pre>\n",
        "load_code": ""
    },
    "34": {
        "lang": "EN",
        "title": "In Ruby, Def Leppard means: define method Leppard",
        "chapter": "N",
        "answer": "^tame",
        "ok": "Tame is not lame",
        "error": "",
        "text": "<p>Hey, okay, you done it. You&rsquo;re making your own method. You started with def, followed by the name of the method.\nAnd a list of arguments which the method will need. This isn&rsquo;t too scary and dangerous!\nAll we have to do is fill it up with Ruby and finish it up with end.</p>\n\n<p>Here&rsquo;s the code:</p>\n\n<pre><code>def tame( number_of_shrews )\n  number_of_shrews.times {\n    puts &quot;Tamed a shrew&quot;\n  }\nend\n</code></pre>\n\n<blockquote>\n<p><strong>P.S.</strong><br>\nIf you don&rsquo;t get the title of this chapter.\n<a href=\"http://en.wikipedia.org/wiki/Def_Leppard\" target=\"_blank\">Def Leppard</a>\nis the name of a, once famous, English rock band.</p>\n</blockquote>\n",
        "load_code": ""
    },
    "35": {
        "lang": "EN",
        "title": "The Ripened Fruit of Your Own Creation",
        "chapter": "N",
        "answer": "^Tamed a shrew",
        "ok": "That'll show those shrews",
        "error": "",
        "text": "<p>A new method is born. Let us use it now: </p>\n\n<pre><code>tame 5\n</code></pre>\n",
        "load_code": "def%20tame(number_of_shrews);number_of_shrews.times%7Bputs%20%22Tamed%20a%20shrew%22%7D;end;"
    },
    "36": {
        "lang": "EN",
        "title": "Give and take",
        "chapter": "N",
        "answer": "\\d+",
        "ok": "Right on. Bravo.",
        "error": "",
        "text": "<p>Most methods do not only want some parameters as input, but will also <strong>give something back</strong>.\nI have changed our method a bit so it will return a value to you. Try it:</p>\n\n<pre><code>def tame( number_of_shrews )\n  number_of_shrews.times {\n    puts &quot;Tamed a shrew&quot;\n  }\n  return number_of_shrews\nend\n\nputs tame(3)\n</code></pre>\n\n<h3>Return</h3>\n\n<p>And, since you&rsquo;re getting so advanced and capable here, one other tip:\nyou can omit the word <strong>return</strong> from the last line of the method.\nRuby will automagically return the last value that was used inside the method.</p>\n\n<p>So we can change the last line to just: <strong>number_of_shrews</strong>.</p>\n\n<p>But since method <strong>.times</strong> also returns the <em>number_of_shrews</em> we can\nremove the entire last line. So in fact our original method already did what we wanted all along!</p>\n",
        "load_code": ""
    },
    "37": {
        "lang": "EN",
        "title": "Hello, Who's There? And Summary #5 Waves Its Hat!",
        "chapter": "Y",
        "answer": "",
        "ok": "",
        "error": "",
        "text": "<p>Well done, well done, well done, well done!</p>\n\n<p>Truly, truly, truly, truly, truuuuuuuuly!</p>\n\n<p>Here&rsquo;s the last few minutes of your life in review:</p>\n\n<h3>Methods</h3>\n\n<p>Methods can be defined with <strong>def</strong> and have a name. Methods make your program shorter\nand easier to read.</p>\n\n<h3>Parameters</h3>\n\n<p>Methods can have parameters.</p>\n\n<h3>Return values</h3>\n\n<p>Methods (almost) always return a value.</p>\n\n<h2>Now</h2>\n\n<p>To (be) or not to (be) is not a question to you anymore. Are you ready for some more Shakespeare?</p>\n",
        "load_code": ""
    },
    "38": {
        "lang": "EN",
        "title": "The world is our oyster",
        "chapter": "N",
        "answer": "^\\{\\\"William",
        "ok": "Good. Bit difficult to read.",
        "error": "",
        "text": "<p>So far we have been running programs that only use things that we have typed ourselves.\nWhich is nice, I mean that <em>Odelaying</em> was epic, but this the internet era so it is about\ntime we included the rest of the world in our programming efforts.</p>\n\n<p>Many, many, many websites are available that you can ask for information. For instance\nthis link will give you all current <a href=\"http://news.google.com/news/section?q=ruby&output=rss\" target=\"_blank\">Google news feeds</a>\nabout Ruby.</p>\n\n<p>Your web browser will probably display it quite nicely for you. If you look at the source\n(type: control-U) you will see a long string of strangely formatted text. In the Google example\nit is in the <strong>rss</strong> format.</p>\n\n<h3>Formats</h3>\n\n<p>There are many other formats, with strange names, available and used on the web, like:\nhtml, xml and json. Yes, even this very website uses a couple of these.</p>\n\n<p>I have prepared a method for you that will fetch a list of the complete works of William\nShakespeare from the internet.\n(Don&rsquo;t worry it actually comes from the same server that this website runs on, so\nwe&rsquo;re not bothering anyone.)</p>\n\n<p>Get the data with:</p>\n\n<pre><code>get_shakey\n</code></pre>\n",
        "load_code": "def%20get_shakey;JSON.parse(%22%7B%5C%22William%20Shakespeare%5C%22:%20%7B%5C%221%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22The%20Two%20Gentlemen%20of%20Verona%5C%22,%20%5C%22finished%5C%22:%201591%7D,%5C%222%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22The%20Taming%20of%20the%20Shrew%5C%22,%20%5C%22finished%5C%22:%201591%7D,%5C%223%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Henry%20VI,%20Part%202%5C%22,%20%5C%22finished%5C%22:%201591%7D,%5C%224%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Henry%20VI,%20Part%203%5C%22,%20%5C%22finished%5C%22:%201591%7D,%5C%225%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Henry%20VI,%20Part%201%5C%22,%20%5C%22finished%5C%22:%201592%7D,%5C%226%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Titus%20Andronicus%5C%22,%20%5C%22finished%5C%22:%201592%7D,%5C%227%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Richard%20III%5C%22,%20%5C%22finished%5C%22:%201593%7D,%5C%228%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Edward%20III%5C%22,%20%5C%22finished%5C%22:%201593%7D,%5C%229%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22The%20Comedy%20of%20Errors%5C%22,%20%5C%22finished%5C%22:%201594%7D,%5C%2210%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Love's%20Labour's%20Lost%5C%22,%20%5C%22finished%5C%22:%201595%7D,%5C%2211%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Love's%20Labour's%20Won%5C%22,%20%5C%22finished%5C%22:%201596%7D,%5C%2212%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Richard%20II%5C%22,%20%5C%22finished%5C%22:%201595%7D,%5C%2213%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Romeo%20and%20Juliet%5C%22,%20%5C%22finished%5C%22:%201595%7D,%5C%2214%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22A%20Midsummer%20Night's%20Dream%5C%22,%20%5C%22finished%5C%22:%201595%7D,%5C%2215%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22King%20John%5C%22,%20%5C%22finished%5C%22:%201596%7D,%5C%2216%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22The%20Merchant%20of%20Venice%5C%22,%20%5C%22finished%5C%22:%201597%7D,%5C%2217%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Henry%20IV,%20Part%201%5C%22,%20%5C%22finished%5C%22:%201597%7D,%5C%2218%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22The%20Merry%20Wives%20of%20Windsor%5C%22,%20%5C%22finished%5C%22:%201597%7D,%5C%2219%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Henry%20IV,%20Part%202%5C%22,%20%5C%22finished%5C%22:%201598%7D,%5C%2220%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Much%20Ado%20About%20Nothing%5C%22,%20%5C%22finished%5C%22:%201599%7D,%5C%2221%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Henry%20V%5C%22,%20%5C%22finished%5C%22:%201599%7D,%5C%2222%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Julius%20Caesar%5C%22,%20%5C%22finished%5C%22:%201599%7D,%5C%2223%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22As%20You%20Like%20It%5C%22,%20%5C%22finished%5C%22:%201600%7D,%5C%2224%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Hamlet%5C%22,%20%5C%22finished%5C%22:%201601%7D,%5C%2225%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Twelfth%20Night%5C%22,%20%5C%22finished%5C%22:%201601%7D,%5C%2226%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Troilus%20and%20Cressida%5C%22,%20%5C%22finished%5C%22:%201602%7D,%5C%2227%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Sir%20Thomas%20More%5C%22,%20%5C%22finished%5C%22:%201604%7D,%5C%2228%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Measure%20for%20Measure%5C%22,%20%5C%22finished%5C%22:%201604%7D,%5C%2229%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Othello%5C%22,%20%5C%22finished%5C%22:%201604%7D,%5C%2230%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22All's%20Well%20That%20Ends%20Well%5C%22,%20%5C%22finished%5C%22:%201605%7D,%5C%2231%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22King%20Lear%5C%22,%20%5C%22finished%5C%22:%201606%7D,%5C%2232%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Timon%20of%20Athens%5C%22,%20%5C%22finished%5C%22:%201606%7D,%5C%2233%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Macbeth%5C%22,%20%5C%22finished%5C%22:%201606%7D,%5C%2234%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Antony%20and%20Cleopatra%5C%22,%20%5C%22finished%5C%22:%201606%7D,%5C%2235%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Pericles,%20Prince%20of%20Tyre%5C%22,%20%5C%22finished%5C%22:%201608%7D,%5C%2236%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Coriolanus%5C%22,%20%5C%22finished%5C%22:%201608%7D,%5C%2237%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22The%20Winter's%20Tale%5C%22,%20%5C%22finished%5C%22:%201611%7D,%5C%2238%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Cymbeline%5C%22,%20%5C%22finished%5C%22:%201610%7D,%5C%2239%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22The%20Tempest%5C%22,%20%5C%22finished%5C%22:%201611%7D,%5C%2240%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Cardenio%5C%22,%20%5C%22finished%5C%22:%201613%7D,%5C%2241%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22Henry%20VIII%5C%22,%20%5C%22finished%5C%22:%201613%7D,%5C%2242%5C%22:%20%7B%5C%22title%5C%22:%20%5C%22The%20Two%20Noble%20Kinsmen%5C%22,%20%5C%22finished%5C%22:%201614%7D%7D%7D%22);end;"
    },
    "39": {
        "lang": "EN",
        "title": "Noble Kinsmen",
        "chapter": "N",
        "answer": "^The Two Noble Kinsmen$",
        "ok": "That's much better",
        "error": "",
        "text": "<p>Okay we now have a list of plays from the internet. The list was in the json format.\nFortunately for us Ruby kindly provides a method to convert json data to a Ruby hash.\nThe <em>get_shakey</em> method already did that for us.</p>\n\n<p>But since the structure of the json data is retained in the hash, it is still a bit difficult to read.\nLet us write a method to display the plays nicely.</p>\n\n<p>If you inspect the list of plays carefully you will see that it has a kind of nested\nstructure. (This is actually quite common in data you get from the internet.)\nLooks like this:</p>\n\n<ul>\n  <li>&ldquo;William Shakespeare&rdquo;\n  <ul>\n      <li>&ldquo;1&rdquo;\n      <ul>\n        <li>&ldquo;title&rdquo;: &ldquo;The Two Gentlemen of Verona&rdquo;</li>\n        <li>&ldquo;finished&rdquo;: 1591</li>\n      </ul>\n      </li>\n      <li>&ldquo;2&rdquo;\n      <ul>\n        <li>&ldquo;title&rdquo;: &ldquo;The Taming of the Shrew&rdquo;</li>\n        <li>&ldquo;finished&rdquo;: 1591</li>\n      </ul>\n      </li>\n      <li>&hellip;</li>\n  </ul>\n  </li>\n</ul>\n\n<p>To list the plays we first have to access the top &ldquo;William Shakespeare&rdquo; hash element by it&rsquo;s name.\nNext we have to <strong>iterate</strong> through each element below it.</p>\n\n<p>Ruby has a method for iterating. It is called <strong>each</strong>. We have seen it before when\ncreating our book rating system.</p>\n\n<p>Everything that method <strong>each</strong> returns is passed to a block:</p>\n\n<pre><code>s = get_shakey\n\ns[&quot;William Shakespeare&quot;].each { |key, val|\n  puts val[&quot;title&quot;]\n}\n</code></pre>\n",
        "load_code": "prev"
    },
    "40": {
        "lang": "EN",
        "title": "All together now",
        "chapter": "N",
        "answer": "^4$",
        "ok": "Yes, Shakespeare wrote 4 plays in 1591",
        "error": "Answer for the year 1591 should be 4",
        "text": "<p>Now suppose we only want to know the names and number of plays written by Shakespeare\nin a certain year.</p>\n\n<p>Ruby lets us <strong>select</strong> values from a hash. The select method uses a block to let us\ndefine what to select and returns what it found.</p>\n\n<p>We can then use the results returned by <strong>select</strong> in the <strong>each</strong> method as before by\nsimply adding it after the select block. This is another example of method chaining, which we saw\nearlier when reversing a poem.</p>\n\n<p>I have prepared the <strong>count_plays</strong> method for you. See if you can find out how many plays\nwere written by Shakespeare in the year <strong>1591</strong>. Try this:</p>\n\n<pre><code>def count_plays(year)\n  s = get_shakey\n\n  s[&quot;William Shakespeare&quot;]\n    .select { |k, v|\n      v[&quot;finished&quot;] == year\n    }.each { |key, val|\n      puts val[&quot;title&quot;]\n    }.count\nend\n\nputs count_plays(0)\n</code></pre>\n\n<p>Did you notice that I chained the count method at the end of the each method. This gives\nus a return value for the <strong>count_plays</strong> method.</p>\n\n<p>There is another possibility for chaining here. See that loney line <strong>s = get_shakey</strong>.\nYou could add the <strong>[&ldquo;William Shakespeare&rdquo;].select { |k, v|</strong> at the end of get_shakey\n(no dot needed in this case).</p>\n",
        "load_code": "prev"
    },
    "41": {
        "lang": "EN",
        "title": "All's Well That Ends Well",
        "chapter": "N",
        "answer": "All's Well That Ends Well",
        "ok": "True",
        "error": "Use 1605 as the second parameter",
        "text": "<p>Okay, we got some data from the internet, we selected what we wanted and printed it out.\nWhat is left to improve? We could print the results a bit prettier. Like add the year\nand align titles and years.</p>\n\n<p>This means printing several values on one line. Ruby has a neat way of doing\nthat. It is just like printing a string like: <strong>puts &ldquo;Hi, my name is Jimmy&rdquo;</strong>.\nBut instead of the literal value <em>Jimmy</em> we use the value of a variable.</p>\n\n<p>First replace <strong>Jimmy</strong> with <strong>#{}</strong>. If Ruby sees a hash symbol # followed by a curly brace {\nit looks for a variable between the first brace and the following closing brace }.\nSo we can use this: <strong>&ldquo;Hi, my name is #{name}&rdquo;</strong>.</p>\n\n<p>Let&rsquo;s change our code a bit</p>\n\n<pre><code>def print_plays(year_from, year_to)\n  get_shakey[&quot;William Shakespeare&quot;]\n    .select { |k, v|\n      year_from &lt;= v[&quot;finished&quot;] &amp;&amp;\n      year_to   &gt;= v[&quot;finished&quot;]\n    }.each { |k, v|\n      puts &quot;#{v[&quot;title&quot;].ljust(30)} #{v[&quot;finished&quot;]}&quot;\n    }\nend\nprint_plays(1600, 1605)\n</code></pre>\n\n<p>I have added <strong>.ljust(30)</strong> to the title. This way the title is <em>left justified</em> with a minimum\nlength of 30 characters so the years align nicely.</p>\n\n<p>See if you can change the ouput of the program so that it shows the plays like this: <strong>1600 -&gt; As You Like It</strong></p>\n\n<p><strong>All&rsquo;s Well That Ends Well?</strong> Hey we&rsquo;re not done yet, but the end is in sight!</p>\n",
        "load_code": "prev"
    },
    "42": {
        "lang": "EN",
        "title": "If only I new how to make a decision",
        "chapter": "N",
        "answer": "",
        "ok": "",
        "error": "",
        "text": "<p>Decision making, in real life this can be a real problem. Not for us though.\nRuby makes it very easy to make decisions.</p>\n\n<pre><code>if 1 &lt; 2\n  puts &quot;It is true: 1 is less than 2&quot;\nend\n</code></pre>\n\n<p>The key word here is <strong>if</strong>. If can be placed before a method or after a method, like so:</p>\n\n<pre><code>puts &quot;It is true: 1 is less than 2&quot; if 1 &lt; 2\n</code></pre>\n\n<p><strong>If</strong> is a method that requires one parameter. That parameter can be any expression that you\nwant to test. The outcome of the expression must be either <strong>true</strong> or <strong>false</strong>.\nHere are a couple of expressions with their outcomes:</p>\n\n<pre><code>5     &lt;= 10     # =&gt; true\n&#39;abc&#39; == &#39;def&#39;  # =&gt; false\ntrue            # =&gt; true\n123456          # =&gt; true\n0               # =&gt; true\nnil             # =&gt; false\n&#39;xyz&#39;.empty?    # =&gt; false\n&#39;a&#39; &gt; 5         # =&gt; error:\n                # comparison of String with\n                # Numeric failed\n</code></pre>\n\n<p>The <em>if expression</em> can take many forms. It can compare literal values (1 &lt; 2),\nvariables (a &lt; 1) and the return value of a method (&lsquo;xyz&rsquo;.empty?).</p>\n",
        "load_code": ""
    },
    "43": {
        "lang": "EN",
        "title": "And Now For the Startling Conclusion",
        "chapter": "N",
        "answer": "is not equal to 100$",
        "ok": "That's better",
        "error": "This can't be right",
        "text": "<p>Did you see the 2 equal signs in <strong>&lsquo;abc&rsquo; == &lsquo;def&rsquo;</strong>?</p>\n\n<p>This <strong>==</strong> means <strong>is equal to</strong>.\nThe single equal sign that we have seen before means <strong>assign a value to a variable</strong>.</p>\n\n<p>To make it more confusing: you can use the assignment after an if method like this:</p>\n\n<pre><code>a = 0\n\nif a = 100\n  puts &quot;Expression is true, but a is now: #{a}&quot;\nelse\n  puts &quot;#{a} is not equal to 100&quot;\nend\n</code></pre>\n\n<p>Change the = into == and see what happens.</p>\n\n<p>I can guarantee you that you will forget typing the second equal sign regularly. I also\nstill forget it sometimes.</p>\n\n<h3>else</h3>\n\n<p>In the code above I have added an else expression. This part will be executed when the\n<strong>if test-expression</strong> evaluates to false.</p>\n\n<blockquote>\n<p>There are more variations to this if-then-else theme. You can read more\n<a href=\"http://www.ruby-doc.org/core/doc/syntax/control_expressions_rdoc.html\" target=\"_blank\">here</a>.</p>\n</blockquote>\n",
        "load_code": ""
    },
    "44": {
        "lang": "EN",
        "title": "Me hungry",
        "chapter": "N",
        "answer": "^Me not hungry.$",
        "ok": "Yes",
        "error": "No way am I hungry at 10 AM!",
        "text": "<p>Okay, this is coming along wonderfully. This is simple stuff for you, but keep in mind that you\ndidn&rsquo;t know <strong>any Ruby whatsoever</strong> just fifteen minutes ago!</p>\n\n<p>Last step. Let&rsquo;s tie it all together, you know? Let&rsquo;s make it chime together like a very nice set\nof glistening chimes on the beach in the maginificent sunlight!</p>\n\n<p>We&rsquo;ll define two methods first and then take a decision:</p>\n\n<pre><code>def hungry?(time_of_day_in_hours)\n  puts &quot;Me hungry.&quot;\n  true\nend\n\ndef eat_an(what)\n  puts &quot;Me eat #{what}.\\n&quot;\nend\n\neat_an &#39;apple&#39; if hungry?(14)\n\neat_an &#39;apple&#39; if hungry?(10)\n</code></pre>\n\n<p>Now see if you can change the method <strong>hungry?</strong> to display <strong>&ldquo;Me not hungry&rdquo;</strong> and returning false\nwhen the time is less than 12.</p>\n",
        "load_code": ""
    },
    "45": {
        "lang": "EN",
        "title": "Summary #6 Which Means You've Come So Far",
        "chapter": "Y",
        "answer": "\\{\\}",
        "ok": "Ok, that's an empty hash",
        "error": "",
        "text": "<p>You&rsquo;re a level six Ruby cleric. I mean what a great job you&rsquo;ve done. Let&rsquo;s review:</p>\n\n<h3>Data</h3>\n\n<p>You loaded some data of the internet, traversed a data structure and selected values.</p>\n\n<h3>Iterating</h3>\n\n<p>You iterated all elements of a hash and you chained some more methods.</p>\n\n<h3>Pretty printing</h3>\n\n<p>And if that wasn&rsquo;t enough, you formatted and printed some values in a way that is easy\nto read for humans. In fact <strong>you made a real program!</strong></p>\n\n<h3>IF</h3>\n\n<p>You learned to take control of your programs with <strong>if</strong> and <strong>else</strong> statements.</p>\n\n<h2>So</h2>\n\n<p>What could possibly be next? What could you possibly have to learn now?\nHa, this is the best part. You&rsquo;ve come such a long way that we&rsquo;re going\nto uncover classes. For two more short lessons and you&rsquo;re done.</p>\n\n<p>Earlier, we created a hash like this:</p>\n\n<pre><code>Hash.new\n</code></pre>\n",
        "load_code": ""
    },
    "46": {
        "lang": "EN",
        "title": "Not a School Class, a Working Class",
        "chapter": "N",
        "answer": "",
        "ok": "",
        "error": "",
        "text": "<p>You see, the empty curly braces {} is a shortcut for Hash.new. The new method is used to make objects\nof a certain class. Think &ldquo;class&rdquo; as in &ldquo;working class&rdquo; &mdash; a specific group of objects which\nare similar, have the same jobs, the same shirts.\nWhat use is a class?</p>\n\n<h3>Blurbalizer<sup>TM</sup></h3>\n\n<p>You just had a brilliant idea for a new app. It is going to be <strong>the</strong> next instant\nmessaging platform. You want an app where people can send each other short messages. You call\nthese messages Blurbs<sup>TM</sup>. A Blurb<sup>TM</sup> has a maximum length of just 40 characters. Let&rsquo;s do a mood setting too.</p>\n\n<!---The Internet has really brought back stick people and smileys out of bankruptcy. __Emote!__-->\n\n<h3>Where to start</h3>\n\n<p>Well, you might store your Blurbs<sup>TM</sup> entries in a json file, right?\nBut how would you keep track of the content of the entry and the time it was posted?\nAnd when you loaded the file, how would it look in Ruby?\nWould it be a Hash? Or an Array? Or an Array of Arrays? Or something else?</p>\n\n<h3>Class</h3>\n\n<p>I really think you&rsquo;ll want to use a class. You are already familiar with many classes:\nHash, Array, String.\nLet&rsquo;s make a new class (returns no output):</p>\n\n<pre><code>class Blurb\nend\n</code></pre>\n",
        "load_code": ""
    },
    "47": {
        "lang": "EN",
        "title": "The Stuff Apps are Made of",
        "chapter": "N",
        "answer": "",
        "ok": "",
        "error": "",
        "text": "<p>You&rsquo;ve opened up a new Blurb<sup>TM</sup> class. What is your blog entry made of?\nThe content, sure. Also, a time when the Blurb<sup>TM</sup> was posted. And a mood.</p>\n\n<p>Okay, so you&rsquo;ve got the first line of the class, here&rsquo;s the rest:</p>\n\n<pre><code>class Blurb\n  attr_accessor :content, :time, :mood\nend\n</code></pre>\n\n<p>Class names always begin with a capital letter.</p>\n\n<p>(Still no output)</p>\n",
        "load_code": ""
    },
    "48": {
        "lang": "EN",
        "title": "Accessors Are the Dangling Limbs",
        "chapter": "N",
        "answer": "Blurb:",
        "ok": "My first Blurb",
        "error": "",
        "text": "<p>Hey, good class, man. You&rsquo;ve got a new Blurb<sup>TM</sup> class.</p>\n\n<p>In the class definition, you used a method called attr_accessor.\nThere are many <strong>attr</strong>ibute methods like this which add little settings to classes.\nThese attributes are just variables attached to a class.</p>\n\n<p>Think of it this way. A class is like a person. That star-shaped human thing out there.\nAnd the attributes are the dangling limbs, the different parts that make up a body and\nother people can shake hands with.</p>\n\n<h3>Now</h3>\n\n<p>To create a Blurb<sup>TM</sup> and set the content:</p>\n\n<pre><code>blurb1 = Blurb.new\nputs blurb1\nblurb1.content = &quot;Today Mount Hood Was Stolen!&quot;\n</code></pre>\n",
        "load_code": "class%20Blurb;attr_accessor%20:content,:time,:mood;end"
    },
    "49": {
        "lang": "EN",
        "title": "An Object, That Neat Little Package",
        "chapter": "N",
        "answer": "Blurb:",
        "ok": "Blurb updated",
        "error": "",
        "text": "<p>Go ahead and set the Blurb<sup>TM</sup> time and mood:</p>\n\n<pre><code>blurb1.time = Time.now\nblurb1.mood = :sick\n\nputs blurb1\n</code></pre>\n",
        "load_code": "prev;blurb1=Blurb.new;blurb1.content=%22Today%20Mount%20Hood%20Was%20Stolen!%22"
    },
    "50": {
        "lang": "EN",
        "title": "Quickening it Up",
        "chapter": "N",
        "answer": "^\\d{4}",
        "ok": "Noted",
        "error": "",
        "text": "<p>Cool, you&rsquo;re app is awesome. Hey, let&rsquo;s make things a bit easier on you.\nYou&rsquo;re not going to want to set the time like that every time you Blurb<sup>TM</sup>.</p>\n\n<p>You just want to type the content and set the mood, right?</p>\n\n<p>Let&rsquo;s add an <strong>initialize</strong> method to our class. This method is called whenever a new Blurb<sup>TM</sup>\nis created.\nAt the same time we can limit the length of the Blurb<sup>TM</sup> content to 40 characters.</p>\n\n<pre><code>class Blurb\n  attr_accessor :content, :time, :mood\n\n  def initialize(mood, content=&quot;&quot;)\n    @time    = Time.now\n    @content = content[0..39]\n    @mood    = mood\n  end\nend\n\nBlurb.new.time\n</code></pre>\n\n<p>(That parameter <strong>content=&ldquo;&rdquo;</strong> is there to make sure that we know content is a string,\neven if no content parameter is passed to the initialize method.)</p>\n",
        "load_code": ""
    },
    "51": {
        "lang": "EN",
        "title": "You've Taught Your App to Reject Worthless Things",
        "chapter": "N",
        "answer": "Blurb:",
        "ok": "Blurb added",
        "error": "",
        "text": "<p>Did you see how inside the class we used the at-symbols (@time).</p>\n\n<p><strong>Outside</strong> the class, we use accessors:</p>\n\n<blockquote>\n<p><strong>blurb.time = Time.now</strong></p>\n</blockquote>\n\n<p>but <strong>inside</strong> we use the <strong>object&rsquo;s variables</strong>:</p>\n\n<blockquote>\n<p><strong>@time = Time.now</strong></p>\n</blockquote>\n\n<p>They&rsquo;re the exact same thing, but expressed in two different places of your program.</p>\n\n<h3>Create another Blurb<sup>TM</sup></h3>\n\n<p>When a new Blurb<sup>TM</sup> is created, the initialize method is used to check for any\narguments to new.</p>\n\n<p>Uh, we need two arguments:</p>\n\n<pre><code>Blurb2 = Blurb.new :confused, &quot;I can not believe Mt. Hood was stolen!&quot;\n</code></pre>\n",
        "load_code": "class%20Blurb;attr_accessor%20:content,:time,:mood;def%20initialize(mood,%20content=%22%22);@time=Time.now;@content=content[0..39];@mood=mood;end;end;blurb1=Blurb.new(:sick,%22Today%20Mount%20Hood%20Was%20Stolen!%22)"
    },
    "52": {
        "lang": "EN",
        "title": "A Giraffe Has Not Stolen Summary #7",
        "chapter": "Y",
        "answer": "",
        "ok": "",
        "error": "",
        "text": "<p>Aha, you&rsquo;re here. And all in one piece. We&rsquo;re still going to make your app real,\nbut until then, let&rsquo;s review, okay?</p>\n\n<h3>Classes</h3>\n\n<p>Everything in Ruby is some kind of object. Classes explain objects, how a certain object works.\nFor example, you made a few Blurb<sup>TM</sup> objects and these objects are explained in the Blurb\nclass.\nIn other words: you call them Blurb objects.\nYou can use classes to (kinda) model real life objects.</p>\n\n<h3>Accessors</h3>\n\n<p>Accessors are variables attached to an object which can be used <strong>outside</strong> the object.\n(blurb2.time = Time.now)</p>\n\n<h3>Object variables</h3>\n\n<p>Object variables are the same variables you&rsquo;re using for accessors, but <strong>inside</strong> the object.\n(@time = Time.now)</p>\n",
        "load_code": "prev;blurb2=Blurb.new%20:confused,%20%22I%20can%20not%20believe%20Mt.%20Hood%20was%20stolen!%22"
    },
    "53": {
        "lang": "EN",
        "title": "Your Own Turf",
        "chapter": "N",
        "answer": "Blurbalizer:",
        "ok": "My app created",
        "error": "",
        "text": "<p>Okay, let&rsquo;s wrap things up, kid. Here&rsquo;s the last chapter of the GRIPPING epic story of Try Ruby!\nNow that you&rsquo;ve got a taste of how it all works, how are you going to use it around the house\nand in your grocer&rsquo;s freezer?\nYou&rsquo;re a great person (one of my favorites), but you need guidance.</p>\n\n<h3>Let&rsquo;s finish your app</h3>\n\n<p>You have app entries, but no actual app.\nIt still needs a title, someplace to store all Blurbs<sup>TM</sup> and a timeline in order to work.</p>\n\n<p>Guess what, we&rsquo;re going to use another class. I&rsquo;ve given all the code for the new class in one go.\nJust <strong>take your time</strong> to study it.<br>\nI&rsquo;m in no hurry, I&rsquo;ll wait for you in the next lesson.</p>\n\n<pre><code>class Blurbalizer\n  def initialize(title)\n    @title  = title\n    @blurbs = [] # A fresh clean array\n                 # for storing Blurbs\n  end\n\n  def add_a_blurb(mood, content)\n    # The &lt;&lt; means add to the end of the array\n    @blurbs &lt;&lt; Blurb.new(mood, content)\n  end\n\n  def show_timeline\n    puts &quot;Blurbify: #{@title} has #{@blurbs.count} Blurbs&quot;\n\n    @blurbs.sort_by { |t|\n      t.time\n    }.reverse.each { |t|\n      puts &quot;#{t.content.ljust(40)} #{t.time}&quot;\n    }\n  end\nend\n\nmyapp = Blurbalizer.new &quot;The Big Blurb&quot;\n</code></pre>\n",
        "load_code": "class%20Blurb;attr_accessor%20:content,:time,:mood;def%20initialize(mood,%20content=%22%22);@time=Time.now;@content=content[0..39];@mood=mood;end;end"
    },
    "54": {
        "lang": "EN",
        "title": "What's that Blurb all about?",
        "chapter": "N",
        "answer": "Today",
        "ok": "Bring on the blurbs",
        "error": "",
        "text": "<p>There you are. Did you figure out what all that code in the Blurbalizer<sup>TM</sup> class does?</p>\n\n<blockquote>\n<p>In the Blurbalizer<sup>TM</sup> class are two <strong>methods</strong> (add_a_blurb and show_timeline).\nYou can use a method outside the class, just like we did with accessors.</p>\n</blockquote>\n\n<p>Time to start using Blurbalizer<sup>TM</sup>. I&rsquo;ve already loaded some Blurbs<sup>TM</sup> for you,\nbut feel free to add your own.</p>\n\n<p>We&rsquo;re no longer creating Blurbs<sup>TM</sup> directly, but we use the add_a_blurb <strong>method</strong> of the\nBlurbalizer<sup>TM</sup> class. This way we can be sure all our Blurbs<sup>TM</sup> are stored in the\nmyapp object.</p>\n\n<pre><code>myapp.add_a_blurb :moody, &quot;Add Blurb here&quot;\n\nmyapp.show_timeline\n</code></pre>\n",
        "load_code": "prev;class%20Blurbalizer;attr_reader%20:title;def%20initialize(title);@title=title;@blurbs=[];end;def%20add_a_blurb(mood,%20content);@blurbs%20%3C%3C%20Blurb.new(mood,%20content);@blurbs.each%20%7B%7Ct%7C%20t.time%20-=%2073%7D;end;def%20show_timeline;puts%20%22Blurbalizer:%20%23%7B@title%7D%20has%20%23%7B@blurbs.count%7D%20Blurbs%5Cn%22;@blurbs.sort_by%20%7B%20%7Ct%7C%20t.time%7D.reverse.each%20%7B%20%7Ct%7C%20puts%20%22%23%7Bt.content.ljust(40)%7D%20%23%7Bt.time%7D%22%7D;end;end;myapp%20=%20Blurbalizer.new%20%22The%20Big%20Blurb%22;myapp.add_a_blurb%20:sick,%22Today%20Mount%20Hood%20Was%20Stolen!%22;myapp.add_a_blurb%20:confused,%22I%20can%20not%20believe%20Mt.%20Hood%20was%20stolen!%22;myapp.add_a_blurb%20:dazed,%22I%20am%20speechless!%22;myapp.add_a_blurb%20:mad,%22It%20was%20stolen%20by%20a%20giraffe%20!!%22;myapp.add_a_blurb%20:sad,%22I%20Left%20my%20Hoodie%20on%20the%20Mountain!%22;myapp.add_a_blurb%20:mad,%22I%20am%20never%20going%20back%20to%20that%20mountain.%22"
    },
    "55": {
        "lang": "EN",
        "title": "It's All About Combining",
        "chapter": "N",
        "answer": ":-",
        "ok": "Moody!",
        "error": "",
        "text": "<p>Some beautiful things can be done with the simple parts of Ruby, especially when you combine them\ntogether into new things.\nHere we&rsquo;ve got an app made of a class containing another class. And, actually, Ruby really does good\nwith this kind of creature. It is called object oriented programming.</p>\n\n<p>We have arrived at the <strong>last programming excercise</strong> of TryRuby. If you want, you can add some\nmore features to Blurbalizer<sup>TM</sup>.</p>\n\n<p>Maybe you want to print the mood as a smiley in the <strong>show_timeline</strong> method. You could add\na <em>moodify</em> method to the Blurb<sup>TM</sup> class and then use that method in the <em>show_timeline</em> method:</p>\n\n<pre><code>class Blurb\n  attr_accessor :content, :time, :mood\n\n  def initialize(mood, content=&quot;&quot;)\n    @time    = Time.now\n    @content = content[0..39]\n    @mood    = mood\n  end\n\n  def moodify\n    if    @mood == :sad\n      return &quot;:-(&quot;\n    elsif @mood == :happy\n      return &quot;:-)&quot;\n    # Add other moods here\n    end\n\n    # The default mood\n    &quot;:-|&quot;\n  end\nend\n\nclass Blurbalizer\n  def initialize(title)\n    @title  = title\n    @blurbs = []\n  end\n\n  def add_a_blurb(mood, content)\n    @blurbs &lt;&lt; Blurb.new(mood, content)\n  end\n\n  def show_timeline\n    puts &quot;Blurbalizer: #{@title} has #{@blurbs.count} Blurbs&quot;\n\n    @blurbs.sort_by { |t|\n      t.time\n    }.reverse.each { |t|\n      puts &quot;#{t.content.ljust(40)} #{t.time}&quot;\n    }\n  end\nend\n\nmyapp.show_timeline\n</code></pre>\n",
        "load_code": "prev"
    },
    "56": {
        "lang": "EN",
        "title": "Summary #8, The Hey-Relax-You-Did-Good Summary",
        "chapter": "Y",
        "answer": "",
        "ok": "",
        "error": "",
        "text": "<p>This last section took a moment to wind down, to give you some pointers as to how you can use Ruby.</p>\n\n<p>If you enjoyed yourself, you can continue with the <a href=\"/TryRuby/playground\">TryRuby Playground</a>\nor download and install Ruby:\n<a href=\"https://www.ruby-lang.org/en/downloads/\" target=\"_blank\">ruby-lang.org</a></p>\n\n<p>Once you have Ruby installed, you can create a file, let say <em>my_first_progam.rb</em>, with a text\neditor, type some Ruby code and then run it by opening a command prompt and typing:</p>\n\n<pre><code>ruby my_first_progam.rb\n</code></pre>\n\n<p>There are many (free) development tools available that combine an editor, file browser and a\n&lsquo;ruby-runner&rsquo;.</p>\n\n<h2>Celebrate</h2>\n\n<p>You really deserve a double-layer cake with double-double frosting and a guy playing one of those guitars that&rsquo;s a double guitar.\nI mean you finished, you really did! No doubt about it, you&rsquo;re a <strong>certified red-blooded smartiac!</strong></p>\n\n<h2>More info</h2>\n\n<p>There are a couple of articles on this website. They can give you some pointers on where to\ngo from here.</p>\n",
        "load_code": "def%20ruby(f);puts%20%22Go%20to%20www.ruby-lang.org%20to%20download%20Ruby%22;end;class%20K;attr_reader%20:rb;end;my_first_progam=K.new"
    }
}
