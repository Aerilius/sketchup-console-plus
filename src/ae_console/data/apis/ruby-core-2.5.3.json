{"Array":{"description":"Arrays are ordered, integer-indexed collections of any object.\n\nArray indexing starts at 0, as in C or Java.  A negative index is assumed\nto be relative to the end of the array---that is, an index of -1 indicates\nthe last element of the array, -2 is the next to last element in the\narray, and so on.\n\n== Creating Arrays\n\nA new array can be created by using the literal constructor\n<code>[]</code>.  Arrays can contain different types of objects.  For\nexample, the array below contains an Integer, a String and a Float:\n\n   ary = [1, \"two\", 3.0] #=> [1, \"two\", 3.0]\n\nAn array can also be created by explicitly calling Array.new with zero, one\n(the initial size of the Array) or two arguments (the initial size and a\ndefault object).\n\n   ary = Array.new    #=> []\n   Array.new(3)       #=> [nil, nil, nil]\n   Array.new(3, true) #=> [true, true, true]\n\nNote that the second argument populates the array with references to the\nsame object.  Therefore, it is only recommended in cases when you need to\ninstantiate arrays with natively immutable objects such as Symbols,\nnumbers, true or false.\n\nTo create an array with separate objects a block can be passed instead.\nThis method is safe to use with mutable objects such as hashes, strings or\nother arrays:\n\n   Array.new(4) { Hash.new }  #=> [{}, {}, {}, {}]\n   Array.new(4) {|i| i.to_s } #=> [\"0\", \"1\", \"2\", \"3\"]\n\nThis is also a quick way to build up multi-dimensional arrays:\n\n   empty_table = Array.new(3) { Array.new(3) }\n   #=> [[nil, nil, nil], [nil, nil, nil], [nil, nil, nil]]\n\nAn array can also be created by using the Array() method, provided by\nKernel, which tries to call #to_ary, then #to_a on its argument.\n\nArray({:a => \"a\", :b => \"b\"}) #=> [[:a, \"a\"], [:b, \"b\"]]\n\n== Example Usage\n\nIn addition to the methods it mixes in through the Enumerable module, the\nArray class has proprietary methods for accessing, searching and otherwise\nmanipulating arrays.\n\nSome of the more common ones are illustrated below.\n\n== Accessing Elements\n\nElements in an array can be retrieved using the Array#[] method.  It can\ntake a single integer argument (a numeric index), a pair of arguments\n(start and length) or a range. Negative indices start counting from the end,\nwith -1 being the last element.\n\n   arr = [1, 2, 3, 4, 5, 6]\n   arr[2]    #=> 3\n   arr[100]  #=> nil\n   arr[-3]   #=> 4\n   arr[2, 3] #=> [3, 4, 5]\n   arr[1..4] #=> [2, 3, 4, 5]\n   arr[1..-3] #=> [2, 3, 4]\n\nAnother way to access a particular array element is by using the #at method\n\n   arr.at(0) #=> 1\n\nThe #slice method works in an identical manner to Array#[].\n\nTo raise an error for indices outside of the array bounds or else to\nprovide a default value when that happens, you can use #fetch.\n\n   arr = ['a', 'b', 'c', 'd', 'e', 'f']\n   arr.fetch(100) #=> IndexError: index 100 outside of array bounds: -6...6\n   arr.fetch(100, \"oops\") #=> \"oops\"\n\nThe special methods #first and #last will return the first and last\nelements of an array, respectively.\n\n   arr.first #=> 1\n   arr.last  #=> 6\n\nTo return the first +n+ elements of an array, use #take\n\n   arr.take(3) #=> [1, 2, 3]\n\n#drop does the opposite of #take, by returning the elements after +n+\nelements have been dropped:\n\n   arr.drop(3) #=> [4, 5, 6]\n\n== Obtaining Information about an Array\n\nArrays keep track of their own length at all times.  To query an array\nabout the number of elements it contains, use #length, #count or #size.\n\n  browsers = ['Chrome', 'Firefox', 'Safari', 'Opera', 'IE']\n  browsers.length #=> 5\n  browsers.count #=> 5\n\nTo check whether an array contains any elements at all\n\n  browsers.empty? #=> false\n\nTo check whether a particular item is included in the array\n\n  browsers.include?('Konqueror') #=> false\n\n== Adding Items to Arrays\n\nItems can be added to the end of an array by using either #push or #<<\n\n  arr = [1, 2, 3, 4]\n  arr.push(5) #=> [1, 2, 3, 4, 5]\n  arr << 6    #=> [1, 2, 3, 4, 5, 6]\n\n#unshift will add a new item to the beginning of an array.\n\n   arr.unshift(0) #=> [0, 1, 2, 3, 4, 5, 6]\n\nWith #insert you can add a new element to an array at any position.\n\n   arr.insert(3, 'apple')  #=> [0, 1, 2, 'apple', 3, 4, 5, 6]\n\nUsing the #insert method, you can also insert multiple values at once:\n\n   arr.insert(3, 'orange', 'pear', 'grapefruit')\n   #=> [0, 1, 2, \"orange\", \"pear\", \"grapefruit\", \"apple\", 3, 4, 5, 6]\n\n== Removing Items from an Array\n\nThe method #pop removes the last element in an array and returns it:\n\n   arr =  [1, 2, 3, 4, 5, 6]\n   arr.pop #=> 6\n   arr #=> [1, 2, 3, 4, 5]\n\nTo retrieve and at the same time remove the first item, use #shift:\n\n   arr.shift #=> 1\n   arr #=> [2, 3, 4, 5]\n\nTo delete an element at a particular index:\n\n   arr.delete_at(2) #=> 4\n   arr #=> [2, 3, 5]\n\nTo delete a particular element anywhere in an array, use #delete:\n\n   arr = [1, 2, 2, 3]\n   arr.delete(2) #=> 2\n   arr #=> [1,3]\n\nA useful method if you need to remove +nil+ values from an array is\n#compact:\n\n   arr = ['foo', 0, nil, 'bar', 7, 'baz', nil]\n   arr.compact  #=> ['foo', 0, 'bar', 7, 'baz']\n   arr          #=> ['foo', 0, nil, 'bar', 7, 'baz', nil]\n   arr.compact! #=> ['foo', 0, 'bar', 7, 'baz']\n   arr          #=> ['foo', 0, 'bar', 7, 'baz']\n\nAnother common need is to remove duplicate elements from an array.\n\nIt has the non-destructive #uniq, and destructive method #uniq!\n\n   arr = [2, 5, 6, 556, 6, 6, 8, 9, 0, 123, 556]\n   arr.uniq #=> [2, 5, 6, 556, 8, 9, 0, 123]\n\n== Iterating over Arrays\n\nLike all classes that include the Enumerable module, Array has an each\nmethod, which defines what elements should be iterated over and how.  In\ncase of Array's #each, all elements in the Array instance are yielded to\nthe supplied block in sequence.\n\nNote that this operation leaves the array unchanged.\n\n   arr = [1, 2, 3, 4, 5]\n   arr.each { |a| print a -= 10, \" \" }\n   # prints: -9 -8 -7 -6 -5\n   #=> [1, 2, 3, 4, 5]\n\nAnother sometimes useful iterator is #reverse_each which will iterate over\nthe elements in the array in reverse order.\n\n   words = %w[first second third fourth fifth sixth]\n   str = \"\"\n   words.reverse_each { |word| str += \"#{word} \" }\n   p str #=> \"sixth fifth fourth third second first \"\n\nThe #map method can be used to create a new array based on the original\narray, but with the values modified by the supplied block:\n\n   arr.map { |a| 2*a }   #=> [2, 4, 6, 8, 10]\n   arr                   #=> [1, 2, 3, 4, 5]\n   arr.map! { |a| a**2 } #=> [1, 4, 9, 16, 25]\n   arr                   #=> [1, 4, 9, 16, 25]\n\n== Selecting Items from an Array\n\nElements can be selected from an array according to criteria defined in a\nblock.  The selection can happen in a destructive or a non-destructive\nmanner.  While the destructive operations will modify the array they were\ncalled on, the non-destructive methods usually return a new array with the\nselected elements, but leave the original array unchanged.\n\n=== Non-destructive Selection\n\n   arr = [1, 2, 3, 4, 5, 6]\n   arr.select { |a| a > 3 }     #=> [4, 5, 6]\n   arr.reject { |a| a < 3 }     #=> [3, 4, 5, 6]\n   arr.drop_while { |a| a < 4 } #=> [4, 5, 6]\n   arr                          #=> [1, 2, 3, 4, 5, 6]\n\n=== Destructive Selection\n\n#select! and #reject! are the corresponding destructive methods to #select\nand #reject\n\nSimilar to #select vs. #reject, #delete_if and #keep_if have the exact\nopposite result when supplied with the same block:\n\n   arr.delete_if { |a| a < 4 } #=> [4, 5, 6]\n   arr                         #=> [4, 5, 6]\n\n   arr = [1, 2, 3, 4, 5, 6]\n   arr.keep_if { |a| a < 4 } #=> [1, 2, 3]\n   arr                       #=> [1, 2, 3]","name":"Array","namespace":"","path":"Array","type":"class","visibility":"public"},"Array#&":{"description":"Set Intersection --- Returns a new array containing unique elements common to the\ntwo arrays. The order is preserved from the original array.\n\nIt compares elements using their #hash and #eql? methods for efficiency.\n\n   [ 1, 1, 3, 5 ] & [ 3, 2, 1 ]                 #=> [ 1, 3 ]\n   [ 'a', 'b', 'b', 'z' ] & [ 'a', 'b', 'c' ]   #=> [ 'a', 'b' ]\n\nSee also Array#uniq.","name":"&","namespace":"Array","path":"Array#&","type":"instance_method","visibility":"public"},"Array#*":{"description":"Repetition --- With a String argument, equivalent to\n<code>ary.join(str)</code>.\n\nOtherwise, returns a new array built by concatenating the +int+ copies of\n+self+.\n\n\n   [ 1, 2, 3 ] * 3    #=> [ 1, 2, 3, 1, 2, 3, 1, 2, 3 ]\n   [ 1, 2, 3 ] * \",\"  #=> \"1,2,3\"","name":"*","namespace":"Array","path":"Array#*","type":"instance_method","visibility":"public"},"Array#+":{"description":"Concatenation --- Returns a new array built by concatenating the\ntwo arrays together to produce a third array.\n\n   [ 1, 2, 3 ] + [ 4, 5 ]    #=> [ 1, 2, 3, 4, 5 ]\n   a = [ \"a\", \"b\", \"c\" ]\n   c = a + [ \"d\", \"e\", \"f\" ]\n   c                         #=> [ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" ]\n   a                         #=> [ \"a\", \"b\", \"c\" ]\n\nNote that\n   x += y\nis the same as\n   x = x + y\nThis means that it produces a new array. As a consequence,\nrepeated use of <code>+=</code> on arrays can be quite inefficient.\n\nSee also Array#concat.","name":"+","namespace":"Array","path":"Array#+","type":"instance_method","visibility":"public"},"Array#-":{"description":"Array Difference\n\nReturns a new array that is a copy of the original array, removing any\nitems that also appear in +other_ary+. The order is preserved from the\noriginal array.\n\nIt compares elements using their #hash and #eql? methods for efficiency.\n\n   [ 1, 1, 2, 2, 3, 3, 4, 5 ] - [ 1, 2, 4 ]  #=>  [ 3, 3, 5 ]\n\nIf you need set-like behavior, see the library class Set.","name":"-","namespace":"Array","path":"Array#-","type":"instance_method","visibility":"public"},"Array#<<":{"description":"Append---Pushes the given object on to the end of this array. This\nexpression returns the array itself, so several appends\nmay be chained together.\n\n   a = [ 1, 2 ]\n   a << \"c\" << \"d\" << [ 3, 4 ]\n           #=>  [ 1, 2, \"c\", \"d\", [ 3, 4 ] ]\n   a\n           #=>  [ 1, 2, \"c\", \"d\", [ 3, 4 ] ]","name":"<<","namespace":"Array","path":"Array#<<","type":"instance_method","visibility":"public"},"Array#<=>":{"description":"Comparison --- Returns an integer (+-1+, +0+, or <code>+1</code>) if this\narray is less than, equal to, or greater than +other_ary+.\n\nEach object in each array is compared (using the <=> operator).\n\nArrays are compared in an \"element-wise\" manner; the first element of +ary+\nis compared with the first one of +other_ary+ using the <=> operator, then\neach of the second elements, etc...\nAs soon as the result of any such comparison is non zero (i.e. the two\ncorresponding elements are not equal), that result is returned for the\nwhole array comparison.\n\nIf all the elements are equal, then the result is based on a comparison of\nthe array lengths. Thus, two arrays are \"equal\" according to Array#<=> if,\nand only if, they have the same length and the value of each element is\nequal to the value of the corresponding element in the other array.\n\n+nil+ is returned if the +other_ary+ is not an array or if the comparison\nof two elements returned +nil+.\n\n   [ \"a\", \"a\", \"c\" ]    <=> [ \"a\", \"b\", \"c\" ]   #=> -1\n   [ 1, 2, 3, 4, 5, 6 ] <=> [ 1, 2 ]            #=> +1\n   [ 1, 2 ]             <=> [ 1, :two ]         #=> nil","name":"<=>","namespace":"Array","path":"Array#<=>","type":"instance_method","visibility":"public"},"Array#==":{"description":"Equality --- Two arrays are equal if they contain the same number of\nelements and if each element is equal to (according to Object#==) the\ncorresponding element in +other_ary+.\n\n   [ \"a\", \"c\" ]    == [ \"a\", \"c\", 7 ]     #=> false\n   [ \"a\", \"c\", 7 ] == [ \"a\", \"c\", 7 ]     #=> true\n   [ \"a\", \"c\", 7 ] == [ \"a\", \"d\", \"f\" ]   #=> false","name":"==","namespace":"Array","path":"Array#==","type":"instance_method","visibility":"public"},"Array#[]":{"description":"Element Reference --- Returns the element at +index+, or returns a\nsubarray starting at the +start+ index and continuing for +length+\nelements, or returns a subarray specified by +range+ of indices.\n\nNegative indices count backward from the end of the array (-1 is the last\nelement).  For +start+ and +range+ cases the starting index is just before\nan element.  Additionally, an empty array is returned when the starting\nindex for an element range is at the end of the array.\n\nReturns +nil+ if the index (or starting index) are out of range.\n\n   a = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\n   a[2] +  a[0] + a[1]    #=> \"cab\"\n   a[6]                   #=> nil\n   a[1, 2]                #=> [ \"b\", \"c\" ]\n   a[1..3]                #=> [ \"b\", \"c\", \"d\" ]\n   a[4..7]                #=> [ \"e\" ]\n   a[6..10]               #=> nil\n   a[-3, 3]               #=> [ \"c\", \"d\", \"e\" ]\n   # special cases\n   a[5]                   #=> nil\n   a[6, 1]                #=> nil\n   a[5, 1]                #=> []\n   a[5..10]               #=> []","name":"[]","namespace":"Array","path":"Array#[]","type":"instance_method","visibility":"public"},"Array#[]=":{"description":"Element Assignment --- Sets the element at +index+, or replaces a subarray\nfrom the +start+ index for +length+ elements, or replaces a subarray\nspecified by the +range+ of indices.\n\nIf indices are greater than the current capacity of the array, the array\ngrows automatically.  Elements are inserted into the array at +start+ if\n+length+ is zero.\n\nNegative indices will count backward from the end of the array.  For\n+start+ and +range+ cases the starting index is just before an element.\n\nAn IndexError is raised if a negative index points past the beginning of\nthe array.\n\nSee also Array#push, and Array#unshift.\n\n   a = Array.new\n   a[4] = \"4\";                 #=> [nil, nil, nil, nil, \"4\"]\n   a[0, 3] = [ 'a', 'b', 'c' ] #=> [\"a\", \"b\", \"c\", nil, \"4\"]\n   a[1..2] = [ 1, 2 ]          #=> [\"a\", 1, 2, nil, \"4\"]\n   a[0, 2] = \"?\"               #=> [\"?\", 2, nil, \"4\"]\n   a[0..2] = \"A\"               #=> [\"A\", \"4\"]\n   a[-1]   = \"Z\"               #=> [\"A\", \"Z\"]\n   a[1..-1] = nil              #=> [\"A\", nil]\n   a[1..-1] = []               #=> [\"A\"]\n   a[0, 0] = [ 1, 2 ]          #=> [1, 2, \"A\"]\n   a[3, 0] = \"B\"               #=> [1, 2, \"A\", \"B\"]","name":"[]=","namespace":"Array","path":"Array#[]=","type":"instance_method","visibility":"public"},"Array#any?":{"description":"See also Enumerable#any?","name":"any?","namespace":"Array","path":"Array#any?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Array#append":{"description":"Append --- Pushes the given object(s) on to the end of this array. This\nexpression returns the array itself, so several appends\nmay be chained together. See also Array#pop for the opposite\neffect.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.push(\"d\", \"e\", \"f\")\n           #=> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n   [1, 2, 3].push(4).push(5)\n           #=> [1, 2, 3, 4, 5]","name":"append","namespace":"Array","path":"Array#append","type":"instance_method","visibility":"public"},"Array#assoc":{"description":"Searches through an array whose elements are also arrays comparing +obj+\nwith the first element of each contained array using <code>obj.==</code>.\n\nReturns the first contained array that matches (that is, the first\nassociated array), or +nil+ if no match is found.\n\nSee also Array#rassoc\n\n   s1 = [ \"colors\", \"red\", \"blue\", \"green\" ]\n   s2 = [ \"letters\", \"a\", \"b\", \"c\" ]\n   s3 = \"foo\"\n   a  = [ s1, s2, s3 ]\n   a.assoc(\"letters\")  #=> [ \"letters\", \"a\", \"b\", \"c\" ]\n   a.assoc(\"foo\")      #=> nil","name":"assoc","namespace":"Array","path":"Array#assoc","type":"instance_method","visibility":"public"},"Array#at":{"description":"Returns the element at +index+. A negative index counts from the end of\n+self+. Returns +nil+ if the index is out of range. See also\nArray#[].\n\n   a = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\n   a.at(0)     #=> \"a\"\n   a.at(-1)    #=> \"e\"","name":"at","namespace":"Array","path":"Array#at","type":"instance_method","visibility":"public"},"Array#bsearch":{"description":"By using binary search, finds a value from this array which meets\nthe given condition in O(log n) where n is the size of the array.\n\nYou can use this method in two modes: a find-minimum mode and\na find-any mode.  In either case, the elements of the array must be\nmonotone (or sorted) with respect to the block.\n\nIn find-minimum mode (this is a good choice for typical use cases),\nthe block must always return true or false, and there must be an index i\n(0 <= i <= ary.size) so that:\n\n- the block returns false for any element whose index is less than\n  i, and\n- the block returns true for any element whose index is greater\n  than or equal to i.\n\nThis method returns the i-th element.  If i is equal to ary.size,\nit returns nil.\n\n   ary = [0, 4, 7, 10, 12]\n   ary.bsearch {|x| x >=   4 } #=> 4\n   ary.bsearch {|x| x >=   6 } #=> 7\n   ary.bsearch {|x| x >=  -1 } #=> 0\n   ary.bsearch {|x| x >= 100 } #=> nil\n\nIn find-any mode (this behaves like libc's bsearch(3)), the block\nmust always return a number, and there must be two indices i and j\n(0 <= i <= j <= ary.size) so that:\n\n- the block returns a positive number for ary[k] if 0 <= k < i,\n- the block returns zero for ary[k] if i <= k < j, and\n- the block returns a negative number for ary[k] if\n  j <= k < ary.size.\n\nUnder this condition, this method returns any element whose index\nis within i...j.  If i is equal to j (i.e., there is no element\nthat satisfies the block), this method returns nil.\n\n   ary = [0, 4, 7, 10, 12]\n   # try to find v such that 4 <= v < 8\n   ary.bsearch {|x| 1 - x / 4 } #=> 4 or 7\n   # try to find v such that 8 <= v < 10\n   ary.bsearch {|x| 4 - x / 2 } #=> nil\n\nYou must not mix the two modes at a time; the block must always\nreturn either true/false, or always return a number.  It is\nundefined which value is actually picked up at each iteration.","name":"bsearch","namespace":"Array","path":"Array#bsearch","type":"instance_method","visibility":"public"},"Array#bsearch_index":{"description":"By using binary search, finds an index of a value from this array which\nmeets the given condition in O(log n) where n is the size of the array.\n\nIt supports two modes, depending on the nature of the block. They are\nexactly the same as in the case of the #bsearch method, with the only difference\nbeing that this method returns the index of the element instead of the\nelement itself. For more details consult the documentation for #bsearch.","name":"bsearch_index","namespace":"Array","path":"Array#bsearch_index","type":"instance_method","visibility":"public"},"Array#clear":{"description":"Removes all elements from +self+.\n\n   a = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\n   a.clear    #=> [ ]","name":"clear","namespace":"Array","path":"Array#clear","type":"instance_method","visibility":"public"},"Array#collect":{"description":"Invokes the given block once for each element of +self+.\n\nCreates a new array containing the values returned by the block.\n\nSee also Enumerable#collect.\n\nIf no block is given, an Enumerator is returned instead.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.collect { |x| x + \"!\" }         #=> [\"a!\", \"b!\", \"c!\", \"d!\"]\n   a.map.with_index { |x, i| x * i } #=> [\"\", \"b\", \"cc\", \"ddd\"]\n   a                                 #=> [\"a\", \"b\", \"c\", \"d\"]","name":"collect","namespace":"Array","path":"Array#collect","type":"instance_method","visibility":"public"},"Array#collect!":{"description":"Invokes the given block once for each element of +self+, replacing the\nelement with the value returned by the block.\n\nSee also Enumerable#collect.\n\nIf no block is given, an Enumerator is returned instead.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.map! {|x| x + \"!\" }\n   a #=>  [ \"a!\", \"b!\", \"c!\", \"d!\" ]\n   a.collect!.with_index {|x, i| x[0...i] }\n   a #=>  [\"\", \"b\", \"c!\", \"d!\"]","name":"collect!","namespace":"Array","path":"Array#collect!","type":"instance_method","visibility":"public"},"Array#combination":{"description":"When invoked with a block, yields all combinations of length +n+ of elements\nfrom the array and then returns the array itself.\n\nThe implementation makes no guarantees about the order in which the\ncombinations are yielded.\n\nIf no block is given, an Enumerator is returned instead.\n\nExamples:\n\n   a = [1, 2, 3, 4]\n   a.combination(1).to_a  #=> [[1],[2],[3],[4]]\n   a.combination(2).to_a  #=> [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n   a.combination(3).to_a  #=> [[1,2,3],[1,2,4],[1,3,4],[2,3,4]]\n   a.combination(4).to_a  #=> [[1,2,3,4]]\n   a.combination(0).to_a  #=> [[]] # one combination of length 0\n   a.combination(5).to_a  #=> []   # no combinations of length 5","name":"combination","namespace":"Array","path":"Array#combination","type":"instance_method","visibility":"public"},"Array#compact":{"description":"Returns a copy of +self+ with all +nil+ elements removed.\n\n   [ \"a\", nil, \"b\", nil, \"c\", nil ].compact\n                     #=> [ \"a\", \"b\", \"c\" ]","name":"compact","namespace":"Array","path":"Array#compact","type":"instance_method","visibility":"public"},"Array#compact!":{"description":"Removes +nil+ elements from the array.\n\nReturns +nil+ if no changes were made, otherwise returns the array.\n\n   [ \"a\", nil, \"b\", nil, \"c\" ].compact! #=> [ \"a\", \"b\", \"c\" ]\n   [ \"a\", \"b\", \"c\" ].compact!           #=> nil","name":"compact!","namespace":"Array","path":"Array#compact!","type":"instance_method","visibility":"public"},"Array#concat":{"description":"Appends the elements of +other_ary+s to +self+.\n\n   [ \"a\", \"b\" ].concat( [\"c\", \"d\"] ) #=> [ \"a\", \"b\", \"c\", \"d\" ]\n   [ \"a\" ].concat( [\"b\"], [\"c\", \"d\"] ) #=> [ \"a\", \"b\", \"c\", \"d\" ]\n   [ \"a\" ].concat #=> [ \"a\" ]\n\n   a = [ 1, 2, 3 ]\n   a.concat( [ 4, 5 ] )\n   a                                 #=> [ 1, 2, 3, 4, 5 ]\n\n   a = [ 1, 2 ]\n   a.concat(a, a)                    #=> [1, 2, 1, 2, 1, 2]\n\nSee also Array#+.","name":"concat","namespace":"Array","path":"Array#concat","type":"instance_method","visibility":"public"},"Array#count":{"description":"Returns the number of elements.\n\nIf an argument is given, counts the number of elements which equal +obj+\nusing <code>==</code>.\n\nIf a block is given, counts the number of elements for which the block\nreturns a true value.\n\n   ary = [1, 2, 4, 2]\n   ary.count                  #=> 4\n   ary.count(2)               #=> 2\n   ary.count { |x| x%2 == 0 } #=> 3","name":"count","namespace":"Array","path":"Array#count","type":"instance_method","visibility":"public"},"Array#cycle":{"description":"Calls the given block for each element +n+ times or forever if +nil+ is\ngiven.\n\nDoes nothing if a non-positive number is given or the array is empty.\n\nReturns +nil+ if the loop has finished without getting interrupted.\n\nIf no block is given, an Enumerator is returned instead.\n\n   a = [\"a\", \"b\", \"c\"]\n   a.cycle { |x| puts x }     # print, a, b, c, a, b, c,.. forever.\n   a.cycle(2) { |x| puts x }  # print, a, b, c, a, b, c.","name":"cycle","namespace":"Array","path":"Array#cycle","type":"instance_method","visibility":"public"},"Array#delete":{"description":"Deletes all items from +self+ that are equal to +obj+.\n\nReturns the last deleted item, or +nil+ if no matching item is found.\n\nIf the optional code block is given, the result of the block is returned if\nthe item is not found.  (To remove +nil+ elements and get an informative\nreturn value, use Array#compact!)\n\n   a = [ \"a\", \"b\", \"b\", \"b\", \"c\" ]\n   a.delete(\"b\")                   #=> \"b\"\n   a                               #=> [\"a\", \"c\"]\n   a.delete(\"z\")                   #=> nil\n   a.delete(\"z\") { \"not found\" }   #=> \"not found\"","name":"delete","namespace":"Array","path":"Array#delete","type":"instance_method","visibility":"public"},"Array#delete_at":{"description":"Deletes the element at the specified +index+, returning that element, or\n+nil+ if the +index+ is out of range.\n\nSee also Array#slice!\n\n   a = [\"ant\", \"bat\", \"cat\", \"dog\"]\n   a.delete_at(2)    #=> \"cat\"\n   a                 #=> [\"ant\", \"bat\", \"dog\"]\n   a.delete_at(99)   #=> nil","name":"delete_at","namespace":"Array","path":"Array#delete_at","type":"instance_method","visibility":"public"},"Array#delete_if":{"description":"Deletes every element of +self+ for which block evaluates to +true+.\n\nThe array is changed instantly every time the block is called, not after\nthe iteration is over.\n\nSee also Array#reject!\n\nIf no block is given, an Enumerator is returned instead.\n\n   scores = [ 97, 42, 75 ]\n   scores.delete_if {|score| score < 80 }   #=> [97]","name":"delete_if","namespace":"Array","path":"Array#delete_if","type":"instance_method","visibility":"public"},"Array#dig":{"description":"Extracts the nested value specified by the sequence of <i>idx</i>\nobjects by calling +dig+ at each step, returning +nil+ if any\nintermediate step is +nil+.\n\n  a = [[1, [2, 3]]]\n\n  a.dig(0, 1, 1)                    #=> 3\n  a.dig(1, 2, 3)                    #=> nil\n  a.dig(0, 0, 0)                    #=> TypeError: Integer does not have #dig method\n  [42, {foo: :bar}].dig(1, :foo)    #=> :bar","name":"dig","namespace":"Array","path":"Array#dig","type":"instance_method","visibility":"public"},"Array#drop":{"description":"Drops first +n+ elements from +ary+ and returns the rest of the elements in\nan array.\n\nIf a negative number is given, raises an ArgumentError.\n\nSee also Array#take\n\n   a = [1, 2, 3, 4, 5, 0]\n   a.drop(3)             #=> [4, 5, 0]","name":"drop","namespace":"Array","path":"Array#drop","type":"instance_method","visibility":"public"},"Array#drop_while":{"description":"Drops elements up to, but not including, the first element for which the\nblock returns +nil+ or +false+ and returns an array containing the\nremaining elements.\n\nIf no block is given, an Enumerator is returned instead.\n\nSee also Array#take_while\n\n   a = [1, 2, 3, 4, 5, 0]\n   a.drop_while {|i| i < 3 }   #=> [3, 4, 5, 0]","name":"drop_while","namespace":"Array","path":"Array#drop_while","type":"instance_method","visibility":"public"},"Array#each":{"description":"Calls the given block once for each element in +self+, passing that element\nas a parameter.  Returns the array itself.\n\nIf no block is given, an Enumerator is returned.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.each {|x| print x, \" -- \" }\n\nproduces:\n\n   a -- b -- c --","name":"each","namespace":"Array","path":"Array#each","type":"instance_method","visibility":"public"},"Array#each_index":{"description":"Same as Array#each, but passes the +index+ of the element instead of the\nelement itself.\n\nAn Enumerator is returned if no block is given.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.each_index {|x| print x, \" -- \" }\n\nproduces:\n\n   0 -- 1 -- 2 --","name":"each_index","namespace":"Array","path":"Array#each_index","type":"instance_method","visibility":"public"},"Array#empty?":{"description":"Returns +true+ if +self+ contains no elements.\n\n   [].empty?   #=> true","name":"empty?","namespace":"Array","path":"Array#empty?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Array#eql?":{"description":"Returns +true+ if +self+ and +other+ are the same object,\nor are both arrays with the same content (according to Object#eql?).","name":"eql?","namespace":"Array","path":"Array#eql?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Array#fetch":{"description":"Tries to return the element at position +index+, but throws an IndexError\nexception if the referenced +index+ lies outside of the array bounds.  This\nerror can be prevented by supplying a second argument, which will act as a\n+default+ value.\n\nAlternatively, if a block is given it will only be executed when an\ninvalid +index+ is referenced.\n\nNegative values of +index+ count from the end of the array.\n\n   a = [ 11, 22, 33, 44 ]\n   a.fetch(1)               #=> 22\n   a.fetch(-1)              #=> 44\n   a.fetch(4, 'cat')        #=> \"cat\"\n   a.fetch(100) { |i| puts \"#{i} is out of bounds\" }\n                            #=> \"100 is out of bounds\"","name":"fetch","namespace":"Array","path":"Array#fetch","type":"instance_method","visibility":"public"},"Array#fill":{"description":"The first three forms set the selected elements of +self+ (which\nmay be the entire array) to +obj+.\n\nA +start+ of +nil+ is equivalent to zero.\n\nA +length+ of +nil+ is equivalent to the length of the array.\n\nThe last three forms fill the array with the value of the given block,\nwhich is passed the absolute index of each element to be filled.\n\nNegative values of +start+ count from the end of the array, where +-1+ is\nthe last element.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.fill(\"x\")              #=> [\"x\", \"x\", \"x\", \"x\"]\n   a.fill(\"z\", 2, 2)        #=> [\"x\", \"x\", \"z\", \"z\"]\n   a.fill(\"y\", 0..1)        #=> [\"y\", \"y\", \"z\", \"z\"]\n   a.fill { |i| i*i }       #=> [0, 1, 4, 9]\n   a.fill(-2) { |i| i*i*i } #=> [0, 1, 8, 27]","name":"fill","namespace":"Array","path":"Array#fill","type":"instance_method","visibility":"public"},"Array#find_index":{"description":"Returns the _index_ of the first object in +ary+ such that the object is\n<code>==</code> to +obj+.\n\nIf a block is given instead of an argument, returns the _index_ of the\nfirst object for which the block returns +true+.  Returns +nil+ if no\nmatch is found.\n\nSee also Array#rindex.\n\nAn Enumerator is returned if neither a block nor argument is given.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.index(\"b\")              #=> 1\n   a.index(\"z\")              #=> nil\n   a.index { |x| x == \"b\" }  #=> 1","name":"find_index","namespace":"Array","path":"Array#find_index","type":"instance_method","visibility":"public"},"Array#first":{"description":"Returns the first element, or the first +n+ elements, of the array.\nIf the array is empty, the first form returns +nil+, and the\nsecond form returns an empty array. See also Array#last for\nthe opposite effect.\n\n   a = [ \"q\", \"r\", \"s\", \"t\" ]\n   a.first     #=> \"q\"\n   a.first(2)  #=> [\"q\", \"r\"]","name":"first","namespace":"Array","path":"Array#first","type":"instance_method","visibility":"public"},"Array#flatten":{"description":"Returns a new array that is a one-dimensional flattening of +self+\n(recursively).\n\nThat is, for every element that is an array, extract its elements into\nthe new array.\n\nThe optional +level+ argument determines the level of recursion to\nflatten.\n\n   s = [ 1, 2, 3 ]           #=> [1, 2, 3]\n   t = [ 4, 5, 6, [7, 8] ]   #=> [4, 5, 6, [7, 8]]\n   a = [ s, t, 9, 10 ]       #=> [[1, 2, 3], [4, 5, 6, [7, 8]], 9, 10]\n   a.flatten                 #=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n   a = [ 1, 2, [3, [4, 5] ] ]\n   a.flatten(1)              #=> [1, 2, 3, [4, 5]]","name":"flatten","namespace":"Array","path":"Array#flatten","type":"instance_method","visibility":"public"},"Array#flatten!":{"description":"Flattens +self+ in place.\n\nReturns +nil+ if no modifications were made (i.e., the array contains no\nsubarrays.)\n\nThe optional +level+ argument determines the level of recursion to flatten.\n\n   a = [ 1, 2, [3, [4, 5] ] ]\n   a.flatten!   #=> [1, 2, 3, 4, 5]\n   a.flatten!   #=> nil\n   a            #=> [1, 2, 3, 4, 5]\n   a = [ 1, 2, [3, [4, 5] ] ]\n   a.flatten!(1) #=> [1, 2, 3, [4, 5]]","name":"flatten!","namespace":"Array","path":"Array#flatten!","type":"instance_method","visibility":"public"},"Array#frozen?":{"description":"Return +true+ if this array is frozen (or temporarily frozen\nwhile being sorted). See also Object#frozen?","name":"frozen?","namespace":"Array","path":"Array#frozen?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Array#hash":{"description":"Compute a hash-code for this array.\n\nTwo arrays with the same content will have the same hash code (and will\ncompare using #eql?).\n\nSee also Object#hash.","name":"hash","namespace":"Array","path":"Array#hash","type":"instance_method","visibility":"public"},"Array#include?":{"description":"Returns +true+ if the given +object+ is present in +self+ (that is, if any\nelement <code>==</code> +object+), otherwise returns +false+.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.include?(\"b\")   #=> true\n   a.include?(\"z\")   #=> false","name":"include?","namespace":"Array","path":"Array#include?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Array#index":{"description":"Returns the _index_ of the first object in +ary+ such that the object is\n<code>==</code> to +obj+.\n\nIf a block is given instead of an argument, returns the _index_ of the\nfirst object for which the block returns +true+.  Returns +nil+ if no\nmatch is found.\n\nSee also Array#rindex.\n\nAn Enumerator is returned if neither a block nor argument is given.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.index(\"b\")              #=> 1\n   a.index(\"z\")              #=> nil\n   a.index { |x| x == \"b\" }  #=> 1","name":"index","namespace":"Array","path":"Array#index","type":"instance_method","visibility":"public"},"Array#initialize":{"description":"Returns a new array.\n\nIn the first form, if no arguments are sent, the new array will be empty.\nWhen a +size+ and an optional +default+ are sent, an array is created with\n+size+ copies of +default+.  Take notice that all elements will reference the\nsame object +default+.\n\nThe second form creates a copy of the array passed as a parameter (the\narray is generated by calling to_ary on the parameter).\n\n  first_array = [\"Matz\", \"Guido\"]\n\n  second_array = Array.new(first_array) #=> [\"Matz\", \"Guido\"]\n\n  first_array.equal? second_array       #=> false\n\nIn the last form, an array of the given size is created.  Each element in\nthis array is created by passing the element's index to the given block\nand storing the return value.\n\n  Array.new(3){ |index| index ** 2 }\n  # => [0, 1, 4]\n\n== Common gotchas\n\nWhen sending the second parameter, the same object will be used as the\nvalue for all the array elements:\n\n   a = Array.new(2, Hash.new)\n   # => [{}, {}]\n\n   a[0]['cat'] = 'feline'\n   a # => [{\"cat\"=>\"feline\"}, {\"cat\"=>\"feline\"}]\n\n   a[1]['cat'] = 'Felix'\n   a # => [{\"cat\"=>\"Felix\"}, {\"cat\"=>\"Felix\"}]\n\nSince all the Array elements store the same hash, changes to one of them\nwill affect them all.\n\nIf multiple copies are what you want, you should use the block\nversion which uses the result of that block each time an element\nof the array needs to be initialized:\n\n   a = Array.new(2) { Hash.new }\n   a[0]['cat'] = 'feline'\n   a # => [{\"cat\"=>\"feline\"}, {}]","name":"initialize","namespace":"Array","path":"Array#initialize","type":"instance_method","visibility":"public"},"Array#initialize_copy":{"description":"Replaces the contents of +self+ with the contents of +other_ary+,\ntruncating or expanding if necessary.\n\n   a = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\n   a.replace([ \"x\", \"y\", \"z\" ])   #=> [\"x\", \"y\", \"z\"]\n   a                              #=> [\"x\", \"y\", \"z\"]","name":"initialize_copy","namespace":"Array","path":"Array#initialize_copy","type":"instance_method","visibility":"public"},"Array#insert":{"description":"Inserts the given values before the element with the given +index+.\n\nNegative indices count backwards from the end of the array, where +-1+ is\nthe last element. If a negative index is used, the given values will be\ninserted after that element, so using an index of +-1+ will insert the\nvalues at the end of the array.\n\n   a = %w{ a b c d }\n   a.insert(2, 99)         #=> [\"a\", \"b\", 99, \"c\", \"d\"]\n   a.insert(-2, 1, 2, 3)   #=> [\"a\", \"b\", 99, \"c\", 1, 2, 3, \"d\"]","name":"insert","namespace":"Array","path":"Array#insert","type":"instance_method","visibility":"public"},"Array#inspect":{"description":"Creates a string representation of +self+.\n\n   [ \"a\", \"b\", \"c\" ].to_s     #=> \"[\\\"a\\\", \\\"b\\\", \\\"c\\\"]\"","name":"to_s","namespace":"Array","path":"Array#to_s","type":"instance_method","visibility":"public"},"Array#to_s":{"description":"Creates a string representation of +self+.\n\n   [ \"a\", \"b\", \"c\" ].to_s     #=> \"[\\\"a\\\", \\\"b\\\", \\\"c\\\"]\"","name":"to_s","namespace":"Array","path":"Array#to_s","type":"instance_method","visibility":"public"},"Array#join":{"description":"Returns a string created by converting each element of the array to\na string, separated by the given +separator+.\nIf the +separator+ is +nil+, it uses current <code>$,</code>.\nIf both the +separator+ and <code>$,</code> are +nil+,\nit uses an empty string.\n\n   [ \"a\", \"b\", \"c\" ].join        #=> \"abc\"\n   [ \"a\", \"b\", \"c\" ].join(\"-\")   #=> \"a-b-c\"\n\nFor nested arrays, join is applied recursively:\n\n   [ \"a\", [1, 2, [:x, :y]], \"b\" ].join(\"-\")   #=> \"a-1-2-x-y-b\"","name":"join","namespace":"Array","path":"Array#join","type":"instance_method","visibility":"public"},"Array#keep_if":{"description":"Deletes every element of +self+ for which the given block evaluates to\n+false+.\n\nSee also Array#select!\n\nIf no block is given, an Enumerator is returned instead.\n\n   a = %w{ a b c d e f }\n   a.keep_if { |v| v =~ /[aeiou]/ }  #=> [\"a\", \"e\"]","name":"keep_if","namespace":"Array","path":"Array#keep_if","type":"instance_method","visibility":"public"},"Array#last":{"description":"Returns the last element(s) of +self+. If the array is empty,\nthe first form returns +nil+.\n\nSee also Array#first for the opposite effect.\n\n   a = [ \"w\", \"x\", \"y\", \"z\" ]\n   a.last     #=> \"z\"\n   a.last(2)  #=> [\"y\", \"z\"]","name":"last","namespace":"Array","path":"Array#last","type":"instance_method","visibility":"public"},"Array#length":{"description":"Returns the number of elements in +self+. May be zero.\n\n   [ 1, 2, 3, 4, 5 ].length   #=> 5\n   [].length                  #=> 0","name":"size","namespace":"Array","path":"Array#size","type":"instance_method","visibility":"public"},"Array#size":{"description":"Returns the number of elements in +self+. May be zero.\n\n   [ 1, 2, 3, 4, 5 ].length   #=> 5\n   [].length                  #=> 0","name":"size","namespace":"Array","path":"Array#size","type":"instance_method","visibility":"public"},"Array#map":{"description":"Invokes the given block once for each element of +self+.\n\nCreates a new array containing the values returned by the block.\n\nSee also Enumerable#collect.\n\nIf no block is given, an Enumerator is returned instead.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.collect { |x| x + \"!\" }         #=> [\"a!\", \"b!\", \"c!\", \"d!\"]\n   a.map.with_index { |x, i| x * i } #=> [\"\", \"b\", \"cc\", \"ddd\"]\n   a                                 #=> [\"a\", \"b\", \"c\", \"d\"]","name":"map","namespace":"Array","path":"Array#map","type":"instance_method","visibility":"public"},"Array#map!":{"description":"Invokes the given block once for each element of +self+, replacing the\nelement with the value returned by the block.\n\nSee also Enumerable#collect.\n\nIf no block is given, an Enumerator is returned instead.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.map! {|x| x + \"!\" }\n   a #=>  [ \"a!\", \"b!\", \"c!\", \"d!\" ]\n   a.collect!.with_index {|x, i| x[0...i] }\n   a #=>  [\"\", \"b\", \"c!\", \"d!\"]","name":"map!","namespace":"Array","path":"Array#map!","type":"instance_method","visibility":"public"},"Array#max":{"description":"Returns the object in _ary_ with the maximum value. The\nfirst form assumes all objects implement <code>Comparable</code>;\nthe second uses the block to return <em>a <=> b</em>.\n\n   ary = %w(albatross dog horse)\n   ary.max                                   #=> \"horse\"\n   ary.max { |a, b| a.length <=> b.length }  #=> \"albatross\"\n\nIf the +n+ argument is given, maximum +n+ elements are returned\nas an array.\n\n   ary = %w[albatross dog horse]\n   ary.max(2)                                  #=> [\"horse\", \"dog\"]\n   ary.max(2) {|a, b| a.length <=> b.length }  #=> [\"albatross\", \"horse\"]","name":"max","namespace":"Array","path":"Array#max","type":"instance_method","visibility":"public"},"Array#min":{"description":"Returns the object in _ary_ with the minimum value. The\nfirst form assumes all objects implement <code>Comparable</code>;\nthe second uses the block to return <em>a <=> b</em>.\n\n   ary = %w(albatross dog horse)\n   ary.min                                   #=> \"albatross\"\n   ary.min { |a, b| a.length <=> b.length }  #=> \"dog\"\n\nIf the +n+ argument is given, minimum +n+ elements are returned\nas an array.\n\n   ary = %w[albatross dog horse]\n   ary.min(2)                                  #=> [\"albatross\", \"dog\"]\n   ary.min(2) {|a, b| a.length <=> b.length }  #=> [\"dog\", \"horse\"]","name":"min","namespace":"Array","path":"Array#min","type":"instance_method","visibility":"public"},"Array#pack":{"description":"Packs the contents of <i>arr</i> into a binary sequence according to\nthe directives in <i>aTemplateString</i> (see the table below)\nDirectives ``A,'' ``a,'' and ``Z'' may be followed by a count,\nwhich gives the width of the resulting field. The remaining\ndirectives also may take a count, indicating the number of array\nelements to convert. If the count is an asterisk\n(``<code>*</code>''), all remaining array elements will be\nconverted. Any of the directives ``<code>sSiIlL</code>'' may be\nfollowed by an underscore (``<code>_</code>'') or\nexclamation mark (``<code>!</code>'') to use the underlying\nplatform's native size for the specified type; otherwise, they use a\nplatform-independent size. Spaces are ignored in the template\nstring. See also <code>String#unpack</code>.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   n = [ 65, 66, 67 ]\n   a.pack(\"A3A3A3\")   #=> \"a  b  c  \"\n   a.pack(\"a3a3a3\")   #=> \"a\\000\\000b\\000\\000c\\000\\000\"\n   n.pack(\"ccc\")      #=> \"ABC\"\n\nIf <i>aBufferString</i> is specified and its capacity is enough,\n+pack+ uses it as the buffer and returns it.\nWhen the offset is specified by the beginning of <i>aTemplateString</i>,\nthe result is filled after the offset.\nIf original contents of <i>aBufferString</i> exists and it's longer than\nthe offset, the rest of <i>offsetOfBuffer</i> are overwritten by the result.\nIf it's shorter, the gap is filled with ``<code>\\0</code>''.\n\nNote that ``buffer:'' option does not guarantee not to allocate memory\nin +pack+.  If the capacity of <i>aBufferString</i> is not enough,\n+pack+ allocates memory.\n\nDirectives for +pack+.\n\n Integer       | Array   |\n Directive     | Element | Meaning\n ----------------------------------------------------------------------------\n C             | Integer | 8-bit unsigned (unsigned char)\n S             | Integer | 16-bit unsigned, native endian (uint16_t)\n L             | Integer | 32-bit unsigned, native endian (uint32_t)\n Q             | Integer | 64-bit unsigned, native endian (uint64_t)\n J             | Integer | pointer width unsigned, native endian (uintptr_t)\n               |         | (J is available since Ruby 2.3.)\n               |         |\n c             | Integer | 8-bit signed (signed char)\n s             | Integer | 16-bit signed, native endian (int16_t)\n l             | Integer | 32-bit signed, native endian (int32_t)\n q             | Integer | 64-bit signed, native endian (int64_t)\n j             | Integer | pointer width signed, native endian (intptr_t)\n               |         | (j is available since Ruby 2.3.)\n               |         |\n S_ S!         | Integer | unsigned short, native endian\n I I_ I!       | Integer | unsigned int, native endian\n L_ L!         | Integer | unsigned long, native endian\n Q_ Q!         | Integer | unsigned long long, native endian (ArgumentError\n               |         | if the platform has no long long type.)\n               |         | (Q_ and Q! is available since Ruby 2.1.)\n J!            | Integer | uintptr_t, native endian (same with J)\n               |         | (J! is available since Ruby 2.3.)\n               |         |\n s_ s!         | Integer | signed short, native endian\n i i_ i!       | Integer | signed int, native endian\n l_ l!         | Integer | signed long, native endian\n q_ q!         | Integer | signed long long, native endian (ArgumentError\n               |         | if the platform has no long long type.)\n               |         | (q_ and q! is available since Ruby 2.1.)\n j!            | Integer | intptr_t, native endian (same with j)\n               |         | (j! is available since Ruby 2.3.)\n               |         |\n S> s> S!> s!> | Integer | same as the directives without \">\" except\n L> l> L!> l!> |         | big endian\n I!> i!>       |         | (available since Ruby 1.9.3)\n Q> q> Q!> q!> |         | \"S>\" is same as \"n\"\n J> j> J!> j!> |         | \"L>\" is same as \"N\"\n               |         |\n S< s< S!< s!< | Integer | same as the directives without \"<\" except\n L< l< L!< l!< |         | little endian\n I!< i!<       |         | (available since Ruby 1.9.3)\n Q< q< Q!< q!< |         | \"S<\" is same as \"v\"\n J< j< J!< j!< |         | \"L<\" is same as \"V\"\n               |         |\n n             | Integer | 16-bit unsigned, network (big-endian) byte order\n N             | Integer | 32-bit unsigned, network (big-endian) byte order\n v             | Integer | 16-bit unsigned, VAX (little-endian) byte order\n V             | Integer | 32-bit unsigned, VAX (little-endian) byte order\n               |         |\n U             | Integer | UTF-8 character\n w             | Integer | BER-compressed integer\n\n Float        | Array   |\n Directive    | Element | Meaning\n ---------------------------------------------------------------------------\n D d          | Float   | double-precision, native format\n F f          | Float   | single-precision, native format\n E            | Float   | double-precision, little-endian byte order\n e            | Float   | single-precision, little-endian byte order\n G            | Float   | double-precision, network (big-endian) byte order\n g            | Float   | single-precision, network (big-endian) byte order\n\n String       | Array   |\n Directive    | Element | Meaning\n ---------------------------------------------------------------------------\n A            | String  | arbitrary binary string (space padded, count is width)\n a            | String  | arbitrary binary string (null padded, count is width)\n Z            | String  | same as ``a'', except that null is added with *\n B            | String  | bit string (MSB first)\n b            | String  | bit string (LSB first)\n H            | String  | hex string (high nibble first)\n h            | String  | hex string (low nibble first)\n u            | String  | UU-encoded string\n M            | String  | quoted printable, MIME encoding (see RFC2045)\n m            | String  | base64 encoded string (see RFC 2045, count is width)\n              |         | (if count is 0, no line feed are added, see RFC 4648)\n P            | String  | pointer to a structure (fixed-length string)\n p            | String  | pointer to a null-terminated string\n\n Misc.        | Array   |\n Directive    | Element | Meaning\n ---------------------------------------------------------------------------\n @            | ---     | moves to absolute position\n X            | ---     | back up a byte\n x            | ---     | null byte","name":"pack","namespace":"Array","path":"Array#pack","type":"instance_method","visibility":"public"},"Array#permutation":{"description":"When invoked with a block, yield all permutations of length +n+ of the\nelements of the array, then return the array itself.\n\nIf +n+ is not specified, yield all permutations of all elements.\n\nThe implementation makes no guarantees about the order in which the\npermutations are yielded.\n\nIf no block is given, an Enumerator is returned instead.\n\nExamples:\n\n a = [1, 2, 3]\n a.permutation.to_a    #=> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n a.permutation(1).to_a #=> [[1],[2],[3]]\n a.permutation(2).to_a #=> [[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]]\n a.permutation(3).to_a #=> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n a.permutation(0).to_a #=> [[]] # one permutation of length 0\n a.permutation(4).to_a #=> []   # no permutations of length 4","name":"permutation","namespace":"Array","path":"Array#permutation","type":"instance_method","visibility":"public"},"Array#pop":{"description":"Removes the last element from +self+ and returns it, or\n+nil+ if the array is empty.\n\nIf a number +n+ is given, returns an array of the last +n+ elements\n(or less) just like <code>array.slice!(-n, n)</code> does. See also\nArray#push for the opposite effect.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.pop     #=> \"d\"\n   a.pop(2)  #=> [\"b\", \"c\"]\n   a         #=> [\"a\"]","name":"pop","namespace":"Array","path":"Array#pop","type":"instance_method","visibility":"public"},"Array#prepend":{"description":"Prepends objects to the front of +self+, moving other elements upwards.\nSee also Array#shift for the opposite effect.\n\n   a = [ \"b\", \"c\", \"d\" ]\n   a.unshift(\"a\")   #=> [\"a\", \"b\", \"c\", \"d\"]\n   a.unshift(1, 2)  #=> [ 1, 2, \"a\", \"b\", \"c\", \"d\"]","name":"prepend","namespace":"Array","path":"Array#prepend","type":"instance_method","visibility":"public"},"Array#product":{"description":"Returns an array of all combinations of elements from all arrays.\n\nThe length of the returned array is the product of the length of +self+ and\nthe argument arrays.\n\nIf given a block, #product will yield all combinations and return +self+\ninstead.\n\n   [1,2,3].product([4,5])     #=> [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]]\n   [1,2].product([1,2])       #=> [[1,1],[1,2],[2,1],[2,2]]\n   [1,2].product([3,4],[5,6]) #=> [[1,3,5],[1,3,6],[1,4,5],[1,4,6],\n                              #     [2,3,5],[2,3,6],[2,4,5],[2,4,6]]\n   [1,2].product()            #=> [[1],[2]]\n   [1,2].product([])          #=> []","name":"product","namespace":"Array","path":"Array#product","type":"instance_method","visibility":"public"},"Array#push":{"description":"Append --- Pushes the given object(s) on to the end of this array. This\nexpression returns the array itself, so several appends\nmay be chained together. See also Array#pop for the opposite\neffect.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.push(\"d\", \"e\", \"f\")\n           #=> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n   [1, 2, 3].push(4).push(5)\n           #=> [1, 2, 3, 4, 5]","name":"append","namespace":"Array","path":"Array#append","type":"instance_method","visibility":"public"},"Array#rassoc":{"description":"Searches through the array whose elements are also arrays.\n\nCompares +obj+ with the second element of each contained array using\n<code>obj.==</code>.\n\nReturns the first contained array that matches +obj+.\n\nSee also Array#assoc.\n\n   a = [ [ 1, \"one\"], [2, \"two\"], [3, \"three\"], [\"ii\", \"two\"] ]\n   a.rassoc(\"two\")    #=> [2, \"two\"]\n   a.rassoc(\"four\")   #=> nil","name":"rassoc","namespace":"Array","path":"Array#rassoc","type":"instance_method","visibility":"public"},"Array#reject":{"description":"Returns a new array containing the items in +self+ for which the given\nblock is not +true+. The ordering of non-rejected elements is maintained.\n\nSee also Array#delete_if\n\nIf no block is given, an Enumerator is returned instead.","name":"reject","namespace":"Array","path":"Array#reject","type":"instance_method","visibility":"public"},"Array#reject!":{"description":"Deletes every element of +self+ for which the block evaluates to +true+,\nif no changes were made returns +nil+.\n\nThe array may not be changed instantly every time the block is called.\n\nSee also Enumerable#reject and Array#delete_if.\n\nIf no block is given, an Enumerator is returned instead.","name":"reject!","namespace":"Array","path":"Array#reject!","type":"instance_method","visibility":"public"},"Array#repeated_combination":{"description":"When invoked with a block, yields all repeated combinations of length +n+ of\nelements from the array and then returns the array itself.\n\nThe implementation makes no guarantees about the order in which the repeated\ncombinations are yielded.\n\nIf no block is given, an Enumerator is returned instead.\n\nExamples:\n\n a = [1, 2, 3]\n a.repeated_combination(1).to_a  #=> [[1], [2], [3]]\n a.repeated_combination(2).to_a  #=> [[1,1],[1,2],[1,3],[2,2],[2,3],[3,3]]\n a.repeated_combination(3).to_a  #=> [[1,1,1],[1,1,2],[1,1,3],[1,2,2],[1,2,3],\n                                 #    [1,3,3],[2,2,2],[2,2,3],[2,3,3],[3,3,3]]\n a.repeated_combination(4).to_a  #=> [[1,1,1,1],[1,1,1,2],[1,1,1,3],[1,1,2,2],[1,1,2,3],\n                                 #    [1,1,3,3],[1,2,2,2],[1,2,2,3],[1,2,3,3],[1,3,3,3],\n                                 #    [2,2,2,2],[2,2,2,3],[2,2,3,3],[2,3,3,3],[3,3,3,3]]\n a.repeated_combination(0).to_a  #=> [[]] # one combination of length 0","name":"repeated_combination","namespace":"Array","path":"Array#repeated_combination","type":"instance_method","visibility":"public"},"Array#repeated_permutation":{"description":"When invoked with a block, yield all repeated permutations of length +n+ of\nthe elements of the array, then return the array itself.\n\nThe implementation makes no guarantees about the order in which the repeated\npermutations are yielded.\n\nIf no block is given, an Enumerator is returned instead.\n\nExamples:\n\n   a = [1, 2]\n   a.repeated_permutation(1).to_a  #=> [[1], [2]]\n   a.repeated_permutation(2).to_a  #=> [[1,1],[1,2],[2,1],[2,2]]\n   a.repeated_permutation(3).to_a  #=> [[1,1,1],[1,1,2],[1,2,1],[1,2,2],\n                                   #    [2,1,1],[2,1,2],[2,2,1],[2,2,2]]\n   a.repeated_permutation(0).to_a  #=> [[]] # one permutation of length 0","name":"repeated_permutation","namespace":"Array","path":"Array#repeated_permutation","type":"instance_method","visibility":"public"},"Array#replace":{"description":"Replaces the contents of +self+ with the contents of +other_ary+,\ntruncating or expanding if necessary.\n\n   a = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\n   a.replace([ \"x\", \"y\", \"z\" ])   #=> [\"x\", \"y\", \"z\"]\n   a                              #=> [\"x\", \"y\", \"z\"]","name":"replace","namespace":"Array","path":"Array#replace","type":"instance_method","visibility":"public"},"Array#reverse":{"description":"Returns a new array containing +self+'s elements in reverse order.\n\n   [ \"a\", \"b\", \"c\" ].reverse   #=> [\"c\", \"b\", \"a\"]\n   [ 1 ].reverse               #=> [1]","name":"reverse","namespace":"Array","path":"Array#reverse","type":"instance_method","visibility":"public"},"Array#reverse!":{"description":"Reverses +self+ in place.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.reverse!       #=> [\"c\", \"b\", \"a\"]\n   a                #=> [\"c\", \"b\", \"a\"]","name":"reverse!","namespace":"Array","path":"Array#reverse!","type":"instance_method","visibility":"public"},"Array#reverse_each":{"description":"Same as Array#each, but traverses +self+ in reverse order.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.reverse_each {|x| print x, \" \" }\n\nproduces:\n\n   c b a","name":"reverse_each","namespace":"Array","path":"Array#reverse_each","type":"instance_method","visibility":"public"},"Array#rindex":{"description":"Returns the _index_ of the last object in +self+ <code>==</code> to +obj+.\n\nIf a block is given instead of an argument, returns the _index_ of the\nfirst object for which the block returns +true+, starting from the last\nobject.\n\nReturns +nil+ if no match is found.\n\nSee also Array#index.\n\nIf neither block nor argument is given, an Enumerator is returned instead.\n\n   a = [ \"a\", \"b\", \"b\", \"b\", \"c\" ]\n   a.rindex(\"b\")             #=> 3\n   a.rindex(\"z\")             #=> nil\n   a.rindex { |x| x == \"b\" } #=> 3","name":"rindex","namespace":"Array","path":"Array#rindex","type":"instance_method","visibility":"public"},"Array#rotate":{"description":"Returns a new array by rotating +self+ so that the element at +count+ is\nthe first element of the new array.\n\nIf +count+ is negative then it rotates in the opposite direction, starting\nfrom the end of +self+ where +-1+ is the last element.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.rotate         #=> [\"b\", \"c\", \"d\", \"a\"]\n   a                #=> [\"a\", \"b\", \"c\", \"d\"]\n   a.rotate(2)      #=> [\"c\", \"d\", \"a\", \"b\"]\n   a.rotate(-3)     #=> [\"b\", \"c\", \"d\", \"a\"]","name":"rotate","namespace":"Array","path":"Array#rotate","type":"instance_method","visibility":"public"},"Array#rotate!":{"description":"Rotates +self+ in place so that the element at +count+ comes first, and\nreturns +self+.\n\nIf +count+ is negative then it rotates in the opposite direction, starting\nfrom the end of the array where +-1+ is the last element.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.rotate!        #=> [\"b\", \"c\", \"d\", \"a\"]\n   a                #=> [\"b\", \"c\", \"d\", \"a\"]\n   a.rotate!(2)     #=> [\"d\", \"a\", \"b\", \"c\"]\n   a.rotate!(-3)    #=> [\"a\", \"b\", \"c\", \"d\"]","name":"rotate!","namespace":"Array","path":"Array#rotate!","type":"instance_method","visibility":"public"},"Array#sample":{"description":"Choose a random element or +n+ random elements from the array.\n\nThe elements are chosen by using random and unique indices into the array\nin order to ensure that an element doesn't repeat itself unless the array\nalready contained duplicate elements.\n\nIf the array is empty the first form returns +nil+ and the second form\nreturns an empty array.\n\nThe optional +rng+ argument will be used as the random number generator.\n\n   a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\n   a.sample         #=> 7\n   a.sample(4)      #=> [6, 4, 2, 5]","name":"sample","namespace":"Array","path":"Array#sample","type":"instance_method","visibility":"public"},"Array#select":{"description":"Returns a new array containing all elements of +ary+\nfor which the given +block+ returns a true value.\n\nIf no block is given, an Enumerator is returned instead.\n\n   [1,2,3,4,5].select { |num|  num.even?  }   #=> [2, 4]\n\n   a = %w{ a b c d e f }\n   a.select { |v| v =~ /[aeiou]/ }  #=> [\"a\", \"e\"]\n\nSee also Enumerable#select.","name":"select","namespace":"Array","path":"Array#select","type":"instance_method","visibility":"public"},"Array#select!":{"description":"Invokes the given block passing in successive elements from +self+,\ndeleting elements for which the block returns a +false+ value.\n\nThe array may not be changed instantly every time the block is called.\n\nIf changes were made, it will return +self+, otherwise it returns +nil+.\n\nSee also Array#keep_if\n\nIf no block is given, an Enumerator is returned instead.","name":"select!","namespace":"Array","path":"Array#select!","type":"instance_method","visibility":"public"},"Array#shift":{"description":"Removes the first element of +self+ and returns it (shifting all\nother elements down by one). Returns +nil+ if the array\nis empty.\n\nIf a number +n+ is given, returns an array of the first +n+ elements\n(or less) just like <code>array.slice!(0, n)</code> does. With +ary+\ncontaining only the remainder elements, not including what was shifted to\n+new_ary+. See also Array#unshift for the opposite effect.\n\n   args = [ \"-m\", \"-q\", \"filename\" ]\n   args.shift     #=> \"-m\"\n   args           #=> [\"-q\", \"filename\"]\n\n   args = [ \"-m\", \"-q\", \"filename\" ]\n   args.shift(2)  #=> [\"-m\", \"-q\"]\n   args           #=> [\"filename\"]","name":"shift","namespace":"Array","path":"Array#shift","type":"instance_method","visibility":"public"},"Array#shuffle":{"description":"Returns a new array with elements of +self+ shuffled.\n\n   a = [ 1, 2, 3 ]           #=> [1, 2, 3]\n   a.shuffle                 #=> [2, 3, 1]\n   a                         #=> [1, 2, 3]\n\nThe optional +rng+ argument will be used as the random number generator.\n\n   a.shuffle(random: Random.new(1))  #=> [1, 3, 2]","name":"shuffle","namespace":"Array","path":"Array#shuffle","type":"instance_method","visibility":"public"},"Array#shuffle!":{"description":"Shuffles elements in +self+ in place.\n\n   a = [ 1, 2, 3 ]           #=> [1, 2, 3]\n   a.shuffle!                #=> [2, 3, 1]\n   a                         #=> [2, 3, 1]\n\nThe optional +rng+ argument will be used as the random number generator.\n\n   a.shuffle!(random: Random.new(1))  #=> [1, 3, 2]","name":"shuffle!","namespace":"Array","path":"Array#shuffle!","type":"instance_method","visibility":"public"},"Array#slice":{"description":"Element Reference --- Returns the element at +index+, or returns a\nsubarray starting at the +start+ index and continuing for +length+\nelements, or returns a subarray specified by +range+ of indices.\n\nNegative indices count backward from the end of the array (-1 is the last\nelement).  For +start+ and +range+ cases the starting index is just before\nan element.  Additionally, an empty array is returned when the starting\nindex for an element range is at the end of the array.\n\nReturns +nil+ if the index (or starting index) are out of range.\n\n   a = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\n   a[2] +  a[0] + a[1]    #=> \"cab\"\n   a[6]                   #=> nil\n   a[1, 2]                #=> [ \"b\", \"c\" ]\n   a[1..3]                #=> [ \"b\", \"c\", \"d\" ]\n   a[4..7]                #=> [ \"e\" ]\n   a[6..10]               #=> nil\n   a[-3, 3]               #=> [ \"c\", \"d\", \"e\" ]\n   # special cases\n   a[5]                   #=> nil\n   a[6, 1]                #=> nil\n   a[5, 1]                #=> []\n   a[5..10]               #=> []","name":"slice","namespace":"Array","path":"Array#slice","type":"instance_method","visibility":"public"},"Array#slice!":{"description":"Deletes the element(s) given by an +index+ (optionally up to +length+\nelements) or by a +range+.\n\nReturns the deleted object (or objects), or +nil+ if the +index+ is out of\nrange.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.slice!(1)     #=> \"b\"\n   a               #=> [\"a\", \"c\"]\n   a.slice!(-1)    #=> \"c\"\n   a               #=> [\"a\"]\n   a.slice!(100)   #=> nil\n   a               #=> [\"a\"]","name":"slice!","namespace":"Array","path":"Array#slice!","type":"instance_method","visibility":"public"},"Array#sort":{"description":"Returns a new array created by sorting +self+.\n\nComparisons for the sort will be done using the <code><=></code> operator\nor using an optional code block.\n\nThe block must implement a comparison between +a+ and +b+ and return\nan integer less than 0 when +b+ follows +a+, +0+ when +a+ and +b+\nare equivalent, or an integer greater than 0 when +a+ follows +b+.\n\nThe result is not guaranteed to be stable.  When the comparison of two\nelements returns +0+, the order of the elements is unpredictable.\n\n   ary = [ \"d\", \"a\", \"e\", \"c\", \"b\" ]\n   ary.sort                     #=> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n   ary.sort { |a, b| b <=> a }  #=> [\"e\", \"d\", \"c\", \"b\", \"a\"]\n\nSee also Enumerable#sort_by.","name":"sort","namespace":"Array","path":"Array#sort","type":"instance_method","visibility":"public"},"Array#sort!":{"description":"Sorts +self+ in place.\n\nComparisons for the sort will be done using the <code><=></code> operator\nor using an optional code block.\n\nThe block must implement a comparison between +a+ and +b+ and return\nan integer less than 0 when +b+ follows +a+, +0+ when +a+ and +b+\nare equivalent, or an integer greater than 0 when +a+ follows +b+.\n\nThe result is not guaranteed to be stable.  When the comparison of two\nelements returns +0+, the order of the elements is unpredictable.\n\n   ary = [ \"d\", \"a\", \"e\", \"c\", \"b\" ]\n   ary.sort!                     #=> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n   ary.sort! { |a, b| b <=> a }  #=> [\"e\", \"d\", \"c\", \"b\", \"a\"]\n\nSee also Enumerable#sort_by.","name":"sort!","namespace":"Array","path":"Array#sort!","type":"instance_method","visibility":"public"},"Array#sort_by!":{"description":"Sorts +self+ in place using a set of keys generated by mapping the\nvalues in +self+ through the given block.\n\nThe result is not guaranteed to be stable.  When two keys are equal,\nthe order of the corresponding elements is unpredictable.\n\nIf no block is given, an Enumerator is returned instead.\n\nSee also Enumerable#sort_by.","name":"sort_by!","namespace":"Array","path":"Array#sort_by!","type":"instance_method","visibility":"public"},"Array#sum":{"description":"Returns the sum of elements.\nFor example, [e1, e2, e3].sum returns init + e1 + e2 + e3.\n\nIf a block is given, the block is applied to each element\nbefore addition.\n\nIf <i>ary</i> is empty, it returns <i>init</i>.\n\n  [].sum                             #=> 0\n  [].sum(0.0)                        #=> 0.0\n  [1, 2, 3].sum                      #=> 6\n  [3, 5.5].sum                       #=> 8.5\n  [2.5, 3.0].sum(0.0) {|e| e * e }   #=> 15.25\n  [Object.new].sum                   #=> TypeError\n\nThe (arithmetic) mean value of an array can be obtained as follows.\n\n  mean = ary.sum(0.0) / ary.length\n\nThis method can be used for non-numeric objects by\nexplicit <i>init</i> argument.\n\n  [\"a\", \"b\", \"c\"].sum(\"\")            #=> \"abc\"\n  [[1], [[2]], [3]].sum([])          #=> [1, [2], 3]\n\nHowever, Array#join and Array#flatten is faster than Array#sum for\narray of strings and array of arrays.\n\n  [\"a\", \"b\", \"c\"].join               #=> \"abc\"\n  [[1], [[2]], [3]].flatten(1)       #=> [1, [2], 3]\n\n\nArray#sum method may not respect method redefinition of \"+\" methods\nsuch as Integer#+.","name":"sum","namespace":"Array","path":"Array#sum","type":"instance_method","visibility":"public"},"Array#take":{"description":"Returns first +n+ elements from the array.\n\nIf a negative number is given, raises an ArgumentError.\n\nSee also Array#drop\n\n   a = [1, 2, 3, 4, 5, 0]\n   a.take(3)             #=> [1, 2, 3]","name":"take","namespace":"Array","path":"Array#take","type":"instance_method","visibility":"public"},"Array#take_while":{"description":"Passes elements to the block until the block returns +nil+ or +false+, then\nstops iterating and returns an array of all prior elements.\n\nIf no block is given, an Enumerator is returned instead.\n\nSee also Array#drop_while\n\n   a = [1, 2, 3, 4, 5, 0]\n   a.take_while { |i| i < 3 }  #=> [1, 2]","name":"take_while","namespace":"Array","path":"Array#take_while","type":"instance_method","visibility":"public"},"Array#to_a":{"description":"Returns +self+.\n\nIf called on a subclass of Array, converts the receiver to an Array object.","name":"to_a","namespace":"Array","path":"Array#to_a","type":"instance_method","visibility":"public"},"Array#to_ary":{"description":"Returns +self+.","name":"to_ary","namespace":"Array","path":"Array#to_ary","type":"instance_method","visibility":"public"},"Array#to_h":{"description":"Returns the result of interpreting <i>ary</i> as an array of\n<tt>[key, value]</tt> pairs.\n\n   [[:foo, :bar], [1, 2]].to_h\n     # => {:foo => :bar, 1 => 2}","name":"to_h","namespace":"Array","path":"Array#to_h","type":"instance_method","visibility":"public"},"Array#transpose":{"description":"Assumes that +self+ is an array of arrays and transposes the rows and\ncolumns.\n\n   a = [[1,2], [3,4], [5,6]]\n   a.transpose   #=> [[1, 3, 5], [2, 4, 6]]\n\nIf the length of the subarrays don't match, an IndexError is raised.","name":"transpose","namespace":"Array","path":"Array#transpose","type":"instance_method","visibility":"public"},"Array#uniq":{"description":"Returns a new array by removing duplicate values in +self+.\n\nIf a block is given, it will use the return value of the block for comparison.\n\nIt compares values using their #hash and #eql? methods for efficiency.\n\n+self+ is traversed in order, and the first occurrence is kept.\n\n   a = [ \"a\", \"a\", \"b\", \"b\", \"c\" ]\n   a.uniq   # => [\"a\", \"b\", \"c\"]\n\n   b = [[\"student\",\"sam\"], [\"student\",\"george\"], [\"teacher\",\"matz\"]]\n   b.uniq { |s| s.first } # => [[\"student\", \"sam\"], [\"teacher\", \"matz\"]]","name":"uniq","namespace":"Array","path":"Array#uniq","type":"instance_method","visibility":"public"},"Array#uniq!":{"description":"Removes duplicate elements from +self+.\n\nIf a block is given, it will use the return value of the block for\ncomparison.\n\nIt compares values using their #hash and #eql? methods for efficiency.\n\n+self+ is traversed in order, and the first occurrence is kept.\n\nReturns +nil+ if no changes are made (that is, no duplicates are found).\n\n   a = [ \"a\", \"a\", \"b\", \"b\", \"c\" ]\n   a.uniq!   # => [\"a\", \"b\", \"c\"]\n\n   b = [ \"a\", \"b\", \"c\" ]\n   b.uniq!   # => nil\n\n   c = [[\"student\",\"sam\"], [\"student\",\"george\"], [\"teacher\",\"matz\"]]\n   c.uniq! { |s| s.first } # => [[\"student\", \"sam\"], [\"teacher\", \"matz\"]]","name":"uniq!","namespace":"Array","path":"Array#uniq!","type":"instance_method","visibility":"public"},"Array#unshift":{"description":"Prepends objects to the front of +self+, moving other elements upwards.\nSee also Array#shift for the opposite effect.\n\n   a = [ \"b\", \"c\", \"d\" ]\n   a.unshift(\"a\")   #=> [\"a\", \"b\", \"c\", \"d\"]\n   a.unshift(1, 2)  #=> [ 1, 2, \"a\", \"b\", \"c\", \"d\"]","name":"prepend","namespace":"Array","path":"Array#prepend","type":"instance_method","visibility":"public"},"Array#values_at":{"description":"Returns an array containing the elements in +self+ corresponding to the\ngiven +selector+(s).\n\nThe selectors may be either integer indices or ranges.\n\nSee also Array#select.\n\n   a = %w{ a b c d e f }\n   a.values_at(1, 3, 5)          # => [\"b\", \"d\", \"f\"]\n   a.values_at(1, 3, 5, 7)       # => [\"b\", \"d\", \"f\", nil]\n   a.values_at(-1, -2, -2, -7)   # => [\"f\", \"e\", \"e\", nil]\n   a.values_at(4..6, 3...6)      # => [\"e\", \"f\", nil, \"d\", \"e\", \"f\"]","name":"values_at","namespace":"Array","path":"Array#values_at","type":"instance_method","visibility":"public"},"Array#zip":{"description":"Converts any arguments to arrays, then merges elements of +self+ with\ncorresponding elements from each argument.\n\nThis generates a sequence of <code>ary.size</code> _n_-element arrays,\nwhere _n_ is one more than the count of arguments.\n\nIf the size of any argument is less than the size of the initial array,\n+nil+ values are supplied.\n\nIf a block is given, it is invoked for each output +array+, otherwise an\narray of arrays is returned.\n\n   a = [ 4, 5, 6 ]\n   b = [ 7, 8, 9 ]\n   [1, 2, 3].zip(a, b)   #=> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n   [1, 2].zip(a, b)      #=> [[1, 4, 7], [2, 5, 8]]\n   a.zip([1, 2], [8])    #=> [[4, 1, 8], [5, 2, nil], [6, nil, nil]]","name":"zip","namespace":"Array","path":"Array#zip","type":"instance_method","visibility":"public"},"Array#|":{"description":"Set Union --- Returns a new array by joining +ary+ with +other_ary+,\nexcluding any duplicates and preserving the order from the given arrays.\n\nIt compares elements using their #hash and #eql? methods for efficiency.\n\n   [ \"a\", \"b\", \"c\" ] | [ \"c\", \"d\", \"a\" ]    #=> [ \"a\", \"b\", \"c\", \"d\" ]\n   [ \"c\", \"d\", \"a\" ] | [ \"a\", \"b\", \"c\" ]    #=> [ \"c\", \"d\", \"a\", \"b\" ]\n\nSee also Array#uniq.","name":"|","namespace":"Array","path":"Array#|","type":"instance_method","visibility":"public"},"Array.[]":{"description":"Returns a new array populated with the given objects.\n\n  Array.[]( 1, 'a', /^A/ ) # => [1, \"a\", /^A/]\n  Array[ 1, 'a', /^A/ ]    # => [1, \"a\", /^A/]\n  [ 1, 'a', /^A/ ]         # => [1, \"a\", /^A/]","name":"[]","namespace":"Array","path":"Array.[]","type":"class_method","visibility":"public"},"Array.try_convert":{"description":"Tries to convert +obj+ into an array, using +to_ary+ method.  Returns the\nconverted array or +nil+ if +obj+ cannot be converted for any reason.\nThis method can be used to check if an argument is an array.\n\n   Array.try_convert([1])   #=> [1]\n   Array.try_convert(\"1\")   #=> nil\n\n   if tmp = Array.try_convert(arg)\n     # the argument is an array\n   elsif tmp = String.try_convert(arg)\n     # the argument is a string\n   end","name":"try_convert","namespace":"Array","path":"Array.try_convert","type":"class_method","visibility":"public"},"BasicObject":{"description":"BasicObject is the parent class of all classes in Ruby.  It's an explicit\nblank class.\n\nBasicObject can be used for creating object hierarchies independent of\nRuby's object hierarchy, proxy objects like the Delegator class, or other\nuses where namespace pollution from Ruby's methods and classes must be\navoided.\n\nTo avoid polluting BasicObject for other users an appropriately named\nsubclass of BasicObject should be created instead of directly modifying\nBasicObject:\n\n  class MyObjectSystem < BasicObject\n  end\n\nBasicObject does not include Kernel (for methods like +puts+) and\nBasicObject is outside of the namespace of the standard library so common\nclasses will not be found without using a full class path.\n\nA variety of strategies can be used to provide useful portions of the\nstandard library to subclasses of BasicObject.  A subclass could\n<code>include Kernel</code> to obtain +puts+, +exit+, etc.  A custom\nKernel-like module could be created and included or delegation can be used\nvia #method_missing:\n\n  class MyObjectSystem < BasicObject\n    DELEGATE = [:puts, :p]\n\n    def method_missing(name, *args, &block)\n      super unless DELEGATE.include? name\n      ::Kernel.send(name, *args, &block)\n    end\n\n    def respond_to_missing?(name, include_private = false)\n      DELEGATE.include?(name) or super\n    end\n  end\n\nAccess to classes and modules from the Ruby standard library can be\nobtained in a BasicObject subclass by referencing the desired constant\nfrom the root like <code>::File</code> or <code>::Enumerator</code>.\nLike #method_missing, #const_missing can be used to delegate constant\nlookup to +Object+:\n\n  class MyObjectSystem < BasicObject\n    def self.const_missing(name)\n      ::Object.const_get(name)\n    end\n  end","name":"BasicObject","namespace":"","path":"BasicObject","type":"class","visibility":"public"},"BasicObject#!":{"description":"Boolean negate.","name":"!","namespace":"BasicObject","path":"BasicObject#!","type":"instance_method","visibility":"public"},"BasicObject#!=":{"description":"Returns true if two objects are not-equal, otherwise false.","name":"!=","namespace":"BasicObject","path":"BasicObject#!=","type":"instance_method","visibility":"public"},"BasicObject#==":{"description":"Equality --- At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if +obj+ and +other+ are the same object.\nTypically, this method is overridden in descendant classes to provide\nclass-specific meaning.\n\nUnlike <code>==</code>, the <code>equal?</code> method should never be\noverridden by subclasses as it is used to determine object identity\n(that is, <code>a.equal?(b)</code> if and only if <code>a</code> is the\nsame object as <code>b</code>):\n\n  obj = \"a\"\n  other = obj.dup\n\n  obj == other      #=> true\n  obj.equal? other  #=> false\n  obj.equal? obj    #=> true\n\nThe <code>eql?</code> method returns <code>true</code> if +obj+ and\n+other+ refer to the same hash key.  This is used by Hash to test members\nfor equality.  For objects of class <code>Object</code>, <code>eql?</code>\nis synonymous with <code>==</code>.  Subclasses normally continue this\ntradition by aliasing <code>eql?</code> to their overridden <code>==</code>\nmethod, but there are exceptions.  <code>Numeric</code> types, for\nexample, perform type conversion across <code>==</code>, but not across\n<code>eql?</code>, so:\n\n   1 == 1.0     #=> true\n   1.eql? 1.0   #=> false","name":"==","namespace":"BasicObject","path":"BasicObject#==","type":"instance_method","visibility":"public"},"BasicObject#__id__":{"description":"call-seq:\n   obj.__id__       -> integer\n   obj.object_id    -> integer\n\nReturns an integer identifier for +obj+.\n\nThe same number will be returned on all calls to +object_id+ for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization.\nThis is the case for immediate values and frozen string literals.\n\nImmediate values are not passed by reference but are passed by value:\n+nil+, +true+, +false+, Fixnums, Symbols, and some Floats.\n\n    Object.new.object_id  == Object.new.object_id  # => false\n    (21 * 2).object_id    == (21 * 2).object_id    # => true\n    \"hello\".object_id     == \"hello\".object_id     # => false\n    \"hi\".freeze.object_id == \"hi\".freeze.object_id # => true","name":"__id__","namespace":"BasicObject","path":"BasicObject#__id__","type":"instance_method","visibility":"public"},"BasicObject#__send__":{"description":"Invokes the method identified by _symbol_, passing it any\n arguments specified. You can use <code>__send__</code> if the name\n +send+ clashes with an existing method in _obj_.\n When the method is identified by a string, the string is converted\n to a symbol.\n\n    class Klass\n      def hello(*args)\n        \"Hello \" + args.join(' ')\n      end\n    end\n    k = Klass.new\n    k.send :hello, \"gentle\", \"readers\"   #=> \"Hello gentle readers\"","name":"__send__","namespace":"BasicObject","path":"BasicObject#__send__","type":"instance_method","visibility":"public"},"BasicObject#equal?":{"description":"Equality --- At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if +obj+ and +other+ are the same object.\nTypically, this method is overridden in descendant classes to provide\nclass-specific meaning.\n\nUnlike <code>==</code>, the <code>equal?</code> method should never be\noverridden by subclasses as it is used to determine object identity\n(that is, <code>a.equal?(b)</code> if and only if <code>a</code> is the\nsame object as <code>b</code>):\n\n  obj = \"a\"\n  other = obj.dup\n\n  obj == other      #=> true\n  obj.equal? other  #=> false\n  obj.equal? obj    #=> true\n\nThe <code>eql?</code> method returns <code>true</code> if +obj+ and\n+other+ refer to the same hash key.  This is used by Hash to test members\nfor equality.  For objects of class <code>Object</code>, <code>eql?</code>\nis synonymous with <code>==</code>.  Subclasses normally continue this\ntradition by aliasing <code>eql?</code> to their overridden <code>==</code>\nmethod, but there are exceptions.  <code>Numeric</code> types, for\nexample, perform type conversion across <code>==</code>, but not across\n<code>eql?</code>, so:\n\n   1 == 1.0     #=> true\n   1.eql? 1.0   #=> false","name":"equal?","namespace":"BasicObject","path":"BasicObject#equal?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"BasicObject#initialize":{"description":"Not documented","name":"initialize","namespace":"BasicObject","path":"BasicObject#initialize","type":"instance_method","visibility":"private"},"BasicObject#instance_eval":{"description":"Evaluates a string containing Ruby source code, or the given block,\nwithin the context of the receiver (_obj_). In order to set the\ncontext, the variable +self+ is set to _obj_ while\nthe code is executing, giving the code access to _obj_'s\ninstance variables and private methods.\n\nWhen <code>instance_eval</code> is given a block, _obj_ is also\npassed in as the block's only argument.\n\nWhen <code>instance_eval</code> is given a +String+, the optional\nsecond and third parameters supply a filename and starting line number\nthat are used when reporting compilation errors.\n\n   class KlassWithSecret\n     def initialize\n       @secret = 99\n     end\n     private\n     def the_secret\n       \"Ssssh! The secret is #{@secret}.\"\n     end\n   end\n   k = KlassWithSecret.new\n   k.instance_eval { @secret }          #=> 99\n   k.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\n   k.instance_eval {|obj| obj == self } #=> true","name":"instance_eval","namespace":"BasicObject","path":"BasicObject#instance_eval","type":"instance_method","visibility":"public"},"BasicObject#instance_exec":{"description":"Executes the given block within the context of the receiver\n(_obj_). In order to set the context, the variable +self+ is set\nto _obj_ while the code is executing, giving the code access to\n_obj_'s instance variables.  Arguments are passed as block parameters.\n\n   class KlassWithSecret\n     def initialize\n       @secret = 99\n     end\n   end\n   k = KlassWithSecret.new\n   k.instance_exec(5) {|x| @secret+x }   #=> 104","name":"instance_exec","namespace":"BasicObject","path":"BasicObject#instance_exec","type":"instance_method","visibility":"public"},"BasicObject#method_missing":{"description":"Invoked by Ruby when <i>obj</i> is sent a message it cannot handle.\n<i>symbol</i> is the symbol for the method called, and <i>args</i>\nare any arguments that were passed to it. By default, the interpreter\nraises an error when this method is called. However, it is possible\nto override the method to provide more dynamic behavior.\nIf it is decided that a particular method should not be handled, then\n<i>super</i> should be called, so that ancestors can pick up the\nmissing method.\nThe example below creates\na class <code>Roman</code>, which responds to methods with names\nconsisting of roman numerals, returning the corresponding integer\nvalues.\n\n   class Roman\n     def roman_to_int(str)\n       # ...\n     end\n     def method_missing(methId)\n       str = methId.id2name\n       roman_to_int(str)\n     end\n   end\n\n   r = Roman.new\n   r.iv      #=> 4\n   r.xxiii   #=> 23\n   r.mm      #=> 2000","name":"method_missing","namespace":"BasicObject","path":"BasicObject#method_missing","type":"instance_method","visibility":"private"},"BasicObject#singleton_method_added":{"description":"Not documented","name":"singleton_method_added","namespace":"BasicObject","path":"BasicObject#singleton_method_added","type":"instance_method","visibility":"private"},"BasicObject#singleton_method_removed":{"description":"Not documented","name":"singleton_method_removed","namespace":"BasicObject","path":"BasicObject#singleton_method_removed","type":"instance_method","visibility":"private"},"BasicObject#singleton_method_undefined":{"description":"Not documented","name":"singleton_method_undefined","namespace":"BasicObject","path":"BasicObject#singleton_method_undefined","type":"instance_method","visibility":"private"},"Object":{"description":"Object is the default root of all Ruby objects.  Object inherits from\nBasicObject which allows creating alternate object hierarchies.  Methods\non Object are available to all classes unless explicitly overridden.\n\nObject mixes in the Kernel module, making the built-in kernel functions\nglobally accessible.  Although the instance methods of Object are defined\nby the Kernel module, we have chosen to document them here for clarity.\n\nWhen referencing constants in classes inheriting from Object you do not\nneed to use the full namespace.  For example, referencing +File+ inside\n+YourClass+ will find the top-level File class.\n\nIn the descriptions of Object's methods, the parameter <i>symbol</i> refers\nto a symbol, which is either a quoted string or a Symbol (such as\n<code>:name</code>).","name":"Object","namespace":"","path":"Object","type":"class","visibility":"public"},"Object#!~":{"description":"Returns true if two objects do not match (using the <i>=~</i>\nmethod), otherwise false.","name":"!~","namespace":"Object","path":"Object#!~","type":"instance_method","visibility":"public"},"Object#<=>":{"description":"Returns 0 if +obj+ and +other+ are the same object\nor <code>obj == other</code>, otherwise nil.\n\nThe <code><=></code> is used by various methods to compare objects, for example\nEnumerable#sort, Enumerable#max etc.\n\nYour implementation of <code><=></code> should return one of the following values: -1, 0,\n1 or nil. -1 means self is smaller than other. 0 means self is equal to other.\n1 means self is bigger than other. Nil means the two values could not be\ncompared.\n\nWhen you define <code><=></code>, you can include Comparable to gain the methods\n<code><=</code>, <code><</code>, <code>==</code>, <code>>=</code>, <code>></code> and <code>between?</code>.","name":"<=>","namespace":"Object","path":"Object#<=>","type":"instance_method","visibility":"public"},"Object#===":{"description":"Case Equality -- For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants to provide\nmeaningful semantics in +case+ statements.","name":"===","namespace":"Object","path":"Object#===","type":"instance_method","visibility":"public"},"Object#=~":{"description":"Pattern Match---Overridden by descendants (notably\n<code>Regexp</code> and <code>String</code>) to provide meaningful\npattern-match semantics.","name":"=~","namespace":"Object","path":"Object#=~","type":"instance_method","visibility":"public"},"Object#assert_Qundef":{"description":":nodoc:","name":"assert_Qundef","namespace":"Object","path":"Object#assert_Qundef","type":"instance_method","visibility":"public"},"Object#class":{"description":"Returns the class of <i>obj</i>. This method must always be\ncalled with an explicit receiver, as <code>class</code> is also a\nreserved word in Ruby.\n\n   1.class      #=> Integer\n   self.class   #=> Object","name":"class","namespace":"Object","path":"Object#class","type":"instance_method","visibility":"public"},"Object#clone":{"description":"Produces a shallow copy of <i>obj</i>---the instance variables of\n<i>obj</i> are copied, but not the objects they reference.\n<code>clone</code> copies the frozen (unless :freeze keyword argument\nis given with a false value) and tainted state of <i>obj</i>.\nSee also the discussion under <code>Object#dup</code>.\n\n   class Klass\n      attr_accessor :str\n   end\n   s1 = Klass.new      #=> #<Klass:0x401b3a38>\n   s1.str = \"Hello\"    #=> \"Hello\"\n   s2 = s1.clone       #=> #<Klass:0x401b3998 @str=\"Hello\">\n   s2.str[1,4] = \"i\"   #=> \"i\"\n   s1.inspect          #=> \"#<Klass:0x401b3a38 @str=\\\"Hi\\\">\"\n   s2.inspect          #=> \"#<Klass:0x401b3998 @str=\\\"Hi\\\">\"\n\nThis method may have class-specific behavior.  If so, that\nbehavior will be documented under the #+initialize_copy+ method of\nthe class.","name":"clone","namespace":"Object","path":"Object#clone","type":"instance_method","visibility":"public"},"Object#define_singleton_method":{"description":"Defines a singleton method in the receiver. The _method_\nparameter can be a +Proc+, a +Method+ or an +UnboundMethod+ object.\nIf a block is specified, it is used as the method body.\n\n   class A\n     class << self\n       def class_name\n         to_s\n       end\n     end\n   end\n   A.define_singleton_method(:who_am_i) do\n     \"I am: #{class_name}\"\n   end\n   A.who_am_i   # ==> \"I am: A\"\n\n   guy = \"Bob\"\n   guy.define_singleton_method(:hello) { \"#{self}: Hello there!\" }\n   guy.hello    #=>  \"Bob: Hello there!\"","name":"define_singleton_method","namespace":"Object","path":"Object#define_singleton_method","type":"instance_method","visibility":"public"},"Object#display":{"description":"Prints <i>obj</i> on the given port (default <code>$></code>).\nEquivalent to:\n\n   def display(port=$>)\n     port.write self\n     nil\n   end\n\nFor example:\n\n   1.display\n   \"cat\".display\n   [ 4, 5, 6 ].display\n   puts\n\n<em>produces:</em>\n\n   1cat[4, 5, 6]","name":"display","namespace":"Object","path":"Object#display","type":"instance_method","visibility":"public"},"Object#dup":{"description":"Produces a shallow copy of <i>obj</i>---the instance variables of\n<i>obj</i> are copied, but not the objects they reference.\n<code>dup</code> copies the tainted state of <i>obj</i>.\n\nThis method may have class-specific behavior.  If so, that\nbehavior will be documented under the #+initialize_copy+ method of\nthe class.\n\n=== on dup vs clone\n\nIn general, <code>clone</code> and <code>dup</code> may have different\nsemantics in descendant classes. While <code>clone</code> is used to\nduplicate an object, including its internal state, <code>dup</code>\ntypically uses the class of the descendant object to create the new\ninstance.\n\nWhen using #dup, any modules that the object has been extended with will not\nbe copied.\n\nclass Klass\n attr_accessor :str\nend\n\nmodule Foo\n def foo; 'foo'; end\nend\n\ns1 = Klass.new #=> #<Klass:0x401b3a38>\ns1.extend(Foo) #=> #<Klass:0x401b3a38>\ns1.foo #=> \"foo\"\n\ns2 = s1.clone #=> #<Klass:0x401b3a38>\ns2.foo #=> \"foo\"\n\ns3 = s1.dup #=> #<Klass:0x401b3a38>\ns3.foo #=> NoMethodError: undefined method `foo' for #<Klass:0x401b3a38>","name":"dup","namespace":"Object","path":"Object#dup","type":"instance_method","visibility":"public"},"Object#enum_for":{"description":"Creates a new Enumerator which will enumerate by calling +method+ on\n+obj+, passing +args+ if any.\n\nIf a block is given, it will be used to calculate the size of\nthe enumerator without the need to iterate it (see Enumerator#size).\n\n=== Examples\n\n  str = \"xyz\"\n\n  enum = str.enum_for(:each_byte)\n  enum.each { |b| puts b }\n  # => 120\n  # => 121\n  # => 122\n\n  # protect an array from being modified by some_method\n  a = [1, 2, 3]\n  some_method(a.to_enum)\n\nIt is typical to call to_enum when defining methods for\na generic Enumerable, in case no block is passed.\n\nHere is such an example, with parameter passing and a sizing block:\n\n  module Enumerable\n    # a generic method to repeat the values of any enumerable\n    def repeat(n)\n      raise ArgumentError, \"#{n} is negative!\" if n < 0\n      unless block_given?\n        return to_enum(__method__, n) do # __method__ is :repeat here\n          sz = size     # Call size and multiply by n...\n          sz * n if sz  # but return nil if size itself is nil\n        end\n      end\n      each do |*val|\n        n.times { yield *val }\n      end\n    end\n  end\n\n  %i[hello world].repeat(2) { |w| puts w }\n    # => Prints 'hello', 'hello', 'world', 'world'\n  enum = (1..14).repeat(3)\n    # => returns an Enumerator when called without a block\n  enum.first(4) # => [1, 1, 1, 2]\n  enum.size # => 42","name":"enum_for","namespace":"Object","path":"Object#enum_for","type":"instance_method","visibility":"public"},"Object#eql?":{"description":"Equality --- At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if +obj+ and +other+ are the same object.\nTypically, this method is overridden in descendant classes to provide\nclass-specific meaning.\n\nUnlike <code>==</code>, the <code>equal?</code> method should never be\noverridden by subclasses as it is used to determine object identity\n(that is, <code>a.equal?(b)</code> if and only if <code>a</code> is the\nsame object as <code>b</code>):\n\n  obj = \"a\"\n  other = obj.dup\n\n  obj == other      #=> true\n  obj.equal? other  #=> false\n  obj.equal? obj    #=> true\n\nThe <code>eql?</code> method returns <code>true</code> if +obj+ and\n+other+ refer to the same hash key.  This is used by Hash to test members\nfor equality.  For objects of class <code>Object</code>, <code>eql?</code>\nis synonymous with <code>==</code>.  Subclasses normally continue this\ntradition by aliasing <code>eql?</code> to their overridden <code>==</code>\nmethod, but there are exceptions.  <code>Numeric</code> types, for\nexample, perform type conversion across <code>==</code>, but not across\n<code>eql?</code>, so:\n\n   1 == 1.0     #=> true\n   1.eql? 1.0   #=> false","name":"eql?","namespace":"Object","path":"Object#eql?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Object#extend":{"description":"Adds to _obj_ the instance methods from each module given as a\nparameter.\n\n   module Mod\n     def hello\n       \"Hello from Mod.\\n\"\n     end\n   end\n\n   class Klass\n     def hello\n       \"Hello from Klass.\\n\"\n     end\n   end\n\n   k = Klass.new\n   k.hello         #=> \"Hello from Klass.\\n\"\n   k.extend(Mod)   #=> #<Klass:0x401b3bc8>\n   k.hello         #=> \"Hello from Mod.\\n\"","name":"extend","namespace":"Object","path":"Object#extend","type":"instance_method","visibility":"public"},"Object#freeze":{"description":"Prevents further modifications to <i>obj</i>. A\n<code>RuntimeError</code> will be raised if modification is attempted.\nThere is no way to unfreeze a frozen object. See also\n<code>Object#frozen?</code>.\n\nThis method returns self.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.freeze\n   a << \"z\"\n\n<em>produces:</em>\n\n   prog.rb:3:in `<<': can't modify frozen Array (FrozenError)\n   \tfrom prog.rb:3\n\nObjects of the following classes are always frozen: Integer,\nFloat, Symbol.","name":"freeze","namespace":"Object","path":"Object#freeze","type":"instance_method","visibility":"public"},"Object#frozen?":{"description":"Returns the freeze status of <i>obj</i>.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.freeze    #=> [\"a\", \"b\", \"c\"]\n   a.frozen?   #=> true","name":"frozen?","namespace":"Object","path":"Object#frozen?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Object#hash":{"description":"","name":"hash","namespace":"Object","path":"Object#hash","type":"instance_method","visibility":"public"},"Object#initialize_clone":{"description":"!\n :nodoc:","name":"initialize_clone","namespace":"Object","path":"Object#initialize_clone","type":"instance_method","visibility":"public"},"Object#initialize_copy":{"description":":nodoc:","name":"initialize_copy","namespace":"Object","path":"Object#initialize_copy","type":"instance_method","visibility":"public"},"Object#initialize_dup":{"description":"!\n :nodoc:","name":"initialize_dup","namespace":"Object","path":"Object#initialize_dup","type":"instance_method","visibility":"public"},"Object#inspect":{"description":"Returns a string containing a human-readable representation of <i>obj</i>.\nThe default <code>inspect</code> shows the object's class name,\nan encoding of the object id, and a list of the instance variables and\ntheir values (by calling #inspect on each of them).\nUser defined classes should override this method to provide a better\nrepresentation of <i>obj</i>.  When overriding this method, it should\nreturn a string whose encoding is compatible with the default external\nencoding.\n\n   [ 1, 2, 3..4, 'five' ].inspect   #=> \"[1, 2, 3..4, \\\"five\\\"]\"\n   Time.new.inspect                 #=> \"2008-03-08 19:43:39 +0900\"\n\n   class Foo\n   end\n   Foo.new.inspect                  #=> \"#<Foo:0x0300c868>\"\n\n   class Bar\n     def initialize\n       @bar = 1\n     end\n   end\n   Bar.new.inspect                  #=> \"#<Bar:0x0300c868 @bar=1>\"","name":"inspect","namespace":"Object","path":"Object#inspect","type":"instance_method","visibility":"public"},"Object#instance_of?":{"description":"Returns <code>true</code> if <i>obj</i> is an instance of the given\nclass. See also <code>Object#kind_of?</code>.\n\n   class A;     end\n   class B < A; end\n   class C < B; end\n\n   b = B.new\n   b.instance_of? A   #=> false\n   b.instance_of? B   #=> true\n   b.instance_of? C   #=> false","name":"instance_of?","namespace":"Object","path":"Object#instance_of?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Object#instance_variable_defined?":{"description":"Returns <code>true</code> if the given instance variable is\ndefined in <i>obj</i>.\nString arguments are converted to symbols.\n\n   class Fred\n     def initialize(p1, p2)\n       @a, @b = p1, p2\n     end\n   end\n   fred = Fred.new('cat', 99)\n   fred.instance_variable_defined?(:@a)    #=> true\n   fred.instance_variable_defined?(\"@b\")   #=> true\n   fred.instance_variable_defined?(\"@c\")   #=> false","name":"instance_variable_defined?","namespace":"Object","path":"Object#instance_variable_defined?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Object#instance_variable_get":{"description":"Returns the value of the given instance variable, or nil if the\ninstance variable is not set. The <code>@</code> part of the\nvariable name should be included for regular instance\nvariables. Throws a <code>NameError</code> exception if the\nsupplied symbol is not valid as an instance variable name.\nString arguments are converted to symbols.\n\n   class Fred\n     def initialize(p1, p2)\n       @a, @b = p1, p2\n     end\n   end\n   fred = Fred.new('cat', 99)\n   fred.instance_variable_get(:@a)    #=> \"cat\"\n   fred.instance_variable_get(\"@b\")   #=> 99","name":"instance_variable_get","namespace":"Object","path":"Object#instance_variable_get","type":"instance_method","visibility":"public"},"Object#instance_variable_set":{"description":"Sets the instance variable named by <i>symbol</i> to the given\nobject, thereby frustrating the efforts of the class's\nauthor to attempt to provide proper encapsulation. The variable\ndoes not have to exist prior to this call.\nIf the instance variable name is passed as a string, that string\nis converted to a symbol.\n\n   class Fred\n     def initialize(p1, p2)\n       @a, @b = p1, p2\n     end\n   end\n   fred = Fred.new('cat', 99)\n   fred.instance_variable_set(:@a, 'dog')   #=> \"dog\"\n   fred.instance_variable_set(:@c, 'cat')   #=> \"cat\"\n   fred.inspect                             #=> \"#<Fred:0x401b3da8 @a=\\\"dog\\\", @b=99, @c=\\\"cat\\\">\"","name":"instance_variable_set","namespace":"Object","path":"Object#instance_variable_set","type":"instance_method","visibility":"public"},"Object#instance_variables":{"description":"Returns an array of instance variable names for the receiver. Note\nthat simply defining an accessor does not create the corresponding\ninstance variable.\n\n   class Fred\n     attr_accessor :a1\n     def initialize\n       @iv = 3\n     end\n   end\n   Fred.new.instance_variables   #=> [:@iv]","name":"instance_variables","namespace":"Object","path":"Object#instance_variables","type":"instance_method","visibility":"public"},"Object#is_a?":{"description":"Returns <code>true</code> if <i>class</i> is the class of\n<i>obj</i>, or if <i>class</i> is one of the superclasses of\n<i>obj</i> or modules included in <i>obj</i>.\n\n   module M;    end\n   class A\n     include M\n   end\n   class B < A; end\n   class C < B; end\n\n   b = B.new\n   b.is_a? A          #=> true\n   b.is_a? B          #=> true\n   b.is_a? C          #=> false\n   b.is_a? M          #=> true\n\n   b.kind_of? A       #=> true\n   b.kind_of? B       #=> true\n   b.kind_of? C       #=> false\n   b.kind_of? M       #=> true","name":"is_a?","namespace":"Object","path":"Object#is_a?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Object#itself":{"description":"Returns the receiver.\n\n   string = \"my string\"\n   string.itself.object_id == string.object_id   #=> true","name":"itself","namespace":"Object","path":"Object#itself","type":"instance_method","visibility":"public"},"Object#kind_of?":{"description":"Returns <code>true</code> if <i>class</i> is the class of\n<i>obj</i>, or if <i>class</i> is one of the superclasses of\n<i>obj</i> or modules included in <i>obj</i>.\n\n   module M;    end\n   class A\n     include M\n   end\n   class B < A; end\n   class C < B; end\n\n   b = B.new\n   b.is_a? A          #=> true\n   b.is_a? B          #=> true\n   b.is_a? C          #=> false\n   b.is_a? M          #=> true\n\n   b.kind_of? A       #=> true\n   b.kind_of? B       #=> true\n   b.kind_of? C       #=> false\n   b.kind_of? M       #=> true","name":"kind_of?","namespace":"Object","path":"Object#kind_of?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Object#method":{"description":"Looks up the named method as a receiver in <i>obj</i>, returning a\n<code>Method</code> object (or raising <code>NameError</code>). The\n<code>Method</code> object acts as a closure in <i>obj</i>'s object\ninstance, so instance variables and the value of <code>self</code>\nremain available.\n\n   class Demo\n     def initialize(n)\n       @iv = n\n     end\n     def hello()\n       \"Hello, @iv = #{@iv}\"\n     end\n   end\n\n   k = Demo.new(99)\n   m = k.method(:hello)\n   m.call   #=> \"Hello, @iv = 99\"\n\n   l = Demo.new('Fred')\n   m = l.method(\"hello\")\n   m.call   #=> \"Hello, @iv = Fred\"","name":"method","namespace":"Object","path":"Object#method","type":"instance_method","visibility":"public"},"Object#methods":{"description":"Returns a list of the names of public and protected methods of\n<i>obj</i>. This will include all the methods accessible in\n<i>obj</i>'s ancestors.\nIf the optional parameter is <code>false</code>, it\nreturns an array of <i>obj<i>'s public and protected singleton methods,\nthe array will not include methods in modules included in <i>obj</i>.\n\n   class Klass\n     def klass_method()\n     end\n   end\n   k = Klass.new\n   k.methods[0..9]    #=> [:klass_method, :nil?, :===,\n                      #    :==~, :!, :eql?\n                      #    :hash, :<=>, :class, :singleton_class]\n   k.methods.length   #=> 56\n\n   k.methods(false)   #=> []\n   def k.singleton_method; end\n   k.methods(false)   #=> [:singleton_method]\n\n   module M123; def m123; end end\n   k.extend M123\n   k.methods(false)   #=> [:singleton_method]","name":"methods","namespace":"Object","path":"Object#methods","type":"instance_method","visibility":"public"},"Object#nil?":{"description":"Only the object <i>nil</i> responds <code>true</code> to <code>nil?</code>.\n\n   Object.new.nil?   #=> false\n   nil.nil?          #=> true","name":"nil?","namespace":"Object","path":"Object#nil?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Object#object_id":{"description":"call-seq:\n   obj.__id__       -> integer\n   obj.object_id    -> integer\n\nReturns an integer identifier for +obj+.\n\nThe same number will be returned on all calls to +object_id+ for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization.\nThis is the case for immediate values and frozen string literals.\n\nImmediate values are not passed by reference but are passed by value:\n+nil+, +true+, +false+, Fixnums, Symbols, and some Floats.\n\n    Object.new.object_id  == Object.new.object_id  # => false\n    (21 * 2).object_id    == (21 * 2).object_id    # => true\n    \"hello\".object_id     == \"hello\".object_id     # => false\n    \"hi\".freeze.object_id == \"hi\".freeze.object_id # => true","name":"object_id","namespace":"Object","path":"Object#object_id","type":"instance_method","visibility":"public"},"Object#private_methods":{"description":"Returns the list of private methods accessible to <i>obj</i>. If\nthe <i>all</i> parameter is set to <code>false</code>, only those methods\nin the receiver will be listed.","name":"private_methods","namespace":"Object","path":"Object#private_methods","type":"instance_method","visibility":"public"},"Object#protected_methods":{"description":"Returns the list of protected methods accessible to <i>obj</i>. If\nthe <i>all</i> parameter is set to <code>false</code>, only those methods\nin the receiver will be listed.","name":"protected_methods","namespace":"Object","path":"Object#protected_methods","type":"instance_method","visibility":"public"},"Object#public_method":{"description":"Similar to _method_, searches public method only.","name":"public_method","namespace":"Object","path":"Object#public_method","type":"instance_method","visibility":"public"},"Object#public_methods":{"description":"Returns the list of public methods accessible to <i>obj</i>. If\nthe <i>all</i> parameter is set to <code>false</code>, only those methods\nin the receiver will be listed.","name":"public_methods","namespace":"Object","path":"Object#public_methods","type":"instance_method","visibility":"public"},"Object#public_send":{"description":"Invokes the method identified by _symbol_, passing it any\narguments specified. Unlike send, public_send calls public\nmethods only.\nWhen the method is identified by a string, the string is converted\nto a symbol.\n\n   1.public_send(:puts, \"hello\")  # causes NoMethodError","name":"public_send","namespace":"Object","path":"Object#public_send","type":"instance_method","visibility":"public"},"Object#rawVALUE":{"description":":nodoc:","name":"rawVALUE","namespace":"Object","path":"Object#rawVALUE","type":"instance_method","visibility":"public"},"Object#remove_instance_variable":{"description":"Removes the named instance variable from <i>obj</i>, returning that\nvariable's value.\n\n   class Dummy\n     attr_reader :var\n     def initialize\n       @var = 99\n     end\n     def remove\n       remove_instance_variable(:@var)\n     end\n   end\n   d = Dummy.new\n   d.var      #=> 99\n   d.remove   #=> 99\n   d.var      #=> nil","name":"remove_instance_variable","namespace":"Object","path":"Object#remove_instance_variable","type":"instance_method","visibility":"public"},"Object#respond_to?":{"description":"Returns +true+ if _obj_ responds to the given method.  Private and\nprotected methods are included in the search only if the optional\nsecond parameter evaluates to +true+.\n\nIf the method is not implemented,\nas Process.fork on Windows, File.lchmod on GNU/Linux, etc.,\nfalse is returned.\n\nIf the method is not defined, <code>respond_to_missing?</code>\nmethod is called and the result is returned.\n\nWhen the method name parameter is given as a string, the string is\nconverted to a symbol.","name":"respond_to?","namespace":"Object","path":"Object#respond_to?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Object#respond_to_missing?":{"description":"DO NOT USE THIS DIRECTLY.\n\nHook method to return whether the _obj_ can respond to _id_ method\nor not.\n\nWhen the method name parameter is given as a string, the string is\nconverted to a symbol.\n\nSee #respond_to?, and the example of BasicObject.","name":"respond_to_missing?","namespace":"Object","path":"Object#respond_to_missing?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Object#send":{"description":"Invokes the method identified by _symbol_, passing it any\n arguments specified. You can use <code>__send__</code> if the name\n +send+ clashes with an existing method in _obj_.\n When the method is identified by a string, the string is converted\n to a symbol.\n\n    class Klass\n      def hello(*args)\n        \"Hello \" + args.join(' ')\n      end\n    end\n    k = Klass.new\n    k.send :hello, \"gentle\", \"readers\"   #=> \"Hello gentle readers\"","name":"send","namespace":"Object","path":"Object#send","type":"instance_method","visibility":"public"},"Object#singleton_class":{"description":"Returns the singleton class of <i>obj</i>.  This method creates\na new singleton class if <i>obj</i> does not have one.\n\nIf <i>obj</i> is <code>nil</code>, <code>true</code>, or\n<code>false</code>, it returns NilClass, TrueClass, or FalseClass,\nrespectively.\nIf <i>obj</i> is an Integer, a Float or a Symbol, it raises a TypeError.\n\n   Object.new.singleton_class  #=> #<Class:#<Object:0xb7ce1e24>>\n   String.singleton_class      #=> #<Class:String>\n   nil.singleton_class         #=> NilClass","name":"singleton_class","namespace":"Object","path":"Object#singleton_class","type":"instance_method","visibility":"public"},"Object#singleton_method":{"description":"Similar to _method_, searches singleton method only.\n\n   class Demo\n     def initialize(n)\n       @iv = n\n     end\n     def hello()\n       \"Hello, @iv = #{@iv}\"\n     end\n   end\n\n   k = Demo.new(99)\n   def k.hi\n     \"Hi, @iv = #{@iv}\"\n   end\n   m = k.singleton_method(:hi)\n   m.call   #=> \"Hi, @iv = 99\"\n   m = k.singleton_method(:hello) #=> NameError","name":"singleton_method","namespace":"Object","path":"Object#singleton_method","type":"instance_method","visibility":"public"},"Object#singleton_methods":{"description":"Returns an array of the names of singleton methods for <i>obj</i>.\nIf the optional <i>all</i> parameter is true, the list will include\nmethods in modules included in <i>obj</i>.\nOnly public and protected singleton methods are returned.\n\n   module Other\n     def three() end\n   end\n\n   class Single\n     def Single.four() end\n   end\n\n   a = Single.new\n\n   def a.one()\n   end\n\n   class << a\n     include Other\n     def two()\n     end\n   end\n\n   Single.singleton_methods    #=> [:four]\n   a.singleton_methods(false)  #=> [:two, :one]\n   a.singleton_methods         #=> [:two, :one, :three]","name":"singleton_methods","namespace":"Object","path":"Object#singleton_methods","type":"instance_method","visibility":"public"},"Object#taint":{"description":"Mark the object as tainted.\n\nObjects that are marked as tainted will be restricted from various built-in\nmethods. This is to prevent insecure data, such as command-line arguments\nor strings read from Kernel#gets, from inadvertently compromising the user's\nsystem.\n\nTo check whether an object is tainted, use #tainted?.\n\nYou should only untaint a tainted object if your code has inspected it and\ndetermined that it is safe. To do so use #untaint.","name":"taint","namespace":"Object","path":"Object#taint","type":"instance_method","visibility":"public"},"Object#tainted?":{"description":"Returns true if the object is tainted.\n\nSee #taint for more information.","name":"tainted?","namespace":"Object","path":"Object#tainted?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Object#tap":{"description":"Yields self to the block, and then returns self.\nThe primary purpose of this method is to \"tap into\" a method chain,\nin order to perform operations on intermediate results within the chain.\n\n   (1..10)                  .tap {|x| puts \"original: #{x}\" }\n     .to_a                  .tap {|x| puts \"array:    #{x}\" }\n     .select {|x| x.even? } .tap {|x| puts \"evens:    #{x}\" }\n     .map {|x| x*x }        .tap {|x| puts \"squares:  #{x}\" }","name":"tap","namespace":"Object","path":"Object#tap","type":"instance_method","visibility":"public"},"Object#to_enum":{"description":"Creates a new Enumerator which will enumerate by calling +method+ on\n+obj+, passing +args+ if any.\n\nIf a block is given, it will be used to calculate the size of\nthe enumerator without the need to iterate it (see Enumerator#size).\n\n=== Examples\n\n  str = \"xyz\"\n\n  enum = str.enum_for(:each_byte)\n  enum.each { |b| puts b }\n  # => 120\n  # => 121\n  # => 122\n\n  # protect an array from being modified by some_method\n  a = [1, 2, 3]\n  some_method(a.to_enum)\n\nIt is typical to call to_enum when defining methods for\na generic Enumerable, in case no block is passed.\n\nHere is such an example, with parameter passing and a sizing block:\n\n  module Enumerable\n    # a generic method to repeat the values of any enumerable\n    def repeat(n)\n      raise ArgumentError, \"#{n} is negative!\" if n < 0\n      unless block_given?\n        return to_enum(__method__, n) do # __method__ is :repeat here\n          sz = size     # Call size and multiply by n...\n          sz * n if sz  # but return nil if size itself is nil\n        end\n      end\n      each do |*val|\n        n.times { yield *val }\n      end\n    end\n  end\n\n  %i[hello world].repeat(2) { |w| puts w }\n    # => Prints 'hello', 'hello', 'world', 'world'\n  enum = (1..14).repeat(3)\n    # => returns an Enumerator when called without a block\n  enum.first(4) # => [1, 1, 1, 2]\n  enum.size # => 42","name":"to_enum","namespace":"Object","path":"Object#to_enum","type":"instance_method","visibility":"public"},"Object#to_s":{"description":"Returns a string representing <i>obj</i>. The default\n<code>to_s</code> prints the object's class and an encoding of the\nobject id. As a special case, the top-level object that is the\ninitial execution context of Ruby programs returns ``main''.","name":"to_s","namespace":"Object","path":"Object#to_s","type":"instance_method","visibility":"public"},"Object#trust":{"description":"Deprecated method that is equivalent to #untaint.","name":"trust","namespace":"Object","path":"Object#trust","type":"instance_method","visibility":"public"},"Object#untaint":{"description":"Removes the tainted mark from the object.\n\nSee #taint for more information.","name":"untaint","namespace":"Object","path":"Object#untaint","type":"instance_method","visibility":"public"},"Object#untrust":{"description":"Deprecated method that is equivalent to #taint.","name":"untrust","namespace":"Object","path":"Object#untrust","type":"instance_method","visibility":"public"},"Object#untrusted?":{"description":"Deprecated method that is equivalent to #tainted?.","name":"untrusted?","namespace":"Object","path":"Object#untrusted?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Object#validate_object":{"description":":nodoc:","name":"validate_object","namespace":"Object","path":"Object#validate_object","type":"instance_method","visibility":"public"},"Object#yield_self":{"description":"Yields self to the block and returns the result of the block.\n\n   \"my string\".yield_self {|s| s.upcase }   #=> \"MY STRING\"\n   3.next.yield_self {|x| x**x }.to_s       #=> \"256\"","name":"yield_self","namespace":"Object","path":"Object#yield_self","type":"instance_method","visibility":"public"},"Object::Bignum":{"description":"","name":"Bignum","namespace":"Object","path":"Object::Bignum","type":"constant","return":["Class",""],"visibility":"public"},"Object::Fixnum":{"description":"","name":"Fixnum","namespace":"Object","path":"Object::Fixnum","type":"constant","return":["Class",""],"visibility":"public"},"Module":{"description":"*********************************************************************\n\n\n  A <code>Module</code> is a collection of methods and constants. The\n  methods in a module may be instance methods or module methods.\n  Instance methods appear as methods in a class when the module is\n  included, module methods do not. Conversely, module methods may be\n  called without creating an encapsulating object, while instance\n  methods may not. (See <code>Module#module_function</code>.)\n\n  In the descriptions that follow, the parameter <i>sym</i> refers\n  to a symbol, which is either a quoted string or a\n  <code>Symbol</code> (such as <code>:name</code>).\n\n     module Mod\n       include Math\n       CONST = 1\n       def meth\n         #  ...\n       end\n     end\n     Mod.class              #=> Module\n     Mod.constants          #=> [:CONST, :PI, :E]\n     Mod.instance_methods   #=> [:meth]","name":"Module","namespace":"","path":"Module","type":"class","visibility":"public"},"Module#<":{"description":"Returns true if <i>mod</i> is a subclass of <i>other</i>. Returns\n<code>nil</code> if there's no relationship between the two.\n(Think of the relationship in terms of the class definition:\n\"class A < B\" implies \"A < B\".)","name":"<","namespace":"Module","path":"Module#<","type":"instance_method","visibility":"public"},"Module#<=":{"description":"Returns true if <i>mod</i> is a subclass of <i>other</i> or\nis the same as <i>other</i>. Returns\n<code>nil</code> if there's no relationship between the two.\n(Think of the relationship in terms of the class definition:\n\"class A < B\" implies \"A < B\".)","name":"<=","namespace":"Module","path":"Module#<=","type":"instance_method","visibility":"public"},"Module#<=>":{"description":"Comparison---Returns -1, 0, +1 or nil depending on whether +module+\nincludes +other_module+, they are the same, or if +module+ is included by\n+other_module+.\n\nReturns +nil+ if +module+ has no relationship with +other_module+, if\n+other_module+ is not a module, or if the two values are incomparable.","name":"<=>","namespace":"Module","path":"Module#<=>","type":"instance_method","visibility":"public"},"Module#==":{"description":"Equality --- At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if +obj+ and +other+ are the same object.\nTypically, this method is overridden in descendant classes to provide\nclass-specific meaning.\n\nUnlike <code>==</code>, the <code>equal?</code> method should never be\noverridden by subclasses as it is used to determine object identity\n(that is, <code>a.equal?(b)</code> if and only if <code>a</code> is the\nsame object as <code>b</code>):\n\n  obj = \"a\"\n  other = obj.dup\n\n  obj == other      #=> true\n  obj.equal? other  #=> false\n  obj.equal? obj    #=> true\n\nThe <code>eql?</code> method returns <code>true</code> if +obj+ and\n+other+ refer to the same hash key.  This is used by Hash to test members\nfor equality.  For objects of class <code>Object</code>, <code>eql?</code>\nis synonymous with <code>==</code>.  Subclasses normally continue this\ntradition by aliasing <code>eql?</code> to their overridden <code>==</code>\nmethod, but there are exceptions.  <code>Numeric</code> types, for\nexample, perform type conversion across <code>==</code>, but not across\n<code>eql?</code>, so:\n\n   1 == 1.0     #=> true\n   1.eql? 1.0   #=> false","name":"==","namespace":"Module","path":"Module#==","type":"instance_method","visibility":"public"},"Module#===":{"description":"Case Equality---Returns <code>true</code> if <i>obj</i> is an\ninstance of <i>mod</i> or an instance of one of <i>mod</i>'s descendants.\nOf limited use for modules, but can be used in <code>case</code> statements\nto classify objects by class.","name":"===","namespace":"Module","path":"Module#===","type":"instance_method","visibility":"public"},"Module#>":{"description":"Returns true if <i>mod</i> is an ancestor of <i>other</i>. Returns\n<code>nil</code> if there's no relationship between the two.\n(Think of the relationship in terms of the class definition:\n\"class A < B\" implies \"B > A\".)","name":">","namespace":"Module","path":"Module#>","type":"instance_method","visibility":"public"},"Module#>=":{"description":"Returns true if <i>mod</i> is an ancestor of <i>other</i>, or the\ntwo modules are the same. Returns\n<code>nil</code> if there's no relationship between the two.\n(Think of the relationship in terms of the class definition:\n\"class A < B\" implies \"B > A\".)","name":">=","namespace":"Module","path":"Module#>=","type":"instance_method","visibility":"public"},"Module#alias_method":{"description":"Makes <i>new_name</i> a new copy of the method <i>old_name</i>. This can\nbe used to retain access to methods that are overridden.\n\n   module Mod\n     alias_method :orig_exit, :exit\n     def exit(code=0)\n       puts \"Exiting with code #{code}\"\n       orig_exit(code)\n     end\n   end\n   include Mod\n   exit(99)\n\n<em>produces:</em>\n\n   Exiting with code 99","name":"alias_method","namespace":"Module","path":"Module#alias_method","type":"instance_method","visibility":"public"},"Module#ancestors":{"description":"Returns a list of modules included/prepended in <i>mod</i>\n(including <i>mod</i> itself).\n\n   module Mod\n     include Math\n     include Comparable\n     prepend Enumerable\n   end\n\n   Mod.ancestors        #=> [Enumerable, Mod, Comparable, Math]\n   Math.ancestors       #=> [Math]\n   Enumerable.ancestors #=> [Enumerable]","name":"ancestors","namespace":"Module","path":"Module#ancestors","type":"instance_method","visibility":"public"},"Module#append_features":{"description":"When this module is included in another, Ruby calls\n<code>append_features</code> in this module, passing it the\nreceiving module in _mod_. Ruby's default implementation is\nto add the constants, methods, and module variables of this module\nto _mod_ if this module has not already been added to\n_mod_ or one of its ancestors. See also <code>Module#include</code>.","name":"append_features","namespace":"Module","path":"Module#append_features","type":"instance_method","visibility":"private"},"Module#attr":{"description":"The first form is equivalent to <code>attr_reader</code>.\nThe second form is equivalent to <code>attr_accessor(name)</code> but deprecated.\nThe last form is equivalent to <code>attr_reader(name)</code> but deprecated.","name":"attr","namespace":"Module","path":"Module#attr","type":"instance_method","visibility":"public"},"Module#attr_accessor":{"description":"Defines a named attribute for this module, where the name is\n<i>symbol.</i><code>id2name</code>, creating an instance variable\n(<code>@name</code>) and a corresponding access method to read it.\nAlso creates a method called <code>name=</code> to set the attribute.\nString arguments are converted to symbols.\n\n   module Mod\n     attr_accessor(:one, :two)\n   end\n   Mod.instance_methods.sort   #=> [:one, :one=, :two, :two=]","name":"attr_accessor","namespace":"Module","path":"Module#attr_accessor","type":"instance_method","visibility":"public"},"Module#attr_reader":{"description":"Creates instance variables and corresponding methods that return the\nvalue of each instance variable. Equivalent to calling\n``<code>attr</code><i>:name</i>'' on each name in turn.\nString arguments are converted to symbols.","name":"attr_reader","namespace":"Module","path":"Module#attr_reader","type":"instance_method","visibility":"public"},"Module#attr_writer":{"description":"Creates an accessor method to allow assignment to the attribute\n<i>symbol</i><code>.id2name</code>.\nString arguments are converted to symbols.","name":"attr_writer","namespace":"Module","path":"Module#attr_writer","type":"instance_method","visibility":"public"},"Module#autoload":{"description":"Registers _filename_ to be loaded (using <code>Kernel::require</code>)\nthe first time that _module_ (which may be a <code>String</code> or\na symbol) is accessed in the namespace of _mod_.\n\n   module A\n   end\n   A.autoload(:B, \"b\")\n   A::B.doit            # autoloads \"b\"","name":"autoload","namespace":"Module","path":"Module#autoload","type":"instance_method","visibility":"public"},"Module#autoload?":{"description":"Returns _filename_ to be loaded if _name_ is registered as\n+autoload+ in the namespace of _mod_.\n\n   module A\n   end\n   A.autoload(:B, \"b\")\n   A.autoload?(:B)            #=> \"b\"","name":"autoload?","namespace":"Module","path":"Module#autoload?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Module#class_eval":{"description":"Evaluates the string or block in the context of _mod_, except that when\na block is given, constant/class variable lookup is not affected. This\ncan be used to add methods to a class. <code>module_eval</code> returns\nthe result of evaluating its argument. The optional _filename_ and\n_lineno_ parameters set the text for error messages.\n\n   class Thing\n   end\n   a = %q{def hello() \"Hello there!\" end}\n   Thing.module_eval(a)\n   puts Thing.new.hello()\n   Thing.module_eval(\"invalid code\", \"dummy\", 123)\n\n<em>produces:</em>\n\n   Hello there!\n   dummy:123:in `module_eval': undefined local variable\n       or method `code' for Thing:Class","name":"class_eval","namespace":"Module","path":"Module#class_eval","type":"instance_method","visibility":"public"},"Module#class_exec":{"description":"Evaluates the given block in the context of the class/module.\nThe method defined in the block will belong to the receiver.\nAny arguments passed to the method will be passed to the block.\nThis can be used if the block needs to access instance variables.\n\n   class Thing\n   end\n   Thing.class_exec{\n     def hello() \"Hello there!\" end\n   }\n   puts Thing.new.hello()\n\n<em>produces:</em>\n\n   Hello there!","name":"class_exec","namespace":"Module","path":"Module#class_exec","type":"instance_method","visibility":"public"},"Module#class_variable_defined?":{"description":"Returns <code>true</code> if the given class variable is defined\nin <i>obj</i>.\nString arguments are converted to symbols.\n\n   class Fred\n     @@foo = 99\n   end\n   Fred.class_variable_defined?(:@@foo)    #=> true\n   Fred.class_variable_defined?(:@@bar)    #=> false","name":"class_variable_defined?","namespace":"Module","path":"Module#class_variable_defined?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Module#class_variable_get":{"description":"Returns the value of the given class variable (or throws a\n<code>NameError</code> exception). The <code>@@</code> part of the\nvariable name should be included for regular class variables.\nString arguments are converted to symbols.\n\n   class Fred\n     @@foo = 99\n   end\n   Fred.class_variable_get(:@@foo)     #=> 99","name":"class_variable_get","namespace":"Module","path":"Module#class_variable_get","type":"instance_method","visibility":"public"},"Module#class_variable_set":{"description":"Sets the class variable named by <i>symbol</i> to the given\nobject.\nIf the class variable name is passed as a string, that string\nis converted to a symbol.\n\n   class Fred\n     @@foo = 99\n     def foo\n       @@foo\n     end\n   end\n   Fred.class_variable_set(:@@foo, 101)     #=> 101\n   Fred.new.foo                             #=> 101","name":"class_variable_set","namespace":"Module","path":"Module#class_variable_set","type":"instance_method","visibility":"public"},"Module#class_variables":{"description":"Returns an array of the names of class variables in <i>mod</i>.\nThis includes the names of class variables in any included\nmodules, unless the <i>inherit</i> parameter is set to\n<code>false</code>.\n\n   class One\n     @@var1 = 1\n   end\n   class Two < One\n     @@var2 = 2\n   end\n   One.class_variables          #=> [:@@var1]\n   Two.class_variables          #=> [:@@var2, :@@var1]\n   Two.class_variables(false)   #=> [:@@var2]","name":"class_variables","namespace":"Module","path":"Module#class_variables","type":"instance_method","visibility":"public"},"Module#const_defined?":{"description":"Says whether _mod_ or its ancestors have a constant with the given name:\n\n  Float.const_defined?(:EPSILON)      #=> true, found in Float itself\n  Float.const_defined?(\"String\")      #=> true, found in Object (ancestor)\n  BasicObject.const_defined?(:Hash)   #=> false\n\nIf _mod_ is a +Module+, additionally +Object+ and its ancestors are checked:\n\n  Math.const_defined?(:String)   #=> true, found in Object\n\nIn each of the checked classes or modules, if the constant is not present\nbut there is an autoload for it, +true+ is returned directly without\nautoloading:\n\n  module Admin\n    autoload :User, 'admin/user'\n  end\n  Admin.const_defined?(:User)   #=> true\n\nIf the constant is not found the callback +const_missing+ is *not* called\nand the method returns +false+.\n\nIf +inherit+ is false, the lookup only checks the constants in the receiver:\n\n  IO.const_defined?(:SYNC)          #=> true, found in File::Constants (ancestor)\n  IO.const_defined?(:SYNC, false)   #=> false, not found in IO itself\n\nIn this case, the same logic for autoloading applies.\n\nIf the argument is not a valid constant name a +NameError+ is raised with the\nmessage \"wrong constant name _name_\":\n\n  Hash.const_defined? 'foobar'   #=> NameError: wrong constant name foobar","name":"const_defined?","namespace":"Module","path":"Module#const_defined?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Module#const_get":{"description":"Checks for a constant with the given name in <i>mod</i>.\nIf +inherit+ is set, the lookup will also search\nthe ancestors (and +Object+ if <i>mod</i> is a +Module+).\n\nThe value of the constant is returned if a definition is found,\notherwise a +NameError+ is raised.\n\n   Math.const_get(:PI)   #=> 3.14159265358979\n\nThis method will recursively look up constant names if a namespaced\nclass name is provided.  For example:\n\n   module Foo; class Bar; end end\n   Object.const_get 'Foo::Bar'\n\nThe +inherit+ flag is respected on each lookup.  For example:\n\n   module Foo\n     class Bar\n       VAL = 10\n     end\n\n     class Baz < Bar; end\n   end\n\n   Object.const_get 'Foo::Baz::VAL'         # => 10\n   Object.const_get 'Foo::Baz::VAL', false  # => NameError\n\nIf the argument is not a valid constant name a +NameError+ will be\nraised with a warning \"wrong constant name\".\n\nObject.const_get 'foobar' #=> NameError: wrong constant name foobar","name":"const_get","namespace":"Module","path":"Module#const_get","type":"instance_method","visibility":"public"},"Module#const_missing":{"description":"Invoked when a reference is made to an undefined constant in\n<i>mod</i>. It is passed a symbol for the undefined constant, and\nreturns a value to be used for that constant. The\nfollowing code is an example of the same:\n\n  def Foo.const_missing(name)\n    name # return the constant name as Symbol\n  end\n\n  Foo::UNDEFINED_CONST    #=> :UNDEFINED_CONST: symbol returned\n\nIn the next example when a reference is made to an undefined constant,\nit attempts to load a file whose name is the lowercase version of the\nconstant (thus class <code>Fred</code> is assumed to be in file\n<code>fred.rb</code>).  If found, it returns the loaded class. It\ntherefore implements an autoload feature similar to Kernel#autoload and\nModule#autoload.\n\n  def Object.const_missing(name)\n    @looked_for ||= {}\n    str_name = name.to_s\n    raise \"Class not found: #{name}\" if @looked_for[str_name]\n    @looked_for[str_name] = 1\n    file = str_name.downcase\n    require file\n    klass = const_get(name)\n    return klass if klass\n    raise \"Class not found: #{name}\"\n  end","name":"const_missing","namespace":"Module","path":"Module#const_missing","type":"instance_method","visibility":"public"},"Module#const_set":{"description":"Sets the named constant to the given object, returning that object.\nCreates a new constant if no constant with the given name previously\nexisted.\n\n   Math.const_set(\"HIGH_SCHOOL_PI\", 22.0/7.0)   #=> 3.14285714285714\n   Math::HIGH_SCHOOL_PI - Math::PI              #=> 0.00126448926734968\n\nIf +sym+ or +str+ is not a valid constant name a +NameError+ will be\nraised with a warning \"wrong constant name\".\n\nObject.const_set('foobar', 42) #=> NameError: wrong constant name foobar","name":"const_set","namespace":"Module","path":"Module#const_set","type":"instance_method","visibility":"public"},"Module#constants":{"description":"Returns an array of the names of the constants accessible in\n<i>mod</i>. This includes the names of constants in any included\nmodules (example at start of section), unless the <i>inherit</i>\nparameter is set to <code>false</code>.\n\nThe implementation makes no guarantees about the order in which the\nconstants are yielded.\n\n  IO.constants.include?(:SYNC)        #=> true\n  IO.constants(false).include?(:SYNC) #=> false\n\nAlso see <code>Module::const_defined?</code>.","name":"constants","namespace":"Module","path":"Module#constants","type":"instance_method","visibility":"public"},"Module#define_method":{"description":"Defines an instance method in the receiver. The _method_\nparameter can be a +Proc+, a +Method+ or an +UnboundMethod+ object.\nIf a block is specified, it is used as the method body. This block\nis evaluated using <code>instance_eval</code>, a point that is\ntricky to demonstrate because <code>define_method</code> is private.\n(This is why we resort to the +send+ hack in this example.)\n\n   class A\n     def fred\n       puts \"In Fred\"\n     end\n     def create_method(name, &block)\n       self.class.send(:define_method, name, &block)\n     end\n     define_method(:wilma) { puts \"Charge it!\" }\n   end\n   class B < A\n     define_method(:barney, instance_method(:fred))\n   end\n   a = B.new\n   a.barney\n   a.wilma\n   a.create_method(:betty) { p self }\n   a.betty\n\n<em>produces:</em>\n\n   In Fred\n   Charge it!\n   #<B:0x401b39e8>","name":"define_method","namespace":"Module","path":"Module#define_method","type":"instance_method","visibility":"public"},"Module#deprecate_constant":{"description":"Makes a list of existing constants deprecated.","name":"deprecate_constant","namespace":"Module","path":"Module#deprecate_constant","type":"instance_method","visibility":"public"},"Module#extend_object":{"description":"Extends the specified object by adding this module's constants and\nmethods (which are added as singleton methods). This is the callback\nmethod used by <code>Object#extend</code>.\n\n   module Picky\n     def Picky.extend_object(o)\n       if String === o\n         puts \"Can't add Picky to a String\"\n       else\n         puts \"Picky added to #{o.class}\"\n         super\n       end\n     end\n   end\n   (s = Array.new).extend Picky  # Call Object.extend\n   (s = \"quick brown fox\").extend Picky\n\n<em>produces:</em>\n\n   Picky added to Array\n   Can't add Picky to a String","name":"extend_object","namespace":"Module","path":"Module#extend_object","type":"instance_method","visibility":"private"},"Module#extended":{"description":"Not documented","name":"extended","namespace":"Module","path":"Module#extended","type":"instance_method","visibility":"private"},"Module#freeze":{"description":"Prevents further modifications to <i>mod</i>.\n\nThis method returns self.","name":"freeze","namespace":"Module","path":"Module#freeze","type":"instance_method","visibility":"public"},"Module#include":{"description":"Invokes <code>Module.append_features</code> on each parameter in reverse order.","name":"include","namespace":"Module","path":"Module#include","type":"instance_method","visibility":"public"},"Module#include?":{"description":"Returns <code>true</code> if <i>module</i> is included in\n<i>mod</i> or one of <i>mod</i>'s ancestors.\n\n   module A\n   end\n   class B\n     include A\n   end\n   class C < B\n   end\n   B.include?(A)   #=> true\n   C.include?(A)   #=> true\n   A.include?(A)   #=> false","name":"include?","namespace":"Module","path":"Module#include?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Module#included":{"description":"Not documented","name":"included","namespace":"Module","path":"Module#included","type":"instance_method","visibility":"private"},"Module#included_modules":{"description":"Returns the list of modules included in <i>mod</i>.\n\n   module Mixin\n   end\n\n   module Outer\n     include Mixin\n   end\n\n   Mixin.included_modules   #=> []\n   Outer.included_modules   #=> [Mixin]","name":"included_modules","namespace":"Module","path":"Module#included_modules","type":"instance_method","visibility":"public"},"Module#initialize":{"description":"Creates a new anonymous module. If a block is given, it is passed\nthe module object, and the block is evaluated in the context of this\nmodule like <code>module_eval</code>.\n\n   fred = Module.new do\n     def meth1\n       \"hello\"\n     end\n     def meth2\n       \"bye\"\n     end\n   end\n   a = \"my string\"\n   a.extend(fred)   #=> \"my string\"\n   a.meth1          #=> \"hello\"\n   a.meth2          #=> \"bye\"\n\nAssign the module to a constant (name starting uppercase) if you\nwant to treat it like a regular module.","name":"initialize","namespace":"Module","path":"Module#initialize","type":"instance_method","visibility":"public"},"Module#initialize_clone":{"description":":nodoc:","name":"initialize_clone","namespace":"Module","path":"Module#initialize_clone","type":"instance_method","visibility":"public"},"Module#initialize_copy":{"description":":nodoc:","name":"initialize_copy","namespace":"Module","path":"Module#initialize_copy","type":"instance_method","visibility":"public"},"Module#inspect":{"description":"Returns a string representing this module or class. For basic\nclasses and modules, this is the name. For singletons, we\nshow information on the thing we're attached to as well.","name":"inspect","namespace":"Module","path":"Module#inspect","type":"instance_method","visibility":"public"},"Module#instance_method":{"description":"Returns an +UnboundMethod+ representing the given\ninstance method in _mod_.\n\n   class Interpreter\n     def do_a() print \"there, \"; end\n     def do_d() print \"Hello \";  end\n     def do_e() print \"!\\n\";     end\n     def do_v() print \"Dave\";    end\n     Dispatcher = {\n       \"a\" => instance_method(:do_a),\n       \"d\" => instance_method(:do_d),\n       \"e\" => instance_method(:do_e),\n       \"v\" => instance_method(:do_v)\n     }\n     def interpret(string)\n       string.each_char {|b| Dispatcher[b].bind(self).call }\n     end\n   end\n\n   interpreter = Interpreter.new\n   interpreter.interpret('dave')\n\n<em>produces:</em>\n\n   Hello there, Dave!","name":"instance_method","namespace":"Module","path":"Module#instance_method","type":"instance_method","visibility":"public"},"Module#instance_methods":{"description":"Returns an array containing the names of the public and protected instance\nmethods in the receiver. For a module, these are the public and protected methods;\nfor a class, they are the instance (not singleton) methods. If the optional\nparameter is <code>false</code>, the methods of any ancestors are not included.\n\n   module A\n     def method1()  end\n   end\n   class B\n     include A\n     def method2()  end\n   end\n   class C < B\n     def method3()  end\n   end\n\n   A.instance_methods(false)                   #=> [:method1]\n   B.instance_methods(false)                   #=> [:method2]\n   B.instance_methods(true).include?(:method1) #=> true\n   C.instance_methods(false)                   #=> [:method3]\n   C.instance_methods.include?(:method2)       #=> true","name":"instance_methods","namespace":"Module","path":"Module#instance_methods","type":"instance_method","visibility":"public"},"Module#method_added":{"description":"Not documented","name":"method_added","namespace":"Module","path":"Module#method_added","type":"instance_method","visibility":"private"},"Module#method_defined?":{"description":"Returns +true+ if the named method is defined by\n_mod_ (or its included modules and, if _mod_ is a class,\nits ancestors). Public and protected methods are matched.\nString arguments are converted to symbols.\n\n   module A\n     def method1()  end\n     def protected_method1()  end\n     protected :protected_method1\n   end\n   class B\n     def method2()  end\n     def private_method2()  end\n     private :private_method2\n   end\n   class C < B\n     include A\n     def method3()  end\n   end\n\n   A.method_defined? :method1              #=> true\n   C.method_defined? \"method1\"             #=> true\n   C.method_defined? \"method2\"             #=> true\n   C.method_defined? \"method3\"             #=> true\n   C.method_defined? \"protected_method1\"   #=> true\n   C.method_defined? \"method4\"             #=> false\n   C.method_defined? \"private_method2\"     #=> false","name":"method_defined?","namespace":"Module","path":"Module#method_defined?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Module#method_removed":{"description":"Not documented","name":"method_removed","namespace":"Module","path":"Module#method_removed","type":"instance_method","visibility":"private"},"Module#method_undefined":{"description":"Not documented","name":"method_undefined","namespace":"Module","path":"Module#method_undefined","type":"instance_method","visibility":"private"},"Module#module_eval":{"description":"Evaluates the string or block in the context of _mod_, except that when\na block is given, constant/class variable lookup is not affected. This\ncan be used to add methods to a class. <code>module_eval</code> returns\nthe result of evaluating its argument. The optional _filename_ and\n_lineno_ parameters set the text for error messages.\n\n   class Thing\n   end\n   a = %q{def hello() \"Hello there!\" end}\n   Thing.module_eval(a)\n   puts Thing.new.hello()\n   Thing.module_eval(\"invalid code\", \"dummy\", 123)\n\n<em>produces:</em>\n\n   Hello there!\n   dummy:123:in `module_eval': undefined local variable\n       or method `code' for Thing:Class","name":"module_eval","namespace":"Module","path":"Module#module_eval","type":"instance_method","visibility":"public"},"Module#module_exec":{"description":"Evaluates the given block in the context of the class/module.\nThe method defined in the block will belong to the receiver.\nAny arguments passed to the method will be passed to the block.\nThis can be used if the block needs to access instance variables.\n\n   class Thing\n   end\n   Thing.class_exec{\n     def hello() \"Hello there!\" end\n   }\n   puts Thing.new.hello()\n\n<em>produces:</em>\n\n   Hello there!","name":"module_exec","namespace":"Module","path":"Module#module_exec","type":"instance_method","visibility":"public"},"Module#module_function":{"description":"Creates module functions for the named methods. These functions may\nbe called with the module as a receiver, and also become available\nas instance methods to classes that mix in the module. Module\nfunctions are copies of the original, and so may be changed\nindependently. The instance-method versions are made private. If\nused with no arguments, subsequently defined methods become module\nfunctions.\nString arguments are converted to symbols.\n\n   module Mod\n     def one\n       \"This is one\"\n     end\n     module_function :one\n   end\n   class Cls\n     include Mod\n     def call_one\n       one\n     end\n   end\n   Mod.one     #=> \"This is one\"\n   c = Cls.new\n   c.call_one  #=> \"This is one\"\n   module Mod\n     def one\n       \"This is the new one\"\n     end\n   end\n   Mod.one     #=> \"This is one\"\n   c.call_one  #=> \"This is the new one\"","name":"module_function","namespace":"Module","path":"Module#module_function","type":"instance_method","visibility":"private"},"Module#name":{"description":"Returns the name of the module <i>mod</i>.  Returns nil for anonymous modules.","name":"name","namespace":"Module","path":"Module#name","type":"instance_method","visibility":"public"},"Module#prepend":{"description":"Invokes <code>Module.prepend_features</code> on each parameter in reverse order.","name":"prepend","namespace":"Module","path":"Module#prepend","type":"instance_method","visibility":"public"},"Module#prepend_features":{"description":"When this module is prepended in another, Ruby calls\n<code>prepend_features</code> in this module, passing it the\nreceiving module in _mod_. Ruby's default implementation is\nto overlay the constants, methods, and module variables of this module\nto _mod_ if this module has not already been added to\n_mod_ or one of its ancestors. See also <code>Module#prepend</code>.","name":"prepend_features","namespace":"Module","path":"Module#prepend_features","type":"instance_method","visibility":"private"},"Module#prepended":{"description":"Not documented","name":"prepended","namespace":"Module","path":"Module#prepended","type":"instance_method","visibility":"private"},"Module#private":{"description":"With no arguments, sets the default visibility for subsequently\ndefined methods to private. With arguments, sets the named methods\nto have private visibility.\nString arguments are converted to symbols.\n\n   module Mod\n     def a()  end\n     def b()  end\n     private\n     def c()  end\n     private :a\n   end\n   Mod.private_instance_methods   #=> [:a, :c]\n\nNote that to show a private method on RDoc, use <code>:doc:</code>.","name":"private","namespace":"Module","path":"Module#private","type":"instance_method","visibility":"private"},"Module#private_class_method":{"description":"Makes existing class methods private. Often used to hide the default\nconstructor <code>new</code>.\n\nString arguments are converted to symbols.\n\n   class SimpleSingleton  # Not thread safe\n     private_class_method :new\n     def SimpleSingleton.create(*args, &block)\n       @me = new(*args, &block) if ! @me\n       @me\n     end\n   end","name":"private_class_method","namespace":"Module","path":"Module#private_class_method","type":"instance_method","visibility":"public"},"Module#private_constant":{"description":"Makes a list of existing constants private.","name":"private_constant","namespace":"Module","path":"Module#private_constant","type":"instance_method","visibility":"public"},"Module#private_instance_methods":{"description":"Returns a list of the private instance methods defined in\n<i>mod</i>. If the optional parameter is <code>false</code>, the\nmethods of any ancestors are not included.\n\n   module Mod\n     def method1()  end\n     private :method1\n     def method2()  end\n   end\n   Mod.instance_methods           #=> [:method2]\n   Mod.private_instance_methods   #=> [:method1]","name":"private_instance_methods","namespace":"Module","path":"Module#private_instance_methods","type":"instance_method","visibility":"public"},"Module#private_method_defined?":{"description":"Returns +true+ if the named private method is defined by\n_ mod_ (or its included modules and, if _mod_ is a class,\nits ancestors).\nString arguments are converted to symbols.\n\n   module A\n     def method1()  end\n   end\n   class B\n     private\n     def method2()  end\n   end\n   class C < B\n     include A\n     def method3()  end\n   end\n\n   A.method_defined? :method1            #=> true\n   C.private_method_defined? \"method1\"   #=> false\n   C.private_method_defined? \"method2\"   #=> true\n   C.method_defined? \"method2\"           #=> false","name":"private_method_defined?","namespace":"Module","path":"Module#private_method_defined?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Module#protected":{"description":"With no arguments, sets the default visibility for subsequently\ndefined methods to protected. With arguments, sets the named methods\nto have protected visibility.\nString arguments are converted to symbols.\n\nIf a method has protected visibility, it is callable only where\n<code>self</code> of the context is the same as the method.\n(method definition or instance_eval). This behavior is different from\nJava's protected method. Usually <code>private</code> should be used.\n\nNote that a protected method is slow because it can't use inline cache.\n\nTo show a private method on RDoc, use <code>:doc:</code> instead of this.","name":"protected","namespace":"Module","path":"Module#protected","type":"instance_method","visibility":"private"},"Module#protected_instance_methods":{"description":"Returns a list of the protected instance methods defined in\n<i>mod</i>. If the optional parameter is <code>false</code>, the\nmethods of any ancestors are not included.","name":"protected_instance_methods","namespace":"Module","path":"Module#protected_instance_methods","type":"instance_method","visibility":"public"},"Module#protected_method_defined?":{"description":"Returns +true+ if the named protected method is defined\nby _mod_ (or its included modules and, if _mod_ is a\nclass, its ancestors).\nString arguments are converted to symbols.\n\n   module A\n     def method1()  end\n   end\n   class B\n     protected\n     def method2()  end\n   end\n   class C < B\n     include A\n     def method3()  end\n   end\n\n   A.method_defined? :method1              #=> true\n   C.protected_method_defined? \"method1\"   #=> false\n   C.protected_method_defined? \"method2\"   #=> true\n   C.method_defined? \"method2\"             #=> true","name":"protected_method_defined?","namespace":"Module","path":"Module#protected_method_defined?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Module#public":{"description":"With no arguments, sets the default visibility for subsequently\ndefined methods to public. With arguments, sets the named methods to\nhave public visibility.\nString arguments are converted to symbols.","name":"public","namespace":"Module","path":"Module#public","type":"instance_method","visibility":"private"},"Module#public_class_method":{"description":"Makes a list of existing class methods public.\n\nString arguments are converted to symbols.","name":"public_class_method","namespace":"Module","path":"Module#public_class_method","type":"instance_method","visibility":"public"},"Module#public_constant":{"description":"Makes a list of existing constants public.","name":"public_constant","namespace":"Module","path":"Module#public_constant","type":"instance_method","visibility":"public"},"Module#public_instance_method":{"description":"Similar to _instance_method_, searches public method only.","name":"public_instance_method","namespace":"Module","path":"Module#public_instance_method","type":"instance_method","visibility":"public"},"Module#public_instance_methods":{"description":"Returns a list of the public instance methods defined in <i>mod</i>.\nIf the optional parameter is <code>false</code>, the methods of\nany ancestors are not included.","name":"public_instance_methods","namespace":"Module","path":"Module#public_instance_methods","type":"instance_method","visibility":"public"},"Module#public_method_defined?":{"description":"Returns +true+ if the named public method is defined by\n_mod_ (or its included modules and, if _mod_ is a class,\nits ancestors).\nString arguments are converted to symbols.\n\n   module A\n     def method1()  end\n   end\n   class B\n     protected\n     def method2()  end\n   end\n   class C < B\n     include A\n     def method3()  end\n   end\n\n   A.method_defined? :method1           #=> true\n   C.public_method_defined? \"method1\"   #=> true\n   C.public_method_defined? \"method2\"   #=> false\n   C.method_defined? \"method2\"          #=> true","name":"public_method_defined?","namespace":"Module","path":"Module#public_method_defined?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Module#refine":{"description":"Refine <i>mod</i> in the receiver.\n\nReturns a module, where refined methods are defined.","name":"refine","namespace":"Module","path":"Module#refine","type":"instance_method","visibility":"private"},"Module#remove_class_variable":{"description":"Removes the definition of the <i>sym</i>, returning that\nconstant's value.\n\n   class Dummy\n     @@var = 99\n     puts @@var\n     remove_class_variable(:@@var)\n     p(defined? @@var)\n   end\n\n<em>produces:</em>\n\n   99\n   nil","name":"remove_class_variable","namespace":"Module","path":"Module#remove_class_variable","type":"instance_method","visibility":"public"},"Module#remove_const":{"description":"Removes the definition of the given constant, returning that\nconstant's previous value.  If that constant referred to\na module, this will not change that module's name and can lead\nto confusion.","name":"remove_const","namespace":"Module","path":"Module#remove_const","type":"instance_method","visibility":"private"},"Module#remove_method":{"description":"Removes the method identified by _symbol_ from the current\nclass. For an example, see <code>Module.undef_method</code>.\nString arguments are converted to symbols.","name":"remove_method","namespace":"Module","path":"Module#remove_method","type":"instance_method","visibility":"public"},"Module#singleton_class?":{"description":"Returns <code>true</code> if <i>mod</i> is a singleton class or\n<code>false</code> if it is an ordinary class or module.\n\n   class C\n   end\n   C.singleton_class?                  #=> false\n   C.singleton_class.singleton_class?  #=> true","name":"singleton_class?","namespace":"Module","path":"Module#singleton_class?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Module#to_s":{"description":"Returns a string representing this module or class. For basic\nclasses and modules, this is the name. For singletons, we\nshow information on the thing we're attached to as well.","name":"inspect","namespace":"Module","path":"Module#inspect","type":"instance_method","visibility":"public"},"Module#undef_method":{"description":"Prevents the current class from responding to calls to the named\nmethod. Contrast this with <code>remove_method</code>, which deletes\nthe method from the particular class; Ruby will still search\nsuperclasses and mixed-in modules for a possible receiver.\nString arguments are converted to symbols.\n\n   class Parent\n     def hello\n       puts \"In parent\"\n     end\n   end\n   class Child < Parent\n     def hello\n       puts \"In child\"\n     end\n   end\n\n\n   c = Child.new\n   c.hello\n\n\n   class Child\n     remove_method :hello  # remove from child, still in parent\n   end\n   c.hello\n\n\n   class Child\n     undef_method :hello   # prevent any calls to 'hello'\n   end\n   c.hello\n\n<em>produces:</em>\n\n   In child\n   In parent\n   prog.rb:23: undefined method `hello' for #<Child:0x401b3bb4> (NoMethodError)","name":"undef_method","namespace":"Module","path":"Module#undef_method","type":"instance_method","visibility":"public"},"Module#using":{"description":"Import class refinements from <i>module</i> into the current class or\nmodule definition.","name":"using","namespace":"Module","path":"Module#using","type":"instance_method","visibility":"private"},"Module.constants":{"description":"In the first form, returns an array of the names of all\nconstants accessible from the point of call.\nThis list includes the names of all modules and classes\ndefined in the global scope.\n\n   Module.constants.first(4)\n      # => [:ARGF, :ARGV, :ArgumentError, :Array]\n\n   Module.constants.include?(:SEEK_SET)   # => false\n\n   class IO\n     Module.constants.include?(:SEEK_SET) # => true\n   end\n\nThe second form calls the instance method +constants+.","name":"constants","namespace":"Module","path":"Module.constants","type":"class_method","visibility":"public"},"Module.nesting":{"description":"Returns the list of +Modules+ nested at the point of call.\n\n   module M1\n     module M2\n       $a = Module.nesting\n     end\n   end\n   $a           #=> [M1::M2, M1]\n   $a[0].name   #=> \"M1::M2\"","name":"nesting","namespace":"Module","path":"Module.nesting","type":"class_method","visibility":"public"},"Module.used_modules":{"description":"Returns an array of all modules used in the current scope. The ordering\nof modules in the resulting array is not defined.\n\n   module A\n     refine Object do\n     end\n   end\n\n   module B\n     refine Object do\n     end\n   end\n\n   using A\n   using B\n   p Module.used_modules\n\n<em>produces:</em>\n\n   [B, A]","name":"used_modules","namespace":"Module","path":"Module.used_modules","type":"class_method","visibility":"public"},"Class":{"description":"Classes in Ruby are first-class objects---each is an instance of\nclass <code>Class</code>.\n\nTypically, you create a new class by using:\n\n  class Name\n   # some code describing the class behavior\n  end\n\nWhen a new class is created, an object of type Class is initialized and\nassigned to a global constant (<code>Name</code> in this case).\n\nWhen <code>Name.new</code> is called to create a new object, the\n<code>new</code> method in <code>Class</code> is run by default.\nThis can be demonstrated by overriding <code>new</code> in\n<code>Class</code>:\n\n   class Class\n     alias old_new new\n     def new(*args)\n       print \"Creating a new \", self.name, \"\\n\"\n       old_new(*args)\n     end\n   end\n\n   class Name\n   end\n\n   n = Name.new\n\n<em>produces:</em>\n\n   Creating a new Name\n\nClasses, modules, and objects are interrelated. In the diagram\nthat follows, the vertical arrows represent inheritance, and the\nparentheses metaclasses. All metaclasses are instances\nof the class `Class'.\n                           +---------+             +-...\n                           |         |             |\n           BasicObject-----|-->(BasicObject)-------|-...\n               ^           |         ^             |\n               |           |         |             |\n            Object---------|----->(Object)---------|-...\n               ^           |         ^             |\n               |           |         |             |\n               +-------+   |         +--------+    |\n               |       |   |         |        |    |\n               |    Module-|---------|--->(Module)-|-...\n               |       ^   |         |        ^    |\n               |       |   |         |        |    |\n               |     Class-|---------|---->(Class)-|-...\n               |       ^   |         |        ^    |\n               |       +---+         |        +----+\n               |                     |\n  obj--->OtherClass---------->(OtherClass)-----------...","name":"Class","namespace":"","path":"Class","type":"class","visibility":"public"},"Class#allocate":{"description":"Allocates space for a new object of <i>class</i>'s class and does not\ncall initialize on the new instance. The returned object must be an\ninstance of <i>class</i>.\n\n    klass = Class.new do\n      def initialize(*args)\n        @initialized = true\n      end\n\n      def initialized?\n        @initialized || false\n      end\n    end\n\n    klass.allocate.initialized? #=> false","name":"allocate","namespace":"Class","path":"Class#allocate","type":"instance_method","visibility":"public"},"Class#inherited":{"description":"Not documented","name":"inherited","namespace":"Class","path":"Class#inherited","type":"instance_method","visibility":"private"},"Class#initialize":{"description":"Creates a new anonymous (unnamed) class with the given superclass\n(or <code>Object</code> if no parameter is given). You can give a\nclass a name by assigning the class object to a constant.\n\nIf a block is given, it is passed the class object, and the block\nis evaluated in the context of this class like\n<code>class_eval</code>.\n\n   fred = Class.new do\n     def meth1\n       \"hello\"\n     end\n     def meth2\n       \"bye\"\n     end\n   end\n\n   a = fred.new     #=> #<#<Class:0x100381890>:0x100376b98>\n   a.meth1          #=> \"hello\"\n   a.meth2          #=> \"bye\"\n\nAssign the class to a constant (name starting uppercase) if you\nwant to treat it like a regular class.","name":"initialize","namespace":"Class","path":"Class#initialize","type":"instance_method","visibility":"public"},"Class#new":{"description":"Calls <code>allocate</code> to create a new object of\n<i>class</i>'s class, then invokes that object's\n<code>initialize</code> method, passing it <i>args</i>.\nThis is the method that ends up getting called whenever\nan object is constructed using .new.","name":"new","namespace":"Class","path":"Class#new","type":"instance_method","visibility":"public"},"Class#superclass":{"description":"Returns the superclass of <i>class</i>, or <code>nil</code>.\n\n   File.superclass          #=> IO\n   IO.superclass            #=> Object\n   Object.superclass        #=> BasicObject\n   class Foo; end\n   class Bar < Foo; end\n   Bar.superclass           #=> Foo\n\nReturns nil when the given class does not have a parent class:\n\n   BasicObject.superclass   #=> nil","name":"superclass","namespace":"Class","path":"Class#superclass","type":"instance_method","visibility":"public"},"Comparable":{"description":"The <code>Comparable</code> mixin is used by classes whose objects\nmay be ordered. The class must define the <code><=></code> operator,\nwhich compares the receiver against another object, returning -1, 0,\nor +1 depending on whether the receiver is less than, equal to, or\ngreater than the other object. If the other object is not comparable\nthen the <code><=></code> operator should return nil.\n<code>Comparable</code> uses\n<code><=></code> to implement the conventional comparison operators\n(<code><</code>, <code><=</code>, <code>==</code>, <code>>=</code>,\nand <code>></code>) and the method <code>between?</code>.\n\n   class SizeMatters\n     include Comparable\n     attr :str\n     def <=>(other)\n       str.size <=> other.str.size\n     end\n     def initialize(str)\n       @str = str\n     end\n     def inspect\n       @str\n     end\n   end\n\n   s1 = SizeMatters.new(\"Z\")\n   s2 = SizeMatters.new(\"YY\")\n   s3 = SizeMatters.new(\"XXX\")\n   s4 = SizeMatters.new(\"WWWW\")\n   s5 = SizeMatters.new(\"VVVVV\")\n\n   s1 < s2                       #=> true\n   s4.between?(s1, s3)           #=> false\n   s4.between?(s3, s5)           #=> true\n   [ s3, s2, s5, s4, s1 ].sort   #=> [Z, YY, XXX, WWWW, VVVVV]","name":"Comparable","namespace":"","path":"Comparable","type":"module","visibility":"public"},"Comparable#<":{"description":"Compares two objects based on the receiver's <code><=></code>\nmethod, returning true if it returns -1.","name":"<","namespace":"Comparable","path":"Comparable#<","type":"module_function","visibility":"public"},"Comparable#<=":{"description":"Compares two objects based on the receiver's <code><=></code>\nmethod, returning true if it returns -1 or 0.","name":"<=","namespace":"Comparable","path":"Comparable#<=","type":"module_function","visibility":"public"},"Comparable#==":{"description":"Compares two objects based on the receiver's <code><=></code>\nmethod, returning true if it returns 0. Also returns true if\n_obj_ and _other_ are the same object.","name":"==","namespace":"Comparable","path":"Comparable#==","type":"module_function","visibility":"public"},"Comparable#>":{"description":"Compares two objects based on the receiver's <code><=></code>\nmethod, returning true if it returns 1.","name":">","namespace":"Comparable","path":"Comparable#>","type":"module_function","visibility":"public"},"Comparable#>=":{"description":"Compares two objects based on the receiver's <code><=></code>\nmethod, returning true if it returns 0 or 1.","name":">=","namespace":"Comparable","path":"Comparable#>=","type":"module_function","visibility":"public"},"Comparable#between?":{"description":"Returns <code>false</code> if <i>obj</i> <code><=></code>\n<i>min</i> is less than zero or if <i>anObject</i> <code><=></code>\n<i>max</i> is greater than zero, <code>true</code> otherwise.\n\n   3.between?(1, 5)               #=> true\n   6.between?(1, 5)               #=> false\n   'cat'.between?('ant', 'dog')   #=> true\n   'gnu'.between?('ant', 'dog')   #=> false","name":"between?","namespace":"Comparable","path":"Comparable#between?","type":"module_function","visibility":"public","return":[["Boolean"],""]},"Comparable#clamp":{"description":"Returns <i>min</i> if <i>obj</i> <code><=></code> <i>min</i> is less\nthan zero, <i>max</i> if <i>obj</i> <code><=></code> <i>max</i> is\ngreater than zero and <i>obj</i> otherwise.\n\n   12.clamp(0, 100)         #=> 12\n   523.clamp(0, 100)        #=> 100\n   -3.123.clamp(0, 100)     #=> 0\n\n   'd'.clamp('a', 'f')      #=> 'd'\n   'z'.clamp('a', 'f')      #=> 'f'","name":"clamp","namespace":"Comparable","path":"Comparable#clamp","type":"module_function","visibility":"public"},"Complex":{"description":"A complex number can be represented as a paired real number with\nimaginary unit; a+bi.  Where a is real part, b is imaginary part\nand i is imaginary unit.  Real a equals complex a+0i\nmathematically.\n\nComplex object can be created as literal, and also by using\nKernel#Complex, Complex::rect, Complex::polar or to_c method.\n\n   2+1i                 #=> (2+1i)\n   Complex(1)           #=> (1+0i)\n   Complex(2, 3)        #=> (2+3i)\n   Complex.polar(2, 3)  #=> (-1.9799849932008908+0.2822400161197344i)\n   3.to_c               #=> (3+0i)\n\nYou can also create complex object from floating-point numbers or\nstrings.\n\n   Complex(0.3)         #=> (0.3+0i)\n   Complex('0.3-0.5i')  #=> (0.3-0.5i)\n   Complex('2/3+3/4i')  #=> ((2/3)+(3/4)*i)\n   Complex('1@2')       #=> (-0.4161468365471424+0.9092974268256817i)\n\n   0.3.to_c             #=> (0.3+0i)\n   '0.3-0.5i'.to_c      #=> (0.3-0.5i)\n   '2/3+3/4i'.to_c      #=> ((2/3)+(3/4)*i)\n   '1@2'.to_c           #=> (-0.4161468365471424+0.9092974268256817i)\n\nA complex object is either an exact or an inexact number.\n\n   Complex(1, 1) / 2    #=> ((1/2)+(1/2)*i)\n   Complex(1, 1) / 2.0  #=> (0.5+0.5i)","name":"Complex","namespace":"","path":"Complex","type":"class","visibility":"public"},"Complex#*":{"description":"","name":"*","namespace":"Complex","path":"Complex#*","type":"instance_method","visibility":"public"},"Complex#**":{"description":"Performs exponentiation.\n\n   Complex('i') ** 2              #=> (-1+0i)\n   Complex(-8) ** Rational(1, 3)  #=> (1.0000000000000002+1.7320508075688772i)","name":"**","namespace":"Complex","path":"Complex#**","type":"instance_method","visibility":"public"},"Complex#+":{"description":"Performs addition.\n\n   Complex(2, 3)  + Complex(2, 3)   #=> (4+6i)\n   Complex(900)   + Complex(1)      #=> (901+0i)\n   Complex(-2, 9) + Complex(-9, 2)  #=> (-11+11i)\n   Complex(9, 8)  + 4               #=> (13+8i)\n   Complex(20, 9) + 9.8             #=> (29.8+9i)","name":"+","namespace":"Complex","path":"Complex#+","type":"instance_method","visibility":"public"},"Complex#-":{"description":"Performs subtraction.\n\n   Complex(2, 3)  - Complex(2, 3)   #=> (0+0i)\n   Complex(900)   - Complex(1)      #=> (899+0i)\n   Complex(-2, 9) - Complex(-9, 2)  #=> (7+7i)\n   Complex(9, 8)  - 4               #=> (5+8i)\n   Complex(20, 9) - 9.8             #=> (10.2+9i)","name":"-","namespace":"Complex","path":"Complex#-","type":"instance_method","visibility":"public"},"Complex#-@":{"description":"Returns negation of the value.\n\n   -Complex(1, 2)  #=> (-1-2i)","name":"-@","namespace":"Complex","path":"Complex#-@","type":"instance_method","visibility":"public"},"Complex#/":{"description":"Performs division.\n\n   Complex(2, 3)  / Complex(2, 3)   #=> ((1/1)+(0/1)*i)\n   Complex(900)   / Complex(1)      #=> ((900/1)+(0/1)*i)\n   Complex(-2, 9) / Complex(-9, 2)  #=> ((36/85)-(77/85)*i)\n   Complex(9, 8)  / 4               #=> ((9/4)+(2/1)*i)\n   Complex(20, 9) / 9.8             #=> (2.0408163265306123+0.9183673469387754i)","name":"/","namespace":"Complex","path":"Complex#/","type":"instance_method","visibility":"public"},"Complex#==":{"description":"Returns true if cmp equals object numerically.\n\n   Complex(2, 3)  == Complex(2, 3)   #=> true\n   Complex(5)     == 5               #=> true\n   Complex(0)     == 0.0             #=> true\n   Complex('1/3') == 0.33            #=> false\n   Complex('1/2') == '1/2'           #=> false","name":"==","namespace":"Complex","path":"Complex#==","type":"instance_method","visibility":"public"},"Complex#abs":{"description":"Returns the absolute part of its polar form.\n\n   Complex(-1).abs         #=> 1\n   Complex(3.0, -4.0).abs  #=> 5.0","name":"abs","namespace":"Complex","path":"Complex#abs","type":"instance_method","visibility":"public"},"Complex#abs2":{"description":"Returns square of the absolute value.\n\n   Complex(-1).abs2         #=> 1\n   Complex(3.0, -4.0).abs2  #=> 25.0","name":"abs2","namespace":"Complex","path":"Complex#abs2","type":"instance_method","visibility":"public"},"Complex#angle":{"description":"Returns the angle part of its polar form.\n\n   Complex.polar(3, Math::PI/2).arg  #=> 1.5707963267948966","name":"angle","namespace":"Complex","path":"Complex#angle","type":"instance_method","visibility":"public"},"Complex#arg":{"description":"Returns the angle part of its polar form.\n\n   Complex.polar(3, Math::PI/2).arg  #=> 1.5707963267948966","name":"arg","namespace":"Complex","path":"Complex#arg","type":"instance_method","visibility":"public"},"Complex#coerce":{"description":":nodoc:","name":"coerce","namespace":"Complex","path":"Complex#coerce","type":"instance_method","visibility":"public"},"Complex#complex?":{"description":":nodoc:","name":"complex?","namespace":"Complex","path":"Complex#complex?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Complex#conj":{"description":"Returns the complex conjugate.\n\n   Complex(1, 2).conjugate  #=> (1-2i)","name":"conj","namespace":"Complex","path":"Complex#conj","type":"instance_method","visibility":"public"},"Complex#conjugate":{"description":"Returns the complex conjugate.\n\n   Complex(1, 2).conjugate  #=> (1-2i)","name":"conjugate","namespace":"Complex","path":"Complex#conjugate","type":"instance_method","visibility":"public"},"Complex#denominator":{"description":"Returns the denominator (lcm of both denominator - real and imag).\n\nSee numerator.","name":"denominator","namespace":"Complex","path":"Complex#denominator","type":"instance_method","visibility":"public"},"Complex#eql?":{"description":":nodoc:","name":"eql?","namespace":"Complex","path":"Complex#eql?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Complex#exact?":{"description":":nodoc:","name":"exact?","namespace":"Complex","path":"Complex#exact?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Complex#fdiv":{"description":"Performs division as each part is a float, never returns a float.\n\n   Complex(11, 22).fdiv(3)  #=> (3.6666666666666665+7.333333333333333i)","name":"fdiv","namespace":"Complex","path":"Complex#fdiv","type":"instance_method","visibility":"public"},"Complex#finite?":{"description":"Returns +true+ if +cmp+'s magnitude is a finite number,\notherwise returns +false+.","name":"finite?","namespace":"Complex","path":"Complex#finite?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Complex#hash":{"description":":nodoc:","name":"hash","namespace":"Complex","path":"Complex#hash","type":"instance_method","visibility":"public"},"Complex#imag":{"description":"Returns the imaginary part.\n\n   Complex(7).imaginary      #=> 0\n   Complex(9, -4).imaginary  #=> -4","name":"imag","namespace":"Complex","path":"Complex#imag","type":"instance_method","visibility":"public"},"Complex#imaginary":{"description":"Returns the imaginary part.\n\n   Complex(7).imaginary      #=> 0\n   Complex(9, -4).imaginary  #=> -4","name":"imaginary","namespace":"Complex","path":"Complex#imaginary","type":"instance_method","visibility":"public"},"Complex#inexact?":{"description":":nodoc:","name":"inexact?","namespace":"Complex","path":"Complex#inexact?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Complex#infinite?":{"description":"Returns values corresponding to the value of +cmp+'s magnitude:\n\n+finite+::    +nil+\n++Infinity+:: ++1+\n\n For example:\n\n    (1+1i).infinite?                   #=> nil\n    (Float::INFINITY + 1i).infinite?   #=> 1","name":"infinite?","namespace":"Complex","path":"Complex#infinite?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Complex#inspect":{"description":"Returns the value as a string for inspection.\n\n   Complex(2).inspect                       #=> \"(2+0i)\"\n   Complex('-8/6').inspect                  #=> \"((-4/3)+0i)\"\n   Complex('1/2i').inspect                  #=> \"(0+(1/2)*i)\"\n   Complex(0, Float::INFINITY).inspect      #=> \"(0+Infinity*i)\"\n   Complex(Float::NAN, Float::NAN).inspect  #=> \"(NaN+NaN*i)\"","name":"inspect","namespace":"Complex","path":"Complex#inspect","type":"instance_method","visibility":"public"},"Complex#magnitude":{"description":"Returns the absolute part of its polar form.\n\n   Complex(-1).abs         #=> 1\n   Complex(3.0, -4.0).abs  #=> 5.0","name":"magnitude","namespace":"Complex","path":"Complex#magnitude","type":"instance_method","visibility":"public"},"Complex#marshal_dump":{"description":":nodoc:","name":"marshal_dump","namespace":"Complex","path":"Complex#marshal_dump","type":"instance_method","visibility":"private"},"Complex#numerator":{"description":"Returns the numerator.\n\n       1   2       3+4i  <-  numerator\n       - + -i  ->  ----\n       2   3        6    <-  denominator\n\n   c = Complex('1/2+2/3i')  #=> ((1/2)+(2/3)*i)\n   n = c.numerator          #=> (3+4i)\n   d = c.denominator        #=> 6\n   n / d                    #=> ((1/2)+(2/3)*i)\n   Complex(Rational(n.real, d), Rational(n.imag, d))\n                            #=> ((1/2)+(2/3)*i)\nSee denominator.","name":"numerator","namespace":"Complex","path":"Complex#numerator","type":"instance_method","visibility":"public"},"Complex#phase":{"description":"Returns the angle part of its polar form.\n\n   Complex.polar(3, Math::PI/2).arg  #=> 1.5707963267948966","name":"phase","namespace":"Complex","path":"Complex#phase","type":"instance_method","visibility":"public"},"Complex#polar":{"description":"Returns an array; [cmp.abs, cmp.arg].\n\n   Complex(1, 2).polar  #=> [2.23606797749979, 1.1071487177940904]","name":"polar","namespace":"Complex","path":"Complex#polar","type":"instance_method","visibility":"public"},"Complex#quo":{"description":"","name":"quo","namespace":"Complex","path":"Complex#quo","type":"instance_method","visibility":"public"},"Complex#rationalize":{"description":"Returns the value as a rational if possible (the imaginary part\nshould be exactly zero).\n\n   Complex(1.0/3, 0).rationalize  #=> (1/3)\n   Complex(1, 0.0).rationalize    # RangeError\n   Complex(1, 2).rationalize      # RangeError\n\nSee to_r.","name":"rationalize","namespace":"Complex","path":"Complex#rationalize","type":"instance_method","visibility":"public"},"Complex#real":{"description":"Returns the real part.\n\n   Complex(7).real      #=> 7\n   Complex(9, -4).real  #=> 9","name":"real","namespace":"Complex","path":"Complex#real","type":"instance_method","visibility":"public"},"Complex#real?":{"description":"Returns false.","name":"real?","namespace":"Complex","path":"Complex#real?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Complex#rect":{"description":"Returns an array; [cmp.real, cmp.imag].\n\n   Complex(1, 2).rectangular  #=> [1, 2]","name":"rect","namespace":"Complex","path":"Complex#rect","type":"instance_method","visibility":"public"},"Complex#rectangular":{"description":"Returns an array; [cmp.real, cmp.imag].\n\n   Complex(1, 2).rectangular  #=> [1, 2]","name":"rectangular","namespace":"Complex","path":"Complex#rectangular","type":"instance_method","visibility":"public"},"Complex#to_c":{"description":"Returns self.\n\n   Complex(2).to_c      #=> (2+0i)\n   Complex(-8, 6).to_c  #=> (-8+6i)","name":"to_c","namespace":"Complex","path":"Complex#to_c","type":"instance_method","visibility":"public"},"Complex#to_f":{"description":"Returns the value as a float if possible (the imaginary part should\nbe exactly zero).\n\n   Complex(1, 0).to_f    #=> 1.0\n   Complex(1, 0.0).to_f  # RangeError\n   Complex(1, 2).to_f    # RangeError","name":"to_f","namespace":"Complex","path":"Complex#to_f","type":"instance_method","visibility":"public"},"Complex#to_i":{"description":"Returns the value as an integer if possible (the imaginary part\nshould be exactly zero).\n\n   Complex(1, 0).to_i    #=> 1\n   Complex(1, 0.0).to_i  # RangeError\n   Complex(1, 2).to_i    # RangeError","name":"to_i","namespace":"Complex","path":"Complex#to_i","type":"instance_method","visibility":"public"},"Complex#to_r":{"description":"Returns the value as a rational if possible (the imaginary part\nshould be exactly zero).\n\n   Complex(1, 0).to_r    #=> (1/1)\n   Complex(1, 0.0).to_r  # RangeError\n   Complex(1, 2).to_r    # RangeError\n\nSee rationalize.","name":"to_r","namespace":"Complex","path":"Complex#to_r","type":"instance_method","visibility":"public"},"Complex#to_s":{"description":"Returns the value as a string.\n\n   Complex(2).to_s                       #=> \"2+0i\"\n   Complex('-8/6').to_s                  #=> \"-4/3+0i\"\n   Complex('1/2i').to_s                  #=> \"0+1/2i\"\n   Complex(0, Float::INFINITY).to_s      #=> \"0+Infinity*i\"\n   Complex(Float::NAN, Float::NAN).to_s  #=> \"NaN+NaN*i\"","name":"to_s","namespace":"Complex","path":"Complex#to_s","type":"instance_method","visibility":"public"},"Complex#~":{"description":"Returns the complex conjugate.\n\n   Complex(1, 2).conjugate  #=> (1-2i)","name":"~","namespace":"Complex","path":"Complex#~","type":"instance_method","visibility":"public"},"Complex.polar":{"description":"Returns a complex object which denotes the given polar form.\n\n   Complex.polar(3, 0)            #=> (3.0+0.0i)\n   Complex.polar(3, Math::PI/2)   #=> (1.836909530733566e-16+3.0i)\n   Complex.polar(3, Math::PI)     #=> (-3.0+3.673819061467132e-16i)\n   Complex.polar(3, -Math::PI/2)  #=> (1.836909530733566e-16-3.0i)","name":"polar","namespace":"Complex","path":"Complex.polar","type":"class_method","visibility":"public"},"Complex.rect":{"description":"Returns a complex object which denotes the given rectangular form.\n\n   Complex.rectangular(1, 2)  #=> (1+2i)","name":"rect","namespace":"Complex","path":"Complex.rect","type":"class_method","visibility":"public"},"Complex.rectangular":{"description":"Returns a complex object which denotes the given rectangular form.\n\n   Complex.rectangular(1, 2)  #=> (1+2i)","name":"rectangular","namespace":"Complex","path":"Complex.rectangular","type":"class_method","visibility":"public"},"Complex::I":{"description":"The imaginary unit.","name":"I","namespace":"Complex","path":"Complex::I","type":"constant","return":["Complex",""],"visibility":"public"},"Complex::compatible":{"description":"","name":"compatible","namespace":"Complex","path":"Complex::compatible","type":"class","visibility":"public"},"Complex::compatible#marshal_load":{"description":":nodoc:","name":"marshal_load","namespace":"Complex::compatible","path":"Complex::compatible#marshal_load","type":"instance_method","visibility":"private"},"Kernel":{"description":"The Kernel module is included by class Object, so its methods are\navailable in every Ruby object.\n\nThe Kernel instance methods are documented in class Object while the\nmodule methods are documented here.  These methods are called without a\nreceiver and thus can be called in functional form:\n\n  sprintf \"%.1f\", 1.234 #=> \"1.2\"","name":"Kernel","namespace":"","path":"Kernel","type":"module","visibility":"public"},"Kernel#Array":{"description":"Returns +arg+ as an Array.\n\nFirst tries to call <code>to_ary</code> on +arg+, then <code>to_a</code>.\nIf +arg+ does not respond to <code>to_ary</code> or <code>to_a</code>,\nreturns an Array of length 1 containing +arg+.\n\nIf <code>to_ary</code> or <code>to_a</code> returns something other than\nan Array, raises a <code>TypeError</code>.\n\n   Array([\"a\", \"b\"])  #=> [\"a\", \"b\"]\n   Array(1..5)        #=> [1, 2, 3, 4, 5]\n   Array(key: :value) #=> [[:key, :value]]\n   Array(nil)         #=> []\n   Array(1)           #=> [1]","name":"Array","namespace":"Kernel","path":"Kernel#Array","type":"module_function","visibility":"public"},"Kernel#Complex":{"description":"Returns x+i*y;\n\n   Complex(1, 2)    #=> (1+2i)\n   Complex('1+2i')  #=> (1+2i)\n   Complex(nil)     #=> TypeError\n   Complex(1, nil)  #=> TypeError\n\nSyntax of string form:\n\n  string form = extra spaces , complex , extra spaces ;\n  complex = real part | [ sign ] , imaginary part\n          | real part , sign , imaginary part\n          | rational , \"@\" , rational ;\n  real part = rational ;\n  imaginary part = imaginary unit | unsigned rational , imaginary unit ;\n  rational = [ sign ] , unsigned rational ;\n  unsigned rational = numerator | numerator , \"/\" , denominator ;\n  numerator = integer part | fractional part | integer part , fractional part ;\n  denominator = digits ;\n  integer part = digits ;\n  fractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\n  imaginary unit = \"i\" | \"I\" | \"j\" | \"J\" ;\n  sign = \"-\" | \"+\" ;\n  digits = digit , { digit | \"_\" , digit };\n  digit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\n  extra spaces = ? \\s* ? ;\n\nSee String#to_c.","name":"Complex","namespace":"Kernel","path":"Kernel#Complex","type":"module_function","visibility":"public"},"Kernel#Float":{"description":"Returns <i>arg</i> converted to a float. Numeric types are converted\ndirectly, and with exception to string and nil the rest are converted using <i>arg</i>.to_f.\nConverting a <code>string</code> with invalid characters will result in a <code>ArgumentError</code>.\nConverting <code>nil</code> generates a <code>TypeError</code>.\n\n   Float(1)                 #=> 1.0\n   Float(\"123.456\")         #=> 123.456\n   Float(\"123.0_badstring\") #=> ArgumentError: invalid value for Float(): \"123.0_badstring\"\n   Float(nil)               #=> TypeError: can't convert nil into Float","name":"Float","namespace":"Kernel","path":"Kernel#Float","type":"module_function","visibility":"public"},"Kernel#Hash":{"description":"Converts <i>arg</i> to a <code>Hash</code> by calling\n<i>arg</i><code>.to_hash</code>. Returns an empty <code>Hash</code> when\n<i>arg</i> is <tt>nil</tt> or <tt>[]</tt>.\n\n   Hash([])          #=> {}\n   Hash(nil)         #=> {}\n   Hash(key: :value) #=> {:key => :value}\n   Hash([1, 2, 3])   #=> TypeError","name":"Hash","namespace":"Kernel","path":"Kernel#Hash","type":"module_function","visibility":"public"},"Kernel#Integer":{"description":"Converts <i>arg</i> to an <code>Integer</code>.\nNumeric types are converted directly (with floating point numbers\nbeing truncated).  <i>base</i> (0, or between 2 and 36) is a base for\ninteger string representation.  If <i>arg</i> is a <code>String</code>,\nwhen <i>base</i> is omitted or equals zero, radix indicators\n(<code>0</code>, <code>0b</code>, and <code>0x</code>) are honored.\nIn any case, strings should be strictly conformed to numeric\nrepresentation. This behavior is different from that of\n<code>String#to_i</code>.  Non string values will be converted by first\ntrying <code>to_int</code>, then <code>to_i</code>. Passing <code>nil</code>\nraises a TypeError.\n\n   Integer(123.999)    #=> 123\n   Integer(\"0x1a\")     #=> 26\n   Integer(Time.new)   #=> 1204973019\n   Integer(\"0930\", 10) #=> 930\n   Integer(\"111\", 2)   #=> 7\n   Integer(nil)        #=> TypeError","name":"Integer","namespace":"Kernel","path":"Kernel#Integer","type":"module_function","visibility":"public"},"Kernel#Rational":{"description":"Returns +x/y+ or +arg+ as a Rational.\n\n   Rational(2, 3)   #=> (2/3)\n   Rational(5)      #=> (5/1)\n   Rational(0.5)    #=> (1/2)\n   Rational(0.3)    #=> (5404319552844595/18014398509481984)\n\n   Rational(\"2/3\")  #=> (2/3)\n   Rational(\"0.3\")  #=> (3/10)\n\n   Rational(\"10 cents\")  #=> ArgumentError\n   Rational(nil)         #=> TypeError\n   Rational(1, nil)      #=> TypeError\n\nSyntax of the string form:\n\n  string form = extra spaces , rational , extra spaces ;\n  rational = [ sign ] , unsigned rational ;\n  unsigned rational = numerator | numerator , \"/\" , denominator ;\n  numerator = integer part | fractional part | integer part , fractional part ;\n  denominator = digits ;\n  integer part = digits ;\n  fractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\n  sign = \"-\" | \"+\" ;\n  digits = digit , { digit | \"_\" , digit } ;\n  digit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\n  extra spaces = ? \\s* ? ;\n\nSee also String#to_r.","name":"Rational","namespace":"Kernel","path":"Kernel#Rational","type":"module_function","visibility":"public"},"Kernel#String":{"description":"Returns <i>arg</i> as a <code>String</code>.\n\nFirst tries to call its <code>to_str</code> method, then its <code>to_s</code> method.\n\n   String(self)        #=> \"main\"\n   String(self.class)  #=> \"Object\"\n   String(123456)      #=> \"123456\"","name":"String","namespace":"Kernel","path":"Kernel#String","type":"module_function","visibility":"public"},"Kernel#__callee__":{"description":"Returns the called name of the current method as a Symbol.\nIf called outside of a method, it returns <code>nil</code>.","name":"__callee__","namespace":"Kernel","path":"Kernel#__callee__","type":"module_function","visibility":"public"},"Kernel#__dir__":{"description":"Returns the canonicalized absolute path of the directory of the file from\nwhich this method is called. It means symlinks in the path is resolved.\nIf <code>__FILE__</code> is <code>nil</code>, it returns <code>nil</code>.\nThe return value equals to <code>File.dirname(File.realpath(__FILE__))</code>.","name":"__dir__","namespace":"Kernel","path":"Kernel#__dir__","type":"module_function","visibility":"public"},"Kernel#__method__":{"description":"Returns the name at the definition of the current method as a\nSymbol.\nIf called outside of a method, it returns <code>nil</code>.","name":"__method__","namespace":"Kernel","path":"Kernel#__method__","type":"module_function","visibility":"public"},"Kernel#`":{"description":"Returns the standard output of running _cmd_ in a subshell.\nThe built-in syntax <code>%x{...}</code> uses\nthis method. Sets <code>$?</code> to the process status.\n\n   `date`                   #=> \"Wed Apr  9 08:56:30 CDT 2003\\n\"\n   `ls testdir`.split[1]    #=> \"main.rb\"\n   `echo oops && exit 99`   #=> \"oops\\n\"\n   $?.exitstatus            #=> 99","name":"`","namespace":"Kernel","path":"Kernel#`","type":"module_function","visibility":"public"},"Kernel#abort":{"description":"Terminate execution immediately, effectively by calling\n<code>Kernel.exit(false)</code>. If _msg_ is given, it is written\nto STDERR prior to terminating.","name":"abort","namespace":"Kernel","path":"Kernel#abort","type":"module_function","visibility":"public"},"Kernel#at_exit":{"description":"Converts _block_ to a +Proc+ object (and therefore\nbinds it at the point of call) and registers it for execution when\nthe program exits. If multiple handlers are registered, they are\nexecuted in reverse order of registration.\n\n   def do_at_exit(str1)\n     at_exit { print str1 }\n   end\n   at_exit { puts \"cruel world\" }\n   do_at_exit(\"goodbye \")\n   exit\n\n<em>produces:</em>\n\n   goodbye cruel world","name":"at_exit","namespace":"Kernel","path":"Kernel#at_exit","type":"module_function","visibility":"public"},"Kernel#autoload":{"description":"Registers _filename_ to be loaded (using <code>Kernel::require</code>)\nthe first time that _module_ (which may be a <code>String</code> or\na symbol) is accessed.\n\n   autoload(:MyModule, \"/usr/local/lib/modules/my_module.rb\")","name":"autoload","namespace":"Kernel","path":"Kernel#autoload","type":"module_function","visibility":"public"},"Kernel#autoload?":{"description":"Returns _filename_ to be loaded if _name_ is registered as\n+autoload+.\n\n   autoload(:B, \"b\")\n   autoload?(:B)            #=> \"b\"","name":"autoload?","namespace":"Kernel","path":"Kernel#autoload?","type":"module_function","visibility":"public","return":[["Boolean"],""]},"Kernel#binding":{"description":"Returns a +Binding+ object, describing the variable and\nmethod bindings at the point of call. This object can be used when\ncalling +eval+ to execute the evaluated command in this\nenvironment. See also the description of class +Binding+.\n\n   def get_binding(param)\n     binding\n   end\n   b = get_binding(\"hello\")\n   eval(\"param\", b)   #=> \"hello\"","name":"binding","namespace":"Kernel","path":"Kernel#binding","type":"module_function","visibility":"public"},"Kernel#block_given?":{"description":"Returns <code>true</code> if <code>yield</code> would execute a\nblock in the current context. The <code>iterator?</code> form\nis mildly deprecated.\n\n   def try\n     if block_given?\n       yield\n     else\n       \"no block\"\n     end\n   end\n   try                  #=> \"no block\"\n   try { \"hello\" }      #=> \"hello\"\n   try do \"hello\" end   #=> \"hello\"","name":"block_given?","namespace":"Kernel","path":"Kernel#block_given?","type":"module_function","visibility":"public","return":[["Boolean"],""]},"Kernel#callcc":{"description":"Generates a Continuation object, which it passes to\nthe associated block. You need to <code>require\n'continuation'</code> before using this method. Performing a\n<em>cont</em><code>.call</code> will cause the #callcc\nto return (as will falling through the end of the block). The\nvalue returned by the #callcc is the value of the\nblock, or the value passed to <em>cont</em><code>.call</code>. See\nclass Continuation for more details. Also see\nKernel#throw for an alternative mechanism for\nunwinding a call stack.","name":"callcc","namespace":"Kernel","path":"Kernel#callcc","type":"module_function","visibility":"public"},"Kernel#caller":{"description":"Returns the current execution stack---an array containing strings in\nthe form <code>file:line</code> or <code>file:line: in\n`method'</code>.\n\nThe optional _start_ parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional +length+ parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns +nil+ if _start_ is greater than the size of\ncurrent execution stack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n   def a(skip)\n     caller(skip)\n   end\n   def b(skip)\n     a(skip)\n   end\n   def c(skip)\n     b(skip)\n   end\n   c(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\n   c(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\n   c(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\n   c(3)   #=> [\"prog:13:in `<main>'\"]\n   c(4)   #=> []\n   c(5)   #=> nil","name":"caller","namespace":"Kernel","path":"Kernel#caller","type":"module_function","visibility":"public"},"Kernel#caller_locations":{"description":"Returns the current execution stack---an array containing\nbacktrace location objects.\n\nSee Thread::Backtrace::Location for more information.\n\nThe optional _start_ parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional +length+ parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns +nil+ if _start_ is greater than the size of\ncurrent execution stack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.","name":"caller_locations","namespace":"Kernel","path":"Kernel#caller_locations","type":"module_function","visibility":"public"},"Kernel#catch":{"description":"+catch+ executes its block. If +throw+ is not called, the block executes\nnormally, and +catch+ returns the value of the last expression evaluated.\n\n   catch(1) { 123 }            # => 123\n\nIf <code>throw(tag2, val)</code> is called, Ruby searches up its stack for\na +catch+ block whose +tag+ has the same +object_id+ as _tag2_. When found,\nthe block stops executing and returns _val_ (or +nil+ if no second argument\nwas given to +throw+).\n\n   catch(1) { throw(1, 456) }  # => 456\n   catch(1) { throw(1) }       # => nil\n\nWhen +tag+ is passed as the first argument, +catch+ yields it as the\nparameter of the block.\n\n   catch(1) {|x| x + 2 }       # => 3\n\nWhen no +tag+ is given, +catch+ yields a new unique object (as from\n+Object.new+) as the block parameter. This object can then be used as the\nargument to +throw+, and will match the correct +catch+ block.\n\n   catch do |obj_A|\n     catch do |obj_B|\n       throw(obj_B, 123)\n       puts \"This puts is not reached\"\n     end\n\n     puts \"This puts is displayed\"\n     456\n   end\n\n   # => 456\n\n   catch do |obj_A|\n     catch do |obj_B|\n       throw(obj_A, 123)\n       puts \"This puts is still not reached\"\n     end\n\n     puts \"Now this puts is also not reached\"\n     456\n   end\n\n   # => 123","name":"catch","namespace":"Kernel","path":"Kernel#catch","type":"module_function","visibility":"public"},"Kernel#eval":{"description":"Evaluates the Ruby expression(s) in <em>string</em>. If\n<em>binding</em> is given, which must be a <code>Binding</code>\nobject, the evaluation is performed in its context. If the\noptional <em>filename</em> and <em>lineno</em> parameters are\npresent, they will be used when reporting syntax errors.\n\n   def get_binding(str)\n     return binding\n   end\n   str = \"hello\"\n   eval \"str + ' Fred'\"                      #=> \"hello Fred\"\n   eval \"str + ' Fred'\", get_binding(\"bye\")  #=> \"bye Fred\"","name":"eval","namespace":"Kernel","path":"Kernel#eval","type":"module_function","visibility":"public"},"Kernel#exec":{"description":"Replaces the current process by running the given external _command_, which\ncan take one of the following forms:\n\n[<code>exec(commandline)</code>]\ncommand line string which is passed to the standard shell\n[<code>exec(cmdname, arg1, ...)</code>]\ncommand name and one or more arguments (no shell)\n[<code>exec([cmdname, argv0], arg1, ...)</code>]\ncommand name, argv[0] and zero or more arguments (no shell)\n\nIn the first form, the string is taken as a command line that is subject to\nshell expansion before being executed.\n\nThe standard shell always means <code>\"/bin/sh\"</code> on Unix-like systems,\nsame as <code>ENV[\"RUBYSHELL\"]</code>\n(or <code>ENV[\"COMSPEC\"]</code> on Windows NT series), and similar.\n\nIf the string from the first form (<code>exec(\"command\")</code>) follows\nthese simple rules:\n\n* no meta characters\n* no shell reserved word and no special built-in\n* Ruby invokes the command directly without shell\n\nYou can force shell invocation by adding \";\" to the string (because \";\" is\na meta character).\n\nNote that this behavior is observable by pid obtained\n(return value of spawn() and IO#pid for IO.popen) is the pid of the invoked\ncommand, not shell.\n\nIn the second form (<code>exec(\"command1\", \"arg1\", ...)</code>), the first\nis taken as a command name and the rest are passed as parameters to command\nwith no shell expansion.\n\nIn the third form (<code>exec([\"command\", \"argv0\"], \"arg1\", ...)</code>),\nstarting a two-element array at the beginning of the command, the first\nelement is the command to be executed, and the second argument is used as\nthe <code>argv[0]</code> value, which may show up in process listings.\n\nIn order to execute the command, one of the <code>exec(2)</code> system\ncalls are used, so the running command may inherit some of the environment\nof the original program (including open file descriptors).\n\nThis behavior is modified by the given +env+ and +options+ parameters. See\n::spawn for details.\n\nIf the command fails to execute (typically <code>Errno::ENOENT</code> when\nit was not found) a SystemCallError exception is raised.\n\nThis method modifies process attributes according to given +options+ before\n<code>exec(2)</code> system call. See ::spawn for more details about the\ngiven +options+.\n\nThe modified attributes may be retained when <code>exec(2)</code> system\ncall fails.\n\nFor example, hard resource limits are not restorable.\n\nConsider to create a child process using ::spawn or Kernel#system if this\nis not acceptable.\n\n   exec \"echo *\"       # echoes list of files in current directory\n   # never get here\n\n   exec \"echo\", \"*\"    # echoes an asterisk\n   # never get here","name":"exec","namespace":"Kernel","path":"Kernel#exec","type":"module_function","visibility":"public"},"Kernel#exit":{"description":"Initiates the termination of the Ruby script by raising the\n<code>SystemExit</code> exception. This exception may be caught. The\noptional parameter is used to return a status code to the invoking\nenvironment.\n+true+ and +FALSE+ of _status_ means success and failure\nrespectively.  The interpretation of other integer values are\nsystem dependent.\n\n   begin\n     exit\n     puts \"never get here\"\n   rescue SystemExit\n     puts \"rescued a SystemExit exception\"\n   end\n   puts \"after begin block\"\n\n<em>produces:</em>\n\n   rescued a SystemExit exception\n   after begin block\n\nJust prior to termination, Ruby executes any <code>at_exit</code> functions\n(see Kernel::at_exit) and runs any object finalizers (see\nObjectSpace::define_finalizer).\n\n   at_exit { puts \"at_exit function\" }\n   ObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\n   exit\n\n<em>produces:</em>\n\n   at_exit function\n   in finalizer","name":"exit","namespace":"Kernel","path":"Kernel#exit","type":"module_function","visibility":"public"},"Kernel#exit!":{"description":"Exits the process immediately. No exit handlers are\nrun. <em>status</em> is returned to the underlying system as the\nexit status.\n\n   Process.exit!(true)","name":"exit!","namespace":"Kernel","path":"Kernel#exit!","type":"module_function","visibility":"public"},"Kernel#fail":{"description":"With no arguments, raises the exception in <code>$!</code> or raises\na <code>RuntimeError</code> if <code>$!</code> is +nil+.\nWith a single +String+ argument, raises a\n+RuntimeError+ with the string as a message. Otherwise,\nthe first parameter should be the name of an +Exception+\nclass (or an object that returns an +Exception+ object when sent\nan +exception+ message). The optional second parameter sets the\nmessage associated with the exception, and the third parameter is an\narray of callback information. Exceptions are caught by the\n+rescue+ clause of <code>begin...end</code> blocks.\n\n   raise \"Failed to create socket\"\n   raise ArgumentError, \"No parameters\", caller","name":"fail","namespace":"Kernel","path":"Kernel#fail","type":"module_function","visibility":"public"},"Kernel#fork":{"description":"Creates a subprocess. If a block is specified, that block is run\nin the subprocess, and the subprocess terminates with a status of\nzero. Otherwise, the +fork+ call returns twice, once in\nthe parent, returning the process ID of the child, and once in\nthe child, returning _nil_. The child process can exit using\n<code>Kernel.exit!</code> to avoid running any\n<code>at_exit</code> functions. The parent process should\nuse <code>Process.wait</code> to collect the termination statuses\nof its children or use <code>Process.detach</code> to register\ndisinterest in their status; otherwise, the operating system\nmay accumulate zombie processes.\n\nThe thread calling fork is the only thread in the created child process.\nfork doesn't copy other threads.\n\nIf fork is not usable, Process.respond_to?(:fork) returns false.\n\nNote that fork(2) is not available on some platforms like Windows and NetBSD 4.\nTherefore you should use spawn() instead of fork().","name":"fork","namespace":"Kernel","path":"Kernel#fork","type":"module_function","visibility":"public"},"Kernel#format":{"description":"Returns the string resulting from applying <i>format_string</i> to\nany additional arguments.  Within the format string, any characters\nother than format sequences are copied to the result.\n\nThe syntax of a format sequence is follows.\n\n  %[flags][width][.precision]type\n\nA format\nsequence consists of a percent sign, followed by optional flags,\nwidth, and precision indicators, then terminated with a field type\ncharacter.  The field type controls how the corresponding\n<code>sprintf</code> argument is to be interpreted, while the flags\nmodify that interpretation.\n\nThe field type characters are:\n\n    Field |  Integer Format\n    ------+--------------------------------------------------------------\n      b   | Convert argument as a binary number.\n          | Negative numbers will be displayed as a two's complement\n          | prefixed with `..1'.\n      B   | Equivalent to `b', but uses an uppercase 0B for prefix\n          | in the alternative format by #.\n      d   | Convert argument as a decimal number.\n      i   | Identical to `d'.\n      o   | Convert argument as an octal number.\n          | Negative numbers will be displayed as a two's complement\n          | prefixed with `..7'.\n      u   | Identical to `d'.\n      x   | Convert argument as a hexadecimal number.\n          | Negative numbers will be displayed as a two's complement\n          | prefixed with `..f' (representing an infinite string of\n          | leading 'ff's).\n      X   | Equivalent to `x', but uses uppercase letters.\n\n    Field |  Float Format\n    ------+--------------------------------------------------------------\n      e   | Convert floating point argument into exponential notation\n          | with one digit before the decimal point as [-]d.dddddde[+-]dd.\n          | The precision specifies the number of digits after the decimal\n          | point (defaulting to six).\n      E   | Equivalent to `e', but uses an uppercase E to indicate\n          | the exponent.\n      f   | Convert floating point argument as [-]ddd.dddddd,\n          | where the precision specifies the number of digits after\n          | the decimal point.\n      g   | Convert a floating point number using exponential form\n          | if the exponent is less than -4 or greater than or\n          | equal to the precision, or in dd.dddd form otherwise.\n          | The precision specifies the number of significant digits.\n      G   | Equivalent to `g', but use an uppercase `E' in exponent form.\n      a   | Convert floating point argument as [-]0xh.hhhhp[+-]dd,\n          | which is consisted from optional sign, \"0x\", fraction part\n          | as hexadecimal, \"p\", and exponential part as decimal.\n      A   | Equivalent to `a', but use uppercase `X' and `P'.\n\n    Field |  Other Format\n    ------+--------------------------------------------------------------\n      c   | Argument is the numeric code for a single character or\n          | a single character string itself.\n      p   | The valuing of argument.inspect.\n      s   | Argument is a string to be substituted.  If the format\n          | sequence contains a precision, at most that many characters\n          | will be copied.\n      %   | A percent sign itself will be displayed.  No argument taken.\n\nThe flags modifies the behavior of the formats.\nThe flag characters are:\n\n  Flag     | Applies to    | Meaning\n  ---------+---------------+-----------------------------------------\n  space    | bBdiouxX      | Leave a space at the start of\n           | aAeEfgG       | non-negative numbers.\n           | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n           |               | a minus sign with absolute value for\n           |               | negative values.\n  ---------+---------------+-----------------------------------------\n  (digit)$ | all           | Specifies the absolute argument number\n           |               | for this field.  Absolute and relative\n           |               | argument numbers cannot be mixed in a\n           |               | sprintf string.\n  ---------+---------------+-----------------------------------------\n   #       | bBoxX         | Use an alternative format.\n           | aAeEfgG       | For the conversions `o', increase the precision\n           |               | until the first digit will be `0' if\n           |               | it is not formatted as complements.\n           |               | For the conversions `x', `X', `b' and `B'\n           |               | on non-zero, prefix the result with ``0x'',\n           |               | ``0X'', ``0b'' and ``0B'', respectively.\n           |               | For `a', `A', `e', `E', `f', `g', and 'G',\n           |               | force a decimal point to be added,\n           |               | even if no digits follow.\n           |               | For `g' and 'G', do not remove trailing zeros.\n  ---------+---------------+-----------------------------------------\n  +        | bBdiouxX      | Add a leading plus sign to non-negative\n           | aAeEfgG       | numbers.\n           | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n           |               | a minus sign with absolute value for\n           |               | negative values.\n  ---------+---------------+-----------------------------------------\n  -        | all           | Left-justify the result of this conversion.\n  ---------+---------------+-----------------------------------------\n  0 (zero) | bBdiouxX      | Pad with zeros, not spaces.\n           | aAeEfgG       | For `o', `x', `X', `b' and `B', radix-1\n           | (numeric fmt) | is used for negative numbers formatted as\n           |               | complements.\n  ---------+---------------+-----------------------------------------\n  *        | all           | Use the next argument as the field width.\n           |               | If negative, left-justify the result. If the\n           |               | asterisk is followed by a number and a dollar\n           |               | sign, use the indicated argument as the width.\n\nExamples of flags:\n\n # `+' and space flag specifies the sign of non-negative numbers.\n sprintf(\"%d\", 123)  #=> \"123\"\n sprintf(\"%+d\", 123) #=> \"+123\"\n sprintf(\"% d\", 123) #=> \" 123\"\n\n # `#' flag for `o' increases number of digits to show `0'.\n # `+' and space flag changes format of negative numbers.\n sprintf(\"%o\", 123)   #=> \"173\"\n sprintf(\"%#o\", 123)  #=> \"0173\"\n sprintf(\"%+o\", -123) #=> \"-173\"\n sprintf(\"%o\", -123)  #=> \"..7605\"\n sprintf(\"%#o\", -123) #=> \"..7605\"\n\n # `#' flag for `x' add a prefix `0x' for non-zero numbers.\n # `+' and space flag disables complements for negative numbers.\n sprintf(\"%x\", 123)   #=> \"7b\"\n sprintf(\"%#x\", 123)  #=> \"0x7b\"\n sprintf(\"%+x\", -123) #=> \"-7b\"\n sprintf(\"%x\", -123)  #=> \"..f85\"\n sprintf(\"%#x\", -123) #=> \"0x..f85\"\n sprintf(\"%#x\", 0)    #=> \"0\"\n\n # `#' for `X' uses the prefix `0X'.\n sprintf(\"%X\", 123)  #=> \"7B\"\n sprintf(\"%#X\", 123) #=> \"0X7B\"\n\n # `#' flag for `b' add a prefix `0b' for non-zero numbers.\n # `+' and space flag disables complements for negative numbers.\n sprintf(\"%b\", 123)   #=> \"1111011\"\n sprintf(\"%#b\", 123)  #=> \"0b1111011\"\n sprintf(\"%+b\", -123) #=> \"-1111011\"\n sprintf(\"%b\", -123)  #=> \"..10000101\"\n sprintf(\"%#b\", -123) #=> \"0b..10000101\"\n sprintf(\"%#b\", 0)    #=> \"0\"\n\n # `#' for `B' uses the prefix `0B'.\n sprintf(\"%B\", 123)  #=> \"1111011\"\n sprintf(\"%#B\", 123) #=> \"0B1111011\"\n\n # `#' for `e' forces to show the decimal point.\n sprintf(\"%.0e\", 1)  #=> \"1e+00\"\n sprintf(\"%#.0e\", 1) #=> \"1.e+00\"\n\n # `#' for `f' forces to show the decimal point.\n sprintf(\"%.0f\", 1234)  #=> \"1234\"\n sprintf(\"%#.0f\", 1234) #=> \"1234.\"\n\n # `#' for `g' forces to show the decimal point.\n # It also disables stripping lowest zeros.\n sprintf(\"%g\", 123.4)   #=> \"123.4\"\n sprintf(\"%#g\", 123.4)  #=> \"123.400\"\n sprintf(\"%g\", 123456)  #=> \"123456\"\n sprintf(\"%#g\", 123456) #=> \"123456.\"\n\nThe field width is an optional integer, followed optionally by a\nperiod and a precision.  The width specifies the minimum number of\ncharacters that will be written to the result for this field.\n\nExamples of width:\n\n # padding is done by spaces,       width=20\n # 0 or radix-1.             <------------------>\n sprintf(\"%20d\", 123)   #=> \"                 123\"\n sprintf(\"%+20d\", 123)  #=> \"                +123\"\n sprintf(\"%020d\", 123)  #=> \"00000000000000000123\"\n sprintf(\"%+020d\", 123) #=> \"+0000000000000000123\"\n sprintf(\"% 020d\", 123) #=> \" 0000000000000000123\"\n sprintf(\"%-20d\", 123)  #=> \"123                 \"\n sprintf(\"%-+20d\", 123) #=> \"+123                \"\n sprintf(\"%- 20d\", 123) #=> \" 123                \"\n sprintf(\"%020x\", -123) #=> \"..ffffffffffffffff85\"\n\nFor\nnumeric fields, the precision controls the number of decimal places\ndisplayed.  For string fields, the precision determines the maximum\nnumber of characters to be copied from the string.  (Thus, the format\nsequence <code>%10.10s</code> will always contribute exactly ten\ncharacters to the result.)\n\nExamples of precisions:\n\n # precision for `d', 'o', 'x' and 'b' is\n # minimum number of digits               <------>\n sprintf(\"%20.8d\", 123)  #=> \"            00000123\"\n sprintf(\"%20.8o\", 123)  #=> \"            00000173\"\n sprintf(\"%20.8x\", 123)  #=> \"            0000007b\"\n sprintf(\"%20.8b\", 123)  #=> \"            01111011\"\n sprintf(\"%20.8d\", -123) #=> \"           -00000123\"\n sprintf(\"%20.8o\", -123) #=> \"            ..777605\"\n sprintf(\"%20.8x\", -123) #=> \"            ..ffff85\"\n sprintf(\"%20.8b\", -11)  #=> \"            ..110101\"\n\n # \"0x\" and \"0b\" for `#x' and `#b' is not counted for\n # precision but \"0\" for `#o' is counted.  <------>\n sprintf(\"%#20.8d\", 123)  #=> \"            00000123\"\n sprintf(\"%#20.8o\", 123)  #=> \"            00000173\"\n sprintf(\"%#20.8x\", 123)  #=> \"          0x0000007b\"\n sprintf(\"%#20.8b\", 123)  #=> \"          0b01111011\"\n sprintf(\"%#20.8d\", -123) #=> \"           -00000123\"\n sprintf(\"%#20.8o\", -123) #=> \"            ..777605\"\n sprintf(\"%#20.8x\", -123) #=> \"          0x..ffff85\"\n sprintf(\"%#20.8b\", -11)  #=> \"          0b..110101\"\n\n # precision for `e' is number of\n # digits after the decimal point           <------>\n sprintf(\"%20.8e\", 1234.56789) #=> \"      1.23456789e+03\"\n\n # precision for `f' is number of\n # digits after the decimal point               <------>\n sprintf(\"%20.8f\", 1234.56789) #=> \"       1234.56789000\"\n\n # precision for `g' is number of\n # significant digits                          <------->\n sprintf(\"%20.8g\", 1234.56789) #=> \"           1234.5679\"\n\n #                                         <------->\n sprintf(\"%20.8g\", 123456789)  #=> \"       1.2345679e+08\"\n\n # precision for `s' is\n # maximum number of characters                    <------>\n sprintf(\"%20.8s\", \"string test\") #=> \"            string t\"\n\nExamples:\n\n   sprintf(\"%d %04x\", 123, 123)               #=> \"123 007b\"\n   sprintf(\"%08b '%4s'\", 123, 123)            #=> \"01111011 ' 123'\"\n   sprintf(\"%1$*2$s %2$d %1$s\", \"hello\", 8)   #=> \"   hello 8 hello\"\n   sprintf(\"%1$*2$s %2$d\", \"hello\", -8)       #=> \"hello    -8\"\n   sprintf(\"%+g:% g:%-g\", 1.23, 1.23, 1.23)   #=> \"+1.23: 1.23:1.23\"\n   sprintf(\"%u\", -123)                        #=> \"-123\"\n\nFor more complex formatting, Ruby supports a reference by name.\n%<name>s style uses format style, but %{name} style doesn't.\n\nExamples:\n  sprintf(\"%<foo>d : %<bar>f\", { :foo => 1, :bar => 2 })\n    #=> 1 : 2.000000\n  sprintf(\"%{foo}f\", { :foo => 1 })\n    # => \"1f\"","name":"format","namespace":"Kernel","path":"Kernel#format","type":"module_function","visibility":"public"},"Kernel#gets":{"description":"Returns (and assigns to <code>$_</code>) the next line from the list\nof files in +ARGV+ (or <code>$*</code>), or from standard input if\nno files are present on the command line. Returns +nil+ at end of\nfile. The optional argument specifies the record separator. The\nseparator is included with the contents of each record. A separator\nof +nil+ reads the entire contents, and a zero-length separator\nreads the input one paragraph at a time, where paragraphs are\ndivided by two consecutive newlines.  If the first argument is an\ninteger, or optional second argument is given, the returning string\nwould not be longer than the given value in bytes.  If multiple\nfilenames are present in +ARGV+, <code>gets(nil)</code> will read\nthe contents one file at a time.\n\n   ARGV << \"testfile\"\n   print while gets\n\n<em>produces:</em>\n\n   This is line one\n   This is line two\n   This is line three\n   And so on...\n\nThe style of programming using <code>$_</code> as an implicit\nparameter is gradually losing favor in the Ruby community.","name":"gets","namespace":"Kernel","path":"Kernel#gets","type":"module_function","visibility":"public"},"Kernel#global_variables":{"description":"Returns an array of the names of global variables.\n\n   global_variables.grep /std/   #=> [:$stdin, :$stdout, :$stderr]","name":"global_variables","namespace":"Kernel","path":"Kernel#global_variables","type":"module_function","visibility":"public"},"Kernel#iterator?":{"description":"Returns <code>true</code> if <code>yield</code> would execute a\nblock in the current context. The <code>iterator?</code> form\nis mildly deprecated.\n\n   def try\n     if block_given?\n       yield\n     else\n       \"no block\"\n     end\n   end\n   try                  #=> \"no block\"\n   try { \"hello\" }      #=> \"hello\"\n   try do \"hello\" end   #=> \"hello\"","name":"iterator?","namespace":"Kernel","path":"Kernel#iterator?","type":"module_function","visibility":"public","return":[["Boolean"],""]},"Kernel#lambda":{"description":"Equivalent to <code>Proc.new</code>, except the resulting Proc objects\ncheck the number of parameters passed when called.","name":"lambda","namespace":"Kernel","path":"Kernel#lambda","type":"module_function","visibility":"public"},"Kernel#load":{"description":"Loads and executes the Ruby\nprogram in the file _filename_. If the filename does not\nresolve to an absolute path, the file is searched for in the library\ndirectories listed in <code>$:</code>. If the optional _wrap_\nparameter is +true+, the loaded script will be executed\nunder an anonymous module, protecting the calling program's global\nnamespace. In no circumstance will any local variables in the loaded\nfile be propagated to the loading environment.","name":"load","namespace":"Kernel","path":"Kernel#load","type":"module_function","visibility":"public"},"Kernel#local_variables":{"description":"Returns the names of the current local variables.\n\n   fred = 1\n   for i in 1..10\n      # ...\n   end\n   local_variables   #=> [:fred, :i]","name":"local_variables","namespace":"Kernel","path":"Kernel#local_variables","type":"module_function","visibility":"public"},"Kernel#loop":{"description":"Repeatedly executes the block.\n\nIf no block is given, an enumerator is returned instead.\n\n   loop do\n     print \"Input: \"\n     line = gets\n     break if !line or line =~ /^qQ/\n     # ...\n   end\n\nStopIteration raised in the block breaks the loop.  In this case,\nloop returns the \"result\" value stored in the exception.\n\n   enum = Enumerator.new { |y|\n     y << \"one\"\n     y << \"two\"\n     :ok\n   }\n\n   result = loop {\n     puts enum.next\n   } #=> :ok","name":"loop","namespace":"Kernel","path":"Kernel#loop","type":"module_function","visibility":"public"},"Kernel#open":{"description":"Creates an IO object connected to the given stream, file, or subprocess.\n\nIf +path+ does not start with a pipe character (<code>|</code>), treat it\nas the name of a file to open using the specified mode (defaulting to\n\"r\").\n\nThe +mode+ is either a string or an integer.  If it is an integer, it\nmust be bitwise-or of open(2) flags, such as File::RDWR or File::EXCL.  If\nit is a string, it is either \"fmode\", \"fmode:ext_enc\", or\n\"fmode:ext_enc:int_enc\".\n\nSee the documentation of IO.new for full documentation of the +mode+ string\ndirectives.\n\nIf a file is being created, its initial permissions may be set using the\n+perm+ parameter.  See File.new and the open(2) and chmod(2) man pages for\na description of permissions.\n\nIf a block is specified, it will be invoked with the IO object as a\nparameter, and the IO will be automatically closed when the block\nterminates.  The call returns the value of the block.\n\nIf +path+ starts with a pipe character (<code>\"|\"</code>), a subprocess is\ncreated, connected to the caller by a pair of pipes.  The returned IO\nobject may be used to write to the standard input and read from the\nstandard output of this subprocess.\n\nIf the command following the pipe is a single minus sign\n(<code>\"|-\"</code>), Ruby forks, and this subprocess is connected to the\nparent.  If the command is not <code>\"-\"</code>, the subprocess runs the\ncommand.\n\nWhen the subprocess is Ruby (opened via <code>\"|-\"</code>), the +open+\ncall returns +nil+.  If a block is associated with the open call, that\nblock will run twice --- once in the parent and once in the child.\n\nThe block parameter will be an IO object in the parent and +nil+ in the\nchild. The parent's +IO+ object will be connected to the child's $stdin\nand $stdout.  The subprocess will be terminated at the end of the block.\n\n=== Examples\n\nReading from \"testfile\":\n\n   open(\"testfile\") do |f|\n     print f.gets\n   end\n\nProduces:\n\n   This is line one\n\nOpen a subprocess and read its output:\n\n   cmd = open(\"|date\")\n   print cmd.gets\n   cmd.close\n\nProduces:\n\n   Wed Apr  9 08:56:31 CDT 2003\n\nOpen a subprocess running the same Ruby program:\n\n   f = open(\"|-\", \"w+\")\n   if f.nil?\n     puts \"in Child\"\n     exit\n   else\n     puts \"Got: #{f.gets}\"\n   end\n\nProduces:\n\n   Got: in Child\n\nOpen a subprocess using a block to receive the IO object:\n\n   open \"|-\" do |f|\n     if f then\n       # parent process\n       puts \"Got: #{f.gets}\"\n     else\n       # child process\n       puts \"in Child\"\n     end\n   end\n\nProduces:\n\n   Got: in Child","name":"open","namespace":"Kernel","path":"Kernel#open","type":"module_function","visibility":"public"},"Kernel#p":{"description":"For each object, directly writes _obj_.+inspect+ followed by a\nnewline to the program's standard output.\n\n   S = Struct.new(:name, :state)\n   s = S['dave', 'TX']\n   p s\n\n<em>produces:</em>\n\n   #<S name=\"dave\", state=\"TX\">","name":"p","namespace":"Kernel","path":"Kernel#p","type":"module_function","visibility":"public"},"Kernel#print":{"description":"Prints each object in turn to <code>$stdout</code>. If the output\nfield separator (<code>$,</code>) is not +nil+, its\ncontents will appear between each field. If the output record\nseparator (<code>$\\\\</code>) is not +nil+, it will be\nappended to the output. If no arguments are given, prints\n<code>$_</code>. Objects that aren't strings will be converted by\ncalling their <code>to_s</code> method.\n\n   print \"cat\", [1,2,3], 99, \"\\n\"\n   $, = \", \"\n   $\\ = \"\\n\"\n   print \"cat\", [1,2,3], 99\n\n<em>produces:</em>\n\n   cat12399\n   cat, 1, 2, 3, 99","name":"print","namespace":"Kernel","path":"Kernel#print","type":"module_function","visibility":"public"},"Kernel#printf":{"description":"Equivalent to:\n   io.write(sprintf(string, obj, ...))\nor\n   $stdout.write(sprintf(string, obj, ...))","name":"printf","namespace":"Kernel","path":"Kernel#printf","type":"module_function","visibility":"public"},"Kernel#proc":{"description":"Equivalent to <code>Proc.new</code>.","name":"proc","namespace":"Kernel","path":"Kernel#proc","type":"module_function","visibility":"public"},"Kernel#putc":{"description":"Equivalent to:\n\n  $stdout.putc(int)\n\nRefer to the documentation for IO#putc for important information regarding\nmulti-byte characters.","name":"putc","namespace":"Kernel","path":"Kernel#putc","type":"module_function","visibility":"public"},"Kernel#puts":{"description":"Equivalent to\n\n    $stdout.puts(obj, ...)","name":"puts","namespace":"Kernel","path":"Kernel#puts","type":"module_function","visibility":"public"},"Kernel#raise":{"description":"With no arguments, raises the exception in <code>$!</code> or raises\na <code>RuntimeError</code> if <code>$!</code> is +nil+.\nWith a single +String+ argument, raises a\n+RuntimeError+ with the string as a message. Otherwise,\nthe first parameter should be the name of an +Exception+\nclass (or an object that returns an +Exception+ object when sent\nan +exception+ message). The optional second parameter sets the\nmessage associated with the exception, and the third parameter is an\narray of callback information. Exceptions are caught by the\n+rescue+ clause of <code>begin...end</code> blocks.\n\n   raise \"Failed to create socket\"\n   raise ArgumentError, \"No parameters\", caller","name":"raise","namespace":"Kernel","path":"Kernel#raise","type":"module_function","visibility":"public"},"Kernel#rand":{"description":"If called without an argument, or if <tt>max.to_i.abs == 0</tt>, rand\nreturns a pseudo-random floating point number between 0.0 and 1.0,\nincluding 0.0 and excluding 1.0.\n\n  rand        #=> 0.2725926052826416\n\nWhen +max.abs+ is greater than or equal to 1, +rand+ returns a pseudo-random\ninteger greater than or equal to 0 and less than +max.to_i.abs+.\n\n  rand(100)   #=> 12\n\nWhen +max+ is a Range, +rand+ returns a random number where\nrange.member?(number) == true.\n\nNegative or floating point values for +max+ are allowed, but may give\nsurprising results.\n\n  rand(-100) # => 87\n  rand(-0.5) # => 0.8130921818028143\n  rand(1.9)  # equivalent to rand(1), which is always 0\n\nKernel.srand may be used to ensure that sequences of random numbers are\nreproducible between different runs of a program.\n\nSee also Random.rand.","name":"rand","namespace":"Kernel","path":"Kernel#rand","type":"module_function","visibility":"public"},"Kernel#readline":{"description":"Equivalent to <code>Kernel::gets</code>, except\n+readline+ raises +EOFError+ at end of file.","name":"readline","namespace":"Kernel","path":"Kernel#readline","type":"module_function","visibility":"public"},"Kernel#readlines":{"description":"Returns an array containing the lines returned by calling\n<code>Kernel.gets(<i>sep</i>)</code> until the end of file.","name":"readlines","namespace":"Kernel","path":"Kernel#readlines","type":"module_function","visibility":"public"},"Kernel#require":{"description":"Loads the given +name+, returning +true+ if successful and +false+ if the\nfeature is already loaded.\n\nIf the filename does not resolve to an absolute path, it will be searched\nfor in the directories listed in <code>$LOAD_PATH</code> (<code>$:</code>).\n\nIf the filename has the extension \".rb\", it is loaded as a source file; if\nthe extension is \".so\", \".o\", or \".dll\", or the default shared library\nextension on the current platform, Ruby loads the shared library as a\nRuby extension.  Otherwise, Ruby tries adding \".rb\", \".so\", and so on\nto the name until found.  If the file named cannot be found, a LoadError\nwill be raised.\n\nFor Ruby extensions the filename given may use any shared library\nextension.  For example, on Linux the socket extension is \"socket.so\" and\n<code>require 'socket.dll'</code> will load the socket extension.\n\nThe absolute path of the loaded file is added to\n<code>$LOADED_FEATURES</code> (<code>$\"</code>).  A file will not be\nloaded again if its path already appears in <code>$\"</code>.  For example,\n<code>require 'a'; require './a'</code> will not load <code>a.rb</code>\nagain.\n\n  require \"my-library.rb\"\n  require \"db-driver\"\n\nAny constants or globals within the loaded source file will be available\nin the calling program's global namespace. However, local variables will\nnot be propagated to the loading environment.","name":"require","namespace":"Kernel","path":"Kernel#require","type":"module_function","visibility":"public"},"Kernel#require_relative":{"description":"Ruby tries to load the library named _string_ relative to the requiring\nfile's path.  If the file's path cannot be determined a LoadError is raised.\nIf a file is loaded +true+ is returned and false otherwise.","name":"require_relative","namespace":"Kernel","path":"Kernel#require_relative","type":"module_function","visibility":"public"},"Kernel#select":{"description":"Calls select(2) system call.\nIt monitors given arrays of <code>IO</code> objects, waits until one or more\nof <code>IO</code> objects are ready for reading, are ready for writing,\nand have pending exceptions respectively, and returns an array that\ncontains arrays of those IO objects.  It will return +nil+\nif optional <i>timeout</i> value is given and no <code>IO</code> object\nis ready in <i>timeout</i> seconds.\n\n<code>IO.select</code> peeks the buffer of <code>IO</code> objects for testing readability.\nIf the <code>IO</code> buffer is not empty,\n<code>IO.select</code> immediately notifies readability.\nThis \"peek\" only happens for <code>IO</code> objects.\nIt does not happen for IO-like objects such as OpenSSL::SSL::SSLSocket.\n\nThe best way to use <code>IO.select</code> is invoking it\nafter nonblocking methods such as <code>read_nonblock</code>, <code>write_nonblock</code>, etc.\nThe methods raise an exception which is extended by\n<code>IO::WaitReadable</code> or <code>IO::WaitWritable</code>.\nThe modules notify how the caller should wait with <code>IO.select</code>.\nIf <code>IO::WaitReadable</code> is raised, the caller should wait for reading.\nIf <code>IO::WaitWritable</code> is raised, the caller should wait for writing.\n\nSo, blocking read (<code>readpartial</code>) can be emulated using\n<code>read_nonblock</code> and <code>IO.select</code> as follows:\n\n  begin\n    result = io_like.read_nonblock(maxlen)\n  rescue IO::WaitReadable\n    IO.select([io_like])\n    retry\n  rescue IO::WaitWritable\n    IO.select(nil, [io_like])\n    retry\n  end\n\nEspecially, the combination of nonblocking methods and\n<code>IO.select</code> is preferred for <code>IO</code> like\nobjects such as <code>OpenSSL::SSL::SSLSocket</code>.\nIt has <code>to_io</code> method to return underlying <code>IO</code> object.\n<code>IO.select</code> calls <code>to_io</code> to obtain the file descriptor to wait.\n\nThis means that readability notified by <code>IO.select</code> doesn't mean\nreadability from <code>OpenSSL::SSL::SSLSocket</code> object.\n\nThe most likely situation is that <code>OpenSSL::SSL::SSLSocket</code> buffers some data.\n<code>IO.select</code> doesn't see the buffer.\nSo <code>IO.select</code> can block when <code>OpenSSL::SSL::SSLSocket#readpartial</code> doesn't block.\n\nHowever, several more complicated situations exist.\n\nSSL is a protocol which is sequence of records.\nThe record consists of multiple bytes.\nSo, the remote side of SSL sends a partial record,\n<code>IO.select</code> notifies readability but\n<code>OpenSSL::SSL::SSLSocket</code> cannot decrypt a byte and\n<code>OpenSSL::SSL::SSLSocket#readpartial</code> will blocks.\n\nAlso, the remote side can request SSL renegotiation which forces\nthe local SSL engine to write some data.\nThis means <code>OpenSSL::SSL::SSLSocket#readpartial</code> may\ninvoke <code>write</code> system call and it can block.\nIn such a situation, <code>OpenSSL::SSL::SSLSocket#read_nonblock</code>\nraises IO::WaitWritable instead of blocking.\nSo, the caller should wait for ready for writability as above example.\n\nThe combination of nonblocking methods and <code>IO.select</code> is\nalso useful for streams such as tty, pipe socket socket when\nmultiple processes read from a stream.\n\nFinally, Linux kernel developers don't guarantee that\nreadability of select(2) means readability of following read(2) even\nfor a single process.\nSee select(2) manual on GNU/Linux system.\n\nInvoking <code>IO.select</code> before <code>IO#readpartial</code> works well as usual.\nHowever it is not the best way to use <code>IO.select</code>.\n\nThe writability notified by select(2) doesn't show\nhow many bytes writable.\n<code>IO#write</code> method blocks until given whole string is written.\nSo, <code>IO#write(two or more bytes)</code> can block after writability is notified by <code>IO.select</code>.\n<code>IO#write_nonblock</code> is required to avoid the blocking.\n\nBlocking write (<code>write</code>) can be emulated using\n<code>write_nonblock</code> and <code>IO.select</code> as follows:\nIO::WaitReadable should also be rescued for SSL renegotiation in <code>OpenSSL::SSL::SSLSocket</code>.\n\n  while 0 < string.bytesize\n    begin\n      written = io_like.write_nonblock(string)\n    rescue IO::WaitReadable\n      IO.select([io_like])\n      retry\n    rescue IO::WaitWritable\n      IO.select(nil, [io_like])\n      retry\n    end\n    string = string.byteslice(written..-1)\n  end\n\n=== Parameters\nread_array:: an array of <code>IO</code> objects that wait until ready for read\nwrite_array:: an array of <code>IO</code> objects that wait until ready for write\nerror_array:: an array of <code>IO</code> objects that wait for exceptions\ntimeout:: a numeric value in second\n\n=== Example\n\n    rp, wp = IO.pipe\n    mesg = \"ping \"\n    100.times {\n      # IO.select follows IO#read.  Not the best way to use IO.select.\n      rs, ws, = IO.select([rp], [wp])\n      if r = rs[0]\n        ret = r.read(5)\n        print ret\n        case ret\n        when /ping/\n          mesg = \"pong\\n\"\n        when /pong/\n          mesg = \"ping \"\n        end\n      end\n      if w = ws[0]\n        w.write(mesg)\n      end\n    }\n\n<em>produces:</em>\n\n    ping pong\n    ping pong\n    ping pong\n    (snipped)\n    ping","name":"select","namespace":"Kernel","path":"Kernel#select","type":"module_function","visibility":"public"},"Kernel#set_trace_func":{"description":"Establishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* this method is obsolete, please use TracePoint instead.\n\n_proc_ takes up to six parameters:\n\n*\tan event name\n*\ta filename\n*\ta line number\n*\tan object id\n*\ta binding\n*\tthe name of a class\n\n_proc_ is invoked whenever an event occurs.\n\nEvents are:\n\n+c-call+:: call a C-language routine\n+c-return+:: return from a C-language routine\n+call+:: call a Ruby method\n+class+:: start a class or module definition\n+end+:: finish a class or module definition\n+line+:: execute code on a new line\n+raise+:: raise an exception\n+return+:: return from a Ruby method\n\nTracing is disabled within the context of _proc_.\n\n    class Test\ndef test\n a = 1\n b = 2\nend\n    end\n\n    set_trace_func proc { |event, file, line, id, binding, classname|\n  printf \"%8s %s:%-2d %10s %8s\\n\", event, file, line, id, classname\n    }\n    t = Test.new\n    t.test\n\n line prog.rb:11               false\n    c-call prog.rb:11        new    Class\n    c-call prog.rb:11 initialize   Object\n  c-return prog.rb:11 initialize   Object\n  c-return prog.rb:11        new    Class\n line prog.rb:12               false\n\t  call prog.rb:2        test     Test\n line prog.rb:3        test     Test\n line prog.rb:4        test     Test\n    return prog.rb:4        test     Test","name":"set_trace_func","namespace":"Kernel","path":"Kernel#set_trace_func","type":"module_function","visibility":"public"},"Kernel#sleep":{"description":"Suspends the current thread for _duration_ seconds (which may be any number,\nincluding a +Float+ with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls <code>Thread#run</code>. Called without an argument, sleep()\nwill sleep forever.\n\n   Time.new    #=> 2008-03-08 19:56:19 +0900\n   sleep 1.2   #=> 1\n   Time.new    #=> 2008-03-08 19:56:20 +0900\n   sleep 1.9   #=> 2\n   Time.new    #=> 2008-03-08 19:56:22 +0900","name":"sleep","namespace":"Kernel","path":"Kernel#sleep","type":"module_function","visibility":"public"},"Kernel#spawn":{"description":"spawn executes specified command and return its pid.\n\n  pid = spawn(\"tar xf ruby-2.0.0-p195.tar.bz2\")\n  Process.wait pid\n\n  pid = spawn(RbConfig.ruby, \"-eputs'Hello, world!'\")\n  Process.wait pid\n\nThis method is similar to Kernel#system but it doesn't wait for the command\nto finish.\n\nThe parent process should\nuse <code>Process.wait</code> to collect\nthe termination status of its child or\nuse <code>Process.detach</code> to register\ndisinterest in their status;\notherwise, the operating system may accumulate zombie processes.\n\nspawn has bunch of options to specify process attributes:\n\n  env: hash\n    name => val : set the environment variable\n    name => nil : unset the environment variable\n\n    the keys and the values except for +nil+ must be strings.\n  command...:\n    commandline                 : command line string which is passed to the standard shell\n    cmdname, arg1, ...          : command name and one or more arguments (This form does not use the shell. See below for caveats.)\n    [cmdname, argv0], arg1, ... : command name, argv[0] and zero or more arguments (no shell)\n  options: hash\n    clearing environment variables:\n      :unsetenv_others => true   : clear environment variables except specified by env\n      :unsetenv_others => false  : don't clear (default)\n    process group:\n      :pgroup => true or 0 : make a new process group\n      :pgroup => pgid      : join the specified process group\n      :pgroup => nil       : don't change the process group (default)\n    create new process group: Windows only\n      :new_pgroup => true  : the new process is the root process of a new process group\n      :new_pgroup => false : don't create a new process group (default)\n    resource limit: resourcename is core, cpu, data, etc.  See Process.setrlimit.\n      :rlimit_resourcename => limit\n      :rlimit_resourcename => [cur_limit, max_limit]\n    umask:\n      :umask => int\n    redirection:\n      key:\n        FD              : single file descriptor in child process\n        [FD, FD, ...]   : multiple file descriptor in child process\n      value:\n        FD                        : redirect to the file descriptor in parent process\n        string                    : redirect to file with open(string, \"r\" or \"w\")\n        [string]                  : redirect to file with open(string, File::RDONLY)\n        [string, open_mode]       : redirect to file with open(string, open_mode, 0644)\n        [string, open_mode, perm] : redirect to file with open(string, open_mode, perm)\n        [:child, FD]              : redirect to the redirected file descriptor\n        :close                    : close the file descriptor in child process\n      FD is one of follows\n        :in     : the file descriptor 0 which is the standard input\n        :out    : the file descriptor 1 which is the standard output\n        :err    : the file descriptor 2 which is the standard error\n        integer : the file descriptor of specified the integer\n        io      : the file descriptor specified as io.fileno\n    file descriptor inheritance: close non-redirected non-standard fds (3, 4, 5, ...) or not\n      :close_others => true  : don't inherit\n    current directory:\n      :chdir => str\n\n    The 'cmdname, arg1, ...' form does not use the shell. However,\n    on different OSes, different things are provided as built-in\n    commands. An example of this is 'echo', which is a built-in\n    on Windows, but is a normal program on Linux and Mac OS X.\n    This means that `Process.spawn 'echo', '%Path%'` will display\n    the contents of the `%Path%` environment variable on Windows,\n    but `Process.spawn 'echo', '$PATH'` prints the literal '$PATH'.\n\nIf a hash is given as +env+, the environment is\nupdated by +env+ before <code>exec(2)</code> in the child process.\nIf a pair in +env+ has nil as the value, the variable is deleted.\n\n  # set FOO as BAR and unset BAZ.\n  pid = spawn({\"FOO\"=>\"BAR\", \"BAZ\"=>nil}, command)\n\nIf a hash is given as +options+,\nit specifies\nprocess group,\ncreate new process group,\nresource limit,\ncurrent directory,\numask and\nredirects for the child process.\nAlso, it can be specified to clear environment variables.\n\nThe <code>:unsetenv_others</code> key in +options+ specifies\nto clear environment variables, other than specified by +env+.\n\n  pid = spawn(command, :unsetenv_others=>true) # no environment variable\n  pid = spawn({\"FOO\"=>\"BAR\"}, command, :unsetenv_others=>true) # FOO only\n\nThe <code>:pgroup</code> key in +options+ specifies a process group.\nThe corresponding value should be true, zero, a positive integer, or nil.\ntrue and zero cause the process to be a process leader of a new process group.\nA non-zero positive integer causes the process to join the provided process group.\nThe default value, nil, causes the process to remain in the same process group.\n\n  pid = spawn(command, :pgroup=>true) # process leader\n  pid = spawn(command, :pgroup=>10) # belongs to the process group 10\n\nThe <code>:new_pgroup</code> key in +options+ specifies to pass\n+CREATE_NEW_PROCESS_GROUP+ flag to <code>CreateProcessW()</code> that is\nWindows API. This option is only for Windows.\ntrue means the new process is the root process of the new process group.\nThe new process has CTRL+C disabled. This flag is necessary for\n<code>Process.kill(:SIGINT, pid)</code> on the subprocess.\n:new_pgroup is false by default.\n\n  pid = spawn(command, :new_pgroup=>true)  # new process group\n  pid = spawn(command, :new_pgroup=>false) # same process group\n\nThe <code>:rlimit_</code><em>foo</em> key specifies a resource limit.\n<em>foo</em> should be one of resource types such as <code>core</code>.\nThe corresponding value should be an integer or an array which have one or\ntwo integers: same as cur_limit and max_limit arguments for\nProcess.setrlimit.\n\n  cur, max = Process.getrlimit(:CORE)\n  pid = spawn(command, :rlimit_core=>[0,max]) # disable core temporary.\n  pid = spawn(command, :rlimit_core=>max) # enable core dump\n  pid = spawn(command, :rlimit_core=>0) # never dump core.\n\nThe <code>:umask</code> key in +options+ specifies the umask.\n\n  pid = spawn(command, :umask=>077)\n\nThe :in, :out, :err, an integer, an IO and an array key specifies a redirection.\nThe redirection maps a file descriptor in the child process.\n\nFor example, stderr can be merged into stdout as follows:\n\n  pid = spawn(command, :err=>:out)\n  pid = spawn(command, 2=>1)\n  pid = spawn(command, STDERR=>:out)\n  pid = spawn(command, STDERR=>STDOUT)\n\nThe hash keys specifies a file descriptor\nin the child process started by <code>spawn</code>.\n:err, 2 and STDERR specifies the standard error stream (stderr).\n\nThe hash values specifies a file descriptor\nin the parent process which invokes <code>spawn</code>.\n:out, 1 and STDOUT specifies the standard output stream (stdout).\n\nIn the above example,\nthe standard output in the child process is not specified.\nSo it is inherited from the parent process.\n\nThe standard input stream (stdin) can be specified by :in, 0 and STDIN.\n\nA filename can be specified as a hash value.\n\n  pid = spawn(command, :in=>\"/dev/null\") # read mode\n  pid = spawn(command, :out=>\"/dev/null\") # write mode\n  pid = spawn(command, :err=>\"log\") # write mode\n  pid = spawn(command, [:out, :err]=>\"/dev/null\") # write mode\n  pid = spawn(command, 3=>\"/dev/null\") # read mode\n\nFor stdout and stderr (and combination of them),\nit is opened in write mode.\nOtherwise read mode is used.\n\nFor specifying flags and permission of file creation explicitly,\nan array is used instead.\n\n  pid = spawn(command, :in=>[\"file\"]) # read mode is assumed\n  pid = spawn(command, :in=>[\"file\", \"r\"])\n  pid = spawn(command, :out=>[\"log\", \"w\"]) # 0644 assumed\n  pid = spawn(command, :out=>[\"log\", \"w\", 0600])\n  pid = spawn(command, :out=>[\"log\", File::WRONLY|File::EXCL|File::CREAT, 0600])\n\nThe array specifies a filename, flags and permission.\nThe flags can be a string or an integer.\nIf the flags is omitted or nil, File::RDONLY is assumed.\nThe permission should be an integer.\nIf the permission is omitted or nil, 0644 is assumed.\n\nIf an array of IOs and integers are specified as a hash key,\nall the elements are redirected.\n\n  # stdout and stderr is redirected to log file.\n  # The file \"log\" is opened just once.\n  pid = spawn(command, [:out, :err]=>[\"log\", \"w\"])\n\nAnother way to merge multiple file descriptors is [:child, fd].\n\\[:child, fd] means the file descriptor in the child process.\nThis is different from fd.\nFor example, :err=>:out means redirecting child stderr to parent stdout.\nBut :err=>[:child, :out] means redirecting child stderr to child stdout.\nThey differ if stdout is redirected in the child process as follows.\n\n  # stdout and stderr is redirected to log file.\n  # The file \"log\" is opened just once.\n  pid = spawn(command, :out=>[\"log\", \"w\"], :err=>[:child, :out])\n\n\\[:child, :out] can be used to merge stderr into stdout in IO.popen.\nIn this case, IO.popen redirects stdout to a pipe in the child process\nand [:child, :out] refers the redirected stdout.\n\n  io = IO.popen([\"sh\", \"-c\", \"echo out; echo err >&2\", :err=>[:child, :out]])\n  p io.read #=> \"out\\nerr\\n\"\n\nThe <code>:chdir</code> key in +options+ specifies the current directory.\n\n  pid = spawn(command, :chdir=>\"/var/tmp\")\n\nspawn closes all non-standard unspecified descriptors by default.\nThe \"standard\" descriptors are 0, 1 and 2.\nThis behavior is specified by :close_others option.\n:close_others doesn't affect the standard descriptors which are\nclosed only if :close is specified explicitly.\n\n  pid = spawn(command, :close_others=>true)  # close 3,4,5,... (default)\n  pid = spawn(command, :close_others=>false) # don't close 3,4,5,...\n\n:close_others is true by default for spawn and IO.popen.\n\nNote that fds which close-on-exec flag is already set are closed\nregardless of :close_others option.\n\nSo IO.pipe and spawn can be used as IO.popen.\n\n  # similar to r = IO.popen(command)\n  r, w = IO.pipe\n  pid = spawn(command, :out=>w)   # r, w is closed in the child process.\n  w.close\n\n:close is specified as a hash value to close a fd individually.\n\n  f = open(foo)\n  system(command, f=>:close)        # don't inherit f.\n\nIf a file descriptor need to be inherited,\nio=>io can be used.\n\n  # valgrind has --log-fd option for log destination.\n  # log_w=>log_w indicates log_w.fileno inherits to child process.\n  log_r, log_w = IO.pipe\n  pid = spawn(\"valgrind\", \"--log-fd=#{log_w.fileno}\", \"echo\", \"a\", log_w=>log_w)\n  log_w.close\n  p log_r.read\n\nIt is also possible to exchange file descriptors.\n\n  pid = spawn(command, :out=>:err, :err=>:out)\n\nThe hash keys specify file descriptors in the child process.\nThe hash values specifies file descriptors in the parent process.\nSo the above specifies exchanging stdout and stderr.\nInternally, +spawn+ uses an extra file descriptor to resolve such cyclic\nfile descriptor mapping.\n\nSee <code>Kernel.exec</code> for the standard shell.","name":"spawn","namespace":"Kernel","path":"Kernel#spawn","type":"module_function","visibility":"public"},"Kernel#sprintf":{"description":"Returns the string resulting from applying <i>format_string</i> to\nany additional arguments.  Within the format string, any characters\nother than format sequences are copied to the result.\n\nThe syntax of a format sequence is follows.\n\n  %[flags][width][.precision]type\n\nA format\nsequence consists of a percent sign, followed by optional flags,\nwidth, and precision indicators, then terminated with a field type\ncharacter.  The field type controls how the corresponding\n<code>sprintf</code> argument is to be interpreted, while the flags\nmodify that interpretation.\n\nThe field type characters are:\n\n    Field |  Integer Format\n    ------+--------------------------------------------------------------\n      b   | Convert argument as a binary number.\n          | Negative numbers will be displayed as a two's complement\n          | prefixed with `..1'.\n      B   | Equivalent to `b', but uses an uppercase 0B for prefix\n          | in the alternative format by #.\n      d   | Convert argument as a decimal number.\n      i   | Identical to `d'.\n      o   | Convert argument as an octal number.\n          | Negative numbers will be displayed as a two's complement\n          | prefixed with `..7'.\n      u   | Identical to `d'.\n      x   | Convert argument as a hexadecimal number.\n          | Negative numbers will be displayed as a two's complement\n          | prefixed with `..f' (representing an infinite string of\n          | leading 'ff's).\n      X   | Equivalent to `x', but uses uppercase letters.\n\n    Field |  Float Format\n    ------+--------------------------------------------------------------\n      e   | Convert floating point argument into exponential notation\n          | with one digit before the decimal point as [-]d.dddddde[+-]dd.\n          | The precision specifies the number of digits after the decimal\n          | point (defaulting to six).\n      E   | Equivalent to `e', but uses an uppercase E to indicate\n          | the exponent.\n      f   | Convert floating point argument as [-]ddd.dddddd,\n          | where the precision specifies the number of digits after\n          | the decimal point.\n      g   | Convert a floating point number using exponential form\n          | if the exponent is less than -4 or greater than or\n          | equal to the precision, or in dd.dddd form otherwise.\n          | The precision specifies the number of significant digits.\n      G   | Equivalent to `g', but use an uppercase `E' in exponent form.\n      a   | Convert floating point argument as [-]0xh.hhhhp[+-]dd,\n          | which is consisted from optional sign, \"0x\", fraction part\n          | as hexadecimal, \"p\", and exponential part as decimal.\n      A   | Equivalent to `a', but use uppercase `X' and `P'.\n\n    Field |  Other Format\n    ------+--------------------------------------------------------------\n      c   | Argument is the numeric code for a single character or\n          | a single character string itself.\n      p   | The valuing of argument.inspect.\n      s   | Argument is a string to be substituted.  If the format\n          | sequence contains a precision, at most that many characters\n          | will be copied.\n      %   | A percent sign itself will be displayed.  No argument taken.\n\nThe flags modifies the behavior of the formats.\nThe flag characters are:\n\n  Flag     | Applies to    | Meaning\n  ---------+---------------+-----------------------------------------\n  space    | bBdiouxX      | Leave a space at the start of\n           | aAeEfgG       | non-negative numbers.\n           | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n           |               | a minus sign with absolute value for\n           |               | negative values.\n  ---------+---------------+-----------------------------------------\n  (digit)$ | all           | Specifies the absolute argument number\n           |               | for this field.  Absolute and relative\n           |               | argument numbers cannot be mixed in a\n           |               | sprintf string.\n  ---------+---------------+-----------------------------------------\n   #       | bBoxX         | Use an alternative format.\n           | aAeEfgG       | For the conversions `o', increase the precision\n           |               | until the first digit will be `0' if\n           |               | it is not formatted as complements.\n           |               | For the conversions `x', `X', `b' and `B'\n           |               | on non-zero, prefix the result with ``0x'',\n           |               | ``0X'', ``0b'' and ``0B'', respectively.\n           |               | For `a', `A', `e', `E', `f', `g', and 'G',\n           |               | force a decimal point to be added,\n           |               | even if no digits follow.\n           |               | For `g' and 'G', do not remove trailing zeros.\n  ---------+---------------+-----------------------------------------\n  +        | bBdiouxX      | Add a leading plus sign to non-negative\n           | aAeEfgG       | numbers.\n           | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n           |               | a minus sign with absolute value for\n           |               | negative values.\n  ---------+---------------+-----------------------------------------\n  -        | all           | Left-justify the result of this conversion.\n  ---------+---------------+-----------------------------------------\n  0 (zero) | bBdiouxX      | Pad with zeros, not spaces.\n           | aAeEfgG       | For `o', `x', `X', `b' and `B', radix-1\n           | (numeric fmt) | is used for negative numbers formatted as\n           |               | complements.\n  ---------+---------------+-----------------------------------------\n  *        | all           | Use the next argument as the field width.\n           |               | If negative, left-justify the result. If the\n           |               | asterisk is followed by a number and a dollar\n           |               | sign, use the indicated argument as the width.\n\nExamples of flags:\n\n # `+' and space flag specifies the sign of non-negative numbers.\n sprintf(\"%d\", 123)  #=> \"123\"\n sprintf(\"%+d\", 123) #=> \"+123\"\n sprintf(\"% d\", 123) #=> \" 123\"\n\n # `#' flag for `o' increases number of digits to show `0'.\n # `+' and space flag changes format of negative numbers.\n sprintf(\"%o\", 123)   #=> \"173\"\n sprintf(\"%#o\", 123)  #=> \"0173\"\n sprintf(\"%+o\", -123) #=> \"-173\"\n sprintf(\"%o\", -123)  #=> \"..7605\"\n sprintf(\"%#o\", -123) #=> \"..7605\"\n\n # `#' flag for `x' add a prefix `0x' for non-zero numbers.\n # `+' and space flag disables complements for negative numbers.\n sprintf(\"%x\", 123)   #=> \"7b\"\n sprintf(\"%#x\", 123)  #=> \"0x7b\"\n sprintf(\"%+x\", -123) #=> \"-7b\"\n sprintf(\"%x\", -123)  #=> \"..f85\"\n sprintf(\"%#x\", -123) #=> \"0x..f85\"\n sprintf(\"%#x\", 0)    #=> \"0\"\n\n # `#' for `X' uses the prefix `0X'.\n sprintf(\"%X\", 123)  #=> \"7B\"\n sprintf(\"%#X\", 123) #=> \"0X7B\"\n\n # `#' flag for `b' add a prefix `0b' for non-zero numbers.\n # `+' and space flag disables complements for negative numbers.\n sprintf(\"%b\", 123)   #=> \"1111011\"\n sprintf(\"%#b\", 123)  #=> \"0b1111011\"\n sprintf(\"%+b\", -123) #=> \"-1111011\"\n sprintf(\"%b\", -123)  #=> \"..10000101\"\n sprintf(\"%#b\", -123) #=> \"0b..10000101\"\n sprintf(\"%#b\", 0)    #=> \"0\"\n\n # `#' for `B' uses the prefix `0B'.\n sprintf(\"%B\", 123)  #=> \"1111011\"\n sprintf(\"%#B\", 123) #=> \"0B1111011\"\n\n # `#' for `e' forces to show the decimal point.\n sprintf(\"%.0e\", 1)  #=> \"1e+00\"\n sprintf(\"%#.0e\", 1) #=> \"1.e+00\"\n\n # `#' for `f' forces to show the decimal point.\n sprintf(\"%.0f\", 1234)  #=> \"1234\"\n sprintf(\"%#.0f\", 1234) #=> \"1234.\"\n\n # `#' for `g' forces to show the decimal point.\n # It also disables stripping lowest zeros.\n sprintf(\"%g\", 123.4)   #=> \"123.4\"\n sprintf(\"%#g\", 123.4)  #=> \"123.400\"\n sprintf(\"%g\", 123456)  #=> \"123456\"\n sprintf(\"%#g\", 123456) #=> \"123456.\"\n\nThe field width is an optional integer, followed optionally by a\nperiod and a precision.  The width specifies the minimum number of\ncharacters that will be written to the result for this field.\n\nExamples of width:\n\n # padding is done by spaces,       width=20\n # 0 or radix-1.             <------------------>\n sprintf(\"%20d\", 123)   #=> \"                 123\"\n sprintf(\"%+20d\", 123)  #=> \"                +123\"\n sprintf(\"%020d\", 123)  #=> \"00000000000000000123\"\n sprintf(\"%+020d\", 123) #=> \"+0000000000000000123\"\n sprintf(\"% 020d\", 123) #=> \" 0000000000000000123\"\n sprintf(\"%-20d\", 123)  #=> \"123                 \"\n sprintf(\"%-+20d\", 123) #=> \"+123                \"\n sprintf(\"%- 20d\", 123) #=> \" 123                \"\n sprintf(\"%020x\", -123) #=> \"..ffffffffffffffff85\"\n\nFor\nnumeric fields, the precision controls the number of decimal places\ndisplayed.  For string fields, the precision determines the maximum\nnumber of characters to be copied from the string.  (Thus, the format\nsequence <code>%10.10s</code> will always contribute exactly ten\ncharacters to the result.)\n\nExamples of precisions:\n\n # precision for `d', 'o', 'x' and 'b' is\n # minimum number of digits               <------>\n sprintf(\"%20.8d\", 123)  #=> \"            00000123\"\n sprintf(\"%20.8o\", 123)  #=> \"            00000173\"\n sprintf(\"%20.8x\", 123)  #=> \"            0000007b\"\n sprintf(\"%20.8b\", 123)  #=> \"            01111011\"\n sprintf(\"%20.8d\", -123) #=> \"           -00000123\"\n sprintf(\"%20.8o\", -123) #=> \"            ..777605\"\n sprintf(\"%20.8x\", -123) #=> \"            ..ffff85\"\n sprintf(\"%20.8b\", -11)  #=> \"            ..110101\"\n\n # \"0x\" and \"0b\" for `#x' and `#b' is not counted for\n # precision but \"0\" for `#o' is counted.  <------>\n sprintf(\"%#20.8d\", 123)  #=> \"            00000123\"\n sprintf(\"%#20.8o\", 123)  #=> \"            00000173\"\n sprintf(\"%#20.8x\", 123)  #=> \"          0x0000007b\"\n sprintf(\"%#20.8b\", 123)  #=> \"          0b01111011\"\n sprintf(\"%#20.8d\", -123) #=> \"           -00000123\"\n sprintf(\"%#20.8o\", -123) #=> \"            ..777605\"\n sprintf(\"%#20.8x\", -123) #=> \"          0x..ffff85\"\n sprintf(\"%#20.8b\", -11)  #=> \"          0b..110101\"\n\n # precision for `e' is number of\n # digits after the decimal point           <------>\n sprintf(\"%20.8e\", 1234.56789) #=> \"      1.23456789e+03\"\n\n # precision for `f' is number of\n # digits after the decimal point               <------>\n sprintf(\"%20.8f\", 1234.56789) #=> \"       1234.56789000\"\n\n # precision for `g' is number of\n # significant digits                          <------->\n sprintf(\"%20.8g\", 1234.56789) #=> \"           1234.5679\"\n\n #                                         <------->\n sprintf(\"%20.8g\", 123456789)  #=> \"       1.2345679e+08\"\n\n # precision for `s' is\n # maximum number of characters                    <------>\n sprintf(\"%20.8s\", \"string test\") #=> \"            string t\"\n\nExamples:\n\n   sprintf(\"%d %04x\", 123, 123)               #=> \"123 007b\"\n   sprintf(\"%08b '%4s'\", 123, 123)            #=> \"01111011 ' 123'\"\n   sprintf(\"%1$*2$s %2$d %1$s\", \"hello\", 8)   #=> \"   hello 8 hello\"\n   sprintf(\"%1$*2$s %2$d\", \"hello\", -8)       #=> \"hello    -8\"\n   sprintf(\"%+g:% g:%-g\", 1.23, 1.23, 1.23)   #=> \"+1.23: 1.23:1.23\"\n   sprintf(\"%u\", -123)                        #=> \"-123\"\n\nFor more complex formatting, Ruby supports a reference by name.\n%<name>s style uses format style, but %{name} style doesn't.\n\nExamples:\n  sprintf(\"%<foo>d : %<bar>f\", { :foo => 1, :bar => 2 })\n    #=> 1 : 2.000000\n  sprintf(\"%{foo}f\", { :foo => 1 })\n    # => \"1f\"","name":"sprintf","namespace":"Kernel","path":"Kernel#sprintf","type":"module_function","visibility":"public"},"Kernel#srand":{"description":"Seeds the system pseudo-random number generator, Random::DEFAULT, with\n+number+.  The previous seed value is returned.\n\nIf +number+ is omitted, seeds the generator using a source of entropy\nprovided by the operating system, if available (/dev/urandom on Unix systems\nor the RSA cryptographic provider on Windows), which is then combined with\nthe time, the process id, and a sequence number.\n\nsrand may be used to ensure repeatable sequences of pseudo-random numbers\nbetween different runs of the program. By setting the seed to a known value,\nprograms can be made deterministic during testing.\n\n  srand 1234               # => 268519324636777531569100071560086917274\n  [ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n  [ rand(10), rand(1000) ] # => [4, 664]\n  srand 1234               # => 1234\n  [ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]","name":"srand","namespace":"Kernel","path":"Kernel#srand","type":"module_function","visibility":"public"},"Kernel#syscall":{"description":"Calls the operating system function identified by _num_ and\nreturns the result of the function or raises SystemCallError if\nit failed.\n\nArguments for the function can follow _num_. They must be either\n+String+ objects or +Integer+ objects. A +String+ object is passed\nas a pointer to the byte sequence. An +Integer+ object is passed\nas an integer whose bit size is same as a pointer.\nUp to nine parameters may be passed.\n\nThe function identified by _num_ is system\ndependent. On some Unix systems, the numbers may be obtained from a\nheader file called <code>syscall.h</code>.\n\n   syscall 4, 1, \"hello\\n\", 6   # '4' is write(2) on our box\n\n<em>produces:</em>\n\n   hello\n\nCalling +syscall+ on a platform which does not have any way to\nan arbitrary system function just fails with NotImplementedError.\n\n*Note:*\n+syscall+ is essentially unsafe and unportable.\nFeel free to shoot your foot.\nThe DL (Fiddle) library is preferred for safer and a bit\nmore portable programming.","name":"syscall","namespace":"Kernel","path":"Kernel#syscall","type":"module_function","visibility":"public"},"Kernel#system":{"description":"Executes _command..._ in a subshell.\n_command..._ is one of following forms.\n\n  commandline                 : command line string which is passed to the standard shell\n  cmdname, arg1, ...          : command name and one or more arguments (no shell)\n  [cmdname, argv0], arg1, ... : command name, argv[0] and zero or more arguments (no shell)\n\nsystem returns +true+ if the command gives zero exit status,\n+false+ for non zero exit status.\nReturns +nil+ if command execution fails.\nAn error status is available in <code>$?</code>.\nThe arguments are processed in the same way as\nfor <code>Kernel.spawn</code>.\n\nThe hash arguments, env and options, are same as\n<code>exec</code> and <code>spawn</code>.\nSee <code>Kernel.spawn</code> for details.\n\n   system(\"echo *\")\n   system(\"echo\", \"*\")\n\n<em>produces:</em>\n\n   config.h main.rb\n   *\n\nSee <code>Kernel.exec</code> for the standard shell.","name":"system","namespace":"Kernel","path":"Kernel#system","type":"module_function","visibility":"public"},"Kernel#test":{"description":"Uses the character +cmd+ to perform various tests on +file1+ (first\ntable below) or on +file1+ and +file2+ (second table).\n\nFile tests on a single file:\n\n  Cmd    Returns   Meaning\n  \"A\"  | Time    | Last access time for file1\n  \"b\"  | boolean | True if file1 is a block device\n  \"c\"  | boolean | True if file1 is a character device\n  \"C\"  | Time    | Last change time for file1\n  \"d\"  | boolean | True if file1 exists and is a directory\n  \"e\"  | boolean | True if file1 exists\n  \"f\"  | boolean | True if file1 exists and is a regular file\n  \"g\"  | boolean | True if file1 has the \\CF{setgid} bit\n       |         | set (false under NT)\n  \"G\"  | boolean | True if file1 exists and has a group\n       |         | ownership equal to the caller's group\n  \"k\"  | boolean | True if file1 exists and has the sticky bit set\n  \"l\"  | boolean | True if file1 exists and is a symbolic link\n  \"M\"  | Time    | Last modification time for file1\n  \"o\"  | boolean | True if file1 exists and is owned by\n       |         | the caller's effective uid\n  \"O\"  | boolean | True if file1 exists and is owned by\n       |         | the caller's real uid\n  \"p\"  | boolean | True if file1 exists and is a fifo\n  \"r\"  | boolean | True if file1 is readable by the effective\n       |         | uid/gid of the caller\n  \"R\"  | boolean | True if file is readable by the real\n       |         | uid/gid of the caller\n  \"s\"  | int/nil | If file1 has nonzero size, return the size,\n       |         | otherwise return nil\n  \"S\"  | boolean | True if file1 exists and is a socket\n  \"u\"  | boolean | True if file1 has the setuid bit set\n  \"w\"  | boolean | True if file1 exists and is writable by\n       |         | the effective uid/gid\n  \"W\"  | boolean | True if file1 exists and is writable by\n       |         | the real uid/gid\n  \"x\"  | boolean | True if file1 exists and is executable by\n       |         | the effective uid/gid\n  \"X\"  | boolean | True if file1 exists and is executable by\n       |         | the real uid/gid\n  \"z\"  | boolean | True if file1 exists and has a zero length\n\nTests that take two files:\n\n  \"-\"  | boolean | True if file1 and file2 are identical\n  \"=\"  | boolean | True if the modification times of file1\n       |         | and file2 are equal\n  \"<\"  | boolean | True if the modification time of file1\n       |         | is prior to that of file2\n  \">\"  | boolean | True if the modification time of file1\n       |         | is after that of file2","name":"test","namespace":"Kernel","path":"Kernel#test","type":"module_function","visibility":"public"},"Kernel#throw":{"description":"Transfers control to the end of the active +catch+ block\nwaiting for _tag_. Raises +UncaughtThrowError+ if there\nis no +catch+ block for the _tag_. The optional second\nparameter supplies a return value for the +catch+ block,\nwhich otherwise defaults to +nil+. For examples, see\n<code>Kernel::catch</code>.","name":"throw","namespace":"Kernel","path":"Kernel#throw","type":"module_function","visibility":"public"},"Kernel#trace_var":{"description":"Controls tracing of assignments to global variables. The parameter\n+symbol+ identifies the variable (as either a string name or a\nsymbol identifier). _cmd_ (which may be a string or a\n+Proc+ object) or block is executed whenever the variable\nis assigned. The block or +Proc+ object receives the\nvariable's new value as a parameter. Also see\n<code>Kernel::untrace_var</code>.\n\n   trace_var :$_, proc {|v| puts \"$_ is now '#{v}'\" }\n   $_ = \"hello\"\n   $_ = ' there'\n\n<em>produces:</em>\n\n   $_ is now 'hello'\n   $_ is now ' there'","name":"trace_var","namespace":"Kernel","path":"Kernel#trace_var","type":"module_function","visibility":"public"},"Kernel#trap":{"description":"Specifies the handling of signals. The first parameter is a signal\nname (a string such as ``SIGALRM'', ``SIGUSR1'', and so on) or a\nsignal number. The characters ``SIG'' may be omitted from the\nsignal name. The command or block specifies code to be run when the\nsignal is raised.\nIf the command is the string ``IGNORE'' or ``SIG_IGN'', the signal\nwill be ignored.\nIf the command is ``DEFAULT'' or ``SIG_DFL'', the Ruby's default handler\nwill be invoked.\nIf the command is ``EXIT'', the script will be terminated by the signal.\nIf the command is ``SYSTEM_DEFAULT'', the operating system's default\nhandler will be invoked.\nOtherwise, the given command or block will be run.\nThe special signal name ``EXIT'' or signal number zero will be\ninvoked just prior to program termination.\ntrap returns the previous handler for the given signal.\n\n    Signal.trap(0, proc { puts \"Terminating: #{$$}\" })\n    Signal.trap(\"CLD\")  { puts \"Child died\" }\n    fork && Process.wait\n\nproduces:\n    Terminating: 27461\n    Child died\n    Terminating: 27460","name":"trap","namespace":"Kernel","path":"Kernel#trap","type":"module_function","visibility":"public"},"Kernel#untrace_var":{"description":"Removes tracing for the specified command on the given global\nvariable and returns +nil+. If no command is specified,\nremoves all tracing for that variable and returns an array\ncontaining the commands actually removed.","name":"untrace_var","namespace":"Kernel","path":"Kernel#untrace_var","type":"module_function","visibility":"public"},"Kernel#warn":{"description":"If warnings have been disabled (for example with the\n<code>-W0</code> flag), does nothing.  Otherwise,\nconverts each of the messages to strings, appends a newline\ncharacter to the string if the string does not end in a newline,\nand calls <code>Warning.warn</code> with the string.\n\n   warn(\"warning 1\", \"warning 2\")\n\n <em>produces:</em>\n\n   warning 1\n   warning 2","name":"warn","namespace":"Kernel","path":"Kernel#warn","type":"module_function","visibility":"public"},"NilClass":{"description":"The class of the singleton object <code>nil</code>.","name":"NilClass","namespace":"","path":"NilClass","type":"class","visibility":"public"},"NilClass#&":{"description":"And---Returns <code>false</code>. <i>obj</i> is always\nevaluated as it is the argument to a method call---there is no\nshort-circuit evaluation in this case.","name":"&","namespace":"NilClass","path":"NilClass#&","type":"instance_method","visibility":"public"},"NilClass#===":{"description":"Case Equality -- For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants to provide\nmeaningful semantics in +case+ statements.","name":"===","namespace":"NilClass","path":"NilClass#===","type":"instance_method","visibility":"public"},"NilClass#^":{"description":"Exclusive Or---If <i>obj</i> is <code>nil</code> or\n<code>false</code>, returns <code>false</code>; otherwise, returns\n<code>true</code>.","name":"^","namespace":"NilClass","path":"NilClass#^","type":"instance_method","visibility":"public"},"NilClass#inspect":{"description":"Always returns the string \"nil\".","name":"inspect","namespace":"NilClass","path":"NilClass#inspect","type":"instance_method","visibility":"public"},"NilClass#nil?":{"description":"Only the object <i>nil</i> responds <code>true</code> to <code>nil?</code>.","name":"nil?","namespace":"NilClass","path":"NilClass#nil?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"NilClass#rationalize":{"description":"Returns zero as a rational.  The optional argument +eps+ is always\nignored.","name":"rationalize","namespace":"NilClass","path":"NilClass#rationalize","type":"instance_method","visibility":"public"},"NilClass#to_a":{"description":"call-seq:\n    nil.to_a    -> []\n\n Always returns an empty array.\n\n    nil.to_a   #=> []","name":"to_a","namespace":"NilClass","path":"NilClass#to_a","type":"instance_method","visibility":"public"},"NilClass#to_c":{"description":"Returns zero as a complex.","name":"to_c","namespace":"NilClass","path":"NilClass#to_c","type":"instance_method","visibility":"public"},"NilClass#to_f":{"description":"Always returns zero.\n\n   nil.to_f   #=> 0.0","name":"to_f","namespace":"NilClass","path":"NilClass#to_f","type":"instance_method","visibility":"public"},"NilClass#to_h":{"description":"call-seq:\n    nil.to_h    -> {}\n\n Always returns an empty hash.\n\n    nil.to_h   #=> {}","name":"to_h","namespace":"NilClass","path":"NilClass#to_h","type":"instance_method","visibility":"public"},"NilClass#to_i":{"description":"Always returns zero.\n\n   nil.to_i   #=> 0","name":"to_i","namespace":"NilClass","path":"NilClass#to_i","type":"instance_method","visibility":"public"},"NilClass#to_r":{"description":"Returns zero as a rational.","name":"to_r","namespace":"NilClass","path":"NilClass#to_r","type":"instance_method","visibility":"public"},"NilClass#to_s":{"description":"Always returns the empty string.","name":"to_s","namespace":"NilClass","path":"NilClass#to_s","type":"instance_method","visibility":"public"},"NilClass#|":{"description":"Or---Returns <code>false</code> if <i>obj</i> is\n<code>nil</code> or <code>false</code>; <code>true</code> otherwise.","name":"|","namespace":"NilClass","path":"NilClass#|","type":"instance_method","visibility":"public"},"Numeric":{"description":"Numeric is the class from which all higher-level numeric classes should inherit.\n\nNumeric allows instantiation of heap-allocated objects. Other core numeric classes such as\nInteger are implemented as immediates, which means that each Integer is a single immutable\nobject which is always passed by value.\n\n  a = 1\n  1.object_id == a.object_id   #=> true\n\nThere can only ever be one instance of the integer +1+, for example. Ruby ensures this\nby preventing instantiation. If duplication is attempted, the same instance is returned.\n\n  Integer.new(1)                   #=> NoMethodError: undefined method `new' for Integer:Class\n  1.dup                            #=> 1\n  1.object_id == 1.dup.object_id   #=> true\n\nFor this reason, Numeric should be used when defining other numeric classes.\n\nClasses which inherit from Numeric must implement +coerce+, which returns a two-member\nArray containing an object that has been coerced into an instance of the new class\nand +self+ (see #coerce).\n\nInheriting classes should also implement arithmetic operator methods (<code>+</code>,\n<code>-</code>, <code>*</code> and <code>/</code>) and the <code><=></code> operator (see\nComparable). These methods may rely on +coerce+ to ensure interoperability with\ninstances of other numeric classes.\n\n  class Tally < Numeric\n    def initialize(string)\n      @string = string\n    end\n\n    def to_s\n      @string\n    end\n\n    def to_i\n      @string.size\n    end\n\n    def coerce(other)\n      [self.class.new('|' * other.to_i), self]\n    end\n\n    def <=>(other)\n      to_i <=> other.to_i\n    end\n\n    def +(other)\n      self.class.new('|' * (to_i + other.to_i))\n    end\n\n    def -(other)\n      self.class.new('|' * (to_i - other.to_i))\n    end\n\n    def *(other)\n      self.class.new('|' * (to_i * other.to_i))\n    end\n\n    def /(other)\n      self.class.new('|' * (to_i / other.to_i))\n    end\n  end\n\n  tally = Tally.new('||')\n  puts tally * 2            #=> \"||||\"\n  puts tally > 1            #=> true","name":"Numeric","namespace":"","path":"Numeric","type":"class","visibility":"public"},"Numeric#%":{"description":"<code>x.modulo(y)</code> means <code>x-y*(x/y).floor</code>.\n\nEquivalent to <code>num.divmod(numeric)[1]</code>.\n\nSee Numeric#divmod.","name":"%","namespace":"Numeric","path":"Numeric#%","type":"instance_method","visibility":"public"},"Numeric#+@":{"description":"Unary Plus---Returns the receiver.","name":"+@","namespace":"Numeric","path":"Numeric#+@","type":"instance_method","visibility":"public"},"Numeric#-@":{"description":"Unary Minus---Returns the receiver, negated.","name":"-@","namespace":"Numeric","path":"Numeric#-@","type":"instance_method","visibility":"public"},"Numeric#<=>":{"description":"Returns zero if +number+ equals +other+, otherwise returns +nil+.","name":"<=>","namespace":"Numeric","path":"Numeric#<=>","type":"instance_method","visibility":"public"},"Numeric#abs":{"description":"Returns the absolute value of +num+.\n\n   12.abs         #=> 12\n   (-34.56).abs   #=> 34.56\n   -34.56.abs     #=> 34.56\n\nNumeric#magnitude is an alias for Numeric#abs.","name":"abs","namespace":"Numeric","path":"Numeric#abs","type":"instance_method","visibility":"public"},"Numeric#abs2":{"description":"Returns square of self.","name":"abs2","namespace":"Numeric","path":"Numeric#abs2","type":"instance_method","visibility":"public"},"Numeric#angle":{"description":"Returns 0 if the value is positive, pi otherwise.","name":"angle","namespace":"Numeric","path":"Numeric#angle","type":"instance_method","visibility":"public"},"Numeric#arg":{"description":"Returns 0 if the value is positive, pi otherwise.","name":"arg","namespace":"Numeric","path":"Numeric#arg","type":"instance_method","visibility":"public"},"Numeric#ceil":{"description":"Returns the smallest number greater than or equal to +num+ with\na precision of +ndigits+ decimal digits (default: 0).\n\nNumeric implements this by converting its value to a Float and\ninvoking Float#ceil.","name":"ceil","namespace":"Numeric","path":"Numeric#ceil","type":"instance_method","visibility":"public"},"Numeric#clone":{"description":"Returns the receiver.  +freeze+ cannot be +false+.","name":"clone","namespace":"Numeric","path":"Numeric#clone","type":"instance_method","visibility":"public"},"Numeric#coerce":{"description":"","name":"coerce","namespace":"Numeric","path":"Numeric#coerce","type":"instance_method","visibility":"public"},"Numeric#conj":{"description":"Returns self.","name":"conj","namespace":"Numeric","path":"Numeric#conj","type":"instance_method","visibility":"public"},"Numeric#conjugate":{"description":"Returns self.","name":"conjugate","namespace":"Numeric","path":"Numeric#conjugate","type":"instance_method","visibility":"public"},"Numeric#denominator":{"description":"Returns the denominator (always positive).","name":"denominator","namespace":"Numeric","path":"Numeric#denominator","type":"instance_method","visibility":"public"},"Numeric#div":{"description":"Uses +/+ to perform division, then converts the result to an integer.\nNumeric does not define the +/+ operator; this is left to subclasses.\n\nEquivalent to <code>num.divmod(numeric)[0]</code>.\n\nSee Numeric#divmod.","name":"div","namespace":"Numeric","path":"Numeric#div","type":"instance_method","visibility":"public"},"Numeric#divmod":{"description":"Returns an array containing the quotient and modulus obtained by dividing\n+num+ by +numeric+.\n\nIf <code>q, r = x.divmod(y)</code>, then\n\n    q = floor(x/y)\n    x = q*y + r\n\nThe quotient is rounded toward negative infinity, as shown in the\nfollowing table:\n\n   a    |  b  |  a.divmod(b)  |   a/b   | a.modulo(b) | a.remainder(b)\n  ------+-----+---------------+---------+-------------+---------------\n   13   |  4  |   3,    1     |   3     |    1        |     1\n  ------+-----+---------------+---------+-------------+---------------\n   13   | -4  |  -4,   -3     |  -4     |   -3        |     1\n  ------+-----+---------------+---------+-------------+---------------\n  -13   |  4  |  -4,    3     |  -4     |    3        |    -1\n  ------+-----+---------------+---------+-------------+---------------\n  -13   | -4  |   3,   -1     |   3     |   -1        |    -1\n  ------+-----+---------------+---------+-------------+---------------\n   11.5 |  4  |   2,    3.5   |   2.875 |    3.5      |     3.5\n  ------+-----+---------------+---------+-------------+---------------\n   11.5 | -4  |  -3,   -0.5   |  -2.875 |   -0.5      |     3.5\n  ------+-----+---------------+---------+-------------+---------------\n  -11.5 |  4  |  -3,    0.5   |  -2.875 |    0.5      |    -3.5\n  ------+-----+---------------+---------+-------------+---------------\n  -11.5 | -4  |   2,   -3.5   |   2.875 |   -3.5      |    -3.5\n\n\nExamples\n\n   11.divmod(3)        #=> [3, 2]\n   11.divmod(-3)       #=> [-4, -1]\n   11.divmod(3.5)      #=> [3, 0.5]\n   (-11).divmod(3.5)   #=> [-4, 3.0]\n   11.5.divmod(3.5)    #=> [3, 1.0]","name":"divmod","namespace":"Numeric","path":"Numeric#divmod","type":"instance_method","visibility":"public"},"Numeric#dup":{"description":"Returns the receiver.","name":"dup","namespace":"Numeric","path":"Numeric#dup","type":"instance_method","visibility":"public"},"Numeric#eql?":{"description":"Returns +true+ if +num+ and +numeric+ are the same type and have equal\nvalues.  Contrast this with Numeric#==, which performs type conversions.\n\n   1 == 1.0        #=> true\n   1.eql?(1.0)     #=> false\n   1.0.eql?(1.0)   #=> true","name":"eql?","namespace":"Numeric","path":"Numeric#eql?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Numeric#fdiv":{"description":"Returns float division.","name":"fdiv","namespace":"Numeric","path":"Numeric#fdiv","type":"instance_method","visibility":"public"},"Numeric#finite?":{"description":"Returns +true+ if +num+ is a finite number, otherwise returns +false+.","name":"finite?","namespace":"Numeric","path":"Numeric#finite?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Numeric#floor":{"description":"Returns the largest number less than or equal to +num+ with\na precision of +ndigits+ decimal digits (default: 0).\n\nNumeric implements this by converting its value to a Float and\ninvoking Float#floor.","name":"floor","namespace":"Numeric","path":"Numeric#floor","type":"instance_method","visibility":"public"},"Numeric#i":{"description":"Returns the corresponding imaginary number.\nNot available for complex numbers.\n\n   -42.i  #=> (0-42i)\n   2.0.i  #=> (0+2.0i)","name":"i","namespace":"Numeric","path":"Numeric#i","type":"instance_method","visibility":"public"},"Numeric#imag":{"description":"Returns zero.","name":"imag","namespace":"Numeric","path":"Numeric#imag","type":"instance_method","visibility":"public"},"Numeric#imaginary":{"description":"Returns zero.","name":"imaginary","namespace":"Numeric","path":"Numeric#imaginary","type":"instance_method","visibility":"public"},"Numeric#infinite?":{"description":"Returns +nil+, -1, or 1 depending on whether the value is\nfinite, <code>-Infinity</code>, or <code>+Infinity</code>.","name":"infinite?","namespace":"Numeric","path":"Numeric#infinite?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Numeric#integer?":{"description":"Returns +true+ if +num+ is an Integer.\n\n    1.0.integer?   #=> false\n    1.integer?     #=> true","name":"integer?","namespace":"Numeric","path":"Numeric#integer?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Numeric#magnitude":{"description":"Returns the absolute value of +num+.\n\n   12.abs         #=> 12\n   (-34.56).abs   #=> 34.56\n   -34.56.abs     #=> 34.56\n\nNumeric#magnitude is an alias for Numeric#abs.","name":"magnitude","namespace":"Numeric","path":"Numeric#magnitude","type":"instance_method","visibility":"public"},"Numeric#modulo":{"description":"<code>x.modulo(y)</code> means <code>x-y*(x/y).floor</code>.\n\nEquivalent to <code>num.divmod(numeric)[1]</code>.\n\nSee Numeric#divmod.","name":"modulo","namespace":"Numeric","path":"Numeric#modulo","type":"instance_method","visibility":"public"},"Numeric#negative?":{"description":"Returns +true+ if +num+ is less than 0.","name":"negative?","namespace":"Numeric","path":"Numeric#negative?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Numeric#nonzero?":{"description":"Returns +self+ if +num+ is not zero, +nil+ otherwise.\n\nThis behavior is useful when chaining comparisons:\n\n   a = %w( z Bb bB bb BB a aA Aa AA A )\n   b = a.sort {|a,b| (a.downcase <=> b.downcase).nonzero? || a <=> b }\n   b   #=> [\"A\", \"a\", \"AA\", \"Aa\", \"aA\", \"BB\", \"Bb\", \"bB\", \"bb\", \"z\"]","name":"nonzero?","namespace":"Numeric","path":"Numeric#nonzero?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Numeric#numerator":{"description":"Returns the numerator.","name":"numerator","namespace":"Numeric","path":"Numeric#numerator","type":"instance_method","visibility":"public"},"Numeric#phase":{"description":"Returns 0 if the value is positive, pi otherwise.","name":"phase","namespace":"Numeric","path":"Numeric#phase","type":"instance_method","visibility":"public"},"Numeric#polar":{"description":"Returns an array; [num.abs, num.arg].","name":"polar","namespace":"Numeric","path":"Numeric#polar","type":"instance_method","visibility":"public"},"Numeric#positive?":{"description":"Returns +true+ if +num+ is greater than 0.","name":"positive?","namespace":"Numeric","path":"Numeric#positive?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Numeric#quo":{"description":"Returns the most exact division (rational for integers, float for floats).","name":"quo","namespace":"Numeric","path":"Numeric#quo","type":"instance_method","visibility":"public"},"Numeric#real":{"description":"Returns self.","name":"real","namespace":"Numeric","path":"Numeric#real","type":"instance_method","visibility":"public"},"Numeric#real?":{"description":"Returns +true+ if +num+ is a real number (i.e. not Complex).","name":"real?","namespace":"Numeric","path":"Numeric#real?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Numeric#rect":{"description":"Returns an array; [num, 0].","name":"rect","namespace":"Numeric","path":"Numeric#rect","type":"instance_method","visibility":"public"},"Numeric#rectangular":{"description":"Returns an array; [num, 0].","name":"rectangular","namespace":"Numeric","path":"Numeric#rectangular","type":"instance_method","visibility":"public"},"Numeric#remainder":{"description":"<code>x.remainder(y)</code> means <code>x-y*(x/y).truncate</code>.\n\nSee Numeric#divmod.","name":"remainder","namespace":"Numeric","path":"Numeric#remainder","type":"instance_method","visibility":"public"},"Numeric#round":{"description":"Returns +num+ rounded to the nearest value with\na precision of +ndigits+ decimal digits (default: 0).\n\nNumeric implements this by converting its value to a Float and\ninvoking Float#round.","name":"round","namespace":"Numeric","path":"Numeric#round","type":"instance_method","visibility":"public"},"Numeric#singleton_method_added":{"description":":nodoc:\n\nTrap attempts to add methods to Numeric objects. Always raises a TypeError.\n\nNumerics should be values; singleton_methods should not be added to them.","name":"singleton_method_added","namespace":"Numeric","path":"Numeric#singleton_method_added","type":"instance_method","visibility":"public"},"Numeric#step":{"description":"Invokes the given block with the sequence of numbers starting at +num+,\nincremented by +step+ (defaulted to +1+) on each call.\n\nThe loop finishes when the value to be passed to the block is greater than\n+limit+ (if +step+ is positive) or less than +limit+ (if +step+ is\nnegative), where +limit+ is defaulted to infinity.\n\nIn the recommended keyword argument style, either or both of\n+step+ and +limit+ (default infinity) can be omitted.  In the\nfixed position argument style, zero as a step\n(i.e. <code>num.step(limit, 0)</code>) is not allowed for historical\ncompatibility reasons.\n\nIf all the arguments are integers, the loop operates using an integer\ncounter.\n\nIf any of the arguments are floating point numbers, all are converted\nto floats, and the loop is executed\n<i>floor(n + n*Float::EPSILON) + 1</i> times,\nwhere <i>n = (limit - num)/step</i>.\n\nOtherwise, the loop starts at +num+, uses either the\nless-than (<code><</code>) or greater-than (<code>></code>) operator\nto compare the counter against +limit+,\nand increments itself using the <code>+</code> operator.\n\nIf no block is given, an Enumerator is returned instead.\n\nFor example:\n\n   p 1.step.take(4)\n   p 10.step(by: -1).take(4)\n   3.step(to: 5) {|i| print i, \" \" }\n   1.step(10, 2) {|i| print i, \" \" }\n   Math::E.step(to: Math::PI, by: 0.2) {|f| print f, \" \" }\n\nWill produce:\n\n   [1, 2, 3, 4]\n   [10, 9, 8, 7]\n   3 4 5\n   1 3 5 7 9\n   2.718281828459045 2.9182818284590453 3.118281828459045","name":"step","namespace":"Numeric","path":"Numeric#step","type":"instance_method","visibility":"public"},"Numeric#to_c":{"description":"Returns the value as a complex.","name":"to_c","namespace":"Numeric","path":"Numeric#to_c","type":"instance_method","visibility":"public"},"Numeric#to_int":{"description":"Invokes the child class's +to_i+ method to convert +num+ to an integer.\n\n    1.0.class          #=> Float\n    1.0.to_int.class   #=> Integer\n    1.0.to_i.class     #=> Integer","name":"to_int","namespace":"Numeric","path":"Numeric#to_int","type":"instance_method","visibility":"public"},"Numeric#truncate":{"description":"Returns +num+ truncated (toward zero) to\na precision of +ndigits+ decimal digits (default: 0).\n\nNumeric implements this by converting its value to a Float and\ninvoking Float#truncate.","name":"truncate","namespace":"Numeric","path":"Numeric#truncate","type":"instance_method","visibility":"public"},"Numeric#zero?":{"description":"Returns +true+ if +num+ has a zero value.","name":"zero?","namespace":"Numeric","path":"Numeric#zero?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"String":{"description":"A <code>String</code> object holds and manipulates an arbitrary sequence of\nbytes, typically representing characters. String objects may be created\nusing <code>String::new</code> or as literals.\n\nBecause of aliasing issues, users of strings should be aware of the methods\nthat modify the contents of a <code>String</code> object.  Typically,\nmethods with names ending in ``!'' modify their receiver, while those\nwithout a ``!'' return a new <code>String</code>.  However, there are\nexceptions, such as <code>String#[]=</code>.","name":"String","namespace":"","path":"String","type":"class","visibility":"public"},"String#%":{"description":"Format---Uses <i>str</i> as a format specification, and returns the result\nof applying it to <i>arg</i>. If the format specification contains more than\none substitution, then <i>arg</i> must be an <code>Array</code> or <code>Hash</code>\ncontaining the values to be substituted. See <code>Kernel::sprintf</code> for\ndetails of the format string.\n\n   \"%05d\" % 123                              #=> \"00123\"\n   \"%-5s: %08x\" % [ \"ID\", self.object_id ]   #=> \"ID   : 200e14d6\"\n   \"foo = %{foo}\" % { :foo => 'bar' }        #=> \"foo = bar\"","name":"%","namespace":"String","path":"String#%","type":"instance_method","visibility":"public"},"String#*":{"description":"Copy --- Returns a new String containing +integer+ copies of the receiver.\n+integer+ must be greater than or equal to 0.\n\n   \"Ho! \" * 3   #=> \"Ho! Ho! Ho! \"\n   \"Ho! \" * 0   #=> \"\"","name":"*","namespace":"String","path":"String#*","type":"instance_method","visibility":"public"},"String#+":{"description":"Concatenation---Returns a new <code>String</code> containing\n<i>other_str</i> concatenated to <i>str</i>.\n\n   \"Hello from \" + self.to_s   #=> \"Hello from main\"","name":"+","namespace":"String","path":"String#+","type":"instance_method","visibility":"public"},"String#+@":{"description":"If the string is frozen, then return duplicated mutable string.\n\nIf the string is not frozen, then return the string itself.","name":"+@","namespace":"String","path":"String#+@","type":"instance_method","visibility":"public"},"String#-@":{"description":"If the string is frozen, then return the string itself.\n\nIf the string is not frozen, return a frozen, possibly pre-existing\ncopy of it.","name":"-@","namespace":"String","path":"String#-@","type":"instance_method","visibility":"public"},"String#<<":{"description":"Appends the given object to <i>str</i>. If the object is an\n<code>Integer</code>, it is considered a codepoint and converted\nto a character before being appended.\n\n   a = \"hello \"\n   a << \"world\"   #=> \"hello world\"\n   a << 33        #=> \"hello world!\"\n\nSee also String#concat, which takes multiple arguments.","name":"<<","namespace":"String","path":"String#<<","type":"instance_method","visibility":"public"},"String#<=>":{"description":"Comparison---Returns -1, 0, +1, or +nil+ depending on whether +string+ is\nless than, equal to, or greater than +other_string+.\n\n+nil+ is returned if the two values are incomparable.\n\nIf the strings are of different lengths, and the strings are equal when\ncompared up to the shortest length, then the longer string is considered\ngreater than the shorter one.\n\n<code><=></code> is the basis for the methods <code><</code>,\n<code><=</code>, <code>></code>, <code>>=</code>, and\n<code>between?</code>, included from module Comparable. The method\nString#== does not use Comparable#==.\n\n   \"abcdef\" <=> \"abcde\"     #=> 1\n   \"abcdef\" <=> \"abcdef\"    #=> 0\n   \"abcdef\" <=> \"abcdefg\"   #=> -1\n   \"abcdef\" <=> \"ABCDEF\"    #=> 1\n   \"abcdef\" <=> 1           #=> nil","name":"<=>","namespace":"String","path":"String#<=>","type":"instance_method","visibility":"public"},"String#==":{"description":"Equality---Returns whether +str+ == +obj+, similar to Object#==.\n\nIf +obj+ is not an instance of String but responds to +to_str+, then the\ntwo strings are compared using <code>obj.==</code>.\n\nOtherwise, returns similarly to String#eql?, comparing length and content.","name":"==","namespace":"String","path":"String#==","type":"instance_method","visibility":"public"},"String#===":{"description":"Equality---Returns whether +str+ == +obj+, similar to Object#==.\n\nIf +obj+ is not an instance of String but responds to +to_str+, then the\ntwo strings are compared using <code>obj.==</code>.\n\nOtherwise, returns similarly to String#eql?, comparing length and content.","name":"===","namespace":"String","path":"String#===","type":"instance_method","visibility":"public"},"String#=~":{"description":"Match---If <i>obj</i> is a <code>Regexp</code>, use it as a pattern to match\nagainst <i>str</i>,and returns the position the match starts, or\n<code>nil</code> if there is no match. Otherwise, invokes\n<i>obj.=~</i>, passing <i>str</i> as an argument. The default\n<code>=~</code> in <code>Object</code> returns <code>nil</code>.\n\nNote: <code>str =~ regexp</code> is not the same as\n<code>regexp =~ str</code>. Strings captured from named capture groups\nare assigned to local variables only in the second case.\n\n   \"cat o' 9 tails\" =~ /\\d/   #=> 7\n   \"cat o' 9 tails\" =~ 9      #=> nil","name":"=~","namespace":"String","path":"String#=~","type":"instance_method","visibility":"public"},"String#[]":{"description":"Element Reference --- If passed a single +index+, returns a substring of\none character at that index. If passed a +start+ index and a +length+,\nreturns a substring containing +length+ characters starting at the\n+start+ index. If passed a +range+, its beginning and end are interpreted as\noffsets delimiting the substring to be returned.\n\nIn these three cases, if an index is negative, it is counted from the end\nof the string.  For the +start+ and +range+ cases the starting index\nis just before a character and an index matching the string's size.\nAdditionally, an empty string is returned when the starting index for a\ncharacter range is at the end of the string.\n\nReturns +nil+ if the initial index falls outside the string or the length\nis negative.\n\nIf a +Regexp+ is supplied, the matching portion of the string is\nreturned.  If a +capture+ follows the regular expression, which may be a\ncapture group index or name, follows the regular expression that component\nof the MatchData is returned instead.\n\nIf a +match_str+ is given, that string is returned if it occurs in\nthe string.\n\nReturns +nil+ if the regular expression does not match or the match string\ncannot be found.\n\n   a = \"hello there\"\n\n   a[1]                   #=> \"e\"\n   a[2, 3]                #=> \"llo\"\n   a[2..3]                #=> \"ll\"\n\n   a[-3, 2]               #=> \"er\"\n   a[7..-2]               #=> \"her\"\n   a[-4..-2]              #=> \"her\"\n   a[-2..-4]              #=> \"\"\n\n   a[11, 0]               #=> \"\"\n   a[11]                  #=> nil\n   a[12, 0]               #=> nil\n   a[12..-1]              #=> nil\n\n   a[/[aeiou](.)\\1/]      #=> \"ell\"\n   a[/[aeiou](.)\\1/, 0]   #=> \"ell\"\n   a[/[aeiou](.)\\1/, 1]   #=> \"l\"\n   a[/[aeiou](.)\\1/, 2]   #=> nil\n\n   a[/(?<vowel>[aeiou])(?<non_vowel>[^aeiou])/, \"non_vowel\"] #=> \"l\"\n   a[/(?<vowel>[aeiou])(?<non_vowel>[^aeiou])/, \"vowel\"]     #=> \"e\"\n\n   a[\"lo\"]                #=> \"lo\"\n   a[\"bye\"]               #=> nil","name":"[]","namespace":"String","path":"String#[]","type":"instance_method","visibility":"public"},"String#[]=":{"description":"Element Assignment---Replaces some or all of the content of <i>str</i>. The\nportion of the string affected is determined using the same criteria as\n<code>String#[]</code>. If the replacement string is not the same length as\nthe text it is replacing, the string will be adjusted accordingly. If the\nregular expression or string is used as the index doesn't match a position\nin the string, <code>IndexError</code> is raised. If the regular expression\nform is used, the optional second <code>Integer</code> allows you to specify\nwhich portion of the match to replace (effectively using the\n<code>MatchData</code> indexing rules. The forms that take an\n<code>Integer</code> will raise an <code>IndexError</code> if the value is\nout of range; the <code>Range</code> form will raise a\n<code>RangeError</code>, and the <code>Regexp</code> and <code>String</code>\nwill raise an <code>IndexError</code> on negative match.","name":"[]=","namespace":"String","path":"String#[]=","type":"instance_method","visibility":"public"},"String#ascii_only?":{"description":"Returns true for a string which has only ASCII characters.\n\n  \"abc\".force_encoding(\"UTF-8\").ascii_only?          #=> true\n  \"abc\\u{6666}\".force_encoding(\"UTF-8\").ascii_only?  #=> false","name":"ascii_only?","namespace":"String","path":"String#ascii_only?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"String#b":{"description":"Returns a copied string whose encoding is ASCII-8BIT.","name":"b","namespace":"String","path":"String#b","type":"instance_method","visibility":"public"},"String#bytes":{"description":"Returns an array of bytes in <i>str</i>.  This is a shorthand for\n<code>str.each_byte.to_a</code>.\n\nIf a block is given, which is a deprecated form, works the same as\n<code>each_byte</code>.","name":"bytes","namespace":"String","path":"String#bytes","type":"instance_method","visibility":"public"},"String#bytesize":{"description":"Returns the length of +str+ in bytes.\n\n  \"\\x80\\u3042\".bytesize  #=> 4\n  \"hello\".bytesize       #=> 5","name":"bytesize","namespace":"String","path":"String#bytesize","type":"instance_method","visibility":"public"},"String#byteslice":{"description":"Byte Reference---If passed a single <code>Integer</code>, returns a\nsubstring of one byte at that position. If passed two <code>Integer</code>\nobjects, returns a substring starting at the offset given by the first, and\na length given by the second. If given a <code>Range</code>, a substring containing\nbytes at offsets given by the range is returned. In all three cases, if\nan offset is negative, it is counted from the end of <i>str</i>. Returns\n<code>nil</code> if the initial offset falls outside the string, the length\nis negative, or the beginning of the range is greater than the end.\nThe encoding of the resulted string keeps original encoding.\n\n   \"hello\".byteslice(1)     #=> \"e\"\n   \"hello\".byteslice(-1)    #=> \"o\"\n   \"hello\".byteslice(1, 2)  #=> \"el\"\n   \"\\x80\\u3042\".byteslice(1, 3) #=> \"\\u3042\"\n   \"\\x03\\u3042\\xff\".byteslice(1..3) #=> \"\\u3042\"","name":"byteslice","namespace":"String","path":"String#byteslice","type":"instance_method","visibility":"public"},"String#capitalize":{"description":"Returns a copy of <i>str</i> with the first character converted to uppercase\nand the remainder to lowercase.\n\nSee String#downcase for meaning of +options+ and use with different encodings.\n\n   \"hello\".capitalize    #=> \"Hello\"\n   \"HELLO\".capitalize    #=> \"Hello\"\n   \"123ABC\".capitalize   #=> \"123abc\"","name":"capitalize","namespace":"String","path":"String#capitalize","type":"instance_method","visibility":"public"},"String#capitalize!":{"description":"Modifies <i>str</i> by converting the first character to uppercase and the\nremainder to lowercase. Returns <code>nil</code> if no changes are made.\n\nSee String#downcase for meaning of +options+ and use with different encodings.\n\n   a = \"hello\"\n   a.capitalize!   #=> \"Hello\"\n   a               #=> \"Hello\"\n   a.capitalize!   #=> nil","name":"capitalize!","namespace":"String","path":"String#capitalize!","type":"instance_method","visibility":"public"},"String#casecmp":{"description":"Case-insensitive version of <code>String#<=></code>.\nCurrently, case-insensitivity only works on characters A-Z/a-z,\nnot all of Unicode. This is different from String#casecmp?.\n\n   \"aBcDeF\".casecmp(\"abcde\")     #=> 1\n   \"aBcDeF\".casecmp(\"abcdef\")    #=> 0\n   \"aBcDeF\".casecmp(\"abcdefg\")   #=> -1\n   \"abcdef\".casecmp(\"ABCDEF\")    #=> 0\n\n+nil+ is returned if the two strings have incompatible encodings,\nor if +other_str+ is not a string.\n\n   \"foo\".casecmp(2)   #=> nil\n   \"\\u{e4 f6 fc}\".encode(\"ISO-8859-1\").casecmp(\"\\u{c4 d6 dc}\")   #=> nil","name":"casecmp","namespace":"String","path":"String#casecmp","type":"instance_method","visibility":"public"},"String#casecmp?":{"description":"Returns +true+ if +str+ and +other_str+ are equal after\nUnicode case folding, +false+ if they are not equal.\n\n   \"aBcDeF\".casecmp?(\"abcde\")     #=> false\n   \"aBcDeF\".casecmp?(\"abcdef\")    #=> true\n   \"aBcDeF\".casecmp?(\"abcdefg\")   #=> false\n   \"abcdef\".casecmp?(\"ABCDEF\")    #=> true\n   \"\\u{e4 f6 fc}\".casecmp?(\"\\u{c4 d6 dc}\")   #=> true\n\n+nil+ is returned if the two strings have incompatible encodings,\nor if +other_str+ is not a string.\n\n   \"foo\".casecmp?(2)   #=> nil\n   \"\\u{e4 f6 fc}\".encode(\"ISO-8859-1\").casecmp?(\"\\u{c4 d6 dc}\")   #=> nil","name":"casecmp?","namespace":"String","path":"String#casecmp?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"String#center":{"description":"Centers +str+ in +width+.  If +width+ is greater than the length of +str+,\nreturns a new String of length +width+ with +str+ centered and padded with\n+padstr+; otherwise, returns +str+.\n\n   \"hello\".center(4)         #=> \"hello\"\n   \"hello\".center(20)        #=> \"       hello        \"\n   \"hello\".center(20, '123') #=> \"1231231hello12312312\"","name":"center","namespace":"String","path":"String#center","type":"instance_method","visibility":"public"},"String#chars":{"description":"Returns an array of characters in <i>str</i>.  This is a shorthand\nfor <code>str.each_char.to_a</code>.\n\nIf a block is given, which is a deprecated form, works the same as\n<code>each_char</code>.","name":"chars","namespace":"String","path":"String#chars","type":"instance_method","visibility":"public"},"String#chomp":{"description":"Returns a new <code>String</code> with the given record separator removed\nfrom the end of <i>str</i> (if present). If <code>$/</code> has not been\nchanged from the default Ruby record separator, then <code>chomp</code> also\nremoves carriage return characters (that is it will remove <code>\\n</code>,\n<code>\\r</code>, and <code>\\r\\n</code>). If <code>$/</code> is an empty string,\nit will remove all trailing newlines from the string.\n\n   \"hello\".chomp                #=> \"hello\"\n   \"hello\\n\".chomp              #=> \"hello\"\n   \"hello\\r\\n\".chomp            #=> \"hello\"\n   \"hello\\n\\r\".chomp            #=> \"hello\\n\"\n   \"hello\\r\".chomp              #=> \"hello\"\n   \"hello \\n there\".chomp       #=> \"hello \\n there\"\n   \"hello\".chomp(\"llo\")         #=> \"he\"\n   \"hello\\r\\n\\r\\n\".chomp('')    #=> \"hello\"\n   \"hello\\r\\n\\r\\r\\n\".chomp('')  #=> \"hello\\r\\n\\r\"","name":"chomp","namespace":"String","path":"String#chomp","type":"instance_method","visibility":"public"},"String#chomp!":{"description":"Modifies <i>str</i> in place as described for <code>String#chomp</code>,\nreturning <i>str</i>, or <code>nil</code> if no modifications were made.","name":"chomp!","namespace":"String","path":"String#chomp!","type":"instance_method","visibility":"public"},"String#chop":{"description":"Returns a new <code>String</code> with the last character removed.  If the\nstring ends with <code>\\r\\n</code>, both characters are removed. Applying\n<code>chop</code> to an empty string returns an empty\nstring. <code>String#chomp</code> is often a safer alternative, as it leaves\nthe string unchanged if it doesn't end in a record separator.\n\n   \"string\\r\\n\".chop   #=> \"string\"\n   \"string\\n\\r\".chop   #=> \"string\\n\"\n   \"string\\n\".chop     #=> \"string\"\n   \"string\".chop       #=> \"strin\"\n   \"x\".chop.chop       #=> \"\"","name":"chop","namespace":"String","path":"String#chop","type":"instance_method","visibility":"public"},"String#chop!":{"description":"Processes <i>str</i> as for <code>String#chop</code>, returning <i>str</i>,\nor <code>nil</code> if <i>str</i> is the empty string.  See also\n<code>String#chomp!</code>.","name":"chop!","namespace":"String","path":"String#chop!","type":"instance_method","visibility":"public"},"String#chr":{"description":"Returns a one-character string at the beginning of the string.\n\n   a = \"abcde\"\n   a.chr    #=> \"a\"","name":"chr","namespace":"String","path":"String#chr","type":"instance_method","visibility":"public"},"String#clear":{"description":"Makes string empty.\n\n   a = \"abcde\"\n   a.clear    #=> \"\"","name":"clear","namespace":"String","path":"String#clear","type":"instance_method","visibility":"public"},"String#codepoints":{"description":"Returns an array of the <code>Integer</code> ordinals of the\ncharacters in <i>str</i>.  This is a shorthand for\n<code>str.each_codepoint.to_a</code>.\n\nIf a block is given, which is a deprecated form, works the same as\n<code>each_codepoint</code>.","name":"codepoints","namespace":"String","path":"String#codepoints","type":"instance_method","visibility":"public"},"String#concat":{"description":"Concatenates the given object(s) to <i>str</i>. If an object is an\n<code>Integer</code>, it is considered a codepoint and converted\nto a character before concatenation.\n\n+concat+ can take multiple arguments, and all the arguments are\nconcatenated in order.\n\n   a = \"hello \"\n   a.concat(\"world\", 33)      #=> \"hello world!\"\n   a                          #=> \"hello world!\"\n\n   b = \"sn\"\n   b.concat(\"_\", b, \"_\", b)   #=> \"sn_sn_sn\"\n\nSee also String#<<, which takes a single argument.","name":"concat","namespace":"String","path":"String#concat","type":"instance_method","visibility":"public"},"String#count":{"description":"Each +other_str+ parameter defines a set of characters to count.  The\nintersection of these sets defines the characters to count in +str+.  Any\n+other_str+ that starts with a caret <code>^</code> is negated.  The\nsequence <code>c1-c2</code> means all characters between c1 and c2.  The\nbackslash character <code>\\\\</code> can be used to escape <code>^</code> or\n<code>-</code> and is otherwise ignored unless it appears at the end of a\nsequence or the end of a +other_str+.\n\n   a = \"hello world\"\n   a.count \"lo\"                   #=> 5\n   a.count \"lo\", \"o\"              #=> 2\n   a.count \"hello\", \"^l\"          #=> 4\n   a.count \"ej-m\"                 #=> 4\n\n   \"hello^world\".count \"\\\\^aeiou\" #=> 4\n   \"hello-world\".count \"a\\\\-eo\"   #=> 4\n\n   c = \"hello world\\\\r\\\\n\"\n   c.count \"\\\\\"                   #=> 2\n   c.count \"\\\\A\"                  #=> 0\n   c.count \"X-\\\\w\"                #=> 3","name":"count","namespace":"String","path":"String#count","type":"instance_method","visibility":"public"},"String#crypt":{"description":"Applies a one-way cryptographic hash to <i>str</i> by invoking the\nstandard library function <code>crypt(3)</code> with the given\nsalt string.  While the format and the result are system and\nimplementation dependent, using a salt matching the regular\nexpression <code>\\A[a-zA-Z0-9./]{2}</code> should be valid and\nsafe on any platform, in which only the first two characters are\nsignificant.\n\nThis method is for use in system specific scripts, so if you want\na cross-platform hash function consider using Digest or OpenSSL\ninstead.","name":"crypt","namespace":"String","path":"String#crypt","type":"instance_method","visibility":"public"},"String#delete":{"description":"Returns a copy of <i>str</i> with all characters in the intersection of its\narguments deleted. Uses the same rules for building the set of characters as\n<code>String#count</code>.\n\n   \"hello\".delete \"l\",\"lo\"        #=> \"heo\"\n   \"hello\".delete \"lo\"            #=> \"he\"\n   \"hello\".delete \"aeiou\", \"^e\"   #=> \"hell\"\n   \"hello\".delete \"ej-m\"          #=> \"ho\"","name":"delete","namespace":"String","path":"String#delete","type":"instance_method","visibility":"public"},"String#delete!":{"description":"Performs a <code>delete</code> operation in place, returning <i>str</i>, or\n<code>nil</code> if <i>str</i> was not modified.","name":"delete!","namespace":"String","path":"String#delete!","type":"instance_method","visibility":"public"},"String#delete_prefix":{"description":"Returns a copy of <i>str</i> with leading <code>prefix</code> deleted.\n\n   \"hello\".delete_prefix(\"hel\") #=> \"lo\"\n   \"hello\".delete_prefix(\"llo\") #=> \"hello\"","name":"delete_prefix","namespace":"String","path":"String#delete_prefix","type":"instance_method","visibility":"public"},"String#delete_prefix!":{"description":"Deletes leading <code>prefix</code> from <i>str</i>, returning\n<code>nil</code> if no change was made.\n\n   \"hello\".delete_prefix!(\"hel\") #=> \"lo\"\n   \"hello\".delete_prefix!(\"llo\") #=> nil","name":"delete_prefix!","namespace":"String","path":"String#delete_prefix!","type":"instance_method","visibility":"public"},"String#delete_suffix":{"description":"Returns a copy of <i>str</i> with trailing <code>suffix</code> deleted.\n\n   \"hello\".delete_suffix(\"llo\") #=> \"he\"\n   \"hello\".delete_suffix(\"hel\") #=> \"hello\"","name":"delete_suffix","namespace":"String","path":"String#delete_suffix","type":"instance_method","visibility":"public"},"String#delete_suffix!":{"description":"Deletes trailing <code>suffix</code> from <i>str</i>, returning\n<code>nil</code> if no change was made.\n\n   \"hello\".delete_suffix!(\"llo\") #=> \"he\"\n   \"hello\".delete_suffix!(\"hel\") #=> nil","name":"delete_suffix!","namespace":"String","path":"String#delete_suffix!","type":"instance_method","visibility":"public"},"String#downcase":{"description":"Returns a copy of <i>str</i> with all uppercase letters replaced with their\nlowercase counterparts. Which letters exactly are replaced, and by which\nother letters, depends on the presence or absence of options, and on the\n+encoding+ of the string.\n\nThe meaning of the +options+ is as follows:\n\nNo option ::\n  Full Unicode case mapping, suitable for most languages\n  (see :turkic and :lithuanian options below for exceptions).\n  Context-dependent case mapping as described in Table 3-14 of the\n  Unicode standard is currently not supported.\n:ascii ::\n  Only the ASCII region, i.e. the characters ``A'' to ``Z'' and\n  ``a'' to ``z'', are affected.\n  This option cannot be combined with any other option.\n:turkic ::\n  Full Unicode case mapping, adapted for Turkic languages\n  (Turkish, Aserbaijani,...). This means that upper case I is mapped to\n  lower case dotless i, and so on.\n:lithuanian ::\n  Currently, just full Unicode case mapping. In the future, full Unicode\n  case mapping adapted for Lithuanian (keeping the dot on the lower case\n  i even if there is an accent on top).\n:fold ::\n  Only available on +downcase+ and +downcase!+. Unicode case <b>folding</b>,\n  which is more far-reaching than Unicode case mapping.\n  This option currently cannot be combined with any other option\n  (i.e. there is currenty no variant for turkic languages).\n\nPlease note that several assumptions that are valid for ASCII-only case\nconversions do not hold for more general case conversions. For example,\nthe length of the result may not be the same as the length of the input\n(neither in characters nor in bytes), some roundtrip assumptions\n(e.g. str.downcase == str.upcase.downcase) may not apply, and Unicode\nnormalization (i.e. String#unicode_normalize) is not necessarily maintained\nby case mapping operations.\n\nNon-ASCII case mapping/folding is currently supported for UTF-8,\nUTF-16BE/LE, UTF-32BE/LE, and ISO-8859-1~16 Strings/Symbols.\nThis support will be extended to other encodings.\n\n   \"hEllO\".downcase   #=> \"hello\"","name":"downcase","namespace":"String","path":"String#downcase","type":"instance_method","visibility":"public"},"String#downcase!":{"description":"Downcases the contents of <i>str</i>, returning <code>nil</code> if no\nchanges were made.\n\nSee String#downcase for meaning of +options+ and use with different encodings.","name":"downcase!","namespace":"String","path":"String#downcase!","type":"instance_method","visibility":"public"},"String#dump":{"description":"Produces a version of +str+ with all non-printing characters replaced by\n<code>\\nnn</code> notation and all special characters escaped.\n\n  \"hello \\n ''\".dump  #=> \"\\\"hello \\\\n ''\\\"\"","name":"dump","namespace":"String","path":"String#dump","type":"instance_method","visibility":"public"},"String#each_byte":{"description":"Passes each byte in <i>str</i> to the given block, or returns an\nenumerator if no block is given.\n\n   \"hello\".each_byte {|c| print c, ' ' }\n\n<em>produces:</em>\n\n   104 101 108 108 111","name":"each_byte","namespace":"String","path":"String#each_byte","type":"instance_method","visibility":"public"},"String#each_char":{"description":"Passes each character in <i>str</i> to the given block, or returns\nan enumerator if no block is given.\n\n   \"hello\".each_char {|c| print c, ' ' }\n\n<em>produces:</em>\n\n   h e l l o","name":"each_char","namespace":"String","path":"String#each_char","type":"instance_method","visibility":"public"},"String#each_codepoint":{"description":"Passes the <code>Integer</code> ordinal of each character in <i>str</i>,\nalso known as a <i>codepoint</i> when applied to Unicode strings to the\ngiven block.  For encodings other than UTF-8/UTF-16(BE|LE)/UTF-32(BE|LE),\nvalues are directly derived from the binary representation\nof each character.\n\nIf no block is given, an enumerator is returned instead.\n\n   \"hello\\u0639\".each_codepoint {|c| print c, ' ' }\n\n<em>produces:</em>\n\n   104 101 108 108 111 1593","name":"each_codepoint","namespace":"String","path":"String#each_codepoint","type":"instance_method","visibility":"public"},"String#each_grapheme_cluster":{"description":"Passes each grapheme cluster in <i>str</i> to the given block, or returns\nan enumerator if no block is given.\nUnlike String#each_char, this enumerates by grapheme clusters defined by\nUnicode Standard Annex #29 http://unicode.org/reports/tr29/\n\n   \"a\\u0300\".each_char.to_a.size #=> 2\n   \"a\\u0300\".each_grapheme_cluster.to_a.size #=> 1","name":"each_grapheme_cluster","namespace":"String","path":"String#each_grapheme_cluster","type":"instance_method","visibility":"public"},"String#each_line":{"description":"Splits <i>str</i> using the supplied parameter as the record\nseparator (<code>$/</code> by default), passing each substring in\nturn to the supplied block.  If a zero-length record separator is\nsupplied, the string is split into paragraphs delimited by\nmultiple successive newlines.\n\nSee IO.readlines for details about getline_args.\n\nIf no block is given, an enumerator is returned instead.\n\n   print \"Example one\\n\"\n   \"hello\\nworld\".each_line {|s| p s}\n   print \"Example two\\n\"\n   \"hello\\nworld\".each_line('l') {|s| p s}\n   print \"Example three\\n\"\n   \"hello\\n\\n\\nworld\".each_line('') {|s| p s}\n\n<em>produces:</em>\n\n   Example one\n   \"hello\\n\"\n   \"world\"\n   Example two\n   \"hel\"\n   \"l\"\n   \"o\\nworl\"\n   \"d\"\n   Example three\n   \"hello\\n\\n\"\n   \"world\"","name":"each_line","namespace":"String","path":"String#each_line","type":"instance_method","visibility":"public"},"String#empty?":{"description":"Returns <code>true</code> if <i>str</i> has a length of zero.\n\n   \"hello\".empty?   #=> false\n   \" \".empty?       #=> false\n   \"\".empty?        #=> true","name":"empty?","namespace":"String","path":"String#empty?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"String#encode":{"description":"The first form returns a copy of +str+ transcoded\nto encoding +encoding+.\nThe second form returns a copy of +str+ transcoded\nfrom src_encoding to dst_encoding.\nThe last form returns a copy of +str+ transcoded to\n<tt>Encoding.default_internal</tt>.\n\nBy default, the first and second form raise\nEncoding::UndefinedConversionError for characters that are\nundefined in the destination encoding, and\nEncoding::InvalidByteSequenceError for invalid byte sequences\nin the source encoding. The last form by default does not raise\nexceptions but uses replacement strings.\n\nThe +options+ Hash gives details for conversion and can have the following\nkeys:\n\n:invalid ::\n  If the value is +:replace+, #encode replaces invalid byte sequences in\n  +str+ with the replacement character.  The default is to raise the\n  Encoding::InvalidByteSequenceError exception\n:undef ::\n  If the value is +:replace+, #encode replaces characters which are\n  undefined in the destination encoding with the replacement character.\n  The default is to raise the Encoding::UndefinedConversionError.\n:replace ::\n  Sets the replacement string to the given value. The default replacement\n  string is \"\\uFFFD\" for Unicode encoding forms, and \"?\" otherwise.\n:fallback ::\n  Sets the replacement string by the given object for undefined\n  character.  The object should be a Hash, a Proc, a Method, or an\n  object which has [] method.\n  Its key is an undefined character encoded in the source encoding\n  of current transcoder. Its value can be any encoding until it\n  can be converted into the destination encoding of the transcoder.\n:xml ::\n  The value must be +:text+ or +:attr+.\n  If the value is +:text+ #encode replaces undefined characters with their\n  (upper-case hexadecimal) numeric character references. '&', '<', and '>'\n  are converted to \"&amp;\", \"&lt;\", and \"&gt;\", respectively.\n  If the value is +:attr+, #encode also quotes the replacement result\n  (using '\"'), and replaces '\"' with \"&quot;\".\n:cr_newline ::\n  Replaces LF (\"\\n\") with CR (\"\\r\") if value is true.\n:crlf_newline ::\n  Replaces LF (\"\\n\") with CRLF (\"\\r\\n\") if value is true.\n:universal_newline ::\n  Replaces CRLF (\"\\r\\n\") and CR (\"\\r\") with LF (\"\\n\") if value is true.","name":"encode","namespace":"String","path":"String#encode","type":"instance_method","visibility":"public"},"String#encode!":{"description":"The first form transcodes the contents of <i>str</i> from\nstr.encoding to +encoding+.\nThe second form transcodes the contents of <i>str</i> from\nsrc_encoding to dst_encoding.\nThe options Hash gives details for conversion. See String#encode\nfor details.\nReturns the string even if no changes were made.","name":"encode!","namespace":"String","path":"String#encode!","type":"instance_method","visibility":"public"},"String#encoding":{"description":"Returns the Encoding object that represents the encoding of obj.","name":"encoding","namespace":"String","path":"String#encoding","type":"instance_method","visibility":"public"},"String#end_with?":{"description":"Returns true if +str+ ends with one of the +suffixes+ given.\n\n  \"hello\".end_with?(\"ello\")               #=> true\n\n  # returns true if one of the +suffixes+ matches.\n  \"hello\".end_with?(\"heaven\", \"ello\")     #=> true\n  \"hello\".end_with?(\"heaven\", \"paradise\") #=> false","name":"end_with?","namespace":"String","path":"String#end_with?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"String#eql?":{"description":"Two strings are equal if they have the same length and content.","name":"eql?","namespace":"String","path":"String#eql?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"String#force_encoding":{"description":"Changes the encoding to +encoding+ and returns self.","name":"force_encoding","namespace":"String","path":"String#force_encoding","type":"instance_method","visibility":"public"},"String#freeze":{"description":"","name":"freeze","namespace":"String","path":"String#freeze","type":"instance_method","visibility":"public"},"String#getbyte":{"description":"returns the <i>index</i>th byte as an integer.","name":"getbyte","namespace":"String","path":"String#getbyte","type":"instance_method","visibility":"public"},"String#grapheme_clusters":{"description":"Returns an array of grapheme clusters in <i>str</i>.  This is a shorthand\nfor <code>str.each_grapheme_cluster.to_a</code>.\n\nIf a block is given, which is a deprecated form, works the same as\n<code>each_grapheme_cluster</code>.","name":"grapheme_clusters","namespace":"String","path":"String#grapheme_clusters","type":"instance_method","visibility":"public"},"String#gsub":{"description":"Returns a copy of <i>str</i> with <em>all</em> occurrences of\n<i>pattern</i> substituted for the second argument. The <i>pattern</i> is\ntypically a <code>Regexp</code>; if given as a <code>String</code>, any\nregular expression metacharacters it contains will be interpreted\nliterally, e.g. <code>'\\\\\\d'</code> will match a backslash followed by 'd',\ninstead of a digit.\n\nIf <i>replacement</i> is a <code>String</code> it will be substituted for\nthe matched text. It may contain back-references to the pattern's capture\ngroups of the form <code>\\\\\\d</code>, where <i>d</i> is a group number, or\n<code>\\\\\\k<n></code>, where <i>n</i> is a group name. If it is a\ndouble-quoted string, both back-references must be preceded by an\nadditional backslash. However, within <i>replacement</i> the special match\nvariables, such as <code>$&</code>, will not refer to the current match.\n\nIf the second argument is a <code>Hash</code>, and the matched text is one\nof its keys, the corresponding value is the replacement string.\n\nIn the block form, the current match string is passed in as a parameter,\nand variables such as <code>$1</code>, <code>$2</code>, <code>$`</code>,\n<code>$&</code>, and <code>$'</code> will be set appropriately. The value\nreturned by the block will be substituted for the match on each call.\n\nThe result inherits any tainting in the original string or any supplied\nreplacement string.\n\nWhen neither a block nor a second argument is supplied, an\n<code>Enumerator</code> is returned.\n\n   \"hello\".gsub(/[aeiou]/, '*')                  #=> \"h*ll*\"\n   \"hello\".gsub(/([aeiou])/, '<\\1>')             #=> \"h<e>ll<o>\"\n   \"hello\".gsub(/./) {|s| s.ord.to_s + ' '}      #=> \"104 101 108 108 111 \"\n   \"hello\".gsub(/(?<foo>[aeiou])/, '{\\k<foo>}')  #=> \"h{e}ll{o}\"\n   'hello'.gsub(/[eo]/, 'e' => 3, 'o' => '*')    #=> \"h3ll*\"","name":"gsub","namespace":"String","path":"String#gsub","type":"instance_method","visibility":"public"},"String#gsub!":{"description":"Performs the substitutions of <code>String#gsub</code> in place, returning\n<i>str</i>, or <code>nil</code> if no substitutions were performed.\nIf no block and no <i>replacement</i> is given, an enumerator is returned instead.","name":"gsub!","namespace":"String","path":"String#gsub!","type":"instance_method","visibility":"public"},"String#hash":{"description":"Return a hash based on the string's length, content and encoding.\n\nSee also Object#hash.","name":"hash","namespace":"String","path":"String#hash","type":"instance_method","visibility":"public"},"String#hex":{"description":"Treats leading characters from <i>str</i> as a string of hexadecimal digits\n(with an optional sign and an optional <code>0x</code>) and returns the\ncorresponding number. Zero is returned on error.\n\n   \"0x0a\".hex     #=> 10\n   \"-1234\".hex    #=> -4660\n   \"0\".hex        #=> 0\n   \"wombat\".hex   #=> 0","name":"hex","namespace":"String","path":"String#hex","type":"instance_method","visibility":"public"},"String#include?":{"description":"Returns <code>true</code> if <i>str</i> contains the given string or\ncharacter.\n\n   \"hello\".include? \"lo\"   #=> true\n   \"hello\".include? \"ol\"   #=> false\n   \"hello\".include? ?h     #=> true","name":"include?","namespace":"String","path":"String#include?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"String#index":{"description":"Returns the index of the first occurrence of the given <i>substring</i> or\npattern (<i>regexp</i>) in <i>str</i>. Returns <code>nil</code> if not\nfound. If the second parameter is present, it specifies the position in the\nstring to begin the search.\n\n   \"hello\".index('e')             #=> 1\n   \"hello\".index('lo')            #=> 3\n   \"hello\".index('a')             #=> nil\n   \"hello\".index(?e)              #=> 1\n   \"hello\".index(/[aeiou]/, -3)   #=> 4","name":"index","namespace":"String","path":"String#index","type":"instance_method","visibility":"public"},"String#initialize":{"description":"Returns a new string object containing a copy of <i>str</i>.\n\nThe optional <i>encoding</i> keyword argument specifies the encoding\nof the new string.\nIf not specified, the encoding of <i>str</i> is used\n(or ASCII-8BIT, if <i>str</i> is not specified).\n\nThe optional <i>capacity</i> keyword argument specifies the size\nof the internal buffer.\nThis may improve performance, when the string will be concatenated many\ntimes (causing many realloc calls).","name":"initialize","namespace":"String","path":"String#initialize","type":"instance_method","visibility":"public"},"String#initialize_copy":{"description":"Replaces the contents and taintedness of <i>str</i> with the corresponding\nvalues in <i>other_str</i>.\n\n   s = \"hello\"         #=> \"hello\"\n   s.replace \"world\"   #=> \"world\"","name":"initialize_copy","namespace":"String","path":"String#initialize_copy","type":"instance_method","visibility":"public"},"String#insert":{"description":"Inserts <i>other_str</i> before the character at the given\n<i>index</i>, modifying <i>str</i>. Negative indices count from the\nend of the string, and insert <em>after</em> the given character.\nThe intent is insert <i>aString</i> so that it starts at the given\n<i>index</i>.\n\n   \"abcd\".insert(0, 'X')    #=> \"Xabcd\"\n   \"abcd\".insert(3, 'X')    #=> \"abcXd\"\n   \"abcd\".insert(4, 'X')    #=> \"abcdX\"\n   \"abcd\".insert(-3, 'X')   #=> \"abXcd\"\n   \"abcd\".insert(-1, 'X')   #=> \"abcdX\"","name":"insert","namespace":"String","path":"String#insert","type":"instance_method","visibility":"public"},"String#inspect":{"description":"Returns a printable version of _str_, surrounded by quote marks,\nwith special characters escaped.\n\n   str = \"hello\"\n   str[3] = \"\\b\"\n   str.inspect       #=> \"\\\"hel\\\\bo\\\"\"","name":"inspect","namespace":"String","path":"String#inspect","type":"instance_method","visibility":"public"},"String#intern":{"description":"Returns the <code>Symbol</code> corresponding to <i>str</i>, creating the\nsymbol if it did not previously exist. See <code>Symbol#id2name</code>.\n\n   \"Koala\".intern         #=> :Koala\n   s = 'cat'.to_sym       #=> :cat\n   s == :cat              #=> true\n   s = '@cat'.to_sym      #=> :@cat\n   s == :@cat             #=> true\n\nThis can also be used to create symbols that cannot be represented using the\n<code>:xxx</code> notation.\n\n   'cat and dog'.to_sym   #=> :\"cat and dog\"","name":"intern","namespace":"String","path":"String#intern","type":"instance_method","visibility":"public"},"String#length":{"description":"Returns the character length of <i>str</i>.","name":"length","namespace":"String","path":"String#length","type":"instance_method","visibility":"public"},"String#lines":{"description":"Returns an array of lines in <i>str</i> split using the supplied\nrecord separator (<code>$/</code> by default).  This is a\nshorthand for <code>str.each_line(separator).to_a</code>.\n\nIf a block is given, which is a deprecated form, works the same as\n<code>each_line</code>.","name":"lines","namespace":"String","path":"String#lines","type":"instance_method","visibility":"public"},"String#ljust":{"description":"If <i>integer</i> is greater than the length of <i>str</i>, returns a new\n<code>String</code> of length <i>integer</i> with <i>str</i> left justified\nand padded with <i>padstr</i>; otherwise, returns <i>str</i>.\n\n   \"hello\".ljust(4)            #=> \"hello\"\n   \"hello\".ljust(20)           #=> \"hello               \"\n   \"hello\".ljust(20, '1234')   #=> \"hello123412341234123\"","name":"ljust","namespace":"String","path":"String#ljust","type":"instance_method","visibility":"public"},"String#lstrip":{"description":"Returns a copy of <i>str</i> with leading whitespace removed. See also\n<code>String#rstrip</code> and <code>String#strip</code>.\n\nRefer to <code>strip</code> for the definition of whitespace.\n\n   \"  hello  \".lstrip   #=> \"hello  \"\n   \"hello\".lstrip       #=> \"hello\"","name":"lstrip","namespace":"String","path":"String#lstrip","type":"instance_method","visibility":"public"},"String#lstrip!":{"description":"Removes leading whitespace from <i>str</i>, returning <code>nil</code> if no\nchange was made. See also <code>String#rstrip!</code> and\n<code>String#strip!</code>.\n\nRefer to <code>strip</code> for the definition of whitespace.\n\n   \"  hello  \".lstrip!  #=> \"hello  \"\n   \"hello  \".lstrip!    #=> nil\n   \"hello\".lstrip!      #=> nil","name":"lstrip!","namespace":"String","path":"String#lstrip!","type":"instance_method","visibility":"public"},"String#match":{"description":"Converts <i>pattern</i> to a <code>Regexp</code> (if it isn't already one),\nthen invokes its <code>match</code> method on <i>str</i>.  If the second\nparameter is present, it specifies the position in the string to begin the\nsearch.\n\n   'hello'.match('(.)\\1')      #=> #<MatchData \"ll\" 1:\"l\">\n   'hello'.match('(.)\\1')[0]   #=> \"ll\"\n   'hello'.match(/(.)\\1/)[0]   #=> \"ll\"\n   'hello'.match(/(.)\\1/, 3)   #=> nil\n   'hello'.match('xx')         #=> nil\n\nIf a block is given, invoke the block with MatchData if match succeed, so\nthat you can write\n\n   str.match(pat) {|m| ...}\n\ninstead of\n\n   if m = str.match(pat)\n     ...\n   end\n\nThe return value is a value from block execution in this case.","name":"match","namespace":"String","path":"String#match","type":"instance_method","visibility":"public"},"String#match?":{"description":"Converts _pattern_ to a +Regexp+ (if it isn't already one), then\nreturns a +true+ or +false+ indicates whether the regexp is\nmatched _str_ or not without updating <code>$~</code> and other\nrelated variables.  If the second parameter is present, it\nspecifies the position in the string to begin the search.\n\n   \"Ruby\".match?(/R.../)    #=> true\n   \"Ruby\".match?(/R.../, 1) #=> false\n   \"Ruby\".match?(/P.../)    #=> false\n   $&                       #=> nil","name":"match?","namespace":"String","path":"String#match?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"String#next":{"description":"Returns the successor to <i>str</i>. The successor is calculated by\nincrementing characters starting from the rightmost alphanumeric (or\nthe rightmost character if there are no alphanumerics) in the\nstring. Incrementing a digit always results in another digit, and\nincrementing a letter results in another letter of the same case.\nIncrementing nonalphanumerics uses the underlying character set's\ncollating sequence.\n\nIf the increment generates a ``carry,'' the character to the left of\nit is incremented. This process repeats until there is no carry,\nadding an additional character if necessary.\n\n   \"abcd\".succ        #=> \"abce\"\n   \"THX1138\".succ     #=> \"THX1139\"\n   \"<<koala>>\".succ   #=> \"<<koalb>>\"\n   \"1999zzz\".succ     #=> \"2000aaa\"\n   \"ZZZ9999\".succ     #=> \"AAAA0000\"\n   \"***\".succ         #=> \"**+\"","name":"next","namespace":"String","path":"String#next","type":"instance_method","visibility":"public"},"String#next!":{"description":"Equivalent to <code>String#succ</code>, but modifies the receiver in\nplace.","name":"next!","namespace":"String","path":"String#next!","type":"instance_method","visibility":"public"},"String#oct":{"description":"Treats leading characters of <i>str</i> as a string of octal digits (with an\noptional sign) and returns the corresponding number.  Returns 0 if the\nconversion fails.\n\n   \"123\".oct       #=> 83\n   \"-377\".oct      #=> -255\n   \"bad\".oct       #=> 0\n   \"0377bad\".oct   #=> 255\n\nIf +str+ starts with <code>0</code>, radix indicators are honored.\nSee Kernel#Integer.","name":"oct","namespace":"String","path":"String#oct","type":"instance_method","visibility":"public"},"String#ord":{"description":"Return the <code>Integer</code> ordinal of a one-character string.\n\n   \"a\".ord         #=> 97","name":"ord","namespace":"String","path":"String#ord","type":"instance_method","visibility":"public"},"String#partition":{"description":"Searches <i>sep</i> or pattern (<i>regexp</i>) in the string\nand returns the part before it, the match, and the part\nafter it.\nIf it is not found, returns two empty strings and <i>str</i>.\n\n   \"hello\".partition(\"l\")         #=> [\"he\", \"l\", \"lo\"]\n   \"hello\".partition(\"x\")         #=> [\"hello\", \"\", \"\"]\n   \"hello\".partition(/.l/)        #=> [\"h\", \"el\", \"lo\"]","name":"partition","namespace":"String","path":"String#partition","type":"instance_method","visibility":"public"},"String#prepend":{"description":"Prepend---Prepend the given strings to <i>str</i>.\n\n   a = \"!\"\n   a.prepend(\"hello \", \"world\") #=> \"hello world!\"\n   a                            #=> \"hello world!\"\n\nSee also String#concat.","name":"prepend","namespace":"String","path":"String#prepend","type":"instance_method","visibility":"public"},"String#replace":{"description":"Replaces the contents and taintedness of <i>str</i> with the corresponding\nvalues in <i>other_str</i>.\n\n   s = \"hello\"         #=> \"hello\"\n   s.replace \"world\"   #=> \"world\"","name":"replace","namespace":"String","path":"String#replace","type":"instance_method","visibility":"public"},"String#reverse":{"description":"Returns a new string with the characters from <i>str</i> in reverse order.\n\n   \"stressed\".reverse   #=> \"desserts\"","name":"reverse","namespace":"String","path":"String#reverse","type":"instance_method","visibility":"public"},"String#reverse!":{"description":"Reverses <i>str</i> in place.","name":"reverse!","namespace":"String","path":"String#reverse!","type":"instance_method","visibility":"public"},"String#rindex":{"description":"Returns the index of the last occurrence of the given <i>substring</i> or\npattern (<i>regexp</i>) in <i>str</i>. Returns <code>nil</code> if not\nfound. If the second parameter is present, it specifies the position in the\nstring to end the search---characters beyond this point will not be\nconsidered.\n\n   \"hello\".rindex('e')             #=> 1\n   \"hello\".rindex('l')             #=> 3\n   \"hello\".rindex('a')             #=> nil\n   \"hello\".rindex(?e)              #=> 1\n   \"hello\".rindex(/[aeiou]/, -2)   #=> 1","name":"rindex","namespace":"String","path":"String#rindex","type":"instance_method","visibility":"public"},"String#rjust":{"description":"If <i>integer</i> is greater than the length of <i>str</i>, returns a new\n<code>String</code> of length <i>integer</i> with <i>str</i> right justified\nand padded with <i>padstr</i>; otherwise, returns <i>str</i>.\n\n   \"hello\".rjust(4)            #=> \"hello\"\n   \"hello\".rjust(20)           #=> \"               hello\"\n   \"hello\".rjust(20, '1234')   #=> \"123412341234123hello\"","name":"rjust","namespace":"String","path":"String#rjust","type":"instance_method","visibility":"public"},"String#rpartition":{"description":"Searches <i>sep</i> or pattern (<i>regexp</i>) in the string from the end\nof the string, and returns the part before it, the match, and the part\nafter it.\nIf it is not found, returns two empty strings and <i>str</i>.\n\n   \"hello\".rpartition(\"l\")         #=> [\"hel\", \"l\", \"o\"]\n   \"hello\".rpartition(\"x\")         #=> [\"\", \"\", \"hello\"]\n   \"hello\".rpartition(/.l/)        #=> [\"he\", \"ll\", \"o\"]","name":"rpartition","namespace":"String","path":"String#rpartition","type":"instance_method","visibility":"public"},"String#rstrip":{"description":"Returns a copy of <i>str</i> with trailing whitespace removed. See also\n<code>String#lstrip</code> and <code>String#strip</code>.\n\nRefer to <code>strip</code> for the definition of whitespace.\n\n   \"  hello  \".rstrip   #=> \"  hello\"\n   \"hello\".rstrip       #=> \"hello\"","name":"rstrip","namespace":"String","path":"String#rstrip","type":"instance_method","visibility":"public"},"String#rstrip!":{"description":"Removes trailing whitespace from <i>str</i>, returning <code>nil</code> if\nno change was made. See also <code>String#lstrip!</code> and\n<code>String#strip!</code>.\n\nRefer to <code>strip</code> for the definition of whitespace.\n\n   \"  hello  \".rstrip!  #=> \"  hello\"\n   \"  hello\".rstrip!    #=> nil\n   \"hello\".rstrip!      #=> nil","name":"rstrip!","namespace":"String","path":"String#rstrip!","type":"instance_method","visibility":"public"},"String#scan":{"description":"Both forms iterate through <i>str</i>, matching the pattern (which may be a\n<code>Regexp</code> or a <code>String</code>). For each match, a result is\ngenerated and either added to the result array or passed to the block. If\nthe pattern contains no groups, each individual result consists of the\nmatched string, <code>$&</code>.  If the pattern contains groups, each\nindividual result is itself an array containing one entry per group.\n\n   a = \"cruel world\"\n   a.scan(/\\w+/)        #=> [\"cruel\", \"world\"]\n   a.scan(/.../)        #=> [\"cru\", \"el \", \"wor\"]\n   a.scan(/(...)/)      #=> [[\"cru\"], [\"el \"], [\"wor\"]]\n   a.scan(/(..)(..)/)   #=> [[\"cr\", \"ue\"], [\"l \", \"wo\"]]\n\nAnd the block form:\n\n   a.scan(/\\w+/) {|w| print \"<<#{w}>> \" }\n   print \"\\n\"\n   a.scan(/(.)(.)/) {|x,y| print y, x }\n   print \"\\n\"\n\n<em>produces:</em>\n\n   <<cruel>> <<world>>\n   rceu lowlr","name":"scan","namespace":"String","path":"String#scan","type":"instance_method","visibility":"public"},"String#scrub":{"description":"If the string is invalid byte sequence then replace invalid bytes with given replacement\ncharacter, else returns self.\nIf block is given, replace invalid bytes with returned value of the block.\n\n   \"abc\\u3042\\x81\".scrub #=> \"abc\\u3042\\uFFFD\"\n   \"abc\\u3042\\x81\".scrub(\"*\") #=> \"abc\\u3042*\"\n   \"abc\\u3042\\xE3\\x80\".scrub{|bytes| '<'+bytes.unpack('H*')[0]+'>' } #=> \"abc\\u3042<e380>\"","name":"scrub","namespace":"String","path":"String#scrub","type":"instance_method","visibility":"public"},"String#scrub!":{"description":"If the string is invalid byte sequence then replace invalid bytes with given replacement\ncharacter, else returns self.\nIf block is given, replace invalid bytes with returned value of the block.\n\n   \"abc\\u3042\\x81\".scrub! #=> \"abc\\u3042\\uFFFD\"\n   \"abc\\u3042\\x81\".scrub!(\"*\") #=> \"abc\\u3042*\"\n   \"abc\\u3042\\xE3\\x80\".scrub!{|bytes| '<'+bytes.unpack('H*')[0]+'>' } #=> \"abc\\u3042<e380>\"","name":"scrub!","namespace":"String","path":"String#scrub!","type":"instance_method","visibility":"public"},"String#setbyte":{"description":"modifies the <i>index</i>th byte as <i>integer</i>.","name":"setbyte","namespace":"String","path":"String#setbyte","type":"instance_method","visibility":"public"},"String#size":{"description":"Returns the character length of <i>str</i>.","name":"size","namespace":"String","path":"String#size","type":"instance_method","visibility":"public"},"String#slice":{"description":"Element Reference --- If passed a single +index+, returns a substring of\none character at that index. If passed a +start+ index and a +length+,\nreturns a substring containing +length+ characters starting at the\n+start+ index. If passed a +range+, its beginning and end are interpreted as\noffsets delimiting the substring to be returned.\n\nIn these three cases, if an index is negative, it is counted from the end\nof the string.  For the +start+ and +range+ cases the starting index\nis just before a character and an index matching the string's size.\nAdditionally, an empty string is returned when the starting index for a\ncharacter range is at the end of the string.\n\nReturns +nil+ if the initial index falls outside the string or the length\nis negative.\n\nIf a +Regexp+ is supplied, the matching portion of the string is\nreturned.  If a +capture+ follows the regular expression, which may be a\ncapture group index or name, follows the regular expression that component\nof the MatchData is returned instead.\n\nIf a +match_str+ is given, that string is returned if it occurs in\nthe string.\n\nReturns +nil+ if the regular expression does not match or the match string\ncannot be found.\n\n   a = \"hello there\"\n\n   a[1]                   #=> \"e\"\n   a[2, 3]                #=> \"llo\"\n   a[2..3]                #=> \"ll\"\n\n   a[-3, 2]               #=> \"er\"\n   a[7..-2]               #=> \"her\"\n   a[-4..-2]              #=> \"her\"\n   a[-2..-4]              #=> \"\"\n\n   a[11, 0]               #=> \"\"\n   a[11]                  #=> nil\n   a[12, 0]               #=> nil\n   a[12..-1]              #=> nil\n\n   a[/[aeiou](.)\\1/]      #=> \"ell\"\n   a[/[aeiou](.)\\1/, 0]   #=> \"ell\"\n   a[/[aeiou](.)\\1/, 1]   #=> \"l\"\n   a[/[aeiou](.)\\1/, 2]   #=> nil\n\n   a[/(?<vowel>[aeiou])(?<non_vowel>[^aeiou])/, \"non_vowel\"] #=> \"l\"\n   a[/(?<vowel>[aeiou])(?<non_vowel>[^aeiou])/, \"vowel\"]     #=> \"e\"\n\n   a[\"lo\"]                #=> \"lo\"\n   a[\"bye\"]               #=> nil","name":"slice","namespace":"String","path":"String#slice","type":"instance_method","visibility":"public"},"String#slice!":{"description":"Deletes the specified portion from <i>str</i>, and returns the portion\ndeleted.\n\n   string = \"this is a string\"\n   string.slice!(2)        #=> \"i\"\n   string.slice!(3..6)     #=> \" is \"\n   string.slice!(/s.*t/)   #=> \"sa st\"\n   string.slice!(\"r\")      #=> \"r\"\n   string                  #=> \"thing\"","name":"slice!","namespace":"String","path":"String#slice!","type":"instance_method","visibility":"public"},"String#split":{"description":"Divides <i>str</i> into substrings based on a delimiter, returning an array\nof these substrings.\n\nIf <i>pattern</i> is a <code>String</code>, then its contents are used as\nthe delimiter when splitting <i>str</i>. If <i>pattern</i> is a single\nspace, <i>str</i> is split on whitespace, with leading whitespace and runs\nof contiguous whitespace characters ignored.\n\nIf <i>pattern</i> is a <code>Regexp</code>, <i>str</i> is divided where the\npattern matches. Whenever the pattern matches a zero-length string,\n<i>str</i> is split into individual characters. If <i>pattern</i> contains\ngroups, the respective matches will be returned in the array as well.\n\nIf <i>pattern</i> is <code>nil</code>, the value of <code>$;</code> is used.\nIf <code>$;</code> is <code>nil</code> (which is the default), <i>str</i> is\nsplit on whitespace as if ' ' were specified.\n\nIf the <i>limit</i> parameter is omitted, trailing null fields are\nsuppressed. If <i>limit</i> is a positive number, at most that number\nof split substrings will be returned (captured groups will be returned\nas well, but are not counted towards the limit).\nIf <i>limit</i> is <code>1</code>, the entire\nstring is returned as the only entry in an array. If negative, there is no\nlimit to the number of fields returned, and trailing null fields are not\nsuppressed.\n\nWhen the input +str+ is empty an empty Array is returned as the string is\nconsidered to have no fields to split.\n\n   \" now's  the time\".split        #=> [\"now's\", \"the\", \"time\"]\n   \" now's  the time\".split(' ')   #=> [\"now's\", \"the\", \"time\"]\n   \" now's  the time\".split(/ /)   #=> [\"\", \"now's\", \"\", \"the\", \"time\"]\n   \"1, 2.34,56, 7\".split(%r{,\\s*}) #=> [\"1\", \"2.34\", \"56\", \"7\"]\n   \"hello\".split(//)               #=> [\"h\", \"e\", \"l\", \"l\", \"o\"]\n   \"hello\".split(//, 3)            #=> [\"h\", \"e\", \"llo\"]\n   \"hi mom\".split(%r{\\s*})         #=> [\"h\", \"i\", \"m\", \"o\", \"m\"]\n\n   \"mellow yellow\".split(\"ello\")   #=> [\"m\", \"w y\", \"w\"]\n   \"1,2,,3,4,,\".split(',')         #=> [\"1\", \"2\", \"\", \"3\", \"4\"]\n   \"1,2,,3,4,,\".split(',', 4)      #=> [\"1\", \"2\", \"\", \"3,4,,\"]\n   \"1,2,,3,4,,\".split(',', -4)     #=> [\"1\", \"2\", \"\", \"3\", \"4\", \"\", \"\"]\n\n   \"1:2:3\".split(/(:)()()/, 2)     #=> [\"1\", \":\", \"\", \"\", \"2:3\"]\n\n   \"\".split(',', -1)               #=> []","name":"split","namespace":"String","path":"String#split","type":"instance_method","visibility":"public"},"String#squeeze":{"description":"Builds a set of characters from the <i>other_str</i> parameter(s) using the\nprocedure described for <code>String#count</code>. Returns a new string\nwhere runs of the same character that occur in this set are replaced by a\nsingle character. If no arguments are given, all runs of identical\ncharacters are replaced by a single character.\n\n   \"yellow moon\".squeeze                  #=> \"yelow mon\"\n   \"  now   is  the\".squeeze(\" \")         #=> \" now is the\"\n   \"putters shoot balls\".squeeze(\"m-z\")   #=> \"puters shot balls\"","name":"squeeze","namespace":"String","path":"String#squeeze","type":"instance_method","visibility":"public"},"String#squeeze!":{"description":"Squeezes <i>str</i> in place, returning either <i>str</i>, or\n<code>nil</code> if no changes were made.","name":"squeeze!","namespace":"String","path":"String#squeeze!","type":"instance_method","visibility":"public"},"String#start_with?":{"description":"Returns true if +str+ starts with one of the +prefixes+ given.\n\n  \"hello\".start_with?(\"hell\")               #=> true\n\n  # returns true if one of the prefixes matches.\n  \"hello\".start_with?(\"heaven\", \"hell\")     #=> true\n  \"hello\".start_with?(\"heaven\", \"paradise\") #=> false","name":"start_with?","namespace":"String","path":"String#start_with?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"String#strip":{"description":"Returns a copy of <i>str</i> with leading and trailing whitespace removed.\n\nWhitespace is defined as any of the following characters:\nnull, horizontal tab, line feed, vertical tab, form feed, carriage return, space.\n\n   \"    hello    \".strip   #=> \"hello\"\n   \"\\tgoodbye\\r\\n\".strip   #=> \"goodbye\"\n   \"\\x00\\t\\n\\v\\f\\r \".strip #=> \"\"","name":"strip","namespace":"String","path":"String#strip","type":"instance_method","visibility":"public"},"String#strip!":{"description":"Removes leading and trailing whitespace from <i>str</i>. Returns\n<code>nil</code> if <i>str</i> was not altered.\n\nRefer to <code>strip</code> for the definition of whitespace.","name":"strip!","namespace":"String","path":"String#strip!","type":"instance_method","visibility":"public"},"String#sub":{"description":"Returns a copy of +str+ with the _first_ occurrence of +pattern+\nreplaced by the second argument. The +pattern+ is typically a Regexp; if\ngiven as a String, any regular expression metacharacters it contains will\nbe interpreted literally, e.g. <code>'\\\\\\d'</code> will match a backslash\nfollowed by 'd', instead of a digit.\n\nIf +replacement+ is a String it will be substituted for the matched text.\nIt may contain back-references to the pattern's capture groups of the form\n<code>\"\\\\d\"</code>, where <i>d</i> is a group number, or\n<code>\"\\\\k<n>\"</code>, where <i>n</i> is a group name. If it is a\ndouble-quoted string, both back-references must be preceded by an\nadditional backslash. However, within +replacement+ the special match\nvariables, such as <code>$&</code>, will not refer to the current match.\nIf +replacement+ is a String that looks like a pattern's capture group but\nis actually not a pattern capture group e.g. <code>\"\\\\'\"</code>, then it\nwill have to be preceded by two backslashes like so <code>\"\\\\\\\\'\"</code>.\n\nIf the second argument is a Hash, and the matched text is one of its keys,\nthe corresponding value is the replacement string.\n\nIn the block form, the current match string is passed in as a parameter,\nand variables such as <code>$1</code>, <code>$2</code>, <code>$`</code>,\n<code>$&</code>, and <code>$'</code> will be set appropriately. The value\nreturned by the block will be substituted for the match on each call.\n\nThe result inherits any tainting in the original string or any supplied\nreplacement string.\n\n   \"hello\".sub(/[aeiou]/, '*')                  #=> \"h*llo\"\n   \"hello\".sub(/([aeiou])/, '<\\1>')             #=> \"h<e>llo\"\n   \"hello\".sub(/./) {|s| s.ord.to_s + ' ' }     #=> \"104 ello\"\n   \"hello\".sub(/(?<foo>[aeiou])/, '*\\k<foo>*')  #=> \"h*e*llo\"\n   'Is SHELL your preferred shell?'.sub(/[[:upper:]]{2,}/, ENV)\n    #=> \"Is /bin/bash your preferred shell?\"","name":"sub","namespace":"String","path":"String#sub","type":"instance_method","visibility":"public"},"String#sub!":{"description":"Performs the same substitution as String#sub in-place.\n\nReturns +str+ if a substitution was performed or +nil+ if no substitution\nwas performed.","name":"sub!","namespace":"String","path":"String#sub!","type":"instance_method","visibility":"public"},"String#succ":{"description":"Returns the successor to <i>str</i>. The successor is calculated by\nincrementing characters starting from the rightmost alphanumeric (or\nthe rightmost character if there are no alphanumerics) in the\nstring. Incrementing a digit always results in another digit, and\nincrementing a letter results in another letter of the same case.\nIncrementing nonalphanumerics uses the underlying character set's\ncollating sequence.\n\nIf the increment generates a ``carry,'' the character to the left of\nit is incremented. This process repeats until there is no carry,\nadding an additional character if necessary.\n\n   \"abcd\".succ        #=> \"abce\"\n   \"THX1138\".succ     #=> \"THX1139\"\n   \"<<koala>>\".succ   #=> \"<<koalb>>\"\n   \"1999zzz\".succ     #=> \"2000aaa\"\n   \"ZZZ9999\".succ     #=> \"AAAA0000\"\n   \"***\".succ         #=> \"**+\"","name":"succ","namespace":"String","path":"String#succ","type":"instance_method","visibility":"public"},"String#succ!":{"description":"Equivalent to <code>String#succ</code>, but modifies the receiver in\nplace.","name":"succ!","namespace":"String","path":"String#succ!","type":"instance_method","visibility":"public"},"String#sum":{"description":"Returns a basic <em>n</em>-bit checksum of the characters in <i>str</i>,\nwhere <em>n</em> is the optional <code>Integer</code> parameter, defaulting\nto 16. The result is simply the sum of the binary value of each byte in\n<i>str</i> modulo <code>2**n - 1</code>. This is not a particularly good\nchecksum.","name":"sum","namespace":"String","path":"String#sum","type":"instance_method","visibility":"public"},"String#swapcase":{"description":"Returns a copy of <i>str</i> with uppercase alphabetic characters converted\nto lowercase and lowercase characters converted to uppercase.\n\nSee String#downcase for meaning of +options+ and use with different encodings.\n\n   \"Hello\".swapcase          #=> \"hELLO\"\n   \"cYbEr_PuNk11\".swapcase   #=> \"CyBeR_pUnK11\"","name":"swapcase","namespace":"String","path":"String#swapcase","type":"instance_method","visibility":"public"},"String#swapcase!":{"description":"Equivalent to <code>String#swapcase</code>, but modifies the receiver in\nplace, returning <i>str</i>, or <code>nil</code> if no changes were made.\n\nSee String#downcase for meaning of +options+ and use with different encodings.","name":"swapcase!","namespace":"String","path":"String#swapcase!","type":"instance_method","visibility":"public"},"String#to_c":{"description":"Returns a complex which denotes the string form.  The parser\nignores leading whitespaces and trailing garbage.  Any digit\nsequences can be separated by an underscore.  Returns zero for null\nor garbage string.\n\n   '9'.to_c           #=> (9+0i)\n   '2.5'.to_c         #=> (2.5+0i)\n   '2.5/1'.to_c       #=> ((5/2)+0i)\n   '-3/2'.to_c        #=> ((-3/2)+0i)\n   '-i'.to_c          #=> (0-1i)\n   '45i'.to_c         #=> (0+45i)\n   '3-4i'.to_c        #=> (3-4i)\n   '-4e2-4e-2i'.to_c  #=> (-400.0-0.04i)\n   '-0.0-0.0i'.to_c   #=> (-0.0-0.0i)\n   '1/2+3/4i'.to_c    #=> ((1/2)+(3/4)*i)\n   'ruby'.to_c        #=> (0+0i)\n\nSee Kernel.Complex.","name":"to_c","namespace":"String","path":"String#to_c","type":"instance_method","visibility":"public"},"String#to_f":{"description":"Returns the result of interpreting leading characters in <i>str</i> as a\nfloating point number. Extraneous characters past the end of a valid number\nare ignored. If there is not a valid number at the start of <i>str</i>,\n<code>0.0</code> is returned. This method never raises an exception.\n\n   \"123.45e1\".to_f        #=> 1234.5\n   \"45.67 degrees\".to_f   #=> 45.67\n   \"thx1138\".to_f         #=> 0.0","name":"to_f","namespace":"String","path":"String#to_f","type":"instance_method","visibility":"public"},"String#to_i":{"description":"Returns the result of interpreting leading characters in <i>str</i> as an\ninteger base <i>base</i> (between 2 and 36). Extraneous characters past the\nend of a valid number are ignored. If there is not a valid number at the\nstart of <i>str</i>, <code>0</code> is returned. This method never raises an\nexception when <i>base</i> is valid.\n\n   \"12345\".to_i             #=> 12345\n   \"99 red balloons\".to_i   #=> 99\n   \"0a\".to_i                #=> 0\n   \"0a\".to_i(16)            #=> 10\n   \"hello\".to_i             #=> 0\n   \"1100101\".to_i(2)        #=> 101\n   \"1100101\".to_i(8)        #=> 294977\n   \"1100101\".to_i(10)       #=> 1100101\n   \"1100101\".to_i(16)       #=> 17826049","name":"to_i","namespace":"String","path":"String#to_i","type":"instance_method","visibility":"public"},"String#to_r":{"description":"Returns the result of interpreting leading characters in +str+\nas a rational.  Leading whitespace and extraneous characters\npast the end of a valid number are ignored.\nDigit sequences can be separated by an underscore.\nIf there is not a valid number at the start of +str+,\nzero is returned.  This method never raises an exception.\n\n   '  2  '.to_r       #=> (2/1)\n   '300/2'.to_r       #=> (150/1)\n   '-9.2'.to_r        #=> (-46/5)\n   '-9.2e2'.to_r      #=> (-920/1)\n   '1_234_567'.to_r   #=> (1234567/1)\n   '21 June 09'.to_r  #=> (21/1)\n   '21/06/09'.to_r    #=> (7/2)\n   'BWV 1079'.to_r    #=> (0/1)\n\nNOTE: \"0.3\".to_r isn't the same as 0.3.to_r.  The former is\nequivalent to \"3/10\".to_r, but the latter isn't so.\n\n   \"0.3\".to_r == 3/10r  #=> true\n   0.3.to_r   == 3/10r  #=> false\n\nSee also Kernel#Rational.","name":"to_r","namespace":"String","path":"String#to_r","type":"instance_method","visibility":"public"},"String#to_s":{"description":"Returns +self+.\n\nIf called on a subclass of String, converts the receiver to a String object.","name":"to_s","namespace":"String","path":"String#to_s","type":"instance_method","visibility":"public"},"String#to_str":{"description":"Returns +self+.\n\nIf called on a subclass of String, converts the receiver to a String object.","name":"to_str","namespace":"String","path":"String#to_str","type":"instance_method","visibility":"public"},"String#to_sym":{"description":"Returns the <code>Symbol</code> corresponding to <i>str</i>, creating the\nsymbol if it did not previously exist. See <code>Symbol#id2name</code>.\n\n   \"Koala\".intern         #=> :Koala\n   s = 'cat'.to_sym       #=> :cat\n   s == :cat              #=> true\n   s = '@cat'.to_sym      #=> :@cat\n   s == :@cat             #=> true\n\nThis can also be used to create symbols that cannot be represented using the\n<code>:xxx</code> notation.\n\n   'cat and dog'.to_sym   #=> :\"cat and dog\"","name":"to_sym","namespace":"String","path":"String#to_sym","type":"instance_method","visibility":"public"},"String#tr":{"description":"Returns a copy of +str+ with the characters in +from_str+ replaced by the\ncorresponding characters in +to_str+.  If +to_str+ is shorter than\n+from_str+, it is padded with its last character in order to maintain the\ncorrespondence.\n\n   \"hello\".tr('el', 'ip')      #=> \"hippo\"\n   \"hello\".tr('aeiou', '*')    #=> \"h*ll*\"\n   \"hello\".tr('aeiou', 'AA*')  #=> \"hAll*\"\n\nBoth strings may use the <code>c1-c2</code> notation to denote ranges of\ncharacters, and +from_str+ may start with a <code>^</code>, which denotes\nall characters except those listed.\n\n   \"hello\".tr('a-y', 'b-z')    #=> \"ifmmp\"\n   \"hello\".tr('^aeiou', '*')   #=> \"*e**o\"\n\nThe backslash character <code>\\\\</code> can be used to escape\n<code>^</code> or <code>-</code> and is otherwise ignored unless it\nappears at the end of a range or the end of the +from_str+ or +to_str+:\n\n   \"hello^world\".tr(\"\\\\^aeiou\", \"*\") #=> \"h*ll**w*rld\"\n   \"hello-world\".tr(\"a\\\\-eo\", \"*\")   #=> \"h*ll**w*rld\"\n\n   \"hello\\r\\nworld\".tr(\"\\r\", \"\")   #=> \"hello\\nworld\"\n   \"hello\\r\\nworld\".tr(\"\\\\r\", \"\")  #=> \"hello\\r\\nwold\"\n   \"hello\\r\\nworld\".tr(\"\\\\\\r\", \"\") #=> \"hello\\nworld\"\n\n   \"X['\\\\b']\".tr(\"X\\\\\", \"\")   #=> \"['b']\"\n   \"X['\\\\b']\".tr(\"X-\\\\]\", \"\") #=> \"'b'\"","name":"tr","namespace":"String","path":"String#tr","type":"instance_method","visibility":"public"},"String#tr!":{"description":"Translates <i>str</i> in place, using the same rules as\n<code>String#tr</code>. Returns <i>str</i>, or <code>nil</code> if no\nchanges were made.","name":"tr!","namespace":"String","path":"String#tr!","type":"instance_method","visibility":"public"},"String#tr_s":{"description":"Processes a copy of <i>str</i> as described under <code>String#tr</code>,\nthen removes duplicate characters in regions that were affected by the\ntranslation.\n\n   \"hello\".tr_s('l', 'r')     #=> \"hero\"\n   \"hello\".tr_s('el', '*')    #=> \"h*o\"\n   \"hello\".tr_s('el', 'hx')   #=> \"hhxo\"","name":"tr_s","namespace":"String","path":"String#tr_s","type":"instance_method","visibility":"public"},"String#tr_s!":{"description":"Performs <code>String#tr_s</code> processing on <i>str</i> in place,\nreturning <i>str</i>, or <code>nil</code> if no changes were made.","name":"tr_s!","namespace":"String","path":"String#tr_s!","type":"instance_method","visibility":"public"},"String#undump":{"description":"Produces unescaped version of +str+.\nSee also String#dump because String#undump does inverse of String#dump.\n\n  \"\\\"hello \\\\n ''\\\"\".undump #=> \"hello \\n ''\"","name":"undump","namespace":"String","path":"String#undump","type":"instance_method","visibility":"public"},"String#unicode_normalize":{"description":"Unicode Normalization---Returns a normalized form of +str+,\nusing Unicode normalizations NFC, NFD, NFKC, or NFKD.\nThe normalization form used is determined by +form+, which can\nbe any of the four values +:nfc+, +:nfd+, +:nfkc+, or +:nfkd+.\nThe default is +:nfc+.\n\nIf the string is not in a Unicode Encoding, then an Exception is raised.\nIn this context, 'Unicode Encoding' means any of UTF-8, UTF-16BE/LE,\nand UTF-32BE/LE, as well as GB18030, UCS_2BE, and UCS_4BE.\nAnything other than UTF-8 is implemented by converting to UTF-8,\nwhich makes it slower than UTF-8.\n\n  \"a\\u0300\".unicode_normalize        #=> \"\\u00E0\"\n  \"a\\u0300\".unicode_normalize(:nfc)  #=> \"\\u00E0\"\n  \"\\u00E0\".unicode_normalize(:nfd)   #=> \"a\\u0300\"\n  \"\\xE0\".force_encoding('ISO-8859-1').unicode_normalize(:nfd)\n                                     #=> Encoding::CompatibilityError raised","name":"unicode_normalize","namespace":"String","path":"String#unicode_normalize","type":"instance_method","visibility":"public"},"String#unicode_normalize!":{"description":"Destructive version of String#unicode_normalize, doing Unicode\nnormalization in place.","name":"unicode_normalize!","namespace":"String","path":"String#unicode_normalize!","type":"instance_method","visibility":"public"},"String#unicode_normalized?":{"description":"Checks whether +str+ is in Unicode normalization form +form+,\nwhich can be any of the four values +:nfc+, +:nfd+, +:nfkc+, or +:nfkd+.\nThe default is +:nfc+.\n\nIf the string is not in a Unicode Encoding, then an Exception is raised.\nFor details, see String#unicode_normalize.\n\n  \"a\\u0300\".unicode_normalized?        #=> false\n  \"a\\u0300\".unicode_normalized?(:nfd)  #=> true\n  \"\\u00E0\".unicode_normalized?         #=> true\n  \"\\u00E0\".unicode_normalized?(:nfd)   #=> false\n  \"\\xE0\".force_encoding('ISO-8859-1').unicode_normalized?\n                                       #=> Encoding::CompatibilityError raised","name":"unicode_normalized?","namespace":"String","path":"String#unicode_normalized?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"String#unpack":{"description":"Decodes <i>str</i> (which may contain binary data) according to the\nformat string, returning an array of each value extracted. The\nformat string consists of a sequence of single-character directives,\nsummarized in the table at the end of this entry.\nEach directive may be followed\nby a number, indicating the number of times to repeat with this\ndirective. An asterisk (``<code>*</code>'') will use up all\nremaining elements. The directives <code>sSiIlL</code> may each be\nfollowed by an underscore (``<code>_</code>'') or\nexclamation mark (``<code>!</code>'') to use the underlying\nplatform's native size for the specified type; otherwise, it uses a\nplatform-independent consistent size. Spaces are ignored in the\nformat string. See also <code>String#unpack1</code>,  <code>Array#pack</code>.\n\n   \"abc \\0\\0abc \\0\\0\".unpack('A6Z6')   #=> [\"abc\", \"abc \"]\n   \"abc \\0\\0\".unpack('a3a3')           #=> [\"abc\", \" \\000\\000\"]\n   \"abc \\0abc \\0\".unpack('Z*Z*')       #=> [\"abc \", \"abc \"]\n   \"aa\".unpack('b8B8')                 #=> [\"10000110\", \"01100001\"]\n   \"aaa\".unpack('h2H2c')               #=> [\"16\", \"61\", 97]\n   \"\\xfe\\xff\\xfe\\xff\".unpack('sS')     #=> [-2, 65534]\n   \"now=20is\".unpack('M*')             #=> [\"now is\"]\n   \"whole\".unpack('xax2aX2aX1aX2a')    #=> [\"h\", \"e\", \"l\", \"l\", \"o\"]\n\nThis table summarizes the various formats and the Ruby classes\nreturned by each.\n\n Integer       |         |\n Directive     | Returns | Meaning\n ------------------------------------------------------------------\n C             | Integer | 8-bit unsigned (unsigned char)\n S             | Integer | 16-bit unsigned, native endian (uint16_t)\n L             | Integer | 32-bit unsigned, native endian (uint32_t)\n Q             | Integer | 64-bit unsigned, native endian (uint64_t)\n J             | Integer | pointer width unsigned, native endian (uintptr_t)\n               |         |\n c             | Integer | 8-bit signed (signed char)\n s             | Integer | 16-bit signed, native endian (int16_t)\n l             | Integer | 32-bit signed, native endian (int32_t)\n q             | Integer | 64-bit signed, native endian (int64_t)\n j             | Integer | pointer width signed, native endian (intptr_t)\n               |         |\n S_ S!         | Integer | unsigned short, native endian\n I I_ I!       | Integer | unsigned int, native endian\n L_ L!         | Integer | unsigned long, native endian\n Q_ Q!         | Integer | unsigned long long, native endian (ArgumentError\n               |         | if the platform has no long long type.)\n J!            | Integer | uintptr_t, native endian (same with J)\n               |         |\n s_ s!         | Integer | signed short, native endian\n i i_ i!       | Integer | signed int, native endian\n l_ l!         | Integer | signed long, native endian\n q_ q!         | Integer | signed long long, native endian (ArgumentError\n               |         | if the platform has no long long type.)\n j!            | Integer | intptr_t, native endian (same with j)\n               |         |\n S> s> S!> s!> | Integer | same as the directives without \">\" except\n L> l> L!> l!> |         | big endian\n I!> i!>       |         |\n Q> q> Q!> q!> |         | \"S>\" is same as \"n\"\n J> j> J!> j!> |         | \"L>\" is same as \"N\"\n               |         |\n S< s< S!< s!< | Integer | same as the directives without \"<\" except\n L< l< L!< l!< |         | little endian\n I!< i!<       |         |\n Q< q< Q!< q!< |         | \"S<\" is same as \"v\"\n J< j< J!< j!< |         | \"L<\" is same as \"V\"\n               |         |\n n             | Integer | 16-bit unsigned, network (big-endian) byte order\n N             | Integer | 32-bit unsigned, network (big-endian) byte order\n v             | Integer | 16-bit unsigned, VAX (little-endian) byte order\n V             | Integer | 32-bit unsigned, VAX (little-endian) byte order\n               |         |\n U             | Integer | UTF-8 character\n w             | Integer | BER-compressed integer (see Array.pack)\n\n Float        |         |\n Directive    | Returns | Meaning\n -----------------------------------------------------------------\n D d          | Float   | double-precision, native format\n F f          | Float   | single-precision, native format\n E            | Float   | double-precision, little-endian byte order\n e            | Float   | single-precision, little-endian byte order\n G            | Float   | double-precision, network (big-endian) byte order\n g            | Float   | single-precision, network (big-endian) byte order\n\n String       |         |\n Directive    | Returns | Meaning\n -----------------------------------------------------------------\n A            | String  | arbitrary binary string (remove trailing nulls and ASCII spaces)\n a            | String  | arbitrary binary string\n Z            | String  | null-terminated string\n B            | String  | bit string (MSB first)\n b            | String  | bit string (LSB first)\n H            | String  | hex string (high nibble first)\n h            | String  | hex string (low nibble first)\n u            | String  | UU-encoded string\n M            | String  | quoted-printable, MIME encoding (see RFC2045)\n m            | String  | base64 encoded string (RFC 2045) (default)\n              |         | base64 encoded string (RFC 4648) if followed by 0\n P            | String  | pointer to a structure (fixed-length string)\n p            | String  | pointer to a null-terminated string\n\n Misc.        |         |\n Directive    | Returns | Meaning\n -----------------------------------------------------------------\n @            | ---     | skip to the offset given by the length argument\n X            | ---     | skip backward one byte\n x            | ---     | skip forward one byte\n\nHISTORY\n\n* J, J! j, and j! are available since Ruby 2.3.\n* Q_, Q!, q_, and q! are available since Ruby 2.1.\n* I!<, i!<, I!>, and i!> are available since Ruby 1.9.3.","name":"unpack","namespace":"String","path":"String#unpack","type":"instance_method","visibility":"public"},"String#unpack1":{"description":"Decodes <i>str</i> (which may contain binary data) according to the\nformat string, returning the first value extracted.\nSee also <code>String#unpack</code>, <code>Array#pack</code>.","name":"unpack1","namespace":"String","path":"String#unpack1","type":"instance_method","visibility":"public"},"String#upcase":{"description":"Returns a copy of <i>str</i> with all lowercase letters replaced with their\nuppercase counterparts.\n\nSee String#downcase for meaning of +options+ and use with different encodings.\n\n   \"hEllO\".upcase   #=> \"HELLO\"","name":"upcase","namespace":"String","path":"String#upcase","type":"instance_method","visibility":"public"},"String#upcase!":{"description":"Upcases the contents of <i>str</i>, returning <code>nil</code> if no changes\nwere made.\n\nSee String#downcase for meaning of +options+ and use with different encodings.","name":"upcase!","namespace":"String","path":"String#upcase!","type":"instance_method","visibility":"public"},"String#upto":{"description":"Iterates through successive values, starting at <i>str</i> and\nending at <i>other_str</i> inclusive, passing each value in turn to\nthe block. The <code>String#succ</code> method is used to generate\neach value.  If optional second argument exclusive is omitted or is false,\nthe last value will be included; otherwise it will be excluded.\n\nIf no block is given, an enumerator is returned instead.\n\n   \"a8\".upto(\"b6\") {|s| print s, ' ' }\n   for s in \"a8\"..\"b6\"\n     print s, ' '\n   end\n\n<em>produces:</em>\n\n   a8 a9 b0 b1 b2 b3 b4 b5 b6\n   a8 a9 b0 b1 b2 b3 b4 b5 b6\n\nIf <i>str</i> and <i>other_str</i> contains only ascii numeric characters,\nboth are recognized as decimal numbers. In addition, the width of\nstring (e.g. leading zeros) is handled appropriately.\n\n   \"9\".upto(\"11\").to_a   #=> [\"9\", \"10\", \"11\"]\n   \"25\".upto(\"5\").to_a   #=> []\n   \"07\".upto(\"11\").to_a  #=> [\"07\", \"08\", \"09\", \"10\", \"11\"]","name":"upto","namespace":"String","path":"String#upto","type":"instance_method","visibility":"public"},"String#valid_encoding?":{"description":"Returns true for a string which is encoded correctly.\n\n  \"\\xc2\\xa1\".force_encoding(\"UTF-8\").valid_encoding?  #=> true\n  \"\\xc2\".force_encoding(\"UTF-8\").valid_encoding?      #=> false\n  \"\\x80\".force_encoding(\"UTF-8\").valid_encoding?      #=> false","name":"valid_encoding?","namespace":"String","path":"String#valid_encoding?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"String.try_convert":{"description":"Try to convert <i>obj</i> into a String, using to_str method.\nReturns converted string or nil if <i>obj</i> cannot be converted\nfor any reason.\n\n   String.try_convert(\"str\")     #=> \"str\"\n   String.try_convert(/re/)      #=> nil","name":"try_convert","namespace":"String","path":"String.try_convert","type":"class_method","visibility":"public"},"Float":{"description":"******************************************************************\n\n\n  Float objects represent inexact real numbers using the native\n  architecture's double-precision floating point representation.\n\n  Floating point has a different arithmetic and is an inexact number.\n  So you should know its esoteric system. See following:\n\n  - http://docs.sun.com/source/806-3568/ncg_goldberg.html\n  - http://wiki.github.com/rdp/ruby_tutorials_core/ruby-talk-faq#wiki-floats_imprecise\n  - http://en.wikipedia.org/wiki/Floating_point#Accuracy_problems","name":"Float","namespace":"","path":"Float","type":"class","visibility":"public"},"Float#%":{"description":"Returns the modulo after division of +float+ by +other+.\n\n   6543.21.modulo(137)      #=> 104.21000000000004\n   6543.21.modulo(137.24)   #=> 92.92999999999961","name":"%","namespace":"Float","path":"Float#%","type":"instance_method","visibility":"public"},"Float#*":{"description":"Returns a new Float which is the product of +float+ and +other+.","name":"*","namespace":"Float","path":"Float#*","type":"instance_method","visibility":"public"},"Float#**":{"description":"Raises +float+ to the power of +other+.\n\n   2.0**3   #=> 8.0","name":"**","namespace":"Float","path":"Float#**","type":"instance_method","visibility":"public"},"Float#+":{"description":"Returns a new Float which is the sum of +float+ and +other+.","name":"+","namespace":"Float","path":"Float#+","type":"instance_method","visibility":"public"},"Float#-":{"description":"Returns a new Float which is the difference of +float+ and +other+.","name":"-","namespace":"Float","path":"Float#-","type":"instance_method","visibility":"public"},"Float#-@":{"description":"Returns +float+, negated.","name":"-@","namespace":"Float","path":"Float#-@","type":"instance_method","visibility":"public"},"Float#/":{"description":"Returns a new Float which is the result of dividing +float+ by +other+.","name":"/","namespace":"Float","path":"Float#/","type":"instance_method","visibility":"public"},"Float#<":{"description":"Returns +true+ if +float+ is less than +real+.\n\nThe result of <code>NaN < NaN</code> is undefined,\nso an implementation-dependent value is returned.","name":"<","namespace":"Float","path":"Float#<","type":"instance_method","visibility":"public"},"Float#<=":{"description":"Returns +true+ if +float+ is less than or equal to +real+.\n\nThe result of <code>NaN <= NaN</code> is undefined,\nso an implementation-dependent value is returned.","name":"<=","namespace":"Float","path":"Float#<=","type":"instance_method","visibility":"public"},"Float#<=>":{"description":"Returns -1, 0, or +1 depending on whether +float+ is\nless than, equal to, or greater than +real+.\nThis is the basis for the tests in the Comparable module.\n\nThe result of <code>NaN <=> NaN</code> is undefined,\nso an implementation-dependent value is returned.\n\n+nil+ is returned if the two values are incomparable.","name":"<=>","namespace":"Float","path":"Float#<=>","type":"instance_method","visibility":"public"},"Float#==":{"description":"","name":"==","namespace":"Float","path":"Float#==","type":"instance_method","visibility":"public"},"Float#===":{"description":"","name":"===","namespace":"Float","path":"Float#===","type":"instance_method","visibility":"public"},"Float#>":{"description":"Returns +true+ if +float+ is greater than +real+.\n\nThe result of <code>NaN > NaN</code> is undefined,\nso an implementation-dependent value is returned.","name":">","namespace":"Float","path":"Float#>","type":"instance_method","visibility":"public"},"Float#>=":{"description":"Returns +true+ if +float+ is greater than or equal to +real+.\n\nThe result of <code>NaN >= NaN</code> is undefined,\nso an implementation-dependent value is returned.","name":">=","namespace":"Float","path":"Float#>=","type":"instance_method","visibility":"public"},"Float#abs":{"description":"Returns the absolute value of +float+.\n\n   (-34.56).abs   #=> 34.56\n   -34.56.abs     #=> 34.56\n   34.56.abs      #=> 34.56\n\nFloat#magnitude is an alias for Float#abs.","name":"abs","namespace":"Float","path":"Float#abs","type":"instance_method","visibility":"public"},"Float#angle":{"description":"Returns 0 if the value is positive, pi otherwise.","name":"angle","namespace":"Float","path":"Float#angle","type":"instance_method","visibility":"public"},"Float#arg":{"description":"Returns 0 if the value is positive, pi otherwise.","name":"arg","namespace":"Float","path":"Float#arg","type":"instance_method","visibility":"public"},"Float#ceil":{"description":"Returns the smallest number greater than or equal to +float+ with\na precision of +ndigits+ decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer\nwith at least <code>ndigits.abs</code> trailing zeros.\n\nReturns a floating point number when +ndigits+ is positive,\notherwise returns an integer.\n\n   1.2.ceil      #=> 2\n   2.0.ceil      #=> 2\n   (-1.2).ceil   #=> -1\n   (-2.0).ceil   #=> -2\n\n   1.234567.ceil(2)   #=> 1.24\n   1.234567.ceil(3)   #=> 1.235\n   1.234567.ceil(4)   #=> 1.2346\n   1.234567.ceil(5)   #=> 1.23457\n\n   34567.89.ceil(-5)  #=> 100000\n   34567.89.ceil(-4)  #=> 40000\n   34567.89.ceil(-3)  #=> 35000\n   34567.89.ceil(-2)  #=> 34600\n   34567.89.ceil(-1)  #=> 34570\n   34567.89.ceil(0)   #=> 34568\n   34567.89.ceil(1)   #=> 34567.9\n   34567.89.ceil(2)   #=> 34567.89\n   34567.89.ceil(3)   #=> 34567.89\n\nNote that the limited precision of floating point arithmetic\nmight lead to surprising results:\n\n   (2.1 / 0.7).ceil  #=> 4 (!)","name":"ceil","namespace":"Float","path":"Float#ceil","type":"instance_method","visibility":"public"},"Float#coerce":{"description":"Returns an array with both +numeric+ and +float+ represented as Float\nobjects.\n\nThis is achieved by converting +numeric+ to a Float.\n\n   1.2.coerce(3)       #=> [3.0, 1.2]\n   2.5.coerce(1.1)     #=> [1.1, 2.5]","name":"coerce","namespace":"Float","path":"Float#coerce","type":"instance_method","visibility":"public"},"Float#denominator":{"description":"Returns the denominator (always positive).  The result is machine\ndependent.\n\nSee also Float#numerator.","name":"denominator","namespace":"Float","path":"Float#denominator","type":"instance_method","visibility":"public"},"Float#divmod":{"description":"See Numeric#divmod.\n\n   42.0.divmod(6)   #=> [7, 0.0]\n   42.0.divmod(5)   #=> [8, 2.0]","name":"divmod","namespace":"Float","path":"Float#divmod","type":"instance_method","visibility":"public"},"Float#eql?":{"description":"","name":"eql?","namespace":"Float","path":"Float#eql?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Float#fdiv":{"description":"Returns <code>float / numeric</code>, same as Float#/.","name":"fdiv","namespace":"Float","path":"Float#fdiv","type":"instance_method","visibility":"public"},"Float#finite?":{"description":"Returns +true+ if +float+ is a valid IEEE floating point number,\ni.e. it is not infinite and Float#nan? is +false+.","name":"finite?","namespace":"Float","path":"Float#finite?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Float#floor":{"description":"Returns the largest number less than or equal to +float+ with\na precision of +ndigits+ decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer\nwith at least <code>ndigits.abs</code> trailing zeros.\n\nReturns a floating point number when +ndigits+ is positive,\notherwise returns an integer.\n\n   1.2.floor      #=> 1\n   2.0.floor      #=> 2\n   (-1.2).floor   #=> -2\n   (-2.0).floor   #=> -2\n\n   1.234567.floor(2)   #=> 1.23\n   1.234567.floor(3)   #=> 1.234\n   1.234567.floor(4)   #=> 1.2345\n   1.234567.floor(5)   #=> 1.23456\n\n   34567.89.floor(-5)  #=> 0\n   34567.89.floor(-4)  #=> 30000\n   34567.89.floor(-3)  #=> 34000\n   34567.89.floor(-2)  #=> 34500\n   34567.89.floor(-1)  #=> 34560\n   34567.89.floor(0)   #=> 34567\n   34567.89.floor(1)   #=> 34567.8\n   34567.89.floor(2)   #=> 34567.89\n   34567.89.floor(3)   #=> 34567.89\n\nNote that the limited precision of floating point arithmetic\nmight lead to surprising results:\n\n   (0.3 / 0.1).floor  #=> 2 (!)","name":"floor","namespace":"Float","path":"Float#floor","type":"instance_method","visibility":"public"},"Float#hash":{"description":"Returns a hash code for this float.\n\nSee also Object#hash.","name":"hash","namespace":"Float","path":"Float#hash","type":"instance_method","visibility":"public"},"Float#infinite?":{"description":"Returns +nil+, -1, or 1 depending on whether the value is\nfinite, <code>-Infinity</code>, or <code>+Infinity</code>.\n\n   (0.0).infinite?        #=> nil\n   (-1.0/0.0).infinite?   #=> -1\n   (+1.0/0.0).infinite?   #=> 1","name":"infinite?","namespace":"Float","path":"Float#infinite?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Float#inspect":{"description":"Returns a string containing a representation of +self+.\nAs well as a fixed or exponential form of the +float+,\nthe call may return +NaN+, +Infinity+, and +-Infinity+.","name":"inspect","namespace":"Float","path":"Float#inspect","type":"instance_method","visibility":"public"},"Float#magnitude":{"description":"Returns the absolute value of +float+.\n\n   (-34.56).abs   #=> 34.56\n   -34.56.abs     #=> 34.56\n   34.56.abs      #=> 34.56\n\nFloat#magnitude is an alias for Float#abs.","name":"magnitude","namespace":"Float","path":"Float#magnitude","type":"instance_method","visibility":"public"},"Float#modulo":{"description":"Returns the modulo after division of +float+ by +other+.\n\n   6543.21.modulo(137)      #=> 104.21000000000004\n   6543.21.modulo(137.24)   #=> 92.92999999999961","name":"modulo","namespace":"Float","path":"Float#modulo","type":"instance_method","visibility":"public"},"Float#nan?":{"description":"Returns +true+ if +float+ is an invalid IEEE floating point number.\n\n   a = -1.0      #=> -1.0\n   a.nan?        #=> false\n   a = 0.0/0.0   #=> NaN\n   a.nan?        #=> true","name":"nan?","namespace":"Float","path":"Float#nan?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Float#negative?":{"description":"Returns +true+ if +float+ is less than 0.","name":"negative?","namespace":"Float","path":"Float#negative?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Float#next_float":{"description":"Returns the next representable floating point number.\n\nFloat::MAX.next_float and Float::INFINITY.next_float is Float::INFINITY.\n\nFloat::NAN.next_float is Float::NAN.\n\nFor example:\n\n  0.01.next_float    #=> 0.010000000000000002\n  1.0.next_float     #=> 1.0000000000000002\n  100.0.next_float   #=> 100.00000000000001\n\n  0.01.next_float - 0.01     #=> 1.734723475976807e-18\n  1.0.next_float - 1.0       #=> 2.220446049250313e-16\n  100.0.next_float - 100.0   #=> 1.4210854715202004e-14\n\n  f = 0.01; 20.times { printf \"%-20a %s\\n\", f, f.to_s; f = f.next_float }\n  #=> 0x1.47ae147ae147bp-7 0.01\n  #   0x1.47ae147ae147cp-7 0.010000000000000002\n  #   0x1.47ae147ae147dp-7 0.010000000000000004\n  #   0x1.47ae147ae147ep-7 0.010000000000000005\n  #   0x1.47ae147ae147fp-7 0.010000000000000007\n  #   0x1.47ae147ae148p-7  0.010000000000000009\n  #   0x1.47ae147ae1481p-7 0.01000000000000001\n  #   0x1.47ae147ae1482p-7 0.010000000000000012\n  #   0x1.47ae147ae1483p-7 0.010000000000000014\n  #   0x1.47ae147ae1484p-7 0.010000000000000016\n  #   0x1.47ae147ae1485p-7 0.010000000000000018\n  #   0x1.47ae147ae1486p-7 0.01000000000000002\n  #   0x1.47ae147ae1487p-7 0.010000000000000021\n  #   0x1.47ae147ae1488p-7 0.010000000000000023\n  #   0x1.47ae147ae1489p-7 0.010000000000000024\n  #   0x1.47ae147ae148ap-7 0.010000000000000026\n  #   0x1.47ae147ae148bp-7 0.010000000000000028\n  #   0x1.47ae147ae148cp-7 0.01000000000000003\n  #   0x1.47ae147ae148dp-7 0.010000000000000031\n  #   0x1.47ae147ae148ep-7 0.010000000000000033\n\n  f = 0.0\n  100.times { f += 0.1 }\n  f                           #=> 9.99999999999998       # should be 10.0 in the ideal world.\n  10-f                        #=> 1.9539925233402755e-14 # the floating point error.\n  10.0.next_float-10          #=> 1.7763568394002505e-15 # 1 ulp (unit in the last place).\n  (10-f)/(10.0.next_float-10) #=> 11.0                   # the error is 11 ulp.\n  (10-f)/(10*Float::EPSILON)  #=> 8.8                    # approximation of the above.\n  \"%a\" % 10                   #=> \"0x1.4p+3\"\n  \"%a\" % f                    #=> \"0x1.3fffffffffff5p+3\" # the last hex digit is 5.  16 - 5 = 11 ulp.","name":"next_float","namespace":"Float","path":"Float#next_float","type":"instance_method","visibility":"public"},"Float#numerator":{"description":"Returns the numerator.  The result is machine dependent.\n\n   n = 0.3.numerator    #=> 5404319552844595\n   d = 0.3.denominator  #=> 18014398509481984\n   n.fdiv(d)            #=> 0.3\n\nSee also Float#denominator.","name":"numerator","namespace":"Float","path":"Float#numerator","type":"instance_method","visibility":"public"},"Float#phase":{"description":"Returns 0 if the value is positive, pi otherwise.","name":"phase","namespace":"Float","path":"Float#phase","type":"instance_method","visibility":"public"},"Float#positive?":{"description":"Returns +true+ if +float+ is greater than 0.","name":"positive?","namespace":"Float","path":"Float#positive?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Float#prev_float":{"description":"Returns the previous representable floating point number.\n\n(-Float::MAX).prev_float and (-Float::INFINITY).prev_float is -Float::INFINITY.\n\nFloat::NAN.prev_float is Float::NAN.\n\nFor example:\n\n  0.01.prev_float    #=> 0.009999999999999998\n  1.0.prev_float     #=> 0.9999999999999999\n  100.0.prev_float   #=> 99.99999999999999\n\n  0.01 - 0.01.prev_float     #=> 1.734723475976807e-18\n  1.0 - 1.0.prev_float       #=> 1.1102230246251565e-16\n  100.0 - 100.0.prev_float   #=> 1.4210854715202004e-14\n\n  f = 0.01; 20.times { printf \"%-20a %s\\n\", f, f.to_s; f = f.prev_float }\n  #=> 0x1.47ae147ae147bp-7 0.01\n  #   0x1.47ae147ae147ap-7 0.009999999999999998\n  #   0x1.47ae147ae1479p-7 0.009999999999999997\n  #   0x1.47ae147ae1478p-7 0.009999999999999995\n  #   0x1.47ae147ae1477p-7 0.009999999999999993\n  #   0x1.47ae147ae1476p-7 0.009999999999999992\n  #   0x1.47ae147ae1475p-7 0.00999999999999999\n  #   0x1.47ae147ae1474p-7 0.009999999999999988\n  #   0x1.47ae147ae1473p-7 0.009999999999999986\n  #   0x1.47ae147ae1472p-7 0.009999999999999985\n  #   0x1.47ae147ae1471p-7 0.009999999999999983\n  #   0x1.47ae147ae147p-7  0.009999999999999981\n  #   0x1.47ae147ae146fp-7 0.00999999999999998\n  #   0x1.47ae147ae146ep-7 0.009999999999999978\n  #   0x1.47ae147ae146dp-7 0.009999999999999976\n  #   0x1.47ae147ae146cp-7 0.009999999999999974\n  #   0x1.47ae147ae146bp-7 0.009999999999999972\n  #   0x1.47ae147ae146ap-7 0.00999999999999997\n  #   0x1.47ae147ae1469p-7 0.009999999999999969\n  #   0x1.47ae147ae1468p-7 0.009999999999999967","name":"prev_float","namespace":"Float","path":"Float#prev_float","type":"instance_method","visibility":"public"},"Float#quo":{"description":"Returns <code>float / numeric</code>, same as Float#/.","name":"quo","namespace":"Float","path":"Float#quo","type":"instance_method","visibility":"public"},"Float#rationalize":{"description":"Returns a simpler approximation of the value (flt-|eps| <= result\n<= flt+|eps|).  If the optional argument +eps+ is not given,\nit will be chosen automatically.\n\n   0.3.rationalize          #=> (3/10)\n   1.333.rationalize        #=> (1333/1000)\n   1.333.rationalize(0.01)  #=> (4/3)\n\nSee also Float#to_r.","name":"rationalize","namespace":"Float","path":"Float#rationalize","type":"instance_method","visibility":"public"},"Float#round":{"description":"Returns +float+ rounded to the nearest value with\na precision of +ndigits+ decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer\nwith at least <code>ndigits.abs</code> trailing zeros.\n\nReturns a floating point number when +ndigits+ is positive,\notherwise returns an integer.\n\n   1.4.round      #=> 1\n   1.5.round      #=> 2\n   1.6.round      #=> 2\n   (-1.5).round   #=> -2\n\n   1.234567.round(2)   #=> 1.23\n   1.234567.round(3)   #=> 1.235\n   1.234567.round(4)   #=> 1.2346\n   1.234567.round(5)   #=> 1.23457\n\n   34567.89.round(-5)  #=> 0\n   34567.89.round(-4)  #=> 30000\n   34567.89.round(-3)  #=> 35000\n   34567.89.round(-2)  #=> 34600\n   34567.89.round(-1)  #=> 34570\n   34567.89.round(0)   #=> 34568\n   34567.89.round(1)   #=> 34567.9\n   34567.89.round(2)   #=> 34567.89\n   34567.89.round(3)   #=> 34567.89\n\nIf the optional +half+ keyword argument is given,\nnumbers that are half-way between two possible rounded values\nwill be rounded according to the specified tie-breaking +mode+:\n\n* <code>:up</code> or +nil+: round half away from zero (default)\n* <code>:down</code>: round half toward zero\n* <code>:even</code>: round half toward the nearest even number\n\n   2.5.round(half: :up)      #=> 3\n   2.5.round(half: :down)    #=> 2\n   2.5.round(half: :even)    #=> 2\n   3.5.round(half: :up)      #=> 4\n   3.5.round(half: :down)    #=> 3\n   3.5.round(half: :even)    #=> 4\n   (-2.5).round(half: :up)   #=> -3\n   (-2.5).round(half: :down) #=> -2\n   (-2.5).round(half: :even) #=> -2","name":"round","namespace":"Float","path":"Float#round","type":"instance_method","visibility":"public"},"Float#to_f":{"description":"Since +float+ is already a Float, returns +self+.","name":"to_f","namespace":"Float","path":"Float#to_f","type":"instance_method","visibility":"public"},"Float#to_i":{"description":"Returns the +float+ truncated to an Integer.\n\n   1.2.to_i      #=> 1\n   (-1.2).to_i   #=> -1\n\nNote that the limited precision of floating point arithmetic\nmight lead to surprising results:\n\n  (0.3 / 0.1).to_i  #=> 2 (!)\n\n#to_int is an alias for #to_i.","name":"to_i","namespace":"Float","path":"Float#to_i","type":"instance_method","visibility":"public"},"Float#to_int":{"description":"Returns the +float+ truncated to an Integer.\n\n   1.2.to_i      #=> 1\n   (-1.2).to_i   #=> -1\n\nNote that the limited precision of floating point arithmetic\nmight lead to surprising results:\n\n  (0.3 / 0.1).to_i  #=> 2 (!)\n\n#to_int is an alias for #to_i.","name":"to_int","namespace":"Float","path":"Float#to_int","type":"instance_method","visibility":"public"},"Float#to_r":{"description":"Returns the value as a rational.\n\n   2.0.to_r    #=> (2/1)\n   2.5.to_r    #=> (5/2)\n   -0.75.to_r  #=> (-3/4)\n   0.0.to_r    #=> (0/1)\n   0.3.to_r    #=> (5404319552844595/18014398509481984)\n\nNOTE: 0.3.to_r isn't the same as \"0.3\".to_r.  The latter is\nequivalent to \"3/10\".to_r, but the former isn't so.\n\n   0.3.to_r   == 3/10r  #=> false\n   \"0.3\".to_r == 3/10r  #=> true\n\nSee also Float#rationalize.","name":"to_r","namespace":"Float","path":"Float#to_r","type":"instance_method","visibility":"public"},"Float#to_s":{"description":"Returns a string containing a representation of +self+.\nAs well as a fixed or exponential form of the +float+,\nthe call may return +NaN+, +Infinity+, and +-Infinity+.","name":"inspect","namespace":"Float","path":"Float#inspect","type":"instance_method","visibility":"public"},"Float#truncate":{"description":"Returns +float+ truncated (toward zero) to\na precision of +ndigits+ decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer\nwith at least <code>ndigits.abs</code> trailing zeros.\n\nReturns a floating point number when +ndigits+ is positive,\notherwise returns an integer.\n\n   2.8.truncate           #=> 2\n   (-2.8).truncate        #=> -2\n   1.234567.truncate(2)   #=> 1.23\n   34567.89.truncate(-2)  #=> 34500\n\nNote that the limited precision of floating point arithmetic\nmight lead to surprising results:\n\n   (0.3 / 0.1).truncate  #=> 2 (!)","name":"truncate","namespace":"Float","path":"Float#truncate","type":"instance_method","visibility":"public"},"Float#zero?":{"description":"Returns +true+ if +float+ is 0.0.","name":"zero?","namespace":"Float","path":"Float#zero?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Float::DIG":{"description":"The minimum number of significant decimal digits in a double-precision\nfloating point.\n\nUsually defaults to 15.","name":"DIG","namespace":"Float","path":"Float::DIG","type":"constant","return":["Fixnum",""],"visibility":"public"},"Float::EPSILON":{"description":"The difference between 1 and the smallest double-precision floating\npoint number greater than 1.\n\nUsually defaults to 2.2204460492503131e-16.","name":"EPSILON","namespace":"Float","path":"Float::EPSILON","type":"constant","return":["Float",""],"visibility":"public"},"Float::INFINITY":{"description":"An expression representing positive infinity.","name":"INFINITY","namespace":"Float","path":"Float::INFINITY","type":"constant","return":["Float",""],"visibility":"public"},"Float::MANT_DIG":{"description":"The number of base digits for the +double+ data type.\n\nUsually defaults to 53.","name":"MANT_DIG","namespace":"Float","path":"Float::MANT_DIG","type":"constant","return":["Fixnum",""],"visibility":"public"},"Float::MAX":{"description":"The largest possible integer in a double-precision floating point number.\n\nUsually defaults to 1.7976931348623157e+308.","name":"MAX","namespace":"Float","path":"Float::MAX","type":"constant","return":["Float",""],"visibility":"public"},"Float::MAX_10_EXP":{"description":"The largest positive exponent in a double-precision floating point where\n10 raised to this power minus 1.\n\nUsually defaults to 308.","name":"MAX_10_EXP","namespace":"Float","path":"Float::MAX_10_EXP","type":"constant","return":["Fixnum",""],"visibility":"public"},"Float::MAX_EXP":{"description":"The largest possible exponent value in a double-precision floating\npoint.\n\nUsually defaults to 1024.","name":"MAX_EXP","namespace":"Float","path":"Float::MAX_EXP","type":"constant","return":["Fixnum",""],"visibility":"public"},"Float::MIN":{"description":":MIN.\n0.0.next_float returns the smallest positive floating point number\nincluding denormalized numbers.","name":"MIN","namespace":"Float","path":"Float::MIN","type":"constant","return":["Float",""],"visibility":"public"},"Float::MIN_10_EXP":{"description":"The smallest negative exponent in a double-precision floating point\nwhere 10 raised to this power minus 1.\n\nUsually defaults to -307.","name":"MIN_10_EXP","namespace":"Float","path":"Float::MIN_10_EXP","type":"constant","return":["Fixnum",""],"visibility":"public"},"Float::MIN_EXP":{"description":"The smallest possible exponent value in a double-precision floating\npoint.\n\nUsually defaults to -1021.","name":"MIN_EXP","namespace":"Float","path":"Float::MIN_EXP","type":"constant","return":["Fixnum",""],"visibility":"public"},"Float::NAN":{"description":"An expression representing a value which is \"not a number\".","name":"NAN","namespace":"Float","path":"Float::NAN","type":"constant","return":["Float",""],"visibility":"public"},"Float::RADIX":{"description":"The base of the floating point, or number of unique digits used to\nrepresent the number.\n\n Usually defaults to 2 on most systems, which would represent a base-10 decimal.","name":"RADIX","namespace":"Float","path":"Float::RADIX","type":"constant","return":["Fixnum",""],"visibility":"public"},"Float::ROUNDS":{"description":"-1::\tIndeterminable\n0::\tRounding towards zero\n1::\tRounding to the nearest number\n2::\tRounding towards positive infinity\n3::\tRounding towards negative infinity","name":"ROUNDS","namespace":"Float","path":"Float::ROUNDS","type":"constant","return":["Fixnum",""],"visibility":"public"},"Continuation":{"description":"Continuation objects are generated by Kernel#callcc,\nafter having +require+d <i>continuation</i>. They hold\na return address and execution context, allowing a nonlocal return\nto the end of the <code>callcc</code> block from anywhere within a\nprogram. Continuations are somewhat analogous to a structured\nversion of C's <code>setjmp/longjmp</code> (although they contain\nmore state, so you might consider them closer to threads).\n\nFor instance:\n\n   require \"continuation\"\n   arr = [ \"Freddie\", \"Herbie\", \"Ron\", \"Max\", \"Ringo\" ]\n   callcc{|cc| $cc = cc}\n   puts(message = arr.shift)\n   $cc.call unless message =~ /Max/\n\n<em>produces:</em>\n\n   Freddie\n   Herbie\n   Ron\n   Max\n\nAlso you can call callcc in other methods:\n\n   require \"continuation\"\n\n   def g\n     arr = [ \"Freddie\", \"Herbie\", \"Ron\", \"Max\", \"Ringo\" ]\n     cc = callcc { |cc| cc }\n     puts arr.shift\n     return cc, arr.size\n   end\n\n   def f\n     c, size = g\n     c.call(c) if size > 1\n   end\n\n   f\n\nThis (somewhat contrived) example allows the inner loop to abandon\nprocessing early:\n\n   require \"continuation\"\n   callcc {|cont|\n     for i in 0..4\n       print \"\\n#{i}: \"\n       for j in i*5...(i+1)*5\n         cont.call() if j == 17\n         printf \"%3d\", j\n       end\n     end\n   }\n   puts\n\n<em>produces:</em>\n\n   0:   0  1  2  3  4\n   1:   5  6  7  8  9\n   2:  10 11 12 13 14\n   3:  15 16","name":"Continuation","namespace":"","path":"Continuation","type":"class","visibility":"public"},"Continuation#[]":{"description":"Invokes the continuation. The program continues from the end of the\n<code>callcc</code> block. If no arguments are given, the original\n<code>callcc</code> returns <code>nil</code>. If one argument is\ngiven, <code>callcc</code> returns it. Otherwise, an array\ncontaining <i>args</i> is returned.\n\n   callcc {|cont|  cont.call }           #=> nil\n   callcc {|cont|  cont.call 1 }         #=> 1\n   callcc {|cont|  cont.call 1, 2, 3 }   #=> [1, 2, 3]","name":"[]","namespace":"Continuation","path":"Continuation#[]","type":"instance_method","visibility":"public"},"Continuation#call":{"description":"Invokes the continuation. The program continues from the end of the\n<code>callcc</code> block. If no arguments are given, the original\n<code>callcc</code> returns <code>nil</code>. If one argument is\ngiven, <code>callcc</code> returns it. Otherwise, an array\ncontaining <i>args</i> is returned.\n\n   callcc {|cont|  cont.call }           #=> nil\n   callcc {|cont|  cont.call 1 }         #=> 1\n   callcc {|cont|  cont.call 1, 2, 3 }   #=> [1, 2, 3]","name":"call","namespace":"Continuation","path":"Continuation#call","type":"instance_method","visibility":"public"},"Fiber":{"description":"Fibers are primitives for implementing light weight cooperative\nconcurrency in Ruby. Basically they are a means of creating code blocks\nthat can be paused and resumed, much like threads. The main difference\nis that they are never preempted and that the scheduling must be done by\nthe programmer and not the VM.\n\nAs opposed to other stackless light weight concurrency models, each fiber\ncomes with a stack.  This enables the fiber to be paused from deeply\nnested function calls within the fiber block.  See the ruby(1)\nmanpage to configure the size of the fiber stack(s).\n\nWhen a fiber is created it will not run automatically. Rather it must\nbe explicitly asked to run using the <code>Fiber#resume</code> method.\nThe code running inside the fiber can give up control by calling\n<code>Fiber.yield</code> in which case it yields control back to caller\n(the caller of the <code>Fiber#resume</code>).\n\nUpon yielding or termination the Fiber returns the value of the last\nexecuted expression\n\nFor instance:\n\n  fiber = Fiber.new do\n    Fiber.yield 1\n    2\n  end\n\n  puts fiber.resume\n  puts fiber.resume\n  puts fiber.resume\n\n<em>produces</em>\n\n  1\n  2\n  FiberError: dead fiber called\n\nThe <code>Fiber#resume</code> method accepts an arbitrary number of\nparameters, if it is the first call to <code>resume</code> then they\nwill be passed as block arguments. Otherwise they will be the return\nvalue of the call to <code>Fiber.yield</code>\n\nExample:\n\n  fiber = Fiber.new do |first|\n    second = Fiber.yield first + 2\n  end\n\n  puts fiber.resume 10\n  puts fiber.resume 14\n  puts fiber.resume 18\n\n<em>produces</em>\n\n  12\n  14\n  FiberError: dead fiber called","name":"Fiber","namespace":"","path":"Fiber","type":"class","visibility":"public"},"Fiber#alive?":{"description":"Returns true if the fiber can still be resumed (or transferred\nto). After finishing execution of the fiber block this method will\nalways return false. You need to <code>require 'fiber'</code>\nbefore using this method.","name":"alive?","namespace":"Fiber","path":"Fiber#alive?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Fiber#initialize":{"description":":nodoc:","name":"initialize","namespace":"Fiber","path":"Fiber#initialize","type":"instance_method","visibility":"public"},"Fiber#inspect":{"description":"Returns fiber information string.","name":"inspect","namespace":"Fiber","path":"Fiber#inspect","type":"instance_method","visibility":"public"},"Fiber#resume":{"description":"Resumes the fiber from the point at which the last <code>Fiber.yield</code>\nwas called, or starts running it if it is the first call to\n<code>resume</code>. Arguments passed to resume will be the value of\nthe <code>Fiber.yield</code> expression or will be passed as block\nparameters to the fiber's block if this is the first <code>resume</code>.\n\nAlternatively, when resume is called it evaluates to the arguments passed\nto the next <code>Fiber.yield</code> statement inside the fiber's block\nor to the block value if it runs to completion without any\n<code>Fiber.yield</code>","name":"resume","namespace":"Fiber","path":"Fiber#resume","type":"instance_method","visibility":"public"},"Fiber#to_s":{"description":"Returns fiber information string.","name":"inspect","namespace":"Fiber","path":"Fiber#inspect","type":"instance_method","visibility":"public"},"Fiber#transfer":{"description":"Transfer control to another fiber, resuming it from where it last\nstopped or starting it if it was not resumed before. The calling\nfiber will be suspended much like in a call to\n<code>Fiber.yield</code>. You need to <code>require 'fiber'</code>\nbefore using this method.\n\nThe fiber which receives the transfer call is treats it much like\na resume call. Arguments passed to transfer are treated like those\npassed to resume.\n\nYou cannot resume a fiber that transferred control to another one.\nThis will cause a double resume error. You need to transfer control\nback to this fiber before it can yield and resume.\n\nExample:\n\n  fiber1 = Fiber.new do\n    puts \"In Fiber 1\"\n    Fiber.yield\n  end\n\n  fiber2 = Fiber.new do\n    puts \"In Fiber 2\"\n    fiber1.transfer\n    puts \"Never see this message\"\n  end\n\n  fiber3 = Fiber.new do\n    puts \"In Fiber 3\"\n  end\n\n  fiber2.resume\n  fiber3.resume\n\n<em>produces</em>\n\n  In fiber 2\n  In fiber 1\n  In fiber 3","name":"transfer","namespace":"Fiber","path":"Fiber#transfer","type":"instance_method","visibility":"public"},"Fiber.current":{"description":"Returns the current fiber. You need to <code>require 'fiber'</code>\nbefore using this method. If you are not running in the context of\na fiber this method will return the root fiber.","name":"current","namespace":"Fiber","path":"Fiber.current","type":"class_method","visibility":"public"},"Fiber.yield":{"description":"Yields control back to the context that resumed the fiber, passing\nalong any arguments that were passed to it. The fiber will resume\nprocessing at this point when <code>resume</code> is called next.\nAny arguments passed to the next <code>resume</code> will be the\nvalue that this <code>Fiber.yield</code> expression evaluates to.","name":"yield","namespace":"Fiber","path":"Fiber.yield","type":"class_method","visibility":"public"},"FiberError":{"description":"Raised when an invalid operation is attempted on a Fiber, in\nparticular when attempting to call/resume a dead fiber,\nattempting to yield from the root fiber, or calling a fiber across\nthreads.\n\n   fiber = Fiber.new{}\n   fiber.resume #=> nil\n   fiber.resume #=> FiberError: dead fiber called","name":"FiberError","namespace":"","path":"FiberError","type":"class","visibility":"public"},"Dir":{"description":"Objects of class <code>Dir</code> are directory streams representing\ndirectories in the underlying file system. They provide a variety of\nways to list directories and their contents. See also\n<code>File</code>.\n\nThe directory used in these examples contains the two regular files\n(<code>config.h</code> and <code>main.rb</code>), the parent\ndirectory (<code>..</code>), and the directory itself\n(<code>.</code>).","name":"Dir","namespace":"","path":"Dir","type":"class","visibility":"public"},"Dir#close":{"description":"Closes the directory stream.\nCalling this method on closed Dir object is ignored since Ruby 2.3.\n\n   d = Dir.new(\"testdir\")\n   d.close   #=> nil","name":"close","namespace":"Dir","path":"Dir#close","type":"instance_method","visibility":"public"},"Dir#each":{"description":"Calls the block once for each entry in this directory, passing the\nfilename of each entry as a parameter to the block.\n\nIf no block is given, an enumerator is returned instead.\n\n   d = Dir.new(\"testdir\")\n   d.each  {|x| puts \"Got #{x}\" }\n\n<em>produces:</em>\n\n   Got .\n   Got ..\n   Got config.h\n   Got main.rb","name":"each","namespace":"Dir","path":"Dir#each","type":"instance_method","visibility":"public"},"Dir#fileno":{"description":"Returns the file descriptor used in <em>dir</em>.\n\n   d = Dir.new(\"..\")\n   d.fileno   #=> 8\n\nThis method uses dirfd() function defined by POSIX 2008.\nNotImplementedError is raised on other platforms, such as Windows,\nwhich doesn't provide the function.","name":"fileno","namespace":"Dir","path":"Dir#fileno","type":"instance_method","visibility":"public"},"Dir#initialize":{"description":"Returns a new directory object for the named directory.\n\nThe optional <i>encoding</i> keyword argument specifies the encoding of the directory.\nIf not specified, the filesystem encoding is used.","name":"initialize","namespace":"Dir","path":"Dir#initialize","type":"instance_method","visibility":"public"},"Dir#inspect":{"description":"Return a string describing this Dir object.","name":"inspect","namespace":"Dir","path":"Dir#inspect","type":"instance_method","visibility":"public"},"Dir#path":{"description":"Returns the path parameter passed to <em>dir</em>'s constructor.\n\n   d = Dir.new(\"..\")\n   d.path   #=> \"..\"","name":"path","namespace":"Dir","path":"Dir#path","type":"instance_method","visibility":"public"},"Dir#pos":{"description":"Returns the current position in <em>dir</em>. See also\n<code>Dir#seek</code>.\n\n   d = Dir.new(\"testdir\")\n   d.tell   #=> 0\n   d.read   #=> \".\"\n   d.tell   #=> 12","name":"pos","namespace":"Dir","path":"Dir#pos","type":"instance_method","visibility":"public"},"Dir#pos=":{"description":"Synonym for <code>Dir#seek</code>, but returns the position\nparameter.\n\n   d = Dir.new(\"testdir\")   #=> #<Dir:0x401b3c40>\n   d.read                   #=> \".\"\n   i = d.pos                #=> 12\n   d.read                   #=> \"..\"\n   d.pos = i                #=> 12\n   d.read                   #=> \"..\"","name":"pos=","namespace":"Dir","path":"Dir#pos=","type":"instance_method","visibility":"public"},"Dir#read":{"description":"Reads the next entry from <em>dir</em> and returns it as a string.\nReturns <code>nil</code> at the end of the stream.\n\n   d = Dir.new(\"testdir\")\n   d.read   #=> \".\"\n   d.read   #=> \"..\"\n   d.read   #=> \"config.h\"","name":"read","namespace":"Dir","path":"Dir#read","type":"instance_method","visibility":"public"},"Dir#rewind":{"description":"Repositions <em>dir</em> to the first entry.\n\n   d = Dir.new(\"testdir\")\n   d.read     #=> \".\"\n   d.rewind   #=> #<Dir:0x401b3fb0>\n   d.read     #=> \".\"","name":"rewind","namespace":"Dir","path":"Dir#rewind","type":"instance_method","visibility":"public"},"Dir#seek":{"description":"Seeks to a particular location in <em>dir</em>. <i>integer</i>\nmust be a value returned by <code>Dir#tell</code>.\n\n   d = Dir.new(\"testdir\")   #=> #<Dir:0x401b3c40>\n   d.read                   #=> \".\"\n   i = d.tell               #=> 12\n   d.read                   #=> \"..\"\n   d.seek(i)                #=> #<Dir:0x401b3c40>\n   d.read                   #=> \"..\"","name":"seek","namespace":"Dir","path":"Dir#seek","type":"instance_method","visibility":"public"},"Dir#tell":{"description":"Returns the current position in <em>dir</em>. See also\n<code>Dir#seek</code>.\n\n   d = Dir.new(\"testdir\")\n   d.tell   #=> 0\n   d.read   #=> \".\"\n   d.tell   #=> 12","name":"tell","namespace":"Dir","path":"Dir#tell","type":"instance_method","visibility":"public"},"Dir#to_path":{"description":"Returns the path parameter passed to <em>dir</em>'s constructor.\n\n   d = Dir.new(\"..\")\n   d.path   #=> \"..\"","name":"to_path","namespace":"Dir","path":"Dir#to_path","type":"instance_method","visibility":"public"},"Dir.[]":{"description":"Equivalent to calling\n<code>Dir.glob([</code><i>string,...</i><code>], 0)</code>.","name":"[]","namespace":"Dir","path":"Dir.[]","type":"class_method","visibility":"public"},"Dir.chdir":{"description":"Changes the current working directory of the process to the given\nstring. When called without an argument, changes the directory to\nthe value of the environment variable <code>HOME</code>, or\n<code>LOGDIR</code>. <code>SystemCallError</code> (probably\n<code>Errno::ENOENT</code>) if the target directory does not exist.\n\nIf a block is given, it is passed the name of the new current\ndirectory, and the block is executed with that as the current\ndirectory. The original working directory is restored when the block\nexits. The return value of <code>chdir</code> is the value of the\nblock. <code>chdir</code> blocks can be nested, but in a\nmulti-threaded program an error will be raised if a thread attempts\nto open a <code>chdir</code> block while another thread has one\nopen.\n\n   Dir.chdir(\"/var/spool/mail\")\n   puts Dir.pwd\n   Dir.chdir(\"/tmp\") do\n     puts Dir.pwd\n     Dir.chdir(\"/usr\") do\n       puts Dir.pwd\n     end\n     puts Dir.pwd\n   end\n   puts Dir.pwd\n\n<em>produces:</em>\n\n   /var/spool/mail\n   /tmp\n   /usr\n   /tmp\n   /var/spool/mail","name":"chdir","namespace":"Dir","path":"Dir.chdir","type":"class_method","visibility":"public"},"Dir.children":{"description":"Returns an array containing all of the filenames except for \".\"\nand \"..\" in the given directory. Will raise a\n<code>SystemCallError</code> if the named directory doesn't exist.\n\nThe optional <i>encoding</i> keyword argument specifies the encoding of the\ndirectory. If not specified, the filesystem encoding is used.\n\n   Dir.children(\"testdir\")   #=> [\"config.h\", \"main.rb\"]","name":"children","namespace":"Dir","path":"Dir.children","type":"class_method","visibility":"public"},"Dir.chroot":{"description":"Changes this process's idea of the file system root. Only a\nprivileged process may make this call. Not available on all\nplatforms. On Unix systems, see <code>chroot(2)</code> for more\ninformation.","name":"chroot","namespace":"Dir","path":"Dir.chroot","type":"class_method","visibility":"public"},"Dir.delete":{"description":"Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn't empty.","name":"delete","namespace":"Dir","path":"Dir.delete","type":"class_method","visibility":"public"},"Dir.each_child":{"description":"Calls the block once for each entry except for \".\" and \"..\" in the\nnamed directory, passing the filename of each entry as a parameter\nto the block.\n\nIf no block is given, an enumerator is returned instead.\n\n   Dir.each_child(\"testdir\") {|x| puts \"Got #{x}\" }\n\n<em>produces:</em>\n\n   Got config.h\n   Got main.rb","name":"each_child","namespace":"Dir","path":"Dir.each_child","type":"class_method","visibility":"public"},"Dir.empty?":{"description":"Returns <code>true</code> if the named file is an empty directory,\n<code>false</code> if it is not a directory or non-empty.","name":"empty?","namespace":"Dir","path":"Dir.empty?","type":"class_method","visibility":"public","return":[["Boolean"],""]},"Dir.entries":{"description":"Returns an array containing all of the filenames in the given\ndirectory. Will raise a <code>SystemCallError</code> if the named\ndirectory doesn't exist.\n\nThe optional <i>encoding</i> keyword argument specifies the encoding of the\ndirectory. If not specified, the filesystem encoding is used.\n\n   Dir.entries(\"testdir\")   #=> [\".\", \"..\", \"config.h\", \"main.rb\"]","name":"entries","namespace":"Dir","path":"Dir.entries","type":"class_method","visibility":"public"},"Dir.exist?":{"description":"Returns <code>true</code> if the named file is a directory,\n<code>false</code> otherwise.","name":"exist?","namespace":"Dir","path":"Dir.exist?","type":"class_method","visibility":"public","return":[["Boolean"],""]},"Dir.exists?":{"description":"Deprecated method. Don't use.","name":"exists?","namespace":"Dir","path":"Dir.exists?","type":"class_method","visibility":"public","return":[["Boolean"],""]},"Dir.foreach":{"description":"Calls the block once for each entry in the named directory, passing\nthe filename of each entry as a parameter to the block.\n\nIf no block is given, an enumerator is returned instead.\n\n   Dir.foreach(\"testdir\") {|x| puts \"Got #{x}\" }\n\n<em>produces:</em>\n\n   Got .\n   Got ..\n   Got config.h\n   Got main.rb","name":"foreach","namespace":"Dir","path":"Dir.foreach","type":"class_method","visibility":"public"},"Dir.getwd":{"description":"Returns the path to the current working directory of this process as\na string.\n\n   Dir.chdir(\"/tmp\")   #=> 0\n   Dir.getwd           #=> \"/tmp\"\n   Dir.pwd             #=> \"/tmp\"","name":"getwd","namespace":"Dir","path":"Dir.getwd","type":"class_method","visibility":"public"},"Dir.glob":{"description":"Expands +pattern+, which is a pattern string or an Array of pattern\nstrings, and returns an array containing the matching filenames.\nIf a block is given, calls the block once for each matching filename,\npassing the filename as a parameter to the block.\n\nThe optional +base+ keyword argument specifies the base directory for\ninterpreting relative pathnames instead of the current working directory.\nAs the results are not prefixed with the base directory name in this\ncase, you will need to prepend the base directory name if you want real\npaths.\n\nNote that the pattern is not a regexp, it's closer to a shell glob.\nSee File::fnmatch for the meaning of the +flags+ parameter.\nCase sensitivity depends on your system (File::FNM_CASEFOLD is ignored),\nas does the order in which the results are returned.\n\n<code>*</code>::\n  Matches any file. Can be restricted by other values in the glob.\n  Equivalent to <code>/ .* /x</code> in regexp.\n\n  <code>*</code>::     Matches all files\n  <code>c*</code>::    Matches all files beginning with <code>c</code>\n  <code>*c</code>::    Matches all files ending with <code>c</code>\n  <code>\\*c\\*</code>:: Match all files that have <code>c</code> in them\n                       (including at the beginning or end).\n\n  Note, this will not match Unix-like hidden files (dotfiles).  In order\n  to include those in the match results, you must use the\n  File::FNM_DOTMATCH flag or something like <code>\"{*,.*}\"</code>.\n\n<code>**</code>::\n  Matches directories recursively.\n\n<code>?</code>::\n  Matches any one character. Equivalent to <code>/.{1}/</code> in regexp.\n\n<code>[set]</code>::\n  Matches any one character in +set+.  Behaves exactly like character sets\n  in Regexp, including set negation (<code>[^a-z]</code>).\n\n<code>{p,q}</code>::\n  Matches either literal <code>p</code> or literal <code>q</code>.\n  Equivalent to pattern alternation in regexp.\n\n  Matching literals may be more than one character in length.  More than\n  two literals may be specified.\n\n<code> \\\\ </code>::\n  Escapes the next metacharacter.\n\n  Note that this means you cannot use backslash on windows as part of a\n  glob, i.e.  <code>Dir[\"c:\\\\foo*\"]</code> will not work, use\n  <code>Dir[\"c:/foo*\"]</code> instead.\n\nExamples:\n\n   Dir[\"config.?\"]                     #=> [\"config.h\"]\n   Dir.glob(\"config.?\")                #=> [\"config.h\"]\n   Dir.glob(\"*.[a-z][a-z]\")            #=> [\"main.rb\"]\n   Dir.glob(\"*.[^r]*\")                 #=> [\"config.h\"]\n   Dir.glob(\"*.{rb,h}\")                #=> [\"main.rb\", \"config.h\"]\n   Dir.glob(\"*\")                       #=> [\"config.h\", \"main.rb\"]\n   Dir.glob(\"*\", File::FNM_DOTMATCH)   #=> [\".\", \"..\", \"config.h\", \"main.rb\"]\n\n   rbfiles = File.join(\"**\", \"*.rb\")\n   Dir.glob(rbfiles)                   #=> [\"main.rb\",\n                                       #    \"lib/song.rb\",\n                                       #    \"lib/song/karaoke.rb\"]\n\n   Dir.glob(rbfiles, base: \"lib\")      #=> [\"song.rb\",\n                                       #    \"song/karaoke.rb\"]\n\n   libdirs = File.join(\"**\", \"lib\")\n   Dir.glob(libdirs)                   #=> [\"lib\"]\n\n   librbfiles = File.join(\"**\", \"lib\", \"**\", \"*.rb\")\n   Dir.glob(librbfiles)                #=> [\"lib/song.rb\",\n                                       #    \"lib/song/karaoke.rb\"]\n\n   librbfiles = File.join(\"**\", \"lib\", \"*.rb\")\n   Dir.glob(librbfiles)                #=> [\"lib/song.rb\"]","name":"glob","namespace":"Dir","path":"Dir.glob","type":"class_method","visibility":"public"},"Dir.home":{"description":"Returns the home directory of the current user or the named user\nif given.","name":"home","namespace":"Dir","path":"Dir.home","type":"class_method","visibility":"public"},"Dir.mkdir":{"description":"Makes a new directory named by <i>string</i>, with permissions\nspecified by the optional parameter <i>anInteger</i>. The\npermissions may be modified by the value of\n<code>File::umask</code>, and are ignored on NT. Raises a\n<code>SystemCallError</code> if the directory cannot be created. See\nalso the discussion of permissions in the class documentation for\n<code>File</code>.\n\n  Dir.mkdir(File.join(Dir.home, \".foo\"), 0700) #=> 0","name":"mkdir","namespace":"Dir","path":"Dir.mkdir","type":"class_method","visibility":"public"},"Dir.open":{"description":"The optional <i>encoding</i> keyword argument specifies the encoding of the directory.\nIf not specified, the filesystem encoding is used.\n\nWith no block, <code>open</code> is a synonym for\n<code>Dir::new</code>. If a block is present, it is passed\n<i>aDir</i> as a parameter. The directory is closed at the end of\nthe block, and <code>Dir::open</code> returns the value of the\nblock.","name":"open","namespace":"Dir","path":"Dir.open","type":"class_method","visibility":"public"},"Dir.pwd":{"description":"Returns the path to the current working directory of this process as\na string.\n\n   Dir.chdir(\"/tmp\")   #=> 0\n   Dir.getwd           #=> \"/tmp\"\n   Dir.pwd             #=> \"/tmp\"","name":"pwd","namespace":"Dir","path":"Dir.pwd","type":"class_method","visibility":"public"},"Dir.rmdir":{"description":"Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn't empty.","name":"rmdir","namespace":"Dir","path":"Dir.rmdir","type":"class_method","visibility":"public"},"Dir.unlink":{"description":"Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn't empty.","name":"unlink","namespace":"Dir","path":"Dir.unlink","type":"class_method","visibility":"public"},"File":{"description":"A <code>File</code> is an abstraction of any file object accessible\nby the program and is closely associated with class <code>IO</code>.\n<code>File</code> includes the methods of module\n<code>FileTest</code> as class methods, allowing you to write (for\nexample) <code>File.exist?(\"foo\")</code>.\n\nIn the description of File methods,\n<em>permission bits</em> are a platform-specific\nset of bits that indicate permissions of a file. On Unix-based\nsystems, permissions are viewed as a set of three octets, for the\nowner, the group, and the rest of the world. For each of these\nentities, permissions may be set to read, write, or execute the\nfile:\n\nThe permission bits <code>0644</code> (in octal) would thus be\ninterpreted as read/write for owner, and read-only for group and\nother. Higher-order bits may also be used to indicate the type of\nfile (plain, directory, pipe, socket, and so on) and various other\nspecial features. If the permissions are for a directory, the\nmeaning of the execute bit changes; when set the directory can be\nsearched.\n\nOn non-Posix operating systems, there may be only the ability to\nmake a file read-only or read-write. In this case, the remaining\npermission bits will be synthesized to resemble typical values. For\ninstance, on Windows NT the default permission bits are\n<code>0644</code>, which means read/write for owner, read-only for\nall others. The only change that can be made is to make the file\nread-only, which is reported as <code>0444</code>.\n\nVarious constants for the methods in File can be found in File::Constants.","name":"File","namespace":"","path":"File","type":"class","visibility":"public"},"File#atime":{"description":"Returns the last access time (a <code>Time</code> object)\nfor <i>file</i>, or epoch if <i>file</i> has not been accessed.\n\n   File.new(\"testfile\").atime   #=> Wed Dec 31 18:00:00 CST 1969","name":"atime","namespace":"File","path":"File#atime","type":"instance_method","visibility":"public"},"File#birthtime":{"description":"Returns the birth time for <i>file</i>.\n\n   File.new(\"testfile\").birthtime   #=> Wed Apr 09 08:53:14 CDT 2003\n\nIf the platform doesn't have birthtime, raises NotImplementedError.","name":"birthtime","namespace":"File","path":"File#birthtime","type":"instance_method","visibility":"public"},"File#chmod":{"description":"Changes permission bits on <i>file</i> to the bit pattern\nrepresented by <i>mode_int</i>. Actual effects are platform\ndependent; on Unix systems, see <code>chmod(2)</code> for details.\nFollows symbolic links. Also see <code>File#lchmod</code>.\n\n   f = File.new(\"out\", \"w\");\n   f.chmod(0644)   #=> 0","name":"chmod","namespace":"File","path":"File#chmod","type":"instance_method","visibility":"public"},"File#chown":{"description":"Changes the owner and group of <i>file</i> to the given numeric\nowner and group id's. Only a process with superuser privileges may\nchange the owner of a file. The current owner of a file may change\nthe file's group to any group to which the owner belongs. A\n<code>nil</code> or -1 owner or group id is ignored. Follows\nsymbolic links. See also <code>File#lchown</code>.\n\n   File.new(\"testfile\").chown(502, 1000)","name":"chown","namespace":"File","path":"File#chown","type":"instance_method","visibility":"public"},"File#ctime":{"description":"Returns the change time for <i>file</i> (that is, the time directory\ninformation about the file was changed, not the file itself).\n\nNote that on Windows (NTFS), returns creation time (birth time).\n\n   File.new(\"testfile\").ctime   #=> Wed Apr 09 08:53:14 CDT 2003","name":"ctime","namespace":"File","path":"File#ctime","type":"instance_method","visibility":"public"},"File#flock":{"description":"Locks or unlocks a file according to <i>locking_constant</i> (a\nlogical <em>or</em> of the values in the table below).\nReturns <code>false</code> if <code>File::LOCK_NB</code> is\nspecified and the operation would otherwise have blocked. Not\navailable on all platforms.\n\nLocking constants (in class File):\n\n   LOCK_EX   | Exclusive lock. Only one process may hold an\n             | exclusive lock for a given file at a time.\n   ----------+------------------------------------------------\n   LOCK_NB   | Don't block when locking. May be combined\n             | with other lock options using logical or.\n   ----------+------------------------------------------------\n   LOCK_SH   | Shared lock. Multiple processes may each hold a\n             | shared lock for a given file at the same time.\n   ----------+------------------------------------------------\n   LOCK_UN   | Unlock.\n\nExample:\n\n   # update a counter using write lock\n   # don't use \"w\" because it truncates the file before lock.\n   File.open(\"counter\", File::RDWR|File::CREAT, 0644) {|f|\n     f.flock(File::LOCK_EX)\n     value = f.read.to_i + 1\n     f.rewind\n     f.write(\"#{value}\\n\")\n     f.flush\n     f.truncate(f.pos)\n   }\n\n   # read the counter using read lock\n   File.open(\"counter\", \"r\") {|f|\n     f.flock(File::LOCK_SH)\n     p f.read\n   }","name":"flock","namespace":"File","path":"File#flock","type":"instance_method","visibility":"public"},"File#initialize":{"description":"Opens the file named by +filename+ according to the given +mode+ and\nreturns a new File object.\n\nSee IO.new for a description of +mode+ and +opt+.\n\nIf a file is being created, permission bits may be given in +perm+.  These\nmode and permission bits are platform dependent; on Unix systems, see\nopen(2) and chmod(2) man pages for details.\n\nThe new File object is buffered mode (or non-sync mode), unless\n+filename+ is a tty.\nSee IO#flush, IO#fsync, IO#fdatasync, and <code>IO#sync=</code>\nabout sync mode.\n\n=== Examples\n\n  f = File.new(\"testfile\", \"r\")\n  f = File.new(\"newfile\",  \"w+\")\n  f = File.new(\"newfile\", File::CREAT|File::TRUNC|File::RDWR, 0644)","name":"initialize","namespace":"File","path":"File#initialize","type":"instance_method","visibility":"public"},"File#lstat":{"description":"Same as <code>IO#stat</code>, but does not follow the last symbolic\nlink. Instead, reports on the link itself.\n\n   File.symlink(\"testfile\", \"link2test\")   #=> 0\n   File.stat(\"testfile\").size              #=> 66\n   f = File.new(\"link2test\")\n   f.lstat.size                            #=> 8\n   f.stat.size                             #=> 66","name":"lstat","namespace":"File","path":"File#lstat","type":"instance_method","visibility":"public"},"File#mtime":{"description":"Returns the modification time for <i>file</i>.\n\n   File.new(\"testfile\").mtime   #=> Wed Apr 09 08:53:14 CDT 2003","name":"mtime","namespace":"File","path":"File#mtime","type":"instance_method","visibility":"public"},"File#path":{"description":"Returns the pathname used to create <i>file</i> as a string. Does\nnot normalize the name.\n\nThe pathname may not point to the file corresponding to <i>file</i>.\nFor instance, the pathname becomes void when the file has been\nmoved or deleted.\n\nThis method raises <code>IOError</code> for a <i>file</i> created using\n<code>File::Constants::TMPFILE</code> because they don't have a pathname.\n\n   File.new(\"testfile\").path               #=> \"testfile\"\n   File.new(\"/tmp/../tmp/xxx\", \"w\").path   #=> \"/tmp/../tmp/xxx\"","name":"path","namespace":"File","path":"File#path","type":"instance_method","visibility":"public"},"File#size":{"description":"Returns the size of <i>file</i> in bytes.\n\n   File.new(\"testfile\").size   #=> 66","name":"size","namespace":"File","path":"File#size","type":"instance_method","visibility":"public"},"File#to_path":{"description":"Returns the pathname used to create <i>file</i> as a string. Does\nnot normalize the name.\n\nThe pathname may not point to the file corresponding to <i>file</i>.\nFor instance, the pathname becomes void when the file has been\nmoved or deleted.\n\nThis method raises <code>IOError</code> for a <i>file</i> created using\n<code>File::Constants::TMPFILE</code> because they don't have a pathname.\n\n   File.new(\"testfile\").path               #=> \"testfile\"\n   File.new(\"/tmp/../tmp/xxx\", \"w\").path   #=> \"/tmp/../tmp/xxx\"","name":"to_path","namespace":"File","path":"File#to_path","type":"instance_method","visibility":"public"},"File#truncate":{"description":"Truncates <i>file</i> to at most <i>integer</i> bytes. The file\nmust be opened for writing. Not available on all platforms.\n\n   f = File.new(\"out\", \"w\")\n   f.syswrite(\"1234567890\")   #=> 10\n   f.truncate(5)              #=> 0\n   f.close()                  #=> nil\n   File.size(\"out\")           #=> 5","name":"truncate","namespace":"File","path":"File#truncate","type":"instance_method","visibility":"public"},"File.absolute_path":{"description":"Converts a pathname to an absolute pathname. Relative paths are\nreferenced from the current working directory of the process unless\n<i>dir_string</i> is given, in which case it will be used as the\nstarting point. If the given pathname starts with a ``<code>~</code>''\nit is NOT expanded, it is treated as a normal directory name.\n\n   File.absolute_path(\"~oracle/bin\")       #=> \"<relative_path>/~oracle/bin\"","name":"absolute_path","namespace":"File","path":"File.absolute_path","type":"class_method","visibility":"public"},"File.atime":{"description":"Returns the last access time for the named file as a Time object.\n\n_file_name_ can be an IO object.\n\n   File.atime(\"testfile\")   #=> Wed Apr 09 08:51:48 CDT 2003","name":"atime","namespace":"File","path":"File.atime","type":"class_method","visibility":"public"},"File.basename":{"description":"Returns the last component of the filename given in\n<i>file_name</i> (after first stripping trailing separators),\nwhich can be formed using both <code>File::SEPARATOR</code> and\n<code>File::ALT_SEPARATOR</code> as the separator when\n<code>File::ALT_SEPARATOR</code> is not <code>nil</code>. If\n<i>suffix</i> is given and present at the end of <i>file_name</i>,\nit is removed. If <i>suffix</i> is \".*\", any extension will be\nremoved.\n\n   File.basename(\"/home/gumby/work/ruby.rb\")          #=> \"ruby.rb\"\n   File.basename(\"/home/gumby/work/ruby.rb\", \".rb\")   #=> \"ruby\"\n   File.basename(\"/home/gumby/work/ruby.rb\", \".*\")    #=> \"ruby\"","name":"basename","namespace":"File","path":"File.basename","type":"class_method","visibility":"public"},"File.birthtime":{"description":"Returns the birth time for the named file.\n\n_file_name_ can be an IO object.\n\n   File.birthtime(\"testfile\")   #=> Wed Apr 09 08:53:13 CDT 2003\n\nIf the platform doesn't have birthtime, raises NotImplementedError.","name":"birthtime","namespace":"File","path":"File.birthtime","type":"class_method","visibility":"public"},"File.chmod":{"description":"Changes permission bits on the named file(s) to the bit pattern\nrepresented by <i>mode_int</i>. Actual effects are operating system\ndependent (see the beginning of this section). On Unix systems, see\n<code>chmod(2)</code> for details. Returns the number of files\nprocessed.\n\n   File.chmod(0644, \"testfile\", \"out\")   #=> 2","name":"chmod","namespace":"File","path":"File.chmod","type":"class_method","visibility":"public"},"File.chown":{"description":"Changes the owner and group of the named file(s) to the given\nnumeric owner and group id's. Only a process with superuser\nprivileges may change the owner of a file. The current owner of a\nfile may change the file's group to any group to which the owner\nbelongs. A <code>nil</code> or -1 owner or group id is ignored.\nReturns the number of files processed.\n\n   File.chown(nil, 100, \"testfile\")","name":"chown","namespace":"File","path":"File.chown","type":"class_method","visibility":"public"},"File.ctime":{"description":"Returns the change time for the named file (the time at which\ndirectory information about the file was changed, not the file\nitself).\n\n_file_name_ can be an IO object.\n\nNote that on Windows (NTFS), returns creation time (birth time).\n\n   File.ctime(\"testfile\")   #=> Wed Apr 09 08:53:13 CDT 2003","name":"ctime","namespace":"File","path":"File.ctime","type":"class_method","visibility":"public"},"File.delete":{"description":"Deletes the named files, returning the number of names\npassed as arguments. Raises an exception on any error.\nSince the underlying implementation relies on the\n<code>unlink(2)</code> system call, the type of\nexception raised depends on its error type (see\nhttps://linux.die.net/man/2/unlink) and has the form of\ne.g. <code>Errno::ENOENT</code>.\n\nSee also <code>Dir::rmdir</code>.","name":"delete","namespace":"File","path":"File.delete","type":"class_method","visibility":"public"},"File.dirname":{"description":"Returns all components of the filename given in <i>file_name</i>\nexcept the last one (after first stripping trailing separators).\nThe filename can be formed using both <code>File::SEPARATOR</code>\nand <code>File::ALT_SEPARATOR</code> as the separator when\n<code>File::ALT_SEPARATOR</code> is not <code>nil</code>.\n\n   File.dirname(\"/home/gumby/work/ruby.rb\")   #=> \"/home/gumby/work\"","name":"dirname","namespace":"File","path":"File.dirname","type":"class_method","visibility":"public"},"File.expand_path":{"description":"Converts a pathname to an absolute pathname. Relative paths are\nreferenced from the current working directory of the process unless\n+dir_string+ is given, in which case it will be used as the\nstarting point. The given pathname may start with a\n``<code>~</code>'', which expands to the process owner's home\ndirectory (the environment variable +HOME+ must be set\ncorrectly). ``<code>~</code><i>user</i>'' expands to the named\nuser's home directory.\n\n   File.expand_path(\"~oracle/bin\")           #=> \"/home/oracle/bin\"\n\nA simple example of using +dir_string+ is as follows.\n   File.expand_path(\"ruby\", \"/usr/bin\")      #=> \"/usr/bin/ruby\"\n\nA more complex example which also resolves parent directory is as follows.\nSuppose we are in bin/mygem and want the absolute path of lib/mygem.rb.\n\n   File.expand_path(\"../../lib/mygem.rb\", __FILE__)\n   #=> \".../path/to/project/lib/mygem.rb\"\n\nSo first it resolves the parent of __FILE__, that is bin/, then go to the\nparent, the root of the project and appends +lib/mygem.rb+.","name":"expand_path","namespace":"File","path":"File.expand_path","type":"class_method","visibility":"public"},"File.extname":{"description":"Returns the extension (the portion of file name in +path+\nstarting from the last period).\n\nIf +path+ is a dotfile, or starts with a period, then the starting\ndot is not dealt with the start of the extension.\n\nAn empty string will also be returned when the period is the last character\nin +path+.\n\n   File.extname(\"test.rb\")         #=> \".rb\"\n   File.extname(\"a/b/d/test.rb\")   #=> \".rb\"\n   File.extname(\".a/b/d/test.rb\")  #=> \".rb\"\n   File.extname(\"foo.\")            #=> \"\"\n   File.extname(\"test\")            #=> \"\"\n   File.extname(\".profile\")        #=> \"\"\n   File.extname(\".profile.sh\")     #=> \".sh\"","name":"extname","namespace":"File","path":"File.extname","type":"class_method","visibility":"public"},"File.fnmatch":{"description":"Returns true if +path+ matches against +pattern+.  The pattern is not a\nregular expression; instead it follows rules similar to shell filename\nglobbing.  It may contain the following metacharacters:\n\n<code>*</code>::\n  Matches any file. Can be restricted by other values in the glob.\n  Equivalent to <code>/ .* /x</code> in regexp.\n\n  <code>*</code>::    Matches all files regular files\n  <code>c*</code>::   Matches all files beginning with <code>c</code>\n  <code>*c</code>::   Matches all files ending with <code>c</code>\n  <code>\\*c*</code>:: Matches all files that have <code>c</code> in them\n                      (including at the beginning or end).\n\n  To match hidden files (that start with a <code>.</code> set the\n  File::FNM_DOTMATCH flag.\n\n<code>**</code>::\n  Matches directories recursively or files expansively.\n\n<code>?</code>::\n  Matches any one character. Equivalent to <code>/.{1}/</code> in regexp.\n\n<code>[set]</code>::\n  Matches any one character in +set+.  Behaves exactly like character sets\n  in Regexp, including set negation (<code>[^a-z]</code>).\n\n<code> \\ </code>::\n  Escapes the next metacharacter.\n\n<code>{a,b}</code>::\n  Matches pattern a and pattern b if File::FNM_EXTGLOB flag is enabled.\n  Behaves like a Regexp union (<code>(?:a|b)</code>).\n\n+flags+ is a bitwise OR of the <code>FNM_XXX</code> constants. The same\nglob pattern and flags are used by Dir::glob.\n\nExamples:\n\n   File.fnmatch('cat',       'cat')        #=> true  # match entire string\n   File.fnmatch('cat',       'category')   #=> false # only match partial string\n\n   File.fnmatch('c{at,ub}s', 'cats')                    #=> false # { } isn't supported by default\n   File.fnmatch('c{at,ub}s', 'cats', File::FNM_EXTGLOB) #=> true  # { } is supported on FNM_EXTGLOB\n\n   File.fnmatch('c?t',     'cat')          #=> true  # '?' match only 1 character\n   File.fnmatch('c??t',    'cat')          #=> false # ditto\n   File.fnmatch('c*',      'cats')         #=> true  # '*' match 0 or more characters\n   File.fnmatch('c*t',     'c/a/b/t')      #=> true  # ditto\n   File.fnmatch('ca[a-z]', 'cat')          #=> true  # inclusive bracket expression\n   File.fnmatch('ca[^t]',  'cat')          #=> false # exclusive bracket expression ('^' or '!')\n\n   File.fnmatch('cat', 'CAT')                     #=> false # case sensitive\n   File.fnmatch('cat', 'CAT', File::FNM_CASEFOLD) #=> true  # case insensitive\n\n   File.fnmatch('?',   '/', File::FNM_PATHNAME)  #=> false # wildcard doesn't match '/' on FNM_PATHNAME\n   File.fnmatch('*',   '/', File::FNM_PATHNAME)  #=> false # ditto\n   File.fnmatch('[/]', '/', File::FNM_PATHNAME)  #=> false # ditto\n\n   File.fnmatch('\\?',   '?')                       #=> true  # escaped wildcard becomes ordinary\n   File.fnmatch('\\a',   'a')                       #=> true  # escaped ordinary remains ordinary\n   File.fnmatch('\\a',   '\\a', File::FNM_NOESCAPE)  #=> true  # FNM_NOESCAPE makes '\\' ordinary\n   File.fnmatch('[\\?]', '?')                       #=> true  # can escape inside bracket expression\n\n   File.fnmatch('*',   '.profile')                      #=> false # wildcard doesn't match leading\n   File.fnmatch('*',   '.profile', File::FNM_DOTMATCH)  #=> true  # period by default.\n   File.fnmatch('.*',  '.profile')                      #=> true\n\n   rbfiles = '**' '/' '*.rb' # you don't have to do like this. just write in single string.\n   File.fnmatch(rbfiles, 'main.rb')                    #=> false\n   File.fnmatch(rbfiles, './main.rb')                  #=> false\n   File.fnmatch(rbfiles, 'lib/song.rb')                #=> true\n   File.fnmatch('**.rb', 'main.rb')                    #=> true\n   File.fnmatch('**.rb', './main.rb')                  #=> false\n   File.fnmatch('**.rb', 'lib/song.rb')                #=> true\n   File.fnmatch('*',           'dave/.profile')                      #=> true\n\n   pattern = '*' '/' '*'\n   File.fnmatch(pattern, 'dave/.profile', File::FNM_PATHNAME)  #=> false\n   File.fnmatch(pattern, 'dave/.profile', File::FNM_PATHNAME | File::FNM_DOTMATCH) #=> true\n\n   pattern = '**' '/' 'foo'\n   File.fnmatch(pattern, 'a/b/c/foo', File::FNM_PATHNAME)     #=> true\n   File.fnmatch(pattern, '/a/b/c/foo', File::FNM_PATHNAME)    #=> true\n   File.fnmatch(pattern, 'c:/a/b/c/foo', File::FNM_PATHNAME)  #=> true\n   File.fnmatch(pattern, 'a/.b/c/foo', File::FNM_PATHNAME)    #=> false\n   File.fnmatch(pattern, 'a/.b/c/foo', File::FNM_PATHNAME | File::FNM_DOTMATCH) #=> true","name":"fnmatch","namespace":"File","path":"File.fnmatch","type":"class_method","visibility":"public"},"File.fnmatch?":{"description":"Returns true if +path+ matches against +pattern+.  The pattern is not a\nregular expression; instead it follows rules similar to shell filename\nglobbing.  It may contain the following metacharacters:\n\n<code>*</code>::\n  Matches any file. Can be restricted by other values in the glob.\n  Equivalent to <code>/ .* /x</code> in regexp.\n\n  <code>*</code>::    Matches all files regular files\n  <code>c*</code>::   Matches all files beginning with <code>c</code>\n  <code>*c</code>::   Matches all files ending with <code>c</code>\n  <code>\\*c*</code>:: Matches all files that have <code>c</code> in them\n                      (including at the beginning or end).\n\n  To match hidden files (that start with a <code>.</code> set the\n  File::FNM_DOTMATCH flag.\n\n<code>**</code>::\n  Matches directories recursively or files expansively.\n\n<code>?</code>::\n  Matches any one character. Equivalent to <code>/.{1}/</code> in regexp.\n\n<code>[set]</code>::\n  Matches any one character in +set+.  Behaves exactly like character sets\n  in Regexp, including set negation (<code>[^a-z]</code>).\n\n<code> \\ </code>::\n  Escapes the next metacharacter.\n\n<code>{a,b}</code>::\n  Matches pattern a and pattern b if File::FNM_EXTGLOB flag is enabled.\n  Behaves like a Regexp union (<code>(?:a|b)</code>).\n\n+flags+ is a bitwise OR of the <code>FNM_XXX</code> constants. The same\nglob pattern and flags are used by Dir::glob.\n\nExamples:\n\n   File.fnmatch('cat',       'cat')        #=> true  # match entire string\n   File.fnmatch('cat',       'category')   #=> false # only match partial string\n\n   File.fnmatch('c{at,ub}s', 'cats')                    #=> false # { } isn't supported by default\n   File.fnmatch('c{at,ub}s', 'cats', File::FNM_EXTGLOB) #=> true  # { } is supported on FNM_EXTGLOB\n\n   File.fnmatch('c?t',     'cat')          #=> true  # '?' match only 1 character\n   File.fnmatch('c??t',    'cat')          #=> false # ditto\n   File.fnmatch('c*',      'cats')         #=> true  # '*' match 0 or more characters\n   File.fnmatch('c*t',     'c/a/b/t')      #=> true  # ditto\n   File.fnmatch('ca[a-z]', 'cat')          #=> true  # inclusive bracket expression\n   File.fnmatch('ca[^t]',  'cat')          #=> false # exclusive bracket expression ('^' or '!')\n\n   File.fnmatch('cat', 'CAT')                     #=> false # case sensitive\n   File.fnmatch('cat', 'CAT', File::FNM_CASEFOLD) #=> true  # case insensitive\n\n   File.fnmatch('?',   '/', File::FNM_PATHNAME)  #=> false # wildcard doesn't match '/' on FNM_PATHNAME\n   File.fnmatch('*',   '/', File::FNM_PATHNAME)  #=> false # ditto\n   File.fnmatch('[/]', '/', File::FNM_PATHNAME)  #=> false # ditto\n\n   File.fnmatch('\\?',   '?')                       #=> true  # escaped wildcard becomes ordinary\n   File.fnmatch('\\a',   'a')                       #=> true  # escaped ordinary remains ordinary\n   File.fnmatch('\\a',   '\\a', File::FNM_NOESCAPE)  #=> true  # FNM_NOESCAPE makes '\\' ordinary\n   File.fnmatch('[\\?]', '?')                       #=> true  # can escape inside bracket expression\n\n   File.fnmatch('*',   '.profile')                      #=> false # wildcard doesn't match leading\n   File.fnmatch('*',   '.profile', File::FNM_DOTMATCH)  #=> true  # period by default.\n   File.fnmatch('.*',  '.profile')                      #=> true\n\n   rbfiles = '**' '/' '*.rb' # you don't have to do like this. just write in single string.\n   File.fnmatch(rbfiles, 'main.rb')                    #=> false\n   File.fnmatch(rbfiles, './main.rb')                  #=> false\n   File.fnmatch(rbfiles, 'lib/song.rb')                #=> true\n   File.fnmatch('**.rb', 'main.rb')                    #=> true\n   File.fnmatch('**.rb', './main.rb')                  #=> false\n   File.fnmatch('**.rb', 'lib/song.rb')                #=> true\n   File.fnmatch('*',           'dave/.profile')                      #=> true\n\n   pattern = '*' '/' '*'\n   File.fnmatch(pattern, 'dave/.profile', File::FNM_PATHNAME)  #=> false\n   File.fnmatch(pattern, 'dave/.profile', File::FNM_PATHNAME | File::FNM_DOTMATCH) #=> true\n\n   pattern = '**' '/' 'foo'\n   File.fnmatch(pattern, 'a/b/c/foo', File::FNM_PATHNAME)     #=> true\n   File.fnmatch(pattern, '/a/b/c/foo', File::FNM_PATHNAME)    #=> true\n   File.fnmatch(pattern, 'c:/a/b/c/foo', File::FNM_PATHNAME)  #=> true\n   File.fnmatch(pattern, 'a/.b/c/foo', File::FNM_PATHNAME)    #=> false\n   File.fnmatch(pattern, 'a/.b/c/foo', File::FNM_PATHNAME | File::FNM_DOTMATCH) #=> true","name":"fnmatch?","namespace":"File","path":"File.fnmatch?","type":"class_method","visibility":"public","return":[["Boolean"],""]},"File.ftype":{"description":"Identifies the type of the named file; the return string is one of\n``<code>file</code>'', ``<code>directory</code>'',\n``<code>characterSpecial</code>'', ``<code>blockSpecial</code>'',\n``<code>fifo</code>'', ``<code>link</code>'',\n``<code>socket</code>'', or ``<code>unknown</code>''.\n\n   File.ftype(\"testfile\")            #=> \"file\"\n   File.ftype(\"/dev/tty\")            #=> \"characterSpecial\"\n   File.ftype(\"/tmp/.X11-unix/X0\")   #=> \"socket\"","name":"ftype","namespace":"File","path":"File.ftype","type":"class_method","visibility":"public"},"File.join":{"description":"Returns a new string formed by joining the strings using\n<code>\"/\"</code>.\n\n   File.join(\"usr\", \"mail\", \"gumby\")   #=> \"usr/mail/gumby\"","name":"join","namespace":"File","path":"File.join","type":"class_method","visibility":"public"},"File.lchmod":{"description":"Equivalent to <code>File::chmod</code>, but does not follow symbolic\nlinks (so it will change the permissions associated with the link,\nnot the file referenced by the link). Often not available.","name":"lchmod","namespace":"File","path":"File.lchmod","type":"class_method","visibility":"public"},"File.lchown":{"description":"Equivalent to <code>File::chown</code>, but does not follow symbolic\nlinks (so it will change the owner associated with the link, not the\nfile referenced by the link). Often not available. Returns number\nof files in the argument list.","name":"lchown","namespace":"File","path":"File.lchown","type":"class_method","visibility":"public"},"File.link":{"description":"Creates a new name for an existing file using a hard link. Will not\noverwrite <i>new_name</i> if it already exists (raising a subclass\nof <code>SystemCallError</code>). Not available on all platforms.\n\n   File.link(\"testfile\", \".testfile\")   #=> 0\n   IO.readlines(\".testfile\")[0]         #=> \"This is line one\\n\"","name":"link","namespace":"File","path":"File.link","type":"class_method","visibility":"public"},"File.lstat":{"description":"Same as <code>File::stat</code>, but does not follow the last symbolic\nlink. Instead, reports on the link itself.\n\n   File.symlink(\"testfile\", \"link2test\")   #=> 0\n   File.stat(\"testfile\").size              #=> 66\n   File.lstat(\"link2test\").size            #=> 8\n   File.stat(\"link2test\").size             #=> 66","name":"lstat","namespace":"File","path":"File.lstat","type":"class_method","visibility":"public"},"File.lutime":{"description":"Sets the access and modification times of each named file to the\nfirst two arguments. If a file is a symlink, this method acts upon\nthe link itself as opposed to its referent; for the inverse\nbehavior, see File.utime. Returns the number of file\nnames in the argument list.","name":"lutime","namespace":"File","path":"File.lutime","type":"class_method","visibility":"public"},"File.mkfifo":{"description":"Creates a FIFO special file with name _file_name_.  _mode_\nspecifies the FIFO's permissions. It is modified by the process's\numask in the usual way: the permissions of the created file are\n(mode & ~umask).","name":"mkfifo","namespace":"File","path":"File.mkfifo","type":"class_method","visibility":"public"},"File.mtime":{"description":"Returns the modification time for the named file as a Time object.\n\n_file_name_ can be an IO object.\n\n   File.mtime(\"testfile\")   #=> Tue Apr 08 12:58:04 CDT 2003","name":"mtime","namespace":"File","path":"File.mtime","type":"class_method","visibility":"public"},"File.open":{"description":"call-seq:\n   IO.open(fd, mode=\"r\" [, opt])                -> io\n   IO.open(fd, mode=\"r\" [, opt]) {|io| block }  -> obj\n\nWith no associated block, <code>IO.open</code> is a synonym for IO.new.  If\nthe optional code block is given, it will be passed +io+ as an argument,\nand the IO object will automatically be closed when the block terminates.\nIn this instance, IO.open returns the value of the block.\n\nSee IO.new for a description of the +fd+, +mode+ and +opt+ parameters.","name":"open","namespace":"File","path":"File.open","type":"class_method","visibility":"public"},"File.path":{"description":"Returns the string representation of the path\n\n   File.path(\"/dev/null\")          #=> \"/dev/null\"\n   File.path(Pathname.new(\"/tmp\")) #=> \"/tmp\"","name":"path","namespace":"File","path":"File.path","type":"class_method","visibility":"public"},"File.readlink":{"description":"Returns the name of the file referenced by the given link.\nNot available on all platforms.\n\n   File.symlink(\"testfile\", \"link2test\")   #=> 0\n   File.readlink(\"link2test\")              #=> \"testfile\"","name":"readlink","namespace":"File","path":"File.readlink","type":"class_method","visibility":"public"},"File.realdirpath":{"description":"Returns the real (absolute) pathname of _pathname_ in the actual filesystem.\n The real pathname doesn't contain symlinks or useless dots.\n\n If _dir_string_ is given, it is used as a base directory\n for interpreting relative pathname instead of the current directory.\n\n The last component of the real pathname can be nonexistent.","name":"realdirpath","namespace":"File","path":"File.realdirpath","type":"class_method","visibility":"public"},"File.realpath":{"description":"Returns the real (absolute) pathname of _pathname_ in the actual\n filesystem not containing symlinks or useless dots.\n\n If _dir_string_ is given, it is used as a base directory\n for interpreting relative pathname instead of the current directory.\n\n All components of the pathname must exist when this method is\n called.","name":"realpath","namespace":"File","path":"File.realpath","type":"class_method","visibility":"public"},"File.rename":{"description":"Renames the given file to the new name. Raises a\n<code>SystemCallError</code> if the file cannot be renamed.\n\n   File.rename(\"afile\", \"afile.bak\")   #=> 0","name":"rename","namespace":"File","path":"File.rename","type":"class_method","visibility":"public"},"File.split":{"description":"Splits the given string into a directory and a file component and\nreturns them in a two-element array. See also\n<code>File::dirname</code> and <code>File::basename</code>.\n\n   File.split(\"/home/gumby/.profile\")   #=> [\"/home/gumby\", \".profile\"]","name":"split","namespace":"File","path":"File.split","type":"class_method","visibility":"public"},"File.stat":{"description":"Returns a <code>File::Stat</code> object for the named file (see\n<code>File::Stat</code>).\n\n   File.stat(\"testfile\").mtime   #=> Tue Apr 08 12:58:04 CDT 2003","name":"stat","namespace":"File","path":"File.stat","type":"class_method","visibility":"public"},"File.symlink":{"description":"Creates a symbolic link called <i>new_name</i> for the existing file\n<i>old_name</i>. Raises a <code>NotImplemented</code> exception on\nplatforms that do not support symbolic links.\n\n   File.symlink(\"testfile\", \"link2test\")   #=> 0","name":"symlink","namespace":"File","path":"File.symlink","type":"class_method","visibility":"public"},"File.truncate":{"description":"Truncates the file <i>file_name</i> to be at most <i>integer</i>\nbytes long. Not available on all platforms.\n\n   f = File.new(\"out\", \"w\")\n   f.write(\"1234567890\")     #=> 10\n   f.close                   #=> nil\n   File.truncate(\"out\", 5)   #=> 0\n   File.size(\"out\")          #=> 5","name":"truncate","namespace":"File","path":"File.truncate","type":"class_method","visibility":"public"},"File.umask":{"description":"Returns the current umask value for this process. If the optional\nargument is given, set the umask to that value and return the\nprevious value. Umask values are <em>subtracted</em> from the\ndefault permissions, so a umask of <code>0222</code> would make a\nfile read-only for everyone.\n\n   File.umask(0006)   #=> 18\n   File.umask         #=> 6","name":"umask","namespace":"File","path":"File.umask","type":"class_method","visibility":"public"},"File.unlink":{"description":"Deletes the named files, returning the number of names\npassed as arguments. Raises an exception on any error.\nSince the underlying implementation relies on the\n<code>unlink(2)</code> system call, the type of\nexception raised depends on its error type (see\nhttps://linux.die.net/man/2/unlink) and has the form of\ne.g. <code>Errno::ENOENT</code>.\n\nSee also <code>Dir::rmdir</code>.","name":"unlink","namespace":"File","path":"File.unlink","type":"class_method","visibility":"public"},"File.utime":{"description":"Sets the access and modification times of each named file to the\nfirst two arguments. If a file is a symlink, this method acts upon\nits referent rather than the link itself; for the inverse\nbehavior see File.lutime. Returns the number of file\nnames in the argument list.","name":"utime","namespace":"File","path":"File.utime","type":"class_method","visibility":"public"},"File::ALT_SEPARATOR":{"description":"platform specific alternative separator","name":"ALT_SEPARATOR","namespace":"File","path":"File::ALT_SEPARATOR","type":"constant","return":null,"visibility":"public"},"File::Constants":{"description":"File::Constants provides file-related constants.  All possible\nfile constants are listed in the documentation but they may not all\nbe present on your platform.\n\nIf the underlying platform doesn't define a constant the corresponding\nRuby constant is not defined.\n\nYour platform documentations (e.g. man open(2)) may describe more\ndetailed information.","name":"Constants","namespace":"File","path":"File::Constants","type":"module","visibility":"public"},"File::Constants::APPEND":{"description":"append on each write","name":"APPEND","namespace":"File::Constants","path":"File::Constants::APPEND","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::BINARY":{"description":"disable line code conversion","name":"BINARY","namespace":"File::Constants","path":"File::Constants::BINARY","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::CREAT":{"description":"create file if it does not exist","name":"CREAT","namespace":"File::Constants","path":"File::Constants::CREAT","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::DIRECT":{"description":"Try to minimize cache effects of the I/O to and from this file.","name":"DIRECT","namespace":"File::Constants","path":"File::Constants::DIRECT","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::DSYNC":{"description":"any write operation perform synchronously except some meta data","name":"DSYNC","namespace":"File::Constants","path":"File::Constants::DSYNC","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::EXCL":{"description":"error if CREAT and the file exists","name":"EXCL","namespace":"File::Constants","path":"File::Constants::EXCL","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::LOCK_EX":{"description":"exclusive lock. see File#flock","name":"LOCK_EX","namespace":"File::Constants","path":"File::Constants::LOCK_EX","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::LOCK_NB":{"description":"non-blocking lock. used with LOCK_SH or LOCK_EX. see File#flock","name":"LOCK_NB","namespace":"File::Constants","path":"File::Constants::LOCK_NB","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::LOCK_SH":{"description":"shared lock. see File#flock","name":"LOCK_SH","namespace":"File::Constants","path":"File::Constants::LOCK_SH","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::LOCK_UN":{"description":"unlock. see File#flock","name":"LOCK_UN","namespace":"File::Constants","path":"File::Constants::LOCK_UN","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::NOATIME":{"description":"Linux","name":"NOATIME","namespace":"File::Constants","path":"File::Constants::NOATIME","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::NOCTTY":{"description":"not to make opened IO the controlling terminal device","name":"NOCTTY","namespace":"File::Constants","path":"File::Constants::NOCTTY","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::NOFOLLOW":{"description":"FreeBSD, Linux","name":"NOFOLLOW","namespace":"File::Constants","path":"File::Constants::NOFOLLOW","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::NONBLOCK":{"description":"do not block on open or for data to become available","name":"NONBLOCK","namespace":"File::Constants","path":"File::Constants::NONBLOCK","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::NULL":{"description":"Name of the null device","name":"NULL","namespace":"File::Constants","path":"File::Constants::NULL","type":"constant","return":["String",""],"visibility":"public"},"File::Constants::RDONLY":{"description":"open for reading only","name":"RDONLY","namespace":"File::Constants","path":"File::Constants::RDONLY","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::RDWR":{"description":"open for reading and writing","name":"RDWR","namespace":"File::Constants","path":"File::Constants::RDWR","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::RSYNC":{"description":"any read operation perform synchronously. used with SYNC or DSYNC.","name":"RSYNC","namespace":"File::Constants","path":"File::Constants::RSYNC","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::SHARE_DELETE":{"description":"can delete opened file","name":"SHARE_DELETE","namespace":"File::Constants","path":"File::Constants::SHARE_DELETE","type":"constant","return":null,"visibility":"public"},"File::Constants::SYNC":{"description":"any write operation perform synchronously","name":"SYNC","namespace":"File::Constants","path":"File::Constants::SYNC","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::TMPFILE":{"description":"Create an unnamed temporary file","name":"TMPFILE","namespace":"File::Constants","path":"File::Constants::TMPFILE","type":"constant","return":null,"visibility":"public"},"File::Constants::TRUNC":{"description":"truncate size to 0","name":"TRUNC","namespace":"File::Constants","path":"File::Constants::TRUNC","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::Constants::WRONLY":{"description":"open for writing only","name":"WRONLY","namespace":"File::Constants","path":"File::Constants::WRONLY","type":"constant","return":["Fixnum",""],"visibility":"public"},"File::PATH_SEPARATOR":{"description":"path list separator","name":"PATH_SEPARATOR","namespace":"File","path":"File::PATH_SEPARATOR","type":"constant","return":["String",""],"visibility":"public"},"File::SEPARATOR":{"description":"","name":"SEPARATOR","namespace":"File","path":"File::SEPARATOR","type":"constant","return":["String",""],"visibility":"public"},"File::Separator":{"description":"separates directory parts in path","name":"Separator","namespace":"File","path":"File::Separator","type":"constant","return":["String",""],"visibility":"public"},"File::Stat":{"description":"Objects of class <code>File::Stat</code> encapsulate common status\ninformation for <code>File</code> objects. The information is\nrecorded at the moment the <code>File::Stat</code> object is\ncreated; changes made to the file after that point will not be\nreflected. <code>File::Stat</code> objects are returned by\n<code>IO#stat</code>, <code>File::stat</code>,\n<code>File#lstat</code>, and <code>File::lstat</code>. Many of these\nmethods return platform-specific values, and not all values are\nmeaningful on all systems. See also <code>Kernel#test</code>.","name":"Stat","namespace":"File","path":"File::Stat","type":"class","visibility":"public"},"File::Stat#<=>":{"description":"Compares File::Stat objects by comparing their respective modification\ntimes.\n\n+nil+ is returned if +other_stat+ is not a File::Stat object\n\n   f1 = File.new(\"f1\", \"w\")\n   sleep 1\n   f2 = File.new(\"f2\", \"w\")\n   f1.stat <=> f2.stat   #=> -1","name":"<=>","namespace":"File::Stat","path":"File::Stat#<=>","type":"instance_method","visibility":"public"},"File::Stat#atime":{"description":"Returns the last access time for this file as an object of class\n<code>Time</code>.\n\n   File.stat(\"testfile\").atime   #=> Wed Dec 31 18:00:00 CST 1969","name":"atime","namespace":"File::Stat","path":"File::Stat#atime","type":"instance_method","visibility":"public"},"File::Stat#birthtime":{"description":"Returns the birth time for <i>stat</i>.\n\nIf the platform doesn't have birthtime, raises NotImplementedError.\n\n   File.write(\"testfile\", \"foo\")\n   sleep 10\n   File.write(\"testfile\", \"bar\")\n   sleep 10\n   File.chmod(0644, \"testfile\")\n   sleep 10\n   File.read(\"testfile\")\n   File.stat(\"testfile\").birthtime   #=> 2014-02-24 11:19:17 +0900\n   File.stat(\"testfile\").mtime       #=> 2014-02-24 11:19:27 +0900\n   File.stat(\"testfile\").ctime       #=> 2014-02-24 11:19:37 +0900\n   File.stat(\"testfile\").atime       #=> 2014-02-24 11:19:47 +0900","name":"birthtime","namespace":"File::Stat","path":"File::Stat#birthtime","type":"instance_method","visibility":"public"},"File::Stat#blksize":{"description":"Returns the native file system's block size. Will return <code>nil</code>\non platforms that don't support this information.\n\n   File.stat(\"testfile\").blksize   #=> 4096","name":"blksize","namespace":"File::Stat","path":"File::Stat#blksize","type":"instance_method","visibility":"public"},"File::Stat#blockdev?":{"description":"Returns <code>true</code> if the file is a block device,\n<code>false</code> if it isn't or if the operating system doesn't\nsupport this feature.\n\n   File.stat(\"testfile\").blockdev?    #=> false\n   File.stat(\"/dev/hda1\").blockdev?   #=> true","name":"blockdev?","namespace":"File::Stat","path":"File::Stat#blockdev?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#blocks":{"description":"Returns the number of native file system blocks allocated for this\nfile, or <code>nil</code> if the operating system doesn't\nsupport this feature.\n\n   File.stat(\"testfile\").blocks   #=> 2","name":"blocks","namespace":"File::Stat","path":"File::Stat#blocks","type":"instance_method","visibility":"public"},"File::Stat#chardev?":{"description":"Returns <code>true</code> if the file is a character device,\n<code>false</code> if it isn't or if the operating system doesn't\nsupport this feature.\n\n   File.stat(\"/dev/tty\").chardev?   #=> true","name":"chardev?","namespace":"File::Stat","path":"File::Stat#chardev?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#ctime":{"description":"Returns the change time for <i>stat</i> (that is, the time\ndirectory information about the file was changed, not the file\nitself).\n\nNote that on Windows (NTFS), returns creation time (birth time).\n\n   File.stat(\"testfile\").ctime   #=> Wed Apr 09 08:53:14 CDT 2003","name":"ctime","namespace":"File::Stat","path":"File::Stat#ctime","type":"instance_method","visibility":"public"},"File::Stat#dev":{"description":"Returns an integer representing the device on which <i>stat</i>\nresides.\n\n   File.stat(\"testfile\").dev   #=> 774","name":"dev","namespace":"File::Stat","path":"File::Stat#dev","type":"instance_method","visibility":"public"},"File::Stat#dev_major":{"description":"Returns the major part of <code>File_Stat#dev</code> or\n<code>nil</code>.\n\n   File.stat(\"/dev/fd1\").dev_major   #=> 2\n   File.stat(\"/dev/tty\").dev_major   #=> 5","name":"dev_major","namespace":"File::Stat","path":"File::Stat#dev_major","type":"instance_method","visibility":"public"},"File::Stat#dev_minor":{"description":"Returns the minor part of <code>File_Stat#dev</code> or\n<code>nil</code>.\n\n   File.stat(\"/dev/fd1\").dev_minor   #=> 1\n   File.stat(\"/dev/tty\").dev_minor   #=> 0","name":"dev_minor","namespace":"File::Stat","path":"File::Stat#dev_minor","type":"instance_method","visibility":"public"},"File::Stat#directory?":{"description":"Returns <code>true</code> if <i>stat</i> is a directory,\n<code>false</code> otherwise.\n\n   File.stat(\"testfile\").directory?   #=> false\n   File.stat(\".\").directory?          #=> true","name":"directory?","namespace":"File::Stat","path":"File::Stat#directory?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#executable?":{"description":"Returns <code>true</code> if <i>stat</i> is executable or if the\noperating system doesn't distinguish executable files from\nnonexecutable files. The tests are made using the effective owner of\nthe process.\n\n   File.stat(\"testfile\").executable?   #=> false","name":"executable?","namespace":"File::Stat","path":"File::Stat#executable?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#executable_real?":{"description":"Same as <code>executable?</code>, but tests using the real owner of\nthe process.","name":"executable_real?","namespace":"File::Stat","path":"File::Stat#executable_real?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#file?":{"description":"Returns <code>true</code> if <i>stat</i> is a regular file (not\na device file, pipe, socket, etc.).\n\n   File.stat(\"testfile\").file?   #=> true","name":"file?","namespace":"File::Stat","path":"File::Stat#file?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#ftype":{"description":"Identifies the type of <i>stat</i>. The return string is one of:\n``<code>file</code>'', ``<code>directory</code>'',\n``<code>characterSpecial</code>'', ``<code>blockSpecial</code>'',\n``<code>fifo</code>'', ``<code>link</code>'',\n``<code>socket</code>'', or ``<code>unknown</code>''.\n\n   File.stat(\"/dev/tty\").ftype   #=> \"characterSpecial\"","name":"ftype","namespace":"File::Stat","path":"File::Stat#ftype","type":"instance_method","visibility":"public"},"File::Stat#gid":{"description":"Returns the numeric group id of the owner of <i>stat</i>.\n\n   File.stat(\"testfile\").gid   #=> 500","name":"gid","namespace":"File::Stat","path":"File::Stat#gid","type":"instance_method","visibility":"public"},"File::Stat#grpowned?":{"description":"Returns true if the effective group id of the process is the same as\nthe group id of <i>stat</i>. On Windows NT, returns <code>false</code>.\n\n   File.stat(\"testfile\").grpowned?      #=> true\n   File.stat(\"/etc/passwd\").grpowned?   #=> false","name":"grpowned?","namespace":"File::Stat","path":"File::Stat#grpowned?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#initialize":{"description":"Create a File::Stat object for the given file name (raising an\nexception if the file doesn't exist).","name":"initialize","namespace":"File::Stat","path":"File::Stat#initialize","type":"instance_method","visibility":"public"},"File::Stat#initialize_copy":{"description":":nodoc:","name":"initialize_copy","namespace":"File::Stat","path":"File::Stat#initialize_copy","type":"instance_method","visibility":"public"},"File::Stat#ino":{"description":"Returns the inode number for <i>stat</i>.\n\n   File.stat(\"testfile\").ino   #=> 1083669","name":"ino","namespace":"File::Stat","path":"File::Stat#ino","type":"instance_method","visibility":"public"},"File::Stat#inspect":{"description":"Produce a nicely formatted description of <i>stat</i>.\n\n  File.stat(\"/etc/passwd\").inspect\n     #=> \"#<File::Stat dev=0xe000005, ino=1078078, mode=0100644,\n     #    nlink=1, uid=0, gid=0, rdev=0x0, size=1374, blksize=4096,\n     #    blocks=8, atime=Wed Dec 10 10:16:12 CST 2003,\n     #    mtime=Fri Sep 12 15:41:41 CDT 2003,\n     #    ctime=Mon Oct 27 11:20:27 CST 2003,\n     #    birthtime=Mon Aug 04 08:13:49 CDT 2003>\"","name":"inspect","namespace":"File::Stat","path":"File::Stat#inspect","type":"instance_method","visibility":"public"},"File::Stat#mode":{"description":"Returns an integer representing the permission bits of\n<i>stat</i>. The meaning of the bits is platform dependent; on\nUnix systems, see <code>stat(2)</code>.\n\n   File.chmod(0644, \"testfile\")   #=> 1\n   s = File.stat(\"testfile\")\n   sprintf(\"%o\", s.mode)          #=> \"100644\"","name":"mode","namespace":"File::Stat","path":"File::Stat#mode","type":"instance_method","visibility":"public"},"File::Stat#mtime":{"description":"Returns the modification time of <i>stat</i>.\n\n   File.stat(\"testfile\").mtime   #=> Wed Apr 09 08:53:14 CDT 2003","name":"mtime","namespace":"File::Stat","path":"File::Stat#mtime","type":"instance_method","visibility":"public"},"File::Stat#nlink":{"description":"Returns the number of hard links to <i>stat</i>.\n\n   File.stat(\"testfile\").nlink             #=> 1\n   File.link(\"testfile\", \"testfile.bak\")   #=> 0\n   File.stat(\"testfile\").nlink             #=> 2","name":"nlink","namespace":"File::Stat","path":"File::Stat#nlink","type":"instance_method","visibility":"public"},"File::Stat#owned?":{"description":"Returns <code>true</code> if the effective user id of the process is\nthe same as the owner of <i>stat</i>.\n\n   File.stat(\"testfile\").owned?      #=> true\n   File.stat(\"/etc/passwd\").owned?   #=> false","name":"owned?","namespace":"File::Stat","path":"File::Stat#owned?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#pipe?":{"description":"Returns <code>true</code> if the operating system supports pipes and\n<i>stat</i> is a pipe; <code>false</code> otherwise.","name":"pipe?","namespace":"File::Stat","path":"File::Stat#pipe?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#rdev":{"description":"Returns an integer representing the device type on which\n<i>stat</i> resides. Returns <code>nil</code> if the operating\nsystem doesn't support this feature.\n\n   File.stat(\"/dev/fd1\").rdev   #=> 513\n   File.stat(\"/dev/tty\").rdev   #=> 1280","name":"rdev","namespace":"File::Stat","path":"File::Stat#rdev","type":"instance_method","visibility":"public"},"File::Stat#rdev_major":{"description":"Returns the major part of <code>File_Stat#rdev</code> or\n<code>nil</code>.\n\n   File.stat(\"/dev/fd1\").rdev_major   #=> 2\n   File.stat(\"/dev/tty\").rdev_major   #=> 5","name":"rdev_major","namespace":"File::Stat","path":"File::Stat#rdev_major","type":"instance_method","visibility":"public"},"File::Stat#rdev_minor":{"description":"Returns the minor part of <code>File_Stat#rdev</code> or\n<code>nil</code>.\n\n   File.stat(\"/dev/fd1\").rdev_minor   #=> 1\n   File.stat(\"/dev/tty\").rdev_minor   #=> 0","name":"rdev_minor","namespace":"File::Stat","path":"File::Stat#rdev_minor","type":"instance_method","visibility":"public"},"File::Stat#readable?":{"description":"Returns <code>true</code> if <i>stat</i> is readable by the\neffective user id of this process.\n\n   File.stat(\"testfile\").readable?   #=> true","name":"readable?","namespace":"File::Stat","path":"File::Stat#readable?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#readable_real?":{"description":"Returns <code>true</code> if <i>stat</i> is readable by the real\nuser id of this process.\n\n   File.stat(\"testfile\").readable_real?   #=> true","name":"readable_real?","namespace":"File::Stat","path":"File::Stat#readable_real?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#setgid?":{"description":"Returns <code>true</code> if <i>stat</i> has the set-group-id\npermission bit set, <code>false</code> if it doesn't or if the\noperating system doesn't support this feature.\n\n   File.stat(\"/usr/sbin/lpc\").setgid?   #=> true","name":"setgid?","namespace":"File::Stat","path":"File::Stat#setgid?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#setuid?":{"description":"Returns <code>true</code> if <i>stat</i> has the set-user-id\npermission bit set, <code>false</code> if it doesn't or if the\noperating system doesn't support this feature.\n\n   File.stat(\"/bin/su\").setuid?   #=> true","name":"setuid?","namespace":"File::Stat","path":"File::Stat#setuid?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#size":{"description":"Returns the size of <i>stat</i> in bytes.\n\n   File.stat(\"testfile\").size   #=> 66","name":"size","namespace":"File::Stat","path":"File::Stat#size","type":"instance_method","visibility":"public"},"File::Stat#size?":{"description":"Returns the size of <i>stat</i> in bytes.\n\n   File.stat(\"testfile\").size   #=> 66","name":"size?","namespace":"File::Stat","path":"File::Stat#size?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#socket?":{"description":"Returns <code>true</code> if <i>stat</i> is a socket,\n<code>false</code> if it isn't or if the operating system doesn't\nsupport this feature.\n\n   File.stat(\"testfile\").socket?   #=> false","name":"socket?","namespace":"File::Stat","path":"File::Stat#socket?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#sticky?":{"description":"Returns <code>true</code> if <i>stat</i> has its sticky bit set,\n<code>false</code> if it doesn't or if the operating system doesn't\nsupport this feature.\n\n   File.stat(\"testfile\").sticky?   #=> false","name":"sticky?","namespace":"File::Stat","path":"File::Stat#sticky?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#symlink?":{"description":"Returns <code>true</code> if <i>stat</i> is a symbolic link,\n<code>false</code> if it isn't or if the operating system doesn't\nsupport this feature. As <code>File::stat</code> automatically\nfollows symbolic links, <code>symlink?</code> will always be\n<code>false</code> for an object returned by\n<code>File::stat</code>.\n\n   File.symlink(\"testfile\", \"alink\")   #=> 0\n   File.stat(\"alink\").symlink?         #=> false\n   File.lstat(\"alink\").symlink?        #=> true","name":"symlink?","namespace":"File::Stat","path":"File::Stat#symlink?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#uid":{"description":"Returns the numeric user id of the owner of <i>stat</i>.\n\n   File.stat(\"testfile\").uid   #=> 501","name":"uid","namespace":"File::Stat","path":"File::Stat#uid","type":"instance_method","visibility":"public"},"File::Stat#world_readable?":{"description":"If <i>stat</i> is readable by others, returns an integer\nrepresenting the file permission bits of <i>stat</i>. Returns\n<code>nil</code> otherwise. The meaning of the bits is platform\ndependent; on Unix systems, see <code>stat(2)</code>.\n\n   m = File.stat(\"/etc/passwd\").world_readable?  #=> 420\n   sprintf(\"%o\", m)\t\t\t\t    #=> \"644\"","name":"world_readable?","namespace":"File::Stat","path":"File::Stat#world_readable?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#world_writable?":{"description":"If <i>stat</i> is writable by others, returns an integer\nrepresenting the file permission bits of <i>stat</i>. Returns\n<code>nil</code> otherwise. The meaning of the bits is platform\ndependent; on Unix systems, see <code>stat(2)</code>.\n\n   m = File.stat(\"/tmp\").world_writable?\t    #=> 511\n   sprintf(\"%o\", m)\t\t\t\t    #=> \"777\"","name":"world_writable?","namespace":"File::Stat","path":"File::Stat#world_writable?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#writable?":{"description":"Returns <code>true</code> if <i>stat</i> is writable by the\neffective user id of this process.\n\n   File.stat(\"testfile\").writable?   #=> true","name":"writable?","namespace":"File::Stat","path":"File::Stat#writable?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#writable_real?":{"description":"Returns <code>true</code> if <i>stat</i> is writable by the real\nuser id of this process.\n\n   File.stat(\"testfile\").writable_real?   #=> true","name":"writable_real?","namespace":"File::Stat","path":"File::Stat#writable_real?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"File::Stat#zero?":{"description":"Returns <code>true</code> if <i>stat</i> is a zero-length file;\n<code>false</code> otherwise.\n\n   File.stat(\"testfile\").zero?   #=> false","name":"zero?","namespace":"File::Stat","path":"File::Stat#zero?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Encoding":{"description":"An Encoding instance represents a character encoding usable in Ruby. It is\ndefined as a constant under the Encoding namespace. It has a name and\noptionally, aliases:\n\n  Encoding::ISO_8859_1.name\n  #=> \"ISO-8859-1\"\n\n  Encoding::ISO_8859_1.names\n  #=> [\"ISO-8859-1\", \"ISO8859-1\"]\n\nRuby methods dealing with encodings return or accept Encoding instances as\narguments (when a method accepts an Encoding instance as an argument, it\ncan be passed an Encoding name or alias instead).\n\n  \"some string\".encoding\n  #=> #<Encoding:UTF-8>\n\n  string = \"some string\".encode(Encoding::ISO_8859_1)\n  #=> \"some string\"\n  string.encoding\n  #=> #<Encoding:ISO-8859-1>\n\n  \"some string\".encode \"ISO-8859-1\"\n  #=> \"some string\"\n\n<code>Encoding::ASCII_8BIT</code> is a special encoding that is usually\nused for a byte string, not a character string. But as the name insists,\nits characters in the range of ASCII are considered as ASCII characters.\nThis is useful when you use ASCII-8BIT characters with other ASCII\ncompatible characters.\n\n== Changing an encoding\n\nThe associated Encoding of a String can be changed in two different ways.\n\nFirst, it is possible to set the Encoding of a string to a new Encoding\nwithout changing the internal byte representation of the string, with\nString#force_encoding. This is how you can tell Ruby the correct encoding\nof a string.\n\n  string\n  #=> \"R\\xC3\\xA9sum\\xC3\\xA9\"\n  string.encoding\n  #=> #<Encoding:ISO-8859-1>\n  string.force_encoding(Encoding::UTF_8)\n  #=> \"R\\u00E9sum\\u00E9\"\n\nSecond, it is possible to transcode a string, i.e. translate its internal\nbyte representation to another encoding. Its associated encoding is also\nset to the other encoding. See String#encode for the various forms of\ntranscoding, and the Encoding::Converter class for additional control over\nthe transcoding process.\n\n  string\n  #=> \"R\\u00E9sum\\u00E9\"\n  string.encoding\n  #=> #<Encoding:UTF-8>\n  string = string.encode!(Encoding::ISO_8859_1)\n  #=> \"R\\xE9sum\\xE9\"\n  string.encoding\n  #=> #<Encoding::ISO-8859-1>\n\n== Script encoding\n\nAll Ruby script code has an associated Encoding which any String literal\ncreated in the source code will be associated to.\n\nThe default script encoding is <code>Encoding::UTF-8</code> after v2.0, but it can\nbe changed by a magic comment on the first line of the source code file (or\nsecond line, if there is a shebang line on the first). The comment must\ncontain the word <code>coding</code> or <code>encoding</code>, followed\nby a colon, space and the Encoding name or alias:\n\n  # encoding: UTF-8\n\n  \"some string\".encoding\n  #=> #<Encoding:UTF-8>\n\nThe <code>__ENCODING__</code> keyword returns the script encoding of the file\nwhich the keyword is written:\n\n  # encoding: ISO-8859-1\n\n  __ENCODING__\n  #=> #<Encoding:ISO-8859-1>\n\n<code>ruby -K</code> will change the default locale encoding, but this is\nnot recommended. Ruby source files should declare its script encoding by a\nmagic comment even when they only depend on US-ASCII strings or regular\nexpressions.\n\n== Locale encoding\n\nThe default encoding of the environment. Usually derived from locale.\n\nsee Encoding.locale_charmap, Encoding.find('locale')\n\n== Filesystem encoding\n\nThe default encoding of strings from the filesystem of the environment.\nThis is used for strings of file names or paths.\n\nsee Encoding.find('filesystem')\n\n== External encoding\n\nEach IO object has an external encoding which indicates the encoding that\nRuby will use to read its data. By default Ruby sets the external encoding\nof an IO object to the default external encoding. The default external\nencoding is set by locale encoding or the interpreter <code>-E</code> option.\nEncoding.default_external returns the current value of the external\nencoding.\n\n  ENV[\"LANG\"]\n  #=> \"UTF-8\"\n  Encoding.default_external\n  #=> #<Encoding:UTF-8>\n\n  $ ruby -E ISO-8859-1 -e \"p Encoding.default_external\"\n  #<Encoding:ISO-8859-1>\n\n  $ LANG=C ruby -e 'p Encoding.default_external'\n  #<Encoding:US-ASCII>\n\nThe default external encoding may also be set through\nEncoding.default_external=, but you should not do this as strings created\nbefore and after the change will have inconsistent encodings.  Instead use\n<code>ruby -E</code> to invoke ruby with the correct external encoding.\n\nWhen you know that the actual encoding of the data of an IO object is not\nthe default external encoding, you can reset its external encoding with\nIO#set_encoding or set it at IO object creation (see IO.new options).\n\n== Internal encoding\n\nTo process the data of an IO object which has an encoding different\nfrom its external encoding, you can set its internal encoding. Ruby will use\nthis internal encoding to transcode the data when it is read from the IO\nobject.\n\nConversely, when data is written to the IO object it is transcoded from the\ninternal encoding to the external encoding of the IO object.\n\nThe internal encoding of an IO object can be set with\nIO#set_encoding or at IO object creation (see IO.new options).\n\nThe internal encoding is optional and when not set, the Ruby default\ninternal encoding is used. If not explicitly set this default internal\nencoding is +nil+ meaning that by default, no transcoding occurs.\n\nThe default internal encoding can be set with the interpreter option\n<code>-E</code>. Encoding.default_internal returns the current internal\nencoding.\n\n   $ ruby -e 'p Encoding.default_internal'\n   nil\n\n   $ ruby -E ISO-8859-1:UTF-8 -e \"p [Encoding.default_external, \\\n     Encoding.default_internal]\"\n   [#<Encoding:ISO-8859-1>, #<Encoding:UTF-8>]\n\nThe default internal encoding may also be set through\nEncoding.default_internal=, but you should not do this as strings created\nbefore and after the change will have inconsistent encodings.  Instead use\n<code>ruby -E</code> to invoke ruby with the correct internal encoding.\n\n== IO encoding example\n\nIn the following example a UTF-8 encoded string \"R\\u00E9sum\\u00E9\" is transcoded for\noutput to ISO-8859-1 encoding, then read back in and transcoded to UTF-8:\n\n  string = \"R\\u00E9sum\\u00E9\"\n\n  open(\"transcoded.txt\", \"w:ISO-8859-1\") do |io|\n    io.write(string)\n  end\n\n  puts \"raw text:\"\n  p File.binread(\"transcoded.txt\")\n  puts\n\n  open(\"transcoded.txt\", \"r:ISO-8859-1:UTF-8\") do |io|\n    puts \"transcoded text:\"\n    p io.read\n  end\n\nWhile writing the file, the internal encoding is not specified as it is\nonly necessary for reading.  While reading the file both the internal and\nexternal encoding must be specified to obtain the correct result.\n\n  $ ruby t.rb\n  raw text:\n  \"R\\xE9sum\\xE9\"\n\n  transcoded text:\n  \"R\\u00E9sum\\u00E9\"","name":"Encoding","namespace":"","path":"Encoding","type":"class","visibility":"public"},"Encoding#_dump":{"description":":nodoc:","name":"_dump","namespace":"Encoding","path":"Encoding#_dump","type":"instance_method","visibility":"public"},"Encoding#ascii_compatible?":{"description":"Returns whether ASCII-compatible or not.\n\n  Encoding::UTF_8.ascii_compatible?     #=> true\n  Encoding::UTF_16BE.ascii_compatible?  #=> false","name":"ascii_compatible?","namespace":"Encoding","path":"Encoding#ascii_compatible?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Encoding#dummy?":{"description":"Returns true for dummy encodings.\nA dummy encoding is an encoding for which character handling is not properly\nimplemented.\nIt is used for stateful encodings.\n\n  Encoding::ISO_2022_JP.dummy?       #=> true\n  Encoding::UTF_8.dummy?             #=> false","name":"dummy?","namespace":"Encoding","path":"Encoding#dummy?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Encoding#inspect":{"description":"Returns a string which represents the encoding for programmers.\n\n  Encoding::UTF_8.inspect       #=> \"#<Encoding:UTF-8>\"\n  Encoding::ISO_2022_JP.inspect #=> \"#<Encoding:ISO-2022-JP (dummy)>\"","name":"inspect","namespace":"Encoding","path":"Encoding#inspect","type":"instance_method","visibility":"public"},"Encoding#name":{"description":"Returns the name of the encoding.\n\n  Encoding::UTF_8.name      #=> \"UTF-8\"","name":"name","namespace":"Encoding","path":"Encoding#name","type":"instance_method","visibility":"public"},"Encoding#names":{"description":"Returns the list of name and aliases of the encoding.\n\n  Encoding::WINDOWS_31J.names  #=> [\"Windows-31J\", \"CP932\", \"csWindows31J\"]","name":"names","namespace":"Encoding","path":"Encoding#names","type":"instance_method","visibility":"public"},"Encoding#replicate":{"description":"Returns a replicated encoding of _enc_ whose name is _name_.\nThe new encoding should have the same byte structure of _enc_.\nIf _name_ is used by another encoding, raise ArgumentError.","name":"replicate","namespace":"Encoding","path":"Encoding#replicate","type":"instance_method","visibility":"public"},"Encoding#to_s":{"description":"Returns the name of the encoding.\n\n  Encoding::UTF_8.name      #=> \"UTF-8\"","name":"to_s","namespace":"Encoding","path":"Encoding#to_s","type":"instance_method","visibility":"public"},"Encoding._load":{"description":":nodoc:","name":"_load","namespace":"Encoding","path":"Encoding._load","type":"class_method","visibility":"public"},"Encoding.aliases":{"description":"Returns the hash of available encoding alias and original encoding name.\n\n  Encoding.aliases\n  #=> {\"BINARY\"=>\"ASCII-8BIT\", \"ASCII\"=>\"US-ASCII\", \"ANSI_X3.4-1986\"=>\"US-ASCII\",\n        \"SJIS\"=>\"Shift_JIS\", \"eucJP\"=>\"EUC-JP\", \"CP932\"=>\"Windows-31J\"}","name":"aliases","namespace":"Encoding","path":"Encoding.aliases","type":"class_method","visibility":"public"},"Encoding.compatible?":{"description":"Checks the compatibility of two objects.\n\nIf the objects are both strings they are compatible when they are\nconcatenatable.  The encoding of the concatenated string will be returned\nif they are compatible, nil if they are not.\n\n  Encoding.compatible?(\"\\xa1\".force_encoding(\"iso-8859-1\"), \"b\")\n  #=> #<Encoding:ISO-8859-1>\n\n  Encoding.compatible?(\n    \"\\xa1\".force_encoding(\"iso-8859-1\"),\n    \"\\xa1\\xa1\".force_encoding(\"euc-jp\"))\n  #=> nil\n\nIf the objects are non-strings their encodings are compatible when they\nhave an encoding and:\n* Either encoding is US-ASCII compatible\n* One of the encodings is a 7-bit encoding","name":"compatible?","namespace":"Encoding","path":"Encoding.compatible?","type":"class_method","visibility":"public","return":[["Boolean"],""]},"Encoding.default_external":{"description":"Returns default external encoding.\n\nThe default external encoding is used by default for strings created from\nthe following locations:\n\n* CSV\n* File data read from disk\n* SDBM\n* StringIO\n* Zlib::GzipReader\n* Zlib::GzipWriter\n* String#inspect\n* Regexp#inspect\n\nWhile strings created from these locations will have this encoding, the\nencoding may not be valid.  Be sure to check String#valid_encoding?.\n\nFile data written to disk will be transcoded to the default external\nencoding when written.\n\nThe default external encoding is initialized by the locale or -E option.","name":"default_external","namespace":"Encoding","path":"Encoding.default_external","type":"class_method","visibility":"public"},"Encoding.default_external=":{"description":"Sets default external encoding.  You should not set\nEncoding::default_external in ruby code as strings created before changing\nthe value may have a different encoding from strings created after the value\nwas changed., instead you should use <tt>ruby -E</tt> to invoke ruby with\nthe correct default_external.\n\nSee Encoding::default_external for information on how the default external\nencoding is used.","name":"default_external=","namespace":"Encoding","path":"Encoding.default_external=","type":"class_method","visibility":"public"},"Encoding.default_internal":{"description":"Returns default internal encoding.  Strings will be transcoded to the\ndefault internal encoding in the following places if the default internal\nencoding is not nil:\n\n* CSV\n* Etc.sysconfdir and Etc.systmpdir\n* File data read from disk\n* File names from Dir\n* Integer#chr\n* String#inspect and Regexp#inspect\n* Strings returned from Readline\n* Strings returned from SDBM\n* Time#zone\n* Values from ENV\n* Values in ARGV including $PROGRAM_NAME\n\nAdditionally String#encode and String#encode! use the default internal\nencoding if no encoding is given.\n\nThe locale encoding (__ENCODING__), not default_internal, is used as the\nencoding of created strings.\n\nEncoding::default_internal is initialized by the source file's\ninternal_encoding or -E option.","name":"default_internal","namespace":"Encoding","path":"Encoding.default_internal","type":"class_method","visibility":"public"},"Encoding.default_internal=":{"description":"Sets default internal encoding or removes default internal encoding when\npassed nil.  You should not set Encoding::default_internal in ruby code as\nstrings created before changing the value may have a different encoding\nfrom strings created after the change.  Instead you should use\n<tt>ruby -E</tt> to invoke ruby with the correct default_internal.\n\nSee Encoding::default_internal for information on how the default internal\nencoding is used.","name":"default_internal=","namespace":"Encoding","path":"Encoding.default_internal=","type":"class_method","visibility":"public"},"Encoding.find":{"description":"Search the encoding with specified <i>name</i>.\n<i>name</i> should be a string.\n\n  Encoding.find(\"US-ASCII\")  #=> #<Encoding:US-ASCII>\n\nNames which this method accept are encoding names and aliases\nincluding following special aliases\n\n\"external\"::   default external encoding\n\"internal\"::   default internal encoding\n\"locale\"::     locale encoding\n\"filesystem\":: filesystem encoding\n\nAn ArgumentError is raised when no encoding with <i>name</i>.\nOnly <code>Encoding.find(\"internal\")</code> however returns nil\nwhen no encoding named \"internal\", in other words, when Ruby has no\ndefault internal encoding.","name":"find","namespace":"Encoding","path":"Encoding.find","type":"class_method","visibility":"public"},"Encoding.list":{"description":"Returns the list of loaded encodings.\n\n  Encoding.list\n  #=> [#<Encoding:ASCII-8BIT>, #<Encoding:UTF-8>,\n        #<Encoding:ISO-2022-JP (dummy)>]\n\n  Encoding.find(\"US-ASCII\")\n  #=> #<Encoding:US-ASCII>\n\n  Encoding.list\n  #=> [#<Encoding:ASCII-8BIT>, #<Encoding:UTF-8>,\n        #<Encoding:US-ASCII>, #<Encoding:ISO-2022-JP (dummy)>]","name":"list","namespace":"Encoding","path":"Encoding.list","type":"class_method","visibility":"public"},"Encoding.locale_charmap":{"description":"Returns the locale charmap name.\nIt returns nil if no appropriate information.\n\n  Debian GNU/Linux\n    LANG=C\n      Encoding.locale_charmap  #=> \"ANSI_X3.4-1968\"\n    LANG=ja_JP.EUC-JP\n      Encoding.locale_charmap  #=> \"EUC-JP\"\n\n  SunOS 5\n    LANG=C\n      Encoding.locale_charmap  #=> \"646\"\n    LANG=ja\n      Encoding.locale_charmap  #=> \"eucJP\"\n\nThe result is highly platform dependent.\nSo Encoding.find(Encoding.locale_charmap) may cause an error.\nIf you need some encoding object even for unknown locale,\nEncoding.find(\"locale\") can be used.","name":"locale_charmap","namespace":"Encoding","path":"Encoding.locale_charmap","type":"class_method","visibility":"public"},"Encoding.name_list":{"description":"Returns the list of available encoding names.\n\n  Encoding.name_list\n  #=> [\"US-ASCII\", \"ASCII-8BIT\", \"UTF-8\",\n        \"ISO-8859-1\", \"Shift_JIS\", \"EUC-JP\",\n        \"Windows-31J\",\n        \"BINARY\", \"CP932\", \"eucJP\"]","name":"name_list","namespace":"Encoding","path":"Encoding.name_list","type":"class_method","visibility":"public"},"Encoding::CompatibilityError":{"description":"Raised by Encoding and String methods when the source encoding is\nincompatible with the target encoding.","name":"CompatibilityError","namespace":"Encoding","path":"Encoding::CompatibilityError","type":"class","visibility":"public"},"Encoding::Converter":{"description":"","name":"Converter","namespace":"Encoding","path":"Encoding::Converter","type":"class","visibility":"public"},"Encoding::Converter#==":{"description":"","name":"==","namespace":"Encoding::Converter","path":"Encoding::Converter#==","type":"instance_method","visibility":"public"},"Encoding::Converter#convert":{"description":"Convert source_string and return destination_string.\n\nsource_string is assumed as a part of source.\ni.e.  :partial_input=>true is specified internally.\nfinish method should be used last.\n\n  ec = Encoding::Converter.new(\"utf-8\", \"euc-jp\")\n  puts ec.convert(\"\\u3042\").dump     #=> \"\\xA4\\xA2\"\n  puts ec.finish.dump                #=> \"\"\n\n  ec = Encoding::Converter.new(\"euc-jp\", \"utf-8\")\n  puts ec.convert(\"\\xA4\").dump       #=> \"\"\n  puts ec.convert(\"\\xA2\").dump       #=> \"\\xE3\\x81\\x82\"\n  puts ec.finish.dump                #=> \"\"\n\n  ec = Encoding::Converter.new(\"utf-8\", \"iso-2022-jp\")\n  puts ec.convert(\"\\xE3\").dump       #=> \"\".force_encoding(\"ISO-2022-JP\")\n  puts ec.convert(\"\\x81\").dump       #=> \"\".force_encoding(\"ISO-2022-JP\")\n  puts ec.convert(\"\\x82\").dump       #=> \"\\e$B$\\\"\".force_encoding(\"ISO-2022-JP\")\n  puts ec.finish.dump                #=> \"\\e(B\".force_encoding(\"ISO-2022-JP\")\n\nIf a conversion error occur,\nEncoding::UndefinedConversionError or\nEncoding::InvalidByteSequenceError is raised.\nEncoding::Converter#convert doesn't supply methods to recover or restart\nfrom these exceptions.\nWhen you want to handle these conversion errors,\nuse Encoding::Converter#primitive_convert.","name":"convert","namespace":"Encoding::Converter","path":"Encoding::Converter#convert","type":"instance_method","visibility":"public"},"Encoding::Converter#convpath":{"description":"Returns the conversion path of ec.\n\nThe result is an array of conversions.\n\n  ec = Encoding::Converter.new(\"ISO-8859-1\", \"EUC-JP\", crlf_newline: true)\n  p ec.convpath\n  #=> [[#<Encoding:ISO-8859-1>, #<Encoding:UTF-8>],\n  #    [#<Encoding:UTF-8>, #<Encoding:EUC-JP>],\n  #    \"crlf_newline\"]\n\nEach element of the array is a pair of encodings or a string.\nA pair means an encoding conversion.\nA string means a decorator.\n\nIn the above example, [#<Encoding:ISO-8859-1>, #<Encoding:UTF-8>] means\na converter from ISO-8859-1 to UTF-8.\n\"crlf_newline\" means newline converter from LF to CRLF.","name":"convpath","namespace":"Encoding::Converter","path":"Encoding::Converter#convpath","type":"instance_method","visibility":"public"},"Encoding::Converter#destination_encoding":{"description":"Returns the destination encoding as an Encoding object.","name":"destination_encoding","namespace":"Encoding::Converter","path":"Encoding::Converter#destination_encoding","type":"instance_method","visibility":"public"},"Encoding::Converter#finish":{"description":"Finishes the converter.\nIt returns the last part of the converted string.\n\n  ec = Encoding::Converter.new(\"utf-8\", \"iso-2022-jp\")\n  p ec.convert(\"\\u3042\")     #=> \"\\e$B$\\\"\"\n  p ec.finish                #=> \"\\e(B\"","name":"finish","namespace":"Encoding::Converter","path":"Encoding::Converter#finish","type":"instance_method","visibility":"public"},"Encoding::Converter#initialize":{"description":"possible options elements:\n  hash form:\n    :invalid => nil            # raise error on invalid byte sequence (default)\n    :invalid => :replace       # replace invalid byte sequence\n    :undef => nil              # raise error on undefined conversion (default)\n    :undef => :replace         # replace undefined conversion\n    :replace => string         # replacement string (\"?\" or \"\\uFFFD\" if not specified)\n    :newline => :universal     # decorator for converting CRLF and CR to LF\n    :newline => :crlf          # decorator for converting LF to CRLF\n    :newline => :cr            # decorator for converting LF to CR\n    :universal_newline => true # decorator for converting CRLF and CR to LF\n    :crlf_newline => true      # decorator for converting LF to CRLF\n    :cr_newline => true        # decorator for converting LF to CR\n    :xml => :text              # escape as XML CharData.\n    :xml => :attr              # escape as XML AttValue\n  integer form:\n    Encoding::Converter::INVALID_REPLACE\n    Encoding::Converter::UNDEF_REPLACE\n    Encoding::Converter::UNDEF_HEX_CHARREF\n    Encoding::Converter::UNIVERSAL_NEWLINE_DECORATOR\n    Encoding::Converter::CRLF_NEWLINE_DECORATOR\n    Encoding::Converter::CR_NEWLINE_DECORATOR\n    Encoding::Converter::XML_TEXT_DECORATOR\n    Encoding::Converter::XML_ATTR_CONTENT_DECORATOR\n    Encoding::Converter::XML_ATTR_QUOTE_DECORATOR\n\nEncoding::Converter.new creates an instance of Encoding::Converter.\n\nSource_encoding and destination_encoding should be a string or\nEncoding object.\n\nopt should be nil, a hash or an integer.\n\nconvpath should be an array.\nconvpath may contain\n- two-element arrays which contain encodings or encoding names, or\n- strings representing decorator names.\n\nEncoding::Converter.new optionally takes an option.\nThe option should be a hash or an integer.\nThe option hash can contain :invalid => nil, etc.\nThe option integer should be logical-or of constants such as\nEncoding::Converter::INVALID_REPLACE, etc.\n\n[:invalid => nil]\n  Raise error on invalid byte sequence.  This is a default behavior.\n[:invalid => :replace]\n  Replace invalid byte sequence by replacement string.\n[:undef => nil]\n  Raise an error if a character in source_encoding is not defined in destination_encoding.\n  This is a default behavior.\n[:undef => :replace]\n  Replace undefined character in destination_encoding with replacement string.\n[:replace => string]\n  Specify the replacement string.\n  If not specified, \"\\uFFFD\" is used for Unicode encodings and \"?\" for others.\n[:universal_newline => true]\n  Convert CRLF and CR to LF.\n[:crlf_newline => true]\n  Convert LF to CRLF.\n[:cr_newline => true]\n  Convert LF to CR.\n[:xml => :text]\n  Escape as XML CharData.\n  This form can be used as an HTML 4.0 #PCDATA.\n  - '&' -> '&amp;'\n  - '<' -> '&lt;'\n  - '>' -> '&gt;'\n  - undefined characters in destination_encoding -> hexadecimal CharRef such as &#xHH;\n[:xml => :attr]\n  Escape as XML AttValue.\n  The converted result is quoted as \"...\".\n  This form can be used as an HTML 4.0 attribute value.\n  - '&' -> '&amp;'\n  - '<' -> '&lt;'\n  - '>' -> '&gt;'\n  - '\"' -> '&quot;'\n  - undefined characters in destination_encoding -> hexadecimal CharRef such as &#xHH;\n\nExamples:\n  # UTF-16BE to UTF-8\n  ec = Encoding::Converter.new(\"UTF-16BE\", \"UTF-8\")\n\n  # Usually, decorators such as newline conversion are inserted last.\n  ec = Encoding::Converter.new(\"UTF-16BE\", \"UTF-8\", :universal_newline => true)\n  p ec.convpath #=> [[#<Encoding:UTF-16BE>, #<Encoding:UTF-8>],\n                #    \"universal_newline\"]\n\n  # But, if the last encoding is ASCII incompatible,\n  # decorators are inserted before the last conversion.\n  ec = Encoding::Converter.new(\"UTF-8\", \"UTF-16BE\", :crlf_newline => true)\n  p ec.convpath #=> [\"crlf_newline\",\n                #    [#<Encoding:UTF-8>, #<Encoding:UTF-16BE>]]\n\n  # Conversion path can be specified directly.\n  ec = Encoding::Converter.new([\"universal_newline\", [\"EUC-JP\", \"UTF-8\"], [\"UTF-8\", \"UTF-16BE\"]])\n  p ec.convpath #=> [\"universal_newline\",\n                #    [#<Encoding:EUC-JP>, #<Encoding:UTF-8>],\n                #    [#<Encoding:UTF-8>, #<Encoding:UTF-16BE>]]","name":"initialize","namespace":"Encoding::Converter","path":"Encoding::Converter#initialize","type":"instance_method","visibility":"public"},"Encoding::Converter#insert_output":{"description":"Inserts string into the encoding converter.\nThe string will be converted to the destination encoding and\noutput on later conversions.\n\nIf the destination encoding is stateful,\nstring is converted according to the state and the state is updated.\n\nThis method should be used only when a conversion error occurs.\n\n ec = Encoding::Converter.new(\"utf-8\", \"iso-8859-1\")\n src = \"HIRAGANA LETTER A is \\u{3042}.\"\n dst = \"\"\n p ec.primitive_convert(src, dst)    #=> :undefined_conversion\n puts \"[#{dst.dump}, #{src.dump}]\"   #=> [\"HIRAGANA LETTER A is \", \".\"]\n ec.insert_output(\"<err>\")\n p ec.primitive_convert(src, dst)    #=> :finished\n puts \"[#{dst.dump}, #{src.dump}]\"   #=> [\"HIRAGANA LETTER A is <err>.\", \"\"]\n\n ec = Encoding::Converter.new(\"utf-8\", \"iso-2022-jp\")\n src = \"\\u{306F 3041 3068 2661 3002}\" # U+2661 is not representable in iso-2022-jp\n dst = \"\"\n p ec.primitive_convert(src, dst)    #=> :undefined_conversion\n puts \"[#{dst.dump}, #{src.dump}]\"   #=> [\"\\e$B$O$!$H\".force_encoding(\"ISO-2022-JP\"), \"\\xE3\\x80\\x82\"]\n ec.insert_output \"?\"                # state change required to output \"?\".\n p ec.primitive_convert(src, dst)    #=> :finished\n puts \"[#{dst.dump}, #{src.dump}]\"   #=> [\"\\e$B$O$!$H\\e(B?\\e$B!#\\e(B\".force_encoding(\"ISO-2022-JP\"), \"\"]","name":"insert_output","namespace":"Encoding::Converter","path":"Encoding::Converter#insert_output","type":"instance_method","visibility":"public"},"Encoding::Converter#inspect":{"description":"Returns a printable version of <i>ec</i>\n\n  ec = Encoding::Converter.new(\"iso-8859-1\", \"utf-8\")\n  puts ec.inspect    #=> #<Encoding::Converter: ISO-8859-1 to UTF-8>","name":"inspect","namespace":"Encoding::Converter","path":"Encoding::Converter#inspect","type":"instance_method","visibility":"public"},"Encoding::Converter#last_error":{"description":"Returns an exception object for the last conversion.\nReturns nil if the last conversion did not produce an error.\n\n\"error\" means that\nEncoding::InvalidByteSequenceError and Encoding::UndefinedConversionError for\nEncoding::Converter#convert and\n:invalid_byte_sequence, :incomplete_input and :undefined_conversion for\nEncoding::Converter#primitive_convert.\n\n ec = Encoding::Converter.new(\"utf-8\", \"iso-8859-1\")\n p ec.primitive_convert(src=\"\\xf1abcd\", dst=\"\")       #=> :invalid_byte_sequence\n p ec.last_error      #=> #<Encoding::InvalidByteSequenceError: \"\\xF1\" followed by \"a\" on UTF-8>\n p ec.primitive_convert(src, dst, nil, 1)             #=> :destination_buffer_full\n p ec.last_error      #=> nil","name":"last_error","namespace":"Encoding::Converter","path":"Encoding::Converter#last_error","type":"instance_method","visibility":"public"},"Encoding::Converter#primitive_convert":{"description":"possible opt elements:\n  hash form:\n    :partial_input => true           # source buffer may be part of larger source\n    :after_output => true            # stop conversion after output before input\n  integer form:\n    Encoding::Converter::PARTIAL_INPUT\n    Encoding::Converter::AFTER_OUTPUT\n\npossible results:\n   :invalid_byte_sequence\n   :incomplete_input\n   :undefined_conversion\n   :after_output\n   :destination_buffer_full\n   :source_buffer_empty\n   :finished\n\nprimitive_convert converts source_buffer into destination_buffer.\n\nsource_buffer should be a string or nil.\nnil means an empty string.\n\ndestination_buffer should be a string.\n\ndestination_byteoffset should be an integer or nil.\nnil means the end of destination_buffer.\nIf it is omitted, nil is assumed.\n\ndestination_bytesize should be an integer or nil.\nnil means unlimited.\nIf it is omitted, nil is assumed.\n\nopt should be nil, a hash or an integer.\nnil means no flags.\nIf it is omitted, nil is assumed.\n\nprimitive_convert converts the content of source_buffer from beginning\nand store the result into destination_buffer.\n\ndestination_byteoffset and destination_bytesize specify the region which\nthe converted result is stored.\ndestination_byteoffset specifies the start position in destination_buffer in bytes.\nIf destination_byteoffset is nil,\ndestination_buffer.bytesize is used for appending the result.\ndestination_bytesize specifies maximum number of bytes.\nIf destination_bytesize is nil,\ndestination size is unlimited.\nAfter conversion, destination_buffer is resized to\ndestination_byteoffset + actually produced number of bytes.\nAlso destination_buffer's encoding is set to destination_encoding.\n\nprimitive_convert drops the converted part of source_buffer.\nthe dropped part is converted in destination_buffer or\nbuffered in Encoding::Converter object.\n\nprimitive_convert stops conversion when one of following condition met.\n- invalid byte sequence found in source buffer (:invalid_byte_sequence)\n  +primitive_errinfo+ and +last_error+ methods returns the detail of the error.\n- unexpected end of source buffer (:incomplete_input)\n  this occur only when :partial_input is not specified.\n  +primitive_errinfo+ and +last_error+ methods returns the detail of the error.\n- character not representable in output encoding (:undefined_conversion)\n  +primitive_errinfo+ and +last_error+ methods returns the detail of the error.\n- after some output is generated, before input is done (:after_output)\n  this occur only when :after_output is specified.\n- destination buffer is full (:destination_buffer_full)\n  this occur only when destination_bytesize is non-nil.\n- source buffer is empty (:source_buffer_empty)\n  this occur only when :partial_input is specified.\n- conversion is finished (:finished)\n\nexample:\n  ec = Encoding::Converter.new(\"UTF-8\", \"UTF-16BE\")\n  ret = ec.primitive_convert(src=\"pi\", dst=\"\", nil, 100)\n  p [ret, src, dst] #=> [:finished, \"\", \"\\x00p\\x00i\"]\n\n  ec = Encoding::Converter.new(\"UTF-8\", \"UTF-16BE\")\n  ret = ec.primitive_convert(src=\"pi\", dst=\"\", nil, 1)\n  p [ret, src, dst] #=> [:destination_buffer_full, \"i\", \"\\x00\"]\n  ret = ec.primitive_convert(src, dst=\"\", nil, 1)\n  p [ret, src, dst] #=> [:destination_buffer_full, \"\", \"p\"]\n  ret = ec.primitive_convert(src, dst=\"\", nil, 1)\n  p [ret, src, dst] #=> [:destination_buffer_full, \"\", \"\\x00\"]\n  ret = ec.primitive_convert(src, dst=\"\", nil, 1)\n  p [ret, src, dst] #=> [:finished, \"\", \"i\"]","name":"primitive_convert","namespace":"Encoding::Converter","path":"Encoding::Converter#primitive_convert","type":"instance_method","visibility":"public"},"Encoding::Converter#primitive_errinfo":{"description":"primitive_errinfo returns important information regarding the last error\nas a 5-element array:\n\n  [result, enc1, enc2, error_bytes, readagain_bytes]\n\nresult is the last result of primitive_convert.\n\nOther elements are only meaningful when result is\n:invalid_byte_sequence, :incomplete_input or :undefined_conversion.\n\nenc1 and enc2 indicate a conversion step as a pair of strings.\nFor example, a converter from EUC-JP to ISO-8859-1 converts\na string as follows: EUC-JP -> UTF-8 -> ISO-8859-1.\nSo [enc1, enc2] is either [\"EUC-JP\", \"UTF-8\"] or [\"UTF-8\", \"ISO-8859-1\"].\n\nerror_bytes and readagain_bytes indicate the byte sequences which caused the error.\nerror_bytes is discarded portion.\nreadagain_bytes is buffered portion which is read again on next conversion.\n\nExample:\n\n  # \\xff is invalid as EUC-JP.\n  ec = Encoding::Converter.new(\"EUC-JP\", \"Shift_JIS\")\n  ec.primitive_convert(src=\"\\xff\", dst=\"\", nil, 10)\n  p ec.primitive_errinfo\n  #=> [:invalid_byte_sequence, \"EUC-JP\", \"UTF-8\", \"\\xFF\", \"\"]\n\n  # HIRAGANA LETTER A (\\xa4\\xa2 in EUC-JP) is not representable in ISO-8859-1.\n  # Since this error is occur in UTF-8 to ISO-8859-1 conversion,\n  # error_bytes is HIRAGANA LETTER A in UTF-8 (\\xE3\\x81\\x82).\n  ec = Encoding::Converter.new(\"EUC-JP\", \"ISO-8859-1\")\n  ec.primitive_convert(src=\"\\xa4\\xa2\", dst=\"\", nil, 10)\n  p ec.primitive_errinfo\n  #=> [:undefined_conversion, \"UTF-8\", \"ISO-8859-1\", \"\\xE3\\x81\\x82\", \"\"]\n\n  # partial character is invalid\n  ec = Encoding::Converter.new(\"EUC-JP\", \"ISO-8859-1\")\n  ec.primitive_convert(src=\"\\xa4\", dst=\"\", nil, 10)\n  p ec.primitive_errinfo\n  #=> [:incomplete_input, \"EUC-JP\", \"UTF-8\", \"\\xA4\", \"\"]\n\n  # Encoding::Converter::PARTIAL_INPUT prevents invalid errors by\n  # partial characters.\n  ec = Encoding::Converter.new(\"EUC-JP\", \"ISO-8859-1\")\n  ec.primitive_convert(src=\"\\xa4\", dst=\"\", nil, 10, Encoding::Converter::PARTIAL_INPUT)\n  p ec.primitive_errinfo\n  #=> [:source_buffer_empty, nil, nil, nil, nil]\n\n  # \\xd8\\x00\\x00@ is invalid as UTF-16BE because\n  # no low surrogate after high surrogate (\\xd8\\x00).\n  # It is detected by 3rd byte (\\00) which is part of next character.\n  # So the high surrogate (\\xd8\\x00) is discarded and\n  # the 3rd byte is read again later.\n  # Since the byte is buffered in ec, it is dropped from src.\n  ec = Encoding::Converter.new(\"UTF-16BE\", \"UTF-8\")\n  ec.primitive_convert(src=\"\\xd8\\x00\\x00@\", dst=\"\", nil, 10)\n  p ec.primitive_errinfo\n  #=> [:invalid_byte_sequence, \"UTF-16BE\", \"UTF-8\", \"\\xD8\\x00\", \"\\x00\"]\n  p src\n  #=> \"@\"\n\n  # Similar to UTF-16BE, \\x00\\xd8@\\x00 is invalid as UTF-16LE.\n  # The problem is detected by 4th byte.\n  ec = Encoding::Converter.new(\"UTF-16LE\", \"UTF-8\")\n  ec.primitive_convert(src=\"\\x00\\xd8@\\x00\", dst=\"\", nil, 10)\n  p ec.primitive_errinfo\n  #=> [:invalid_byte_sequence, \"UTF-16LE\", \"UTF-8\", \"\\x00\\xD8\", \"@\\x00\"]\n  p src\n  #=> \"\"","name":"primitive_errinfo","namespace":"Encoding::Converter","path":"Encoding::Converter#primitive_errinfo","type":"instance_method","visibility":"public"},"Encoding::Converter#putback":{"description":"call-seq\n  ec.putback                    -> string\n  ec.putback(max_numbytes)      -> string\n\nPut back the bytes which will be converted.\n\nThe bytes are caused by invalid_byte_sequence error.\nWhen invalid_byte_sequence error, some bytes are discarded and\nsome bytes are buffered to be converted later.\nThe latter bytes can be put back.\nIt can be observed by\nEncoding::InvalidByteSequenceError#readagain_bytes and\nEncoding::Converter#primitive_errinfo.\n\n  ec = Encoding::Converter.new(\"utf-16le\", \"iso-8859-1\")\n  src = \"\\x00\\xd8\\x61\\x00\"\n  dst = \"\"\n  p ec.primitive_convert(src, dst)   #=> :invalid_byte_sequence\n  p ec.primitive_errinfo     #=> [:invalid_byte_sequence, \"UTF-16LE\", \"UTF-8\", \"\\x00\\xD8\", \"a\\x00\"]\n  p ec.putback               #=> \"a\\x00\"\n  p ec.putback               #=> \"\"          # no more bytes to put back","name":"putback","namespace":"Encoding::Converter","path":"Encoding::Converter#putback","type":"instance_method","visibility":"public"},"Encoding::Converter#replacement":{"description":"Returns the replacement string.\n\n ec = Encoding::Converter.new(\"euc-jp\", \"us-ascii\")\n p ec.replacement    #=> \"?\"\n\n ec = Encoding::Converter.new(\"euc-jp\", \"utf-8\")\n p ec.replacement    #=> \"\\uFFFD\"","name":"replacement","namespace":"Encoding::Converter","path":"Encoding::Converter#replacement","type":"instance_method","visibility":"public"},"Encoding::Converter#replacement=":{"description":"Sets the replacement string.\n\n ec = Encoding::Converter.new(\"utf-8\", \"us-ascii\", :undef => :replace)\n ec.replacement = \"<undef>\"\n p ec.convert(\"a \\u3042 b\")      #=> \"a <undef> b\"","name":"replacement=","namespace":"Encoding::Converter","path":"Encoding::Converter#replacement=","type":"instance_method","visibility":"public"},"Encoding::Converter#source_encoding":{"description":"Returns the source encoding as an Encoding object.","name":"source_encoding","namespace":"Encoding::Converter","path":"Encoding::Converter#source_encoding","type":"instance_method","visibility":"public"},"Encoding::Converter.asciicompat_encoding":{"description":"Returns the corresponding ASCII compatible encoding.\n\nReturns nil if the argument is an ASCII compatible encoding.\n\n\"corresponding ASCII compatible encoding\" is an ASCII compatible encoding which\ncan represents exactly the same characters as the given ASCII incompatible encoding.\nSo, no conversion undefined error occurs when converting between the two encodings.\n\n  Encoding::Converter.asciicompat_encoding(\"ISO-2022-JP\") #=> #<Encoding:stateless-ISO-2022-JP>\n  Encoding::Converter.asciicompat_encoding(\"UTF-16BE\") #=> #<Encoding:UTF-8>\n  Encoding::Converter.asciicompat_encoding(\"UTF-8\") #=> nil","name":"asciicompat_encoding","namespace":"Encoding::Converter","path":"Encoding::Converter.asciicompat_encoding","type":"class_method","visibility":"public"},"Encoding::Converter.search_convpath":{"description":"Returns a conversion path.\n\n  p Encoding::Converter.search_convpath(\"ISO-8859-1\", \"EUC-JP\")\n  #=> [[#<Encoding:ISO-8859-1>, #<Encoding:UTF-8>],\n  #    [#<Encoding:UTF-8>, #<Encoding:EUC-JP>]]\n\n  p Encoding::Converter.search_convpath(\"ISO-8859-1\", \"EUC-JP\", universal_newline: true)\n  or\n  p Encoding::Converter.search_convpath(\"ISO-8859-1\", \"EUC-JP\", newline: :universal)\n  #=> [[#<Encoding:ISO-8859-1>, #<Encoding:UTF-8>],\n  #    [#<Encoding:UTF-8>, #<Encoding:EUC-JP>],\n  #    \"universal_newline\"]\n\n  p Encoding::Converter.search_convpath(\"ISO-8859-1\", \"UTF-32BE\", universal_newline: true)\n  or\n  p Encoding::Converter.search_convpath(\"ISO-8859-1\", \"UTF-32BE\", newline: :universal)\n  #=> [[#<Encoding:ISO-8859-1>, #<Encoding:UTF-8>],\n  #    \"universal_newline\",\n  #    [#<Encoding:UTF-8>, #<Encoding:UTF-32BE>]]","name":"search_convpath","namespace":"Encoding::Converter","path":"Encoding::Converter.search_convpath","type":"class_method","visibility":"public"},"Encoding::Converter::AFTER_OUTPUT":{"description":"Stop converting after some output is complete but before all of the\ninput was consumed.  See primitive_convert for an example.","name":"AFTER_OUTPUT","namespace":"Encoding::Converter","path":"Encoding::Converter::AFTER_OUTPUT","type":"constant","return":["Fixnum",""],"visibility":"public"},"Encoding::Converter::CRLF_NEWLINE_DECORATOR":{"description":"Decorator for converting LF to CRLF","name":"CRLF_NEWLINE_DECORATOR","namespace":"Encoding::Converter","path":"Encoding::Converter::CRLF_NEWLINE_DECORATOR","type":"constant","return":["Fixnum",""],"visibility":"public"},"Encoding::Converter::CR_NEWLINE_DECORATOR":{"description":"Decorator for converting LF to CR","name":"CR_NEWLINE_DECORATOR","namespace":"Encoding::Converter","path":"Encoding::Converter::CR_NEWLINE_DECORATOR","type":"constant","return":["Fixnum",""],"visibility":"public"},"Encoding::Converter::INVALID_MASK":{"description":"Mask for invalid byte sequences","name":"INVALID_MASK","namespace":"Encoding::Converter","path":"Encoding::Converter::INVALID_MASK","type":"constant","return":["Fixnum",""],"visibility":"public"},"Encoding::Converter::INVALID_REPLACE":{"description":"Replace invalid byte sequences","name":"INVALID_REPLACE","namespace":"Encoding::Converter","path":"Encoding::Converter::INVALID_REPLACE","type":"constant","return":["Fixnum",""],"visibility":"public"},"Encoding::Converter::PARTIAL_INPUT":{"description":"Indicates the source may be part of a larger string.  See\nprimitive_convert for an example.","name":"PARTIAL_INPUT","namespace":"Encoding::Converter","path":"Encoding::Converter::PARTIAL_INPUT","type":"constant","return":["Fixnum",""],"visibility":"public"},"Encoding::Converter::UNDEF_HEX_CHARREF":{"description":"Replace byte sequences that are undefined in the destination encoding\nwith an XML hexadecimal character reference.  This is valid for XML\nconversion.","name":"UNDEF_HEX_CHARREF","namespace":"Encoding::Converter","path":"Encoding::Converter::UNDEF_HEX_CHARREF","type":"constant","return":["Fixnum",""],"visibility":"public"},"Encoding::Converter::UNDEF_MASK":{"description":"Mask for a valid character in the source encoding but no related\ncharacter(s) in destination encoding.","name":"UNDEF_MASK","namespace":"Encoding::Converter","path":"Encoding::Converter::UNDEF_MASK","type":"constant","return":["Fixnum",""],"visibility":"public"},"Encoding::Converter::UNDEF_REPLACE":{"description":"Replace byte sequences that are undefined in the destination encoding.","name":"UNDEF_REPLACE","namespace":"Encoding::Converter","path":"Encoding::Converter::UNDEF_REPLACE","type":"constant","return":["Fixnum",""],"visibility":"public"},"Encoding::Converter::UNIVERSAL_NEWLINE_DECORATOR":{"description":"Decorator for converting CRLF and CR to LF","name":"UNIVERSAL_NEWLINE_DECORATOR","namespace":"Encoding::Converter","path":"Encoding::Converter::UNIVERSAL_NEWLINE_DECORATOR","type":"constant","return":["Fixnum",""],"visibility":"public"},"Encoding::Converter::XML_ATTR_CONTENT_DECORATOR":{"description":"Escape as XML AttValue","name":"XML_ATTR_CONTENT_DECORATOR","namespace":"Encoding::Converter","path":"Encoding::Converter::XML_ATTR_CONTENT_DECORATOR","type":"constant","return":["Fixnum",""],"visibility":"public"},"Encoding::Converter::XML_ATTR_QUOTE_DECORATOR":{"description":"Escape as XML AttValue","name":"XML_ATTR_QUOTE_DECORATOR","namespace":"Encoding::Converter","path":"Encoding::Converter::XML_ATTR_QUOTE_DECORATOR","type":"constant","return":["Fixnum",""],"visibility":"public"},"Encoding::Converter::XML_TEXT_DECORATOR":{"description":"Escape as XML CharData","name":"XML_TEXT_DECORATOR","namespace":"Encoding::Converter","path":"Encoding::Converter::XML_TEXT_DECORATOR","type":"constant","return":["Fixnum",""],"visibility":"public"},"Encoding::ConverterNotFoundError":{"description":"Raised by transcoding methods when a named encoding does not\ncorrespond with a known converter.","name":"ConverterNotFoundError","namespace":"Encoding","path":"Encoding::ConverterNotFoundError","type":"class","visibility":"public"},"Encoding::InvalidByteSequenceError":{"description":"Raised by Encoding and String methods when the string being\ntranscoded contains a byte invalid for the either the source or\ntarget encoding.","name":"InvalidByteSequenceError","namespace":"Encoding","path":"Encoding::InvalidByteSequenceError","type":"class","visibility":"public"},"Encoding::InvalidByteSequenceError#destination_encoding":{"description":"Returns the destination encoding as an encoding object.","name":"destination_encoding","namespace":"Encoding::InvalidByteSequenceError","path":"Encoding::InvalidByteSequenceError#destination_encoding","type":"instance_method","visibility":"public"},"Encoding::InvalidByteSequenceError#destination_encoding_name":{"description":"Returns the destination encoding name as a string.","name":"destination_encoding_name","namespace":"Encoding::InvalidByteSequenceError","path":"Encoding::InvalidByteSequenceError#destination_encoding_name","type":"instance_method","visibility":"public"},"Encoding::InvalidByteSequenceError#error_bytes":{"description":"Returns the discarded bytes when Encoding::InvalidByteSequenceError occurs.\n\n ec = Encoding::Converter.new(\"EUC-JP\", \"ISO-8859-1\")\n begin\n   ec.convert(\"abc\\xA1\\xFFdef\")\n rescue Encoding::InvalidByteSequenceError\n   p $!      #=> #<Encoding::InvalidByteSequenceError: \"\\xA1\" followed by \"\\xFF\" on EUC-JP>\n   puts $!.error_bytes.dump          #=> \"\\xA1\"\n   puts $!.readagain_bytes.dump      #=> \"\\xFF\"\n end","name":"error_bytes","namespace":"Encoding::InvalidByteSequenceError","path":"Encoding::InvalidByteSequenceError#error_bytes","type":"instance_method","visibility":"public"},"Encoding::InvalidByteSequenceError#incomplete_input?":{"description":"Returns true if the invalid byte sequence error is caused by\npremature end of string.\n\n ec = Encoding::Converter.new(\"EUC-JP\", \"ISO-8859-1\")\n\n begin\n   ec.convert(\"abc\\xA1z\")\n rescue Encoding::InvalidByteSequenceError\n   p $!      #=> #<Encoding::InvalidByteSequenceError: \"\\xA1\" followed by \"z\" on EUC-JP>\n   p $!.incomplete_input?    #=> false\n end\n\n begin\n   ec.convert(\"abc\\xA1\")\n   ec.finish\n rescue Encoding::InvalidByteSequenceError\n   p $!      #=> #<Encoding::InvalidByteSequenceError: incomplete \"\\xA1\" on EUC-JP>\n   p $!.incomplete_input?    #=> true\n end","name":"incomplete_input?","namespace":"Encoding::InvalidByteSequenceError","path":"Encoding::InvalidByteSequenceError#incomplete_input?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Encoding::InvalidByteSequenceError#readagain_bytes":{"description":"Returns the bytes to be read again when Encoding::InvalidByteSequenceError occurs.","name":"readagain_bytes","namespace":"Encoding::InvalidByteSequenceError","path":"Encoding::InvalidByteSequenceError#readagain_bytes","type":"instance_method","visibility":"public"},"Encoding::InvalidByteSequenceError#source_encoding":{"description":"Returns the source encoding as an encoding object.\n\nNote that the result may not be equal to the source encoding of\nthe encoding converter if the conversion has multiple steps.\n\n ec = Encoding::Converter.new(\"ISO-8859-1\", \"EUC-JP\") # ISO-8859-1 -> UTF-8 -> EUC-JP\n begin\n   ec.convert(\"\\xa0\") # NO-BREAK SPACE, which is available in UTF-8 but not in EUC-JP.\n rescue Encoding::UndefinedConversionError\n   p $!.source_encoding              #=> #<Encoding:UTF-8>\n   p $!.destination_encoding         #=> #<Encoding:EUC-JP>\n   p $!.source_encoding_name         #=> \"UTF-8\"\n   p $!.destination_encoding_name    #=> \"EUC-JP\"\n end","name":"source_encoding","namespace":"Encoding::InvalidByteSequenceError","path":"Encoding::InvalidByteSequenceError#source_encoding","type":"instance_method","visibility":"public"},"Encoding::InvalidByteSequenceError#source_encoding_name":{"description":"Returns the source encoding name as a string.","name":"source_encoding_name","namespace":"Encoding::InvalidByteSequenceError","path":"Encoding::InvalidByteSequenceError#source_encoding_name","type":"instance_method","visibility":"public"},"Encoding::UndefinedConversionError":{"description":"Raised by Encoding and String methods when a transcoding operation\nfails.","name":"UndefinedConversionError","namespace":"Encoding","path":"Encoding::UndefinedConversionError","type":"class","visibility":"public"},"Encoding::UndefinedConversionError#destination_encoding":{"description":"Returns the destination encoding as an encoding object.","name":"destination_encoding","namespace":"Encoding::UndefinedConversionError","path":"Encoding::UndefinedConversionError#destination_encoding","type":"instance_method","visibility":"public"},"Encoding::UndefinedConversionError#destination_encoding_name":{"description":"Returns the destination encoding name as a string.","name":"destination_encoding_name","namespace":"Encoding::UndefinedConversionError","path":"Encoding::UndefinedConversionError#destination_encoding_name","type":"instance_method","visibility":"public"},"Encoding::UndefinedConversionError#error_char":{"description":"Returns the one-character string which cause Encoding::UndefinedConversionError.\n\n ec = Encoding::Converter.new(\"ISO-8859-1\", \"EUC-JP\")\n begin\n   ec.convert(\"\\xa0\")\n rescue Encoding::UndefinedConversionError\n   puts $!.error_char.dump   #=> \"\\xC2\\xA0\"\n   p $!.error_char.encoding  #=> #<Encoding:UTF-8>\n end","name":"error_char","namespace":"Encoding::UndefinedConversionError","path":"Encoding::UndefinedConversionError#error_char","type":"instance_method","visibility":"public"},"Encoding::UndefinedConversionError#source_encoding":{"description":"Returns the source encoding as an encoding object.\n\nNote that the result may not be equal to the source encoding of\nthe encoding converter if the conversion has multiple steps.\n\n ec = Encoding::Converter.new(\"ISO-8859-1\", \"EUC-JP\") # ISO-8859-1 -> UTF-8 -> EUC-JP\n begin\n   ec.convert(\"\\xa0\") # NO-BREAK SPACE, which is available in UTF-8 but not in EUC-JP.\n rescue Encoding::UndefinedConversionError\n   p $!.source_encoding              #=> #<Encoding:UTF-8>\n   p $!.destination_encoding         #=> #<Encoding:EUC-JP>\n   p $!.source_encoding_name         #=> \"UTF-8\"\n   p $!.destination_encoding_name    #=> \"EUC-JP\"\n end","name":"source_encoding","namespace":"Encoding::UndefinedConversionError","path":"Encoding::UndefinedConversionError#source_encoding","type":"instance_method","visibility":"public"},"Encoding::UndefinedConversionError#source_encoding_name":{"description":"Returns the source encoding name as a string.","name":"source_encoding_name","namespace":"Encoding::UndefinedConversionError","path":"Encoding::UndefinedConversionError#source_encoding_name","type":"instance_method","visibility":"public"},"Enumerable":{"description":"The <code>Enumerable</code> mixin provides collection classes with\nseveral traversal and searching methods, and with the ability to\nsort. The class must provide a method <code>each</code>, which\nyields successive members of the collection. If\n<code>Enumerable#max</code>, <code>#min</code>, or\n<code>#sort</code> is used, the objects in the collection must also\nimplement a meaningful <code><=></code> operator, as these methods\nrely on an ordering between members of the collection.","name":"Enumerable","namespace":"","path":"Enumerable","type":"module","visibility":"public"},"Enumerable#all?":{"description":"Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block never returns\n<code>false</code> or <code>nil</code>. If the block is not given,\nRuby adds an implicit block of <code>{ |obj| obj }</code> which will\ncause #all? to return +true+ when none of the collection members are\n+false+ or +nil+.\n\nIf instead a pattern is supplied, the method returns whether\n<code>pattern === element</code> for every collection member.\n\n   %w[ant bear cat].all? { |word| word.length >= 3 } #=> true\n   %w[ant bear cat].all? { |word| word.length >= 4 } #=> false\n   %w[ant bear cat].all?(/t/)                        #=> false\n   [1, 2i, 3.14].all?(Numeric)                       #=> true\n   [nil, true, 99].all?                              #=> false\n   [].all?                                           #=> true","name":"all?","namespace":"Enumerable","path":"Enumerable#all?","type":"module_function","visibility":"public","return":[["Boolean"],""]},"Enumerable#any?":{"description":"Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block ever returns a value other\nthan <code>false</code> or <code>nil</code>. If the block is not\ngiven, Ruby adds an implicit block of <code>{ |obj| obj }</code> that\nwill cause #any? to return +true+ if at least one of the collection\nmembers is not +false+ or +nil+.\n\nIf instead a pattern is supplied, the method returns whether\n<code>pattern === element</code> for any collection member.\n\n   %w[ant bear cat].any? { |word| word.length >= 3 } #=> true\n   %w[ant bear cat].any? { |word| word.length >= 4 } #=> true\n   %w[ant bear cat].any?(/d/)                        #=> false\n   [nil, true, 99].any?(Integer)                     #=> true\n   [nil, true, 99].any?                              #=> true\n   [].any?                                           #=> false","name":"any?","namespace":"Enumerable","path":"Enumerable#any?","type":"module_function","visibility":"public","return":[["Boolean"],""]},"Enumerable#chunk":{"description":"Enumerates over the items, chunking them together based on the return\nvalue of the block.\n\nConsecutive elements which return the same block value are chunked together.\n\nFor example, consecutive even numbers and odd numbers can be\nchunked as follows.\n\n  [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5].chunk { |n|\n    n.even?\n  }.each { |even, ary|\n    p [even, ary]\n  }\n  #=> [false, [3, 1]]\n  #   [true, [4]]\n  #   [false, [1, 5, 9]]\n  #   [true, [2, 6]]\n  #   [false, [5, 3, 5]]\n\nThis method is especially useful for sorted series of elements.\nThe following example counts words for each initial letter.\n\n  open(\"/usr/share/dict/words\", \"r:iso-8859-1\") { |f|\n    f.chunk { |line| line.ord }.each { |ch, lines| p [ch.chr, lines.length] }\n  }\n  #=> [\"\\n\", 1]\n  #   [\"A\", 1327]\n  #   [\"B\", 1372]\n  #   [\"C\", 1507]\n  #   [\"D\", 791]\n  #   ...\n\nThe following key values have special meaning:\n- +nil+ and +:_separator+ specifies that the elements should be dropped.\n- +:_alone+ specifies that the element should be chunked by itself.\n\nAny other symbols that begin with an underscore will raise an error:\n\n  items.chunk { |item| :_underscore }\n  #=> RuntimeError: symbols beginning with an underscore are reserved\n\n+nil+ and +:_separator+ can be used to ignore some elements.\n\nFor example, the sequence of hyphens in svn log can be eliminated as follows:\n\n  sep = \"-\"*72 + \"\\n\"\n  IO.popen(\"svn log README\") { |f|\n    f.chunk { |line|\n      line != sep || nil\n    }.each { |_, lines|\n      pp lines\n    }\n  }\n  #=> [\"r20018 | knu | 2008-10-29 13:20:42 +0900 (Wed, 29 Oct 2008) | 2 lines\\n\",\n  #    \"\\n\",\n  #    \"* README, README.ja: Update the portability section.\\n\",\n  #    \"\\n\"]\n  #   [\"r16725 | knu | 2008-05-31 23:34:23 +0900 (Sat, 31 May 2008) | 2 lines\\n\",\n  #    \"\\n\",\n  #    \"* README, README.ja: Add a note about default C flags.\\n\",\n  #    \"\\n\"]\n  #   ...\n\nParagraphs separated by empty lines can be parsed as follows:\n\n  File.foreach(\"README\").chunk { |line|\n    /\\A\\s*\\z/ !~ line || nil\n  }.each { |_, lines|\n    pp lines\n  }\n\n+:_alone+ can be used to force items into their own chunk.\nFor example, you can put lines that contain a URL by themselves,\nand chunk the rest of the lines together, like this:\n\n  pattern = /http/\n  open(filename) { |f|\n    f.chunk { |line| line =~ pattern ? :_alone : true }.each { |key, lines|\n      pp lines\n    }\n  }\n\nIf no block is given, an enumerator to `chunk` is returned instead.","name":"chunk","namespace":"Enumerable","path":"Enumerable#chunk","type":"module_function","visibility":"public"},"Enumerable#chunk_while":{"description":"Creates an enumerator for each chunked elements.\nThe beginnings of chunks are defined by the block.\n\nThis method split each chunk using adjacent elements,\n_elt_before_ and _elt_after_,\nin the receiver enumerator.\nThis method split chunks between _elt_before_ and _elt_after_ where\nthe block returns <code>false</code>.\n\nThe block is called the length of the receiver enumerator minus one.\n\nThe result enumerator yields the chunked elements as an array.\nSo +each+ method can be called as follows:\n\n  enum.chunk_while { |elt_before, elt_after| bool }.each { |ary| ... }\n\nOther methods of the Enumerator class and Enumerable module,\nsuch as +to_a+, +map+, etc., are also usable.\n\nFor example, one-by-one increasing subsequence can be chunked as follows:\n\n  a = [1,2,4,9,10,11,12,15,16,19,20,21]\n  b = a.chunk_while {|i, j| i+1 == j }\n  p b.to_a #=> [[1, 2], [4], [9, 10, 11, 12], [15, 16], [19, 20, 21]]\n  c = b.map {|a| a.length < 3 ? a : \"#{a.first}-#{a.last}\" }\n  p c #=> [[1, 2], [4], \"9-12\", [15, 16], \"19-21\"]\n  d = c.join(\",\")\n  p d #=> \"1,2,4,9-12,15,16,19-21\"\n\nIncreasing (non-decreasing) subsequence can be chunked as follows:\n\n  a = [0, 9, 2, 2, 3, 2, 7, 5, 9, 5]\n  p a.chunk_while {|i, j| i <= j }.to_a\n  #=> [[0, 9], [2, 2, 3], [2, 7], [5, 9], [5]]\n\nAdjacent evens and odds can be chunked as follows:\n(Enumerable#chunk is another way to do it.)\n\n  a = [7, 5, 9, 2, 0, 7, 9, 4, 2, 0]\n  p a.chunk_while {|i, j| i.even? == j.even? }.to_a\n  #=> [[7, 5, 9], [2, 0], [7, 9], [4, 2, 0]]\n\nEnumerable#slice_when does the same, except splitting when the block\nreturns <code>true</code> instead of <code>false</code>.","name":"chunk_while","namespace":"Enumerable","path":"Enumerable#chunk_while","type":"module_function","visibility":"public"},"Enumerable#collect":{"description":"Returns a new array with the results of running <em>block</em> once\nfor every element in <i>enum</i>.\n\nIf no block is given, an enumerator is returned instead.\n\n   (1..4).map { |i| i*i }      #=> [1, 4, 9, 16]\n   (1..4).collect { \"cat\"  }   #=> [\"cat\", \"cat\", \"cat\", \"cat\"]","name":"collect","namespace":"Enumerable","path":"Enumerable#collect","type":"module_function","visibility":"public"},"Enumerable#collect_concat":{"description":"Returns a new array with the concatenated results of running\n<em>block</em> once for every element in <i>enum</i>.\n\nIf no block is given, an enumerator is returned instead.\n\n   [1, 2, 3, 4].flat_map { |e| [e, -e] } #=> [1, -1, 2, -2, 3, -3, 4, -4]\n   [[1, 2], [3, 4]].flat_map { |e| e + [100] } #=> [1, 2, 100, 3, 4, 100]","name":"collect_concat","namespace":"Enumerable","path":"Enumerable#collect_concat","type":"module_function","visibility":"public"},"Enumerable#count":{"description":"Returns the number of items in +enum+ through enumeration.\nIf an argument is given, the number of items in +enum+ that\nare equal to +item+ are counted.  If a block is given, it\ncounts the number of elements yielding a true value.\n\n   ary = [1, 2, 4, 2]\n   ary.count               #=> 4\n   ary.count(2)            #=> 2\n   ary.count{ |x| x%2==0 } #=> 3","name":"count","namespace":"Enumerable","path":"Enumerable#count","type":"module_function","visibility":"public"},"Enumerable#cycle":{"description":"Calls <i>block</i> for each element of <i>enum</i> repeatedly _n_\ntimes or forever if none or +nil+ is given.  If a non-positive\nnumber is given or the collection is empty, does nothing.  Returns\n+nil+ if the loop has finished without getting interrupted.\n\nEnumerable#cycle saves elements in an internal array so changes\nto <i>enum</i> after the first pass have no effect.\n\nIf no block is given, an enumerator is returned instead.\n\n   a = [\"a\", \"b\", \"c\"]\n   a.cycle { |x| puts x }  # print, a, b, c, a, b, c,.. forever.\n   a.cycle(2) { |x| puts x }  # print, a, b, c, a, b, c.","name":"cycle","namespace":"Enumerable","path":"Enumerable#cycle","type":"module_function","visibility":"public"},"Enumerable#detect":{"description":"Passes each entry in <i>enum</i> to <em>block</em>. Returns the\nfirst for which <em>block</em> is not false.  If no\nobject matches, calls <i>ifnone</i> and returns its result when it\nis specified, or returns <code>nil</code> otherwise.\n\nIf no block is given, an enumerator is returned instead.\n\n   (1..100).detect  => #<Enumerator: 1..100:detect>\n   (1..100).find    => #<Enumerator: 1..100:find>\n\n   (1..10).detect\t{ |i| i % 5 == 0 and i % 7 == 0 }   #=> nil\n   (1..10).find\t{ |i| i % 5 == 0 and i % 7 == 0 }   #=> nil\n   (1..100).detect\t{ |i| i % 5 == 0 and i % 7 == 0 }   #=> 35\n   (1..100).find\t{ |i| i % 5 == 0 and i % 7 == 0 }   #=> 35","name":"detect","namespace":"Enumerable","path":"Enumerable#detect","type":"module_function","visibility":"public"},"Enumerable#drop":{"description":"Drops first n elements from <i>enum</i>, and returns rest elements\nin an array.\n\n   a = [1, 2, 3, 4, 5, 0]\n   a.drop(3)             #=> [4, 5, 0]","name":"drop","namespace":"Enumerable","path":"Enumerable#drop","type":"module_function","visibility":"public"},"Enumerable#drop_while":{"description":"Drops elements up to, but not including, the first element for\nwhich the block returns +nil+ or +false+ and returns an array\ncontaining the remaining elements.\n\nIf no block is given, an enumerator is returned instead.\n\n   a = [1, 2, 3, 4, 5, 0]\n   a.drop_while { |i| i < 3 }   #=> [3, 4, 5, 0]","name":"drop_while","namespace":"Enumerable","path":"Enumerable#drop_while","type":"module_function","visibility":"public"},"Enumerable#each_cons":{"description":"Iterates the given block for each array of consecutive <n>\nelements.  If no block is given, returns an enumerator.\n\ne.g.:\n    (1..10).each_cons(3) { |a| p a }\n    # outputs below\n    [1, 2, 3]\n    [2, 3, 4]\n    [3, 4, 5]\n    [4, 5, 6]\n    [5, 6, 7]\n    [6, 7, 8]\n    [7, 8, 9]\n    [8, 9, 10]","name":"each_cons","namespace":"Enumerable","path":"Enumerable#each_cons","type":"module_function","visibility":"public"},"Enumerable#each_entry":{"description":"Calls <i>block</i> once for each element in +self+, passing that\nelement as a parameter, converting multiple values from yield to an\narray.\n\nIf no block is given, an enumerator is returned instead.\n\n   class Foo\n     include Enumerable\n     def each\n       yield 1\n       yield 1, 2\n       yield\n     end\n   end\n   Foo.new.each_entry{ |o| p o }\n\nproduces:\n\n   1\n   [1, 2]\n   nil","name":"each_entry","namespace":"Enumerable","path":"Enumerable#each_entry","type":"module_function","visibility":"public"},"Enumerable#each_slice":{"description":"Iterates the given block for each slice of <n> elements.  If no\nblock is given, returns an enumerator.\n\n    (1..10).each_slice(3) { |a| p a }\n    # outputs below\n    [1, 2, 3]\n    [4, 5, 6]\n    [7, 8, 9]\n    [10]","name":"each_slice","namespace":"Enumerable","path":"Enumerable#each_slice","type":"module_function","visibility":"public"},"Enumerable#each_with_index":{"description":"Calls <em>block</em> with two arguments, the item and its index,\nfor each item in <i>enum</i>.  Given arguments are passed through\nto #each().\n\nIf no block is given, an enumerator is returned instead.\n\n   hash = Hash.new\n   %w(cat dog wombat).each_with_index { |item, index|\n     hash[item] = index\n   }\n   hash   #=> {\"cat\"=>0, \"dog\"=>1, \"wombat\"=>2}","name":"each_with_index","namespace":"Enumerable","path":"Enumerable#each_with_index","type":"module_function","visibility":"public"},"Enumerable#each_with_object":{"description":"Iterates the given block for each element with an arbitrary\nobject given, and returns the initially given object.\n\nIf no block is given, returns an enumerator.\n\n    evens = (1..10).each_with_object([]) { |i, a| a << i*2 }\n    #=> [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]","name":"each_with_object","namespace":"Enumerable","path":"Enumerable#each_with_object","type":"module_function","visibility":"public"},"Enumerable#entries":{"description":"Returns an array containing the items in <i>enum</i>.\n\n   (1..7).to_a                       #=> [1, 2, 3, 4, 5, 6, 7]\n   { 'a'=>1, 'b'=>2, 'c'=>3 }.to_a   #=> [[\"a\", 1], [\"b\", 2], [\"c\", 3]]\n\n   require 'prime'\n   Prime.entries 10                  #=> [2, 3, 5, 7]","name":"entries","namespace":"Enumerable","path":"Enumerable#entries","type":"module_function","visibility":"public"},"Enumerable#find":{"description":"Passes each entry in <i>enum</i> to <em>block</em>. Returns the\nfirst for which <em>block</em> is not false.  If no\nobject matches, calls <i>ifnone</i> and returns its result when it\nis specified, or returns <code>nil</code> otherwise.\n\nIf no block is given, an enumerator is returned instead.\n\n   (1..100).detect  => #<Enumerator: 1..100:detect>\n   (1..100).find    => #<Enumerator: 1..100:find>\n\n   (1..10).detect\t{ |i| i % 5 == 0 and i % 7 == 0 }   #=> nil\n   (1..10).find\t{ |i| i % 5 == 0 and i % 7 == 0 }   #=> nil\n   (1..100).detect\t{ |i| i % 5 == 0 and i % 7 == 0 }   #=> 35\n   (1..100).find\t{ |i| i % 5 == 0 and i % 7 == 0 }   #=> 35","name":"find","namespace":"Enumerable","path":"Enumerable#find","type":"module_function","visibility":"public"},"Enumerable#find_all":{"description":"Returns an array containing all elements of +enum+\nfor which the given +block+ returns a true value.\n\nIf no block is given, an Enumerator is returned instead.\n\n\n   (1..10).find_all { |i|  i % 3 == 0 }   #=> [3, 6, 9]\n\n   [1,2,3,4,5].select { |num|  num.even?  }   #=> [2, 4]\n\nSee also Enumerable#reject.","name":"find_all","namespace":"Enumerable","path":"Enumerable#find_all","type":"module_function","visibility":"public"},"Enumerable#find_index":{"description":"Compares each entry in <i>enum</i> with <em>value</em> or passes\nto <em>block</em>.  Returns the index for the first for which the\nevaluated value is non-false.  If no object matches, returns\n<code>nil</code>\n\nIf neither block nor argument is given, an enumerator is returned instead.\n\n   (1..10).find_index  { |i| i % 5 == 0 and i % 7 == 0 }  #=> nil\n   (1..100).find_index { |i| i % 5 == 0 and i % 7 == 0 }  #=> 34\n   (1..100).find_index(50)                                #=> 49","name":"find_index","namespace":"Enumerable","path":"Enumerable#find_index","type":"module_function","visibility":"public"},"Enumerable#first":{"description":"Returns the first element, or the first +n+ elements, of the enumerable.\nIf the enumerable is empty, the first form returns <code>nil</code>, and the\nsecond form returns an empty array.\n\n  %w[foo bar baz].first     #=> \"foo\"\n  %w[foo bar baz].first(2)  #=> [\"foo\", \"bar\"]\n  %w[foo bar baz].first(10) #=> [\"foo\", \"bar\", \"baz\"]\n  [].first                  #=> nil\n  [].first(10)              #=> []","name":"first","namespace":"Enumerable","path":"Enumerable#first","type":"module_function","visibility":"public"},"Enumerable#flat_map":{"description":"Returns a new array with the concatenated results of running\n<em>block</em> once for every element in <i>enum</i>.\n\nIf no block is given, an enumerator is returned instead.\n\n   [1, 2, 3, 4].flat_map { |e| [e, -e] } #=> [1, -1, 2, -2, 3, -3, 4, -4]\n   [[1, 2], [3, 4]].flat_map { |e| e + [100] } #=> [1, 2, 100, 3, 4, 100]","name":"flat_map","namespace":"Enumerable","path":"Enumerable#flat_map","type":"module_function","visibility":"public"},"Enumerable#grep":{"description":"Returns an array of every element in <i>enum</i> for which\n<code>Pattern === element</code>. If the optional <em>block</em> is\nsupplied, each matching element is passed to it, and the block's\nresult is stored in the output array.\n\n   (1..100).grep 38..44   #=> [38, 39, 40, 41, 42, 43, 44]\n   c = IO.constants\n   c.grep(/SEEK/)         #=> [:SEEK_SET, :SEEK_CUR, :SEEK_END]\n   res = c.grep(/SEEK/) { |v| IO.const_get(v) }\n   res                    #=> [0, 1, 2]","name":"grep","namespace":"Enumerable","path":"Enumerable#grep","type":"module_function","visibility":"public"},"Enumerable#grep_v":{"description":"Inverted version of Enumerable#grep.\nReturns an array of every element in <i>enum</i> for which\nnot <code>Pattern === element</code>.\n\n   (1..10).grep_v 2..5   #=> [1, 6, 7, 8, 9, 10]\n   res =(1..10).grep_v(2..5) { |v| v * 2 }\n   res                    #=> [2, 12, 14, 16, 18, 20]","name":"grep_v","namespace":"Enumerable","path":"Enumerable#grep_v","type":"module_function","visibility":"public"},"Enumerable#group_by":{"description":"Groups the collection by result of the block.  Returns a hash where the\nkeys are the evaluated result from the block and the values are\narrays of elements in the collection that correspond to the key.\n\nIf no block is given an enumerator is returned.\n\n   (1..6).group_by { |i| i%3 }   #=> {0=>[3, 6], 1=>[1, 4], 2=>[2, 5]}","name":"group_by","namespace":"Enumerable","path":"Enumerable#group_by","type":"module_function","visibility":"public"},"Enumerable#include?":{"description":"Returns <code>true</code> if any member of <i>enum</i> equals\n<i>obj</i>. Equality is tested using <code>==</code>.\n\n   IO.constants.include? :SEEK_SET          #=> true\n   IO.constants.include? :SEEK_NO_FURTHER   #=> false\n   IO.constants.member? :SEEK_SET          #=> true\n   IO.constants.member? :SEEK_NO_FURTHER   #=> false","name":"include?","namespace":"Enumerable","path":"Enumerable#include?","type":"module_function","visibility":"public","return":[["Boolean"],""]},"Enumerable#inject":{"description":"Combines all elements of <i>enum</i> by applying a binary\noperation, specified by a block or a symbol that names a\nmethod or operator.\n\nThe <i>inject</i> and <i>reduce</i> methods are aliases. There\nis no performance benefit to either.\n\nIf you specify a block, then for each element in <i>enum</i>\nthe block is passed an accumulator value (<i>memo</i>) and the element.\nIf you specify a symbol instead, then each element in the collection\nwill be passed to the named method of <i>memo</i>.\nIn either case, the result becomes the new value for <i>memo</i>.\nAt the end of the iteration, the final value of <i>memo</i> is the\nreturn value for the method.\n\nIf you do not explicitly specify an <i>initial</i> value for <i>memo</i>,\nthen the first element of collection is used as the initial value\nof <i>memo</i>.\n\n\n   # Sum some numbers\n   (5..10).reduce(:+)                             #=> 45\n   # Same using a block and inject\n   (5..10).inject { |sum, n| sum + n }            #=> 45\n   # Multiply some numbers\n   (5..10).reduce(1, :*)                          #=> 151200\n   # Same using a block\n   (5..10).inject(1) { |product, n| product * n } #=> 151200\n   # find the longest word\n   longest = %w{ cat sheep bear }.inject do |memo, word|\n      memo.length > word.length ? memo : word\n   end\n   longest                                        #=> \"sheep\"","name":"inject","namespace":"Enumerable","path":"Enumerable#inject","type":"module_function","visibility":"public"},"Enumerable#lazy":{"description":"Returns a lazy enumerator, whose methods map/collect,\nflat_map/collect_concat, select/find_all, reject, grep, grep_v, zip, take,\ntake_while, drop, and drop_while enumerate values only on an\nas-needed basis.  However, if a block is given to zip, values\nare enumerated immediately.\n\n=== Example\n\nThe following program finds pythagorean triples:\n\n  def pythagorean_triples\n    (1..Float::INFINITY).lazy.flat_map {|z|\n      (1..z).flat_map {|x|\n        (x..z).select {|y|\n          x**2 + y**2 == z**2\n        }.map {|y|\n          [x, y, z]\n        }\n      }\n    }\n  end\n  # show first ten pythagorean triples\n  p pythagorean_triples.take(10).force # take is lazy, so force is needed\n  p pythagorean_triples.first(10)      # first is eager\n  # show pythagorean triples less than 100\n  p pythagorean_triples.take_while { |*, z| z < 100 }.force","name":"lazy","namespace":"Enumerable","path":"Enumerable#lazy","type":"module_function","visibility":"public"},"Enumerable#map":{"description":"Returns a new array with the results of running <em>block</em> once\nfor every element in <i>enum</i>.\n\nIf no block is given, an enumerator is returned instead.\n\n   (1..4).map { |i| i*i }      #=> [1, 4, 9, 16]\n   (1..4).collect { \"cat\"  }   #=> [\"cat\", \"cat\", \"cat\", \"cat\"]","name":"map","namespace":"Enumerable","path":"Enumerable#map","type":"module_function","visibility":"public"},"Enumerable#max":{"description":"Returns the object in _enum_ with the maximum value. The\nfirst form assumes all objects implement <code>Comparable</code>;\nthe second uses the block to return <em>a <=> b</em>.\n\n   a = %w(albatross dog horse)\n   a.max                                   #=> \"horse\"\n   a.max { |a, b| a.length <=> b.length }  #=> \"albatross\"\n\nIf the +n+ argument is given, maximum +n+ elements are returned\nas an array, sorted in descending order.\n\n   a = %w[albatross dog horse]\n   a.max(2)                                  #=> [\"horse\", \"dog\"]\n   a.max(2) {|a, b| a.length <=> b.length }  #=> [\"albatross\", \"horse\"]\n   [5, 1, 3, 4, 2].max(3)                    #=> [5, 4, 3]","name":"max","namespace":"Enumerable","path":"Enumerable#max","type":"module_function","visibility":"public"},"Enumerable#max_by":{"description":"Returns the object in <i>enum</i> that gives the maximum\nvalue from the given block.\n\nIf no block is given, an enumerator is returned instead.\n\n   a = %w(albatross dog horse)\n   a.max_by { |x| x.length }   #=> \"albatross\"\n\nIf the +n+ argument is given, maximum +n+ elements are returned\nas an array. These +n+ elements are sorted by the value from the\ngiven block, in descending order.\n\n   a = %w[albatross dog horse]\n   a.max_by(2) {|x| x.length } #=> [\"albatross\", \"horse\"]\n\nenum.max_by(n) can be used to implement weighted random sampling.\nFollowing example implements and use Enumerable#wsample.\n\n   module Enumerable\n     # weighted random sampling.\n     #\n     # Pavlos S. Efraimidis, Paul G. Spirakis\n     # Weighted random sampling with a reservoir\n     # Information Processing Letters\n     # Volume 97, Issue 5 (16 March 2006)\n     def wsample(n)\n       self.max_by(n) {|v| rand ** (1.0/yield(v)) }\n     end\n   end\n   e = (-20..20).to_a*10000\n   a = e.wsample(20000) {|x|\n     Math.exp(-(x/5.0)**2) # normal distribution\n   }\n   # a is 20000 samples from e.\n   p a.length #=> 20000\n   h = a.group_by {|x| x }\n   -10.upto(10) {|x| puts \"*\" * (h[x].length/30.0).to_i if h[x] }\n   #=> *\n   #   ***\n   #   ******\n   #   ***********\n   #   ******************\n   #   *****************************\n   #   *****************************************\n   #   ****************************************************\n   #   ***************************************************************\n   #   ********************************************************************\n   #   ***********************************************************************\n   #   ***********************************************************************\n   #   **************************************************************\n   #   ****************************************************\n   #   ***************************************\n   #   ***************************\n   #   ******************\n   #   ***********\n   #   *******\n   #   ***\n   #   *","name":"max_by","namespace":"Enumerable","path":"Enumerable#max_by","type":"module_function","visibility":"public"},"Enumerable#member?":{"description":"Returns <code>true</code> if any member of <i>enum</i> equals\n<i>obj</i>. Equality is tested using <code>==</code>.\n\n   IO.constants.include? :SEEK_SET          #=> true\n   IO.constants.include? :SEEK_NO_FURTHER   #=> false\n   IO.constants.member? :SEEK_SET          #=> true\n   IO.constants.member? :SEEK_NO_FURTHER   #=> false","name":"member?","namespace":"Enumerable","path":"Enumerable#member?","type":"module_function","visibility":"public","return":[["Boolean"],""]},"Enumerable#min":{"description":"Returns the object in _enum_ with the minimum value. The\nfirst form assumes all objects implement <code>Comparable</code>;\nthe second uses the block to return <em>a <=> b</em>.\n\n   a = %w(albatross dog horse)\n   a.min                                   #=> \"albatross\"\n   a.min { |a, b| a.length <=> b.length }  #=> \"dog\"\n\nIf the +n+ argument is given, minimum +n+ elements are returned\nas a sorted array.\n\n   a = %w[albatross dog horse]\n   a.min(2)                                  #=> [\"albatross\", \"dog\"]\n   a.min(2) {|a, b| a.length <=> b.length }  #=> [\"dog\", \"horse\"]\n   [5, 1, 3, 4, 2].min(3)                    #=> [1, 2, 3]","name":"min","namespace":"Enumerable","path":"Enumerable#min","type":"module_function","visibility":"public"},"Enumerable#min_by":{"description":"Returns the object in <i>enum</i> that gives the minimum\nvalue from the given block.\n\nIf no block is given, an enumerator is returned instead.\n\n   a = %w(albatross dog horse)\n   a.min_by { |x| x.length }   #=> \"dog\"\n\nIf the +n+ argument is given, minimum +n+ elements are returned\nas an array. These +n+ elements are sorted by the value from the\ngiven block.\n\n   a = %w[albatross dog horse]\n   p a.min_by(2) {|x| x.length } #=> [\"dog\", \"horse\"]","name":"min_by","namespace":"Enumerable","path":"Enumerable#min_by","type":"module_function","visibility":"public"},"Enumerable#minmax":{"description":"Returns a two element array which contains the minimum and the\nmaximum value in the enumerable.  The first form assumes all\nobjects implement <code>Comparable</code>; the second uses the\nblock to return <em>a <=> b</em>.\n\n   a = %w(albatross dog horse)\n   a.minmax                                  #=> [\"albatross\", \"horse\"]\n   a.minmax { |a, b| a.length <=> b.length } #=> [\"dog\", \"albatross\"]","name":"minmax","namespace":"Enumerable","path":"Enumerable#minmax","type":"module_function","visibility":"public"},"Enumerable#minmax_by":{"description":"Returns a two element array containing the objects in\n<i>enum</i> that correspond to the minimum and maximum values respectively\nfrom the given block.\n\nIf no block is given, an enumerator is returned instead.\n\n   a = %w(albatross dog horse)\n   a.minmax_by { |x| x.length }   #=> [\"dog\", \"albatross\"]","name":"minmax_by","namespace":"Enumerable","path":"Enumerable#minmax_by","type":"module_function","visibility":"public"},"Enumerable#none?":{"description":"Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block never returns <code>true</code>\nfor all elements. If the block is not given, <code>none?</code> will return\n<code>true</code> only if none of the collection members is true.\n\nIf instead a pattern is supplied, the method returns whether\n<code>pattern === element</code> for none of the collection members.\n\n   %w{ant bear cat}.none? { |word| word.length == 5 } #=> true\n   %w{ant bear cat}.none? { |word| word.length >= 4 } #=> false\n   %w{ant bear cat}.none?(/d/)                        #=> true\n   [1, 3.14, 42].none?(Float)                         #=> false\n   [].none?                                           #=> true\n   [nil].none?                                        #=> true\n   [nil, false].none?                                 #=> true\n   [nil, false, true].none?                           #=> false","name":"none?","namespace":"Enumerable","path":"Enumerable#none?","type":"module_function","visibility":"public","return":[["Boolean"],""]},"Enumerable#one?":{"description":"Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block returns <code>true</code>\nexactly once. If the block is not given, <code>one?</code> will return\n<code>true</code> only if exactly one of the collection members is\ntrue.\n\nIf instead a pattern is supplied, the method returns whether\n<code>pattern === element</code> for exactly one collection member.\n\n   %w{ant bear cat}.one? { |word| word.length == 4 }  #=> true\n   %w{ant bear cat}.one? { |word| word.length > 4 }   #=> false\n   %w{ant bear cat}.one? { |word| word.length < 4 }   #=> false\n   %w{ant bear cat}.one?(/t/)                         #=> false\n   [ nil, true, 99 ].one?                             #=> false\n   [ nil, true, false ].one?                          #=> true\n   [ nil, true, 99 ].one?(Integer)                    #=> true\n   [].one?                                            #=> false","name":"one?","namespace":"Enumerable","path":"Enumerable#one?","type":"module_function","visibility":"public","return":[["Boolean"],""]},"Enumerable#partition":{"description":"Returns two arrays, the first containing the elements of\n<i>enum</i> for which the block evaluates to true, the second\ncontaining the rest.\n\nIf no block is given, an enumerator is returned instead.\n\n   (1..6).partition { |v| v.even? }  #=> [[2, 4, 6], [1, 3, 5]]","name":"partition","namespace":"Enumerable","path":"Enumerable#partition","type":"module_function","visibility":"public"},"Enumerable#reduce":{"description":"Combines all elements of <i>enum</i> by applying a binary\noperation, specified by a block or a symbol that names a\nmethod or operator.\n\nThe <i>inject</i> and <i>reduce</i> methods are aliases. There\nis no performance benefit to either.\n\nIf you specify a block, then for each element in <i>enum</i>\nthe block is passed an accumulator value (<i>memo</i>) and the element.\nIf you specify a symbol instead, then each element in the collection\nwill be passed to the named method of <i>memo</i>.\nIn either case, the result becomes the new value for <i>memo</i>.\nAt the end of the iteration, the final value of <i>memo</i> is the\nreturn value for the method.\n\nIf you do not explicitly specify an <i>initial</i> value for <i>memo</i>,\nthen the first element of collection is used as the initial value\nof <i>memo</i>.\n\n\n   # Sum some numbers\n   (5..10).reduce(:+)                             #=> 45\n   # Same using a block and inject\n   (5..10).inject { |sum, n| sum + n }            #=> 45\n   # Multiply some numbers\n   (5..10).reduce(1, :*)                          #=> 151200\n   # Same using a block\n   (5..10).inject(1) { |product, n| product * n } #=> 151200\n   # find the longest word\n   longest = %w{ cat sheep bear }.inject do |memo, word|\n      memo.length > word.length ? memo : word\n   end\n   longest                                        #=> \"sheep\"","name":"reduce","namespace":"Enumerable","path":"Enumerable#reduce","type":"module_function","visibility":"public"},"Enumerable#reject":{"description":"Returns an array for all elements of +enum+ for which the given\n+block+ returns <code>false</code>.\n\nIf no block is given, an Enumerator is returned instead.\n\n   (1..10).reject { |i|  i % 3 == 0 }   #=> [1, 2, 4, 5, 7, 8, 10]\n\n   [1, 2, 3, 4, 5].reject { |num| num.even? } #=> [1, 3, 5]\n\nSee also Enumerable#find_all.","name":"reject","namespace":"Enumerable","path":"Enumerable#reject","type":"module_function","visibility":"public"},"Enumerable#reverse_each":{"description":"Builds a temporary array and traverses that array in reverse order.\n\nIf no block is given, an enumerator is returned instead.\n\n    (1..3).reverse_each { |v| p v }\n\n  produces:\n\n    3\n    2\n    1","name":"reverse_each","namespace":"Enumerable","path":"Enumerable#reverse_each","type":"module_function","visibility":"public"},"Enumerable#select":{"description":"Returns an array containing all elements of +enum+\nfor which the given +block+ returns a true value.\n\nIf no block is given, an Enumerator is returned instead.\n\n\n   (1..10).find_all { |i|  i % 3 == 0 }   #=> [3, 6, 9]\n\n   [1,2,3,4,5].select { |num|  num.even?  }   #=> [2, 4]\n\nSee also Enumerable#reject.","name":"select","namespace":"Enumerable","path":"Enumerable#select","type":"module_function","visibility":"public"},"Enumerable#slice_after":{"description":"Creates an enumerator for each chunked elements.\nThe ends of chunks are defined by _pattern_ and the block.\n\nIf <code>_pattern_ === _elt_</code> returns <code>true</code> or the block\nreturns <code>true</code> for the element, the element is end of a\nchunk.\n\nThe <code>===</code> and _block_ is called from the first element to the last\nelement of _enum_.\n\nThe result enumerator yields the chunked elements as an array.\nSo +each+ method can be called as follows:\n\n  enum.slice_after(pattern).each { |ary| ... }\n  enum.slice_after { |elt| bool }.each { |ary| ... }\n\nOther methods of the Enumerator class and Enumerable module,\nsuch as +map+, etc., are also usable.\n\nFor example, continuation lines (lines end with backslash) can be\nconcatenated as follows:\n\n  lines = [\"foo\\n\", \"bar\\\\\\n\", \"baz\\n\", \"\\n\", \"qux\\n\"]\n  e = lines.slice_after(/(?<!\\\\)\\n\\z/)\n  p e.to_a\n  #=> [[\"foo\\n\"], [\"bar\\\\\\n\", \"baz\\n\"], [\"\\n\"], [\"qux\\n\"]]\n  p e.map {|ll| ll[0...-1].map {|l| l.sub(/\\\\\\n\\z/, \"\") }.join + ll.last }\n  #=>[\"foo\\n\", \"barbaz\\n\", \"\\n\", \"qux\\n\"]","name":"slice_after","namespace":"Enumerable","path":"Enumerable#slice_after","type":"module_function","visibility":"public"},"Enumerable#slice_before":{"description":"Creates an enumerator for each chunked elements.\nThe beginnings of chunks are defined by _pattern_ and the block.\n\nIf <code>_pattern_ === _elt_</code> returns <code>true</code> or the block\nreturns <code>true</code> for the element, the element is beginning of a\nchunk.\n\nThe <code>===</code> and _block_ is called from the first element to the last\nelement of _enum_.  The result for the first element is ignored.\n\nThe result enumerator yields the chunked elements as an array.\nSo +each+ method can be called as follows:\n\n  enum.slice_before(pattern).each { |ary| ... }\n  enum.slice_before { |elt| bool }.each { |ary| ... }\n\nOther methods of the Enumerator class and Enumerable module,\nsuch as +to_a+, +map+, etc., are also usable.\n\nFor example, iteration over ChangeLog entries can be implemented as\nfollows:\n\n  # iterate over ChangeLog entries.\n  open(\"ChangeLog\") { |f|\n    f.slice_before(/\\A\\S/).each { |e| pp e }\n  }\n\n  # same as above.  block is used instead of pattern argument.\n  open(\"ChangeLog\") { |f|\n    f.slice_before { |line| /\\A\\S/ === line }.each { |e| pp e }\n  }\n\n\n\"svn proplist -R\" produces multiline output for each file.\nThey can be chunked as follows:\n\n  IO.popen([{\"LC_ALL\"=>\"C\"}, \"svn\", \"proplist\", \"-R\"]) { |f|\n    f.lines.slice_before(/\\AProp/).each { |lines| p lines }\n  }\n  #=> [\"Properties on '.':\\n\", \"  svn:ignore\\n\", \"  svk:merge\\n\"]\n  #   [\"Properties on 'goruby.c':\\n\", \"  svn:eol-style\\n\"]\n  #   [\"Properties on 'complex.c':\\n\", \"  svn:mime-type\\n\", \"  svn:eol-style\\n\"]\n  #   [\"Properties on 'regparse.c':\\n\", \"  svn:eol-style\\n\"]\n  #   ...\n\nIf the block needs to maintain state over multiple elements,\nlocal variables can be used.\nFor example, three or more consecutive increasing numbers can be squashed\nas follows (see +chunk_while+ for a better way):\n\n  a = [0, 2, 3, 4, 6, 7, 9]\n  prev = a[0]\n  p a.slice_before { |e|\n    prev, prev2 = e, prev\n    prev2 + 1 != e\n  }.map { |es|\n    es.length <= 2 ? es.join(\",\") : \"#{es.first}-#{es.last}\"\n  }.join(\",\")\n  #=> \"0,2-4,6,7,9\"\n\nHowever local variables should be used carefully\nif the result enumerator is enumerated twice or more.\nThe local variables should be initialized for each enumeration.\nEnumerator.new can be used to do it.\n\n  # Word wrapping.  This assumes all characters have same width.\n  def wordwrap(words, maxwidth)\n    Enumerator.new {|y|\n      # cols is initialized in Enumerator.new.\n      cols = 0\n      words.slice_before { |w|\n        cols += 1 if cols != 0\n        cols += w.length\n        if maxwidth < cols\n          cols = w.length\n          true\n        else\n          false\n        end\n      }.each {|ws| y.yield ws }\n    }\n  end\n  text = (1..20).to_a.join(\" \")\n  enum = wordwrap(text.split(/\\s+/), 10)\n  puts \"-\"*10\n  enum.each { |ws| puts ws.join(\" \") } # first enumeration.\n  puts \"-\"*10\n  enum.each { |ws| puts ws.join(\" \") } # second enumeration generates same result as the first.\n  puts \"-\"*10\n  #=> ----------\n  #   1 2 3 4 5\n  #   6 7 8 9 10\n  #   11 12 13\n  #   14 15 16\n  #   17 18 19\n  #   20\n  #   ----------\n  #   1 2 3 4 5\n  #   6 7 8 9 10\n  #   11 12 13\n  #   14 15 16\n  #   17 18 19\n  #   20\n  #   ----------\n\nmbox contains series of mails which start with Unix From line.\nSo each mail can be extracted by slice before Unix From line.\n\n  # parse mbox\n  open(\"mbox\") { |f|\n    f.slice_before { |line|\n      line.start_with? \"From \"\n    }.each { |mail|\n      unix_from = mail.shift\n      i = mail.index(\"\\n\")\n      header = mail[0...i]\n      body = mail[(i+1)..-1]\n      body.pop if body.last == \"\\n\"\n      fields = header.slice_before { |line| !\" \\t\".include?(line[0]) }.to_a\n      p unix_from\n      pp fields\n      pp body\n    }\n  }\n\n  # split mails in mbox (slice before Unix From line after an empty line)\n  open(\"mbox\") { |f|\n    emp = true\n    f.slice_before { |line|\n      prevemp = emp\n      emp = line == \"\\n\"\n      prevemp && line.start_with?(\"From \")\n    }.each { |mail|\n      mail.pop if mail.last == \"\\n\"\n      pp mail\n    }\n  }","name":"slice_before","namespace":"Enumerable","path":"Enumerable#slice_before","type":"module_function","visibility":"public"},"Enumerable#slice_when":{"description":"Creates an enumerator for each chunked elements.\nThe beginnings of chunks are defined by the block.\n\nThis method split each chunk using adjacent elements,\n_elt_before_ and _elt_after_,\nin the receiver enumerator.\nThis method split chunks between _elt_before_ and _elt_after_ where\nthe block returns <code>true</code>.\n\nThe block is called the length of the receiver enumerator minus one.\n\nThe result enumerator yields the chunked elements as an array.\nSo +each+ method can be called as follows:\n\n  enum.slice_when { |elt_before, elt_after| bool }.each { |ary| ... }\n\nOther methods of the Enumerator class and Enumerable module,\nsuch as +to_a+, +map+, etc., are also usable.\n\nFor example, one-by-one increasing subsequence can be chunked as follows:\n\n  a = [1,2,4,9,10,11,12,15,16,19,20,21]\n  b = a.slice_when {|i, j| i+1 != j }\n  p b.to_a #=> [[1, 2], [4], [9, 10, 11, 12], [15, 16], [19, 20, 21]]\n  c = b.map {|a| a.length < 3 ? a : \"#{a.first}-#{a.last}\" }\n  p c #=> [[1, 2], [4], \"9-12\", [15, 16], \"19-21\"]\n  d = c.join(\",\")\n  p d #=> \"1,2,4,9-12,15,16,19-21\"\n\nNear elements (threshold: 6) in sorted array can be chunked as follows:\n\n  a = [3, 11, 14, 25, 28, 29, 29, 41, 55, 57]\n  p a.slice_when {|i, j| 6 < j - i }.to_a\n  #=> [[3], [11, 14], [25, 28, 29, 29], [41], [55, 57]]\n\nIncreasing (non-decreasing) subsequence can be chunked as follows:\n\n  a = [0, 9, 2, 2, 3, 2, 7, 5, 9, 5]\n  p a.slice_when {|i, j| i > j }.to_a\n  #=> [[0, 9], [2, 2, 3], [2, 7], [5, 9], [5]]\n\nAdjacent evens and odds can be chunked as follows:\n(Enumerable#chunk is another way to do it.)\n\n  a = [7, 5, 9, 2, 0, 7, 9, 4, 2, 0]\n  p a.slice_when {|i, j| i.even? != j.even? }.to_a\n  #=> [[7, 5, 9], [2, 0], [7, 9], [4, 2, 0]]\n\nParagraphs (non-empty lines with trailing empty lines) can be chunked as follows:\n(See Enumerable#chunk to ignore empty lines.)\n\n  lines = [\"foo\\n\", \"bar\\n\", \"\\n\", \"baz\\n\", \"qux\\n\"]\n  p lines.slice_when {|l1, l2| /\\A\\s*\\z/ =~ l1 && /\\S/ =~ l2 }.to_a\n  #=> [[\"foo\\n\", \"bar\\n\", \"\\n\"], [\"baz\\n\", \"qux\\n\"]]\n\nEnumerable#chunk_while does the same, except splitting when the block\nreturns <code>false</code> instead of <code>true</code>.","name":"slice_when","namespace":"Enumerable","path":"Enumerable#slice_when","type":"module_function","visibility":"public"},"Enumerable#sort":{"description":"Returns an array containing the items in <i>enum</i> sorted.\n\nComparisons for the sort will be done using the items' own\n<code><=></code> operator or using an optional code block.\n\nThe block must implement a comparison between +a+ and +b+ and return\nan integer less than 0 when +b+ follows +a+, +0+ when +a+ and +b+\nare equivalent, or an integer greater than 0 when +a+ follows +b+.\n\nThe result is not guaranteed to be stable.  When the comparison of two\nelements returns +0+, the order of the elements is unpredictable.\n\n   %w(rhea kea flea).sort           #=> [\"flea\", \"kea\", \"rhea\"]\n   (1..10).sort { |a, b| b <=> a }  #=> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\nSee also Enumerable#sort_by. It implements a Schwartzian transform\nwhich is useful when key computation or comparison is expensive.","name":"sort","namespace":"Enumerable","path":"Enumerable#sort","type":"module_function","visibility":"public"},"Enumerable#sort_by":{"description":"Sorts <i>enum</i> using a set of keys generated by mapping the\nvalues in <i>enum</i> through the given block.\n\nThe result is not guaranteed to be stable.  When two keys are equal,\nthe order of the corresponding elements is unpredictable.\n\nIf no block is given, an enumerator is returned instead.\n\n   %w{apple pear fig}.sort_by { |word| word.length }\n                 #=> [\"fig\", \"pear\", \"apple\"]\n\nThe current implementation of <code>sort_by</code> generates an\narray of tuples containing the original collection element and the\nmapped value. This makes <code>sort_by</code> fairly expensive when\nthe keysets are simple.\n\n   require 'benchmark'\n\n   a = (1..100000).map { rand(100000) }\n\n   Benchmark.bm(10) do |b|\n     b.report(\"Sort\")    { a.sort }\n     b.report(\"Sort by\") { a.sort_by { |a| a } }\n   end\n\n<em>produces:</em>\n\n   user     system      total        real\n   Sort        0.180000   0.000000   0.180000 (  0.175469)\n   Sort by     1.980000   0.040000   2.020000 (  2.013586)\n\nHowever, consider the case where comparing the keys is a non-trivial\noperation. The following code sorts some files on modification time\nusing the basic <code>sort</code> method.\n\n   files = Dir[\"*\"]\n   sorted = files.sort { |a, b| File.new(a).mtime <=> File.new(b).mtime }\n   sorted   #=> [\"mon\", \"tues\", \"wed\", \"thurs\"]\n\nThis sort is inefficient: it generates two new <code>File</code>\nobjects during every comparison. A slightly better technique is to\nuse the <code>Kernel#test</code> method to generate the modification\ntimes directly.\n\n   files = Dir[\"*\"]\n   sorted = files.sort { |a, b|\n     test(?M, a) <=> test(?M, b)\n   }\n   sorted   #=> [\"mon\", \"tues\", \"wed\", \"thurs\"]\n\nThis still generates many unnecessary <code>Time</code> objects. A\nmore efficient technique is to cache the sort keys (modification\ntimes in this case) before the sort. Perl users often call this\napproach a Schwartzian transform, after Randal Schwartz. We\nconstruct a temporary array, where each element is an array\ncontaining our sort key along with the filename. We sort this array,\nand then extract the filename from the result.\n\n   sorted = Dir[\"*\"].collect { |f|\n      [test(?M, f), f]\n   }.sort.collect { |f| f[1] }\n   sorted   #=> [\"mon\", \"tues\", \"wed\", \"thurs\"]\n\nThis is exactly what <code>sort_by</code> does internally.\n\n   sorted = Dir[\"*\"].sort_by { |f| test(?M, f) }\n   sorted   #=> [\"mon\", \"tues\", \"wed\", \"thurs\"]","name":"sort_by","namespace":"Enumerable","path":"Enumerable#sort_by","type":"module_function","visibility":"public"},"Enumerable#sum":{"description":"Returns the sum of elements in an Enumerable.\n\nIf a block is given, the block is applied to each element\nbefore addition.\n\nIf <i>enum</i> is empty, it returns <i>init</i>.\n\nFor example:\n\n  { 1 => 10, 2 => 20 }.sum {|k, v| k * v }  #=> 50\n  (1..10).sum                               #=> 55\n  (1..10).sum {|v| v * 2 }                  #=> 110\n  [Object.new].each.sum                     #=> TypeError\n\nThis method can be used for non-numeric objects by\nexplicit <i>init</i> argument.\n\n  { 1 => 10, 2 => 20 }.sum([])                   #=> [1, 10, 2, 20]\n  \"a\\nb\\nc\".each_line.lazy.map(&:chomp).sum(\"\")  #=> \"abc\"\n\nEnumerable#sum method may not respect method redefinition of \"+\"\nmethods such as Integer#+.","name":"sum","namespace":"Enumerable","path":"Enumerable#sum","type":"module_function","visibility":"public"},"Enumerable#take":{"description":"Returns first n elements from <i>enum</i>.\n\n   a = [1, 2, 3, 4, 5, 0]\n   a.take(3)             #=> [1, 2, 3]\n   a.take(30)            #=> [1, 2, 3, 4, 5, 0]","name":"take","namespace":"Enumerable","path":"Enumerable#take","type":"module_function","visibility":"public"},"Enumerable#take_while":{"description":"Passes elements to the block until the block returns +nil+ or +false+,\nthen stops iterating and returns an array of all prior elements.\n\nIf no block is given, an enumerator is returned instead.\n\n   a = [1, 2, 3, 4, 5, 0]\n   a.take_while { |i| i < 3 }   #=> [1, 2]","name":"take_while","namespace":"Enumerable","path":"Enumerable#take_while","type":"module_function","visibility":"public"},"Enumerable#to_a":{"description":"Returns an array containing the items in <i>enum</i>.\n\n   (1..7).to_a                       #=> [1, 2, 3, 4, 5, 6, 7]\n   { 'a'=>1, 'b'=>2, 'c'=>3 }.to_a   #=> [[\"a\", 1], [\"b\", 2], [\"c\", 3]]\n\n   require 'prime'\n   Prime.entries 10                  #=> [2, 3, 5, 7]","name":"to_a","namespace":"Enumerable","path":"Enumerable#to_a","type":"module_function","visibility":"public"},"Enumerable#to_h":{"description":"Returns the result of interpreting <i>enum</i> as a list of\n<tt>[key, value]</tt> pairs.\n\n   %i[hello world].each_with_index.to_h\n     # => {:hello => 0, :world => 1}","name":"to_h","namespace":"Enumerable","path":"Enumerable#to_h","type":"module_function","visibility":"public"},"Enumerable#uniq":{"description":"Returns a new array by removing duplicate values in +self+.\n\nSee also Array#uniq.","name":"uniq","namespace":"Enumerable","path":"Enumerable#uniq","type":"module_function","visibility":"public"},"Enumerable#zip":{"description":"Takes one element from <i>enum</i> and merges corresponding\nelements from each <i>args</i>.  This generates a sequence of\n<em>n</em>-element arrays, where <em>n</em> is one more than the\ncount of arguments.  The length of the resulting sequence will be\n<code>enum#size</code>.  If the size of any argument is less than\n<code>enum#size</code>, <code>nil</code> values are supplied. If\na block is given, it is invoked for each output array, otherwise\nan array of arrays is returned.\n\n   a = [ 4, 5, 6 ]\n   b = [ 7, 8, 9 ]\n\n   a.zip(b)                 #=> [[4, 7], [5, 8], [6, 9]]\n   [1, 2, 3].zip(a, b)      #=> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n   [1, 2].zip(a, b)         #=> [[1, 4, 7], [2, 5, 8]]\n   a.zip([1, 2], [8])       #=> [[4, 1, 8], [5, 2, nil], [6, nil, nil]]\n\n   c = []\n   a.zip(b) { |x, y| c << x + y }  #=> nil\n   c                               #=> [11, 13, 15]","name":"zip","namespace":"Enumerable","path":"Enumerable#zip","type":"module_function","visibility":"public"},"Enumerator":{"description":"A class which allows both internal and external iteration.\n\nAn Enumerator can be created by the following methods.\n- Kernel#to_enum\n- Kernel#enum_for\n- Enumerator.new\n\nMost methods have two forms: a block form where the contents\nare evaluated for each item in the enumeration, and a non-block form\nwhich returns a new Enumerator wrapping the iteration.\n\n  enumerator = %w(one two three).each\n  puts enumerator.class # => Enumerator\n\n  enumerator.each_with_object(\"foo\") do |item, obj|\n    puts \"#{obj}: #{item}\"\n  end\n\n  # foo: one\n  # foo: two\n  # foo: three\n\n  enum_with_obj = enumerator.each_with_object(\"foo\")\n  puts enum_with_obj.class # => Enumerator\n\n  enum_with_obj.each do |item, obj|\n    puts \"#{obj}: #{item}\"\n  end\n\n  # foo: one\n  # foo: two\n  # foo: three\n\nThis allows you to chain Enumerators together.  For example, you\ncan map a list's elements to strings containing the index\nand the element as a string via:\n\n  puts %w[foo bar baz].map.with_index { |w, i| \"#{i}:#{w}\" }\n  # => [\"0:foo\", \"1:bar\", \"2:baz\"]\n\nAn Enumerator can also be used as an external iterator.\nFor example, Enumerator#next returns the next value of the iterator\nor raises StopIteration if the Enumerator is at the end.\n\n  e = [1,2,3].each   # returns an enumerator object.\n  puts e.next   # => 1\n  puts e.next   # => 2\n  puts e.next   # => 3\n  puts e.next   # raises StopIteration\n\nYou can use this to implement an internal iterator as follows:\n\n  def ext_each(e)\n    while true\n      begin\n        vs = e.next_values\n      rescue StopIteration\n        return $!.result\n      end\n      y = yield(*vs)\n      e.feed y\n    end\n  end\n\n  o = Object.new\n\n  def o.each\n    puts yield\n    puts yield(1)\n    puts yield(1, 2)\n    3\n  end\n\n  # use o.each as an internal iterator directly.\n  puts o.each {|*x| puts x; [:b, *x] }\n  # => [], [:b], [1], [:b, 1], [1, 2], [:b, 1, 2], 3\n\n  # convert o.each to an external iterator for\n  # implementing an internal iterator.\n  puts ext_each(o.to_enum) {|*x| puts x; [:b, *x] }\n  # => [], [:b], [1], [:b, 1], [1, 2], [:b, 1, 2], 3","name":"Enumerator","namespace":"","path":"Enumerator","type":"class","visibility":"public"},"Enumerator#each":{"description":"Iterates over the block according to how this Enumerator was constructed.\nIf no block and no arguments are given, returns self.\n\n=== Examples\n\n  \"Hello, world!\".scan(/\\w+/)                     #=> [\"Hello\", \"world\"]\n  \"Hello, world!\".to_enum(:scan, /\\w+/).to_a      #=> [\"Hello\", \"world\"]\n  \"Hello, world!\".to_enum(:scan).each(/\\w+/).to_a #=> [\"Hello\", \"world\"]\n\n  obj = Object.new\n\n  def obj.each_arg(a, b=:b, *rest)\n    yield a\n    yield b\n    yield rest\n    :method_returned\n  end\n\n  enum = obj.to_enum :each_arg, :a, :x\n\n  enum.each.to_a                  #=> [:a, :x, []]\n  enum.each.equal?(enum)          #=> true\n  enum.each { |elm| elm }         #=> :method_returned\n\n  enum.each(:y, :z).to_a          #=> [:a, :x, [:y, :z]]\n  enum.each(:y, :z).equal?(enum)  #=> false\n  enum.each(:y, :z) { |elm| elm } #=> :method_returned","name":"each","namespace":"Enumerator","path":"Enumerator#each","type":"instance_method","visibility":"public"},"Enumerator#each_with_index":{"description":"Same as Enumerator#with_index(0), i.e. there is no starting offset.\n\nIf no block is given, a new Enumerator is returned that includes the index.","name":"each_with_index","namespace":"Enumerator","path":"Enumerator#each_with_index","type":"instance_method","visibility":"public"},"Enumerator#each_with_object":{"description":"Iterates the given block for each element with an arbitrary object, +obj+,\nand returns +obj+\n\nIf no block is given, returns a new Enumerator.\n\n=== Example\n\n  to_three = Enumerator.new do |y|\n    3.times do |x|\n      y << x\n    end\n  end\n\n  to_three_with_string = to_three.with_object(\"foo\")\n  to_three_with_string.each do |x,string|\n    puts \"#{string}: #{x}\"\n  end\n\n  # => foo:0\n  # => foo:1\n  # => foo:2","name":"each_with_object","namespace":"Enumerator","path":"Enumerator#each_with_object","type":"instance_method","visibility":"public"},"Enumerator#feed":{"description":"Sets the value to be returned by the next yield inside +e+.\n\nIf the value is not set, the yield returns nil.\n\nThis value is cleared after being yielded.\n\n  # Array#map passes the array's elements to \"yield\" and collects the\n  # results of \"yield\" as an array.\n  # Following example shows that \"next\" returns the passed elements and\n  # values passed to \"feed\" are collected as an array which can be\n  # obtained by StopIteration#result.\n  e = [1,2,3].map\n  p e.next           #=> 1\n  e.feed \"a\"\n  p e.next           #=> 2\n  e.feed \"b\"\n  p e.next           #=> 3\n  e.feed \"c\"\n  begin\n    e.next\n  rescue StopIteration\n    p $!.result      #=> [\"a\", \"b\", \"c\"]\n  end\n\n  o = Object.new\n  def o.each\n    x = yield         # (2) blocks\n    p x               # (5) => \"foo\"\n    x = yield         # (6) blocks\n    p x               # (8) => nil\n    x = yield         # (9) blocks\n    p x               # not reached w/o another e.next\n  end\n\n  e = o.to_enum\n  e.next              # (1)\n  e.feed \"foo\"        # (3)\n  e.next              # (4)\n  e.next              # (7)\n                      # (10)","name":"feed","namespace":"Enumerator","path":"Enumerator#feed","type":"instance_method","visibility":"public"},"Enumerator#initialize":{"description":"Creates a new Enumerator object, which can be used as an\nEnumerable.\n\nIn the first form, iteration is defined by the given block, in\nwhich a \"yielder\" object, given as block parameter, can be used to\nyield a value by calling the +yield+ method (aliased as +<<+):\n\n  fib = Enumerator.new do |y|\n    a = b = 1\n    loop do\n      y << a\n      a, b = b, a + b\n    end\n  end\n\n  p fib.take(10) # => [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\nThe optional parameter can be used to specify how to calculate the size\nin a lazy fashion (see Enumerator#size). It can either be a value or\na callable object.\n\nIn the second, deprecated, form, a generated Enumerator iterates over the\ngiven object using the given method with the given arguments passed.\n\nUse of this form is discouraged.  Use Kernel#enum_for or Kernel#to_enum\ninstead.\n\n  e = Enumerator.new(ObjectSpace, :each_object)\n      #-> ObjectSpace.enum_for(:each_object)\n\n  e.select { |obj| obj.is_a?(Class) }  #=> array of all classes","name":"initialize","namespace":"Enumerator","path":"Enumerator#initialize","type":"instance_method","visibility":"public"},"Enumerator#initialize_copy":{"description":":nodoc:","name":"initialize_copy","namespace":"Enumerator","path":"Enumerator#initialize_copy","type":"instance_method","visibility":"public"},"Enumerator#inspect":{"description":"Creates a printable version of <i>e</i>.","name":"inspect","namespace":"Enumerator","path":"Enumerator#inspect","type":"instance_method","visibility":"public"},"Enumerator#next":{"description":"Returns the next object in the enumerator, and move the internal position\nforward.  When the position reached at the end, StopIteration is raised.\n\n=== Example\n\n  a = [1,2,3]\n  e = a.to_enum\n  p e.next   #=> 1\n  p e.next   #=> 2\n  p e.next   #=> 3\n  p e.next   #raises StopIteration\n\nNote that enumeration sequence by +next+ does not affect other non-external\nenumeration methods, unless the underlying iteration methods itself has\nside-effect, e.g. IO#each_line.","name":"next","namespace":"Enumerator","path":"Enumerator#next","type":"instance_method","visibility":"public"},"Enumerator#next_values":{"description":"Returns the next object as an array in the enumerator, and move the\ninternal position forward.  When the position reached at the end,\nStopIteration is raised.\n\nThis method can be used to distinguish <code>yield</code> and <code>yield\nnil</code>.\n\n=== Example\n\n  o = Object.new\n  def o.each\n    yield\n    yield 1\n    yield 1, 2\n    yield nil\n    yield [1, 2]\n  end\n  e = o.to_enum\n  p e.next_values\n  p e.next_values\n  p e.next_values\n  p e.next_values\n  p e.next_values\n  e = o.to_enum\n  p e.next\n  p e.next\n  p e.next\n  p e.next\n  p e.next\n\n  ## yield args       next_values      next\n  #  yield            []               nil\n  #  yield 1          [1]              1\n  #  yield 1, 2       [1, 2]           [1, 2]\n  #  yield nil        [nil]            nil\n  #  yield [1, 2]     [[1, 2]]         [1, 2]\n\nNote that +next_values+ does not affect other non-external enumeration\nmethods unless underlying iteration method itself has side-effect, e.g.\nIO#each_line.","name":"next_values","namespace":"Enumerator","path":"Enumerator#next_values","type":"instance_method","visibility":"public"},"Enumerator#peek":{"description":"Returns the next object in the enumerator, but doesn't move the internal\nposition forward.  If the position is already at the end, StopIteration\nis raised.\n\n=== Example\n\n  a = [1,2,3]\n  e = a.to_enum\n  p e.next   #=> 1\n  p e.peek   #=> 2\n  p e.peek   #=> 2\n  p e.peek   #=> 2\n  p e.next   #=> 2\n  p e.next   #=> 3\n  p e.peek   #raises StopIteration","name":"peek","namespace":"Enumerator","path":"Enumerator#peek","type":"instance_method","visibility":"public"},"Enumerator#peek_values":{"description":"Returns the next object as an array, similar to Enumerator#next_values, but\ndoesn't move the internal position forward.  If the position is already at\nthe end, StopIteration is raised.\n\n=== Example\n\n  o = Object.new\n  def o.each\n    yield\n    yield 1\n    yield 1, 2\n  end\n  e = o.to_enum\n  p e.peek_values    #=> []\n  e.next\n  p e.peek_values    #=> [1]\n  p e.peek_values    #=> [1]\n  e.next\n  p e.peek_values    #=> [1, 2]\n  e.next\n  p e.peek_values    # raises StopIteration","name":"peek_values","namespace":"Enumerator","path":"Enumerator#peek_values","type":"instance_method","visibility":"public"},"Enumerator#rewind":{"description":"Rewinds the enumeration sequence to the beginning.\n\nIf the enclosed object responds to a \"rewind\" method, it is called.","name":"rewind","namespace":"Enumerator","path":"Enumerator#rewind","type":"instance_method","visibility":"public"},"Enumerator#size":{"description":"Returns the size of the enumerator, or +nil+ if it can't be calculated lazily.\n\n  (1..100).to_a.permutation(4).size # => 94109400\n  loop.size # => Float::INFINITY\n  (1..100).drop_while.size # => nil","name":"size","namespace":"Enumerator","path":"Enumerator#size","type":"instance_method","visibility":"public"},"Enumerator#with_index":{"description":"Iterates the given block for each element with an index, which\nstarts from +offset+.  If no block is given, returns a new Enumerator\nthat includes the index, starting from +offset+\n\n+offset+:: the starting index to use","name":"with_index","namespace":"Enumerator","path":"Enumerator#with_index","type":"instance_method","visibility":"public"},"Enumerator#with_object":{"description":"Iterates the given block for each element with an arbitrary object, +obj+,\nand returns +obj+\n\nIf no block is given, returns a new Enumerator.\n\n=== Example\n\n  to_three = Enumerator.new do |y|\n    3.times do |x|\n      y << x\n    end\n  end\n\n  to_three_with_string = to_three.with_object(\"foo\")\n  to_three_with_string.each do |x,string|\n    puts \"#{string}: #{x}\"\n  end\n\n  # => foo:0\n  # => foo:1\n  # => foo:2","name":"with_object","namespace":"Enumerator","path":"Enumerator#with_object","type":"instance_method","visibility":"public"},"Enumerator::Generator":{"description":"","name":"Generator","namespace":"Enumerator","path":"Enumerator::Generator","type":"class","visibility":"public"},"Enumerator::Generator#each":{"description":":nodoc:","name":"each","namespace":"Enumerator::Generator","path":"Enumerator::Generator#each","type":"instance_method","visibility":"public"},"Enumerator::Generator#initialize":{"description":":nodoc:","name":"initialize","namespace":"Enumerator::Generator","path":"Enumerator::Generator#initialize","type":"instance_method","visibility":"public"},"Enumerator::Generator#initialize_copy":{"description":":nodoc:","name":"initialize_copy","namespace":"Enumerator::Generator","path":"Enumerator::Generator#initialize_copy","type":"instance_method","visibility":"public"},"Enumerator::Lazy":{"description":"","name":"Lazy","namespace":"Enumerator","path":"Enumerator::Lazy","type":"class","visibility":"public"},"Enumerator::Lazy#chunk":{"description":"","name":"chunk","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#chunk","type":"instance_method","visibility":"public"},"Enumerator::Lazy#chunk_while":{"description":"","name":"chunk_while","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#chunk_while","type":"instance_method","visibility":"public"},"Enumerator::Lazy#collect":{"description":"","name":"collect","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#collect","type":"instance_method","visibility":"public"},"Enumerator::Lazy#collect_concat":{"description":"Returns a new lazy enumerator with the concatenated results of running\n<i>block</i> once for every element in <i>lazy</i>.\n\n  [\"foo\", \"bar\"].lazy.flat_map {|i| i.each_char.lazy}.force\n  #=> [\"f\", \"o\", \"o\", \"b\", \"a\", \"r\"]\n\nA value <i>x</i> returned by <i>block</i> is decomposed if either of\nthe following conditions is true:\n\n  a) <i>x</i> responds to both each and force, which means that\n     <i>x</i> is a lazy enumerator.\n  b) <i>x</i> is an array or responds to to_ary.\n\nOtherwise, <i>x</i> is contained as-is in the return value.\n\n  [{a:1}, {b:2}].lazy.flat_map {|i| i}.force\n  #=> [{:a=>1}, {:b=>2}]","name":"collect_concat","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#collect_concat","type":"instance_method","visibility":"public"},"Enumerator::Lazy#drop":{"description":"","name":"drop","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#drop","type":"instance_method","visibility":"public"},"Enumerator::Lazy#drop_while":{"description":"","name":"drop_while","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#drop_while","type":"instance_method","visibility":"public"},"Enumerator::Lazy#enum_for":{"description":"Similar to Kernel#to_enum, except it returns a lazy enumerator.\nThis makes it easy to define Enumerable methods that will\nnaturally remain lazy if called from a lazy enumerator.\n\nFor example, continuing from the example in Kernel#to_enum:\n\n  # See Kernel#to_enum for the definition of repeat\n  r = 1..Float::INFINITY\n  r.repeat(2).first(5) # => [1, 1, 2, 2, 3]\n  r.repeat(2).class # => Enumerator\n  r.repeat(2).map{|n| n ** 2}.first(5) # => endless loop!\n  # works naturally on lazy enumerator:\n  r.lazy.repeat(2).class # => Enumerator::Lazy\n  r.lazy.repeat(2).map{|n| n ** 2}.first(5) # => [1, 1, 4, 4, 9]","name":"enum_for","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#enum_for","type":"instance_method","visibility":"public"},"Enumerator::Lazy#find_all":{"description":"","name":"find_all","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#find_all","type":"instance_method","visibility":"public"},"Enumerator::Lazy#flat_map":{"description":"Returns a new lazy enumerator with the concatenated results of running\n<i>block</i> once for every element in <i>lazy</i>.\n\n  [\"foo\", \"bar\"].lazy.flat_map {|i| i.each_char.lazy}.force\n  #=> [\"f\", \"o\", \"o\", \"b\", \"a\", \"r\"]\n\nA value <i>x</i> returned by <i>block</i> is decomposed if either of\nthe following conditions is true:\n\n  a) <i>x</i> responds to both each and force, which means that\n     <i>x</i> is a lazy enumerator.\n  b) <i>x</i> is an array or responds to to_ary.\n\nOtherwise, <i>x</i> is contained as-is in the return value.\n\n  [{a:1}, {b:2}].lazy.flat_map {|i| i}.force\n  #=> [{:a=>1}, {:b=>2}]","name":"flat_map","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#flat_map","type":"instance_method","visibility":"public"},"Enumerator::Lazy#force":{"description":"","name":"force","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#force","type":"instance_method","visibility":"public"},"Enumerator::Lazy#grep":{"description":"","name":"grep","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#grep","type":"instance_method","visibility":"public"},"Enumerator::Lazy#grep_v":{"description":"","name":"grep_v","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#grep_v","type":"instance_method","visibility":"public"},"Enumerator::Lazy#initialize":{"description":"Creates a new Lazy enumerator. When the enumerator is actually enumerated\n(e.g. by calling #force), +obj+ will be enumerated and each value passed\nto the given block. The block can yield values back using +yielder+.\nFor example, to create a method +filter_map+ in both lazy and\nnon-lazy fashions:\n\n  module Enumerable\n    def filter_map(&block)\n      map(&block).compact\n    end\n  end\n\n  class Enumerator::Lazy\n    def filter_map\n      Lazy.new(self) do |yielder, *values|\n        result = yield *values\n        yielder << result if result\n      end\n    end\n  end\n\n  (1..Float::INFINITY).lazy.filter_map{|i| i*i if i.even?}.first(5)\n      # => [4, 16, 36, 64, 100]","name":"initialize","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#initialize","type":"instance_method","visibility":"public"},"Enumerator::Lazy#lazy":{"description":"","name":"lazy","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#lazy","type":"instance_method","visibility":"public"},"Enumerator::Lazy#map":{"description":"","name":"map","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#map","type":"instance_method","visibility":"public"},"Enumerator::Lazy#reject":{"description":"","name":"reject","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#reject","type":"instance_method","visibility":"public"},"Enumerator::Lazy#select":{"description":"","name":"select","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#select","type":"instance_method","visibility":"public"},"Enumerator::Lazy#slice_after":{"description":"","name":"slice_after","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#slice_after","type":"instance_method","visibility":"public"},"Enumerator::Lazy#slice_before":{"description":"","name":"slice_before","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#slice_before","type":"instance_method","visibility":"public"},"Enumerator::Lazy#slice_when":{"description":"","name":"slice_when","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#slice_when","type":"instance_method","visibility":"public"},"Enumerator::Lazy#take":{"description":"","name":"take","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#take","type":"instance_method","visibility":"public"},"Enumerator::Lazy#take_while":{"description":"","name":"take_while","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#take_while","type":"instance_method","visibility":"public"},"Enumerator::Lazy#to_enum":{"description":"Similar to Kernel#to_enum, except it returns a lazy enumerator.\nThis makes it easy to define Enumerable methods that will\nnaturally remain lazy if called from a lazy enumerator.\n\nFor example, continuing from the example in Kernel#to_enum:\n\n  # See Kernel#to_enum for the definition of repeat\n  r = 1..Float::INFINITY\n  r.repeat(2).first(5) # => [1, 1, 2, 2, 3]\n  r.repeat(2).class # => Enumerator\n  r.repeat(2).map{|n| n ** 2}.first(5) # => endless loop!\n  # works naturally on lazy enumerator:\n  r.lazy.repeat(2).class # => Enumerator::Lazy\n  r.lazy.repeat(2).map{|n| n ** 2}.first(5) # => [1, 1, 4, 4, 9]","name":"to_enum","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#to_enum","type":"instance_method","visibility":"public"},"Enumerator::Lazy#uniq":{"description":"","name":"uniq","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#uniq","type":"instance_method","visibility":"public"},"Enumerator::Lazy#zip":{"description":"","name":"zip","namespace":"Enumerator::Lazy","path":"Enumerator::Lazy#zip","type":"instance_method","visibility":"public"},"Enumerator::Yielder":{"description":"","name":"Yielder","namespace":"Enumerator","path":"Enumerator::Yielder","type":"class","visibility":"public"},"Enumerator::Yielder#<<":{"description":":nodoc:","name":"<<","namespace":"Enumerator::Yielder","path":"Enumerator::Yielder#<<","type":"instance_method","visibility":"public"},"Enumerator::Yielder#initialize":{"description":":nodoc:","name":"initialize","namespace":"Enumerator::Yielder","path":"Enumerator::Yielder#initialize","type":"instance_method","visibility":"public"},"Enumerator::Yielder#yield":{"description":":nodoc:","name":"yield","namespace":"Enumerator::Yielder","path":"Enumerator::Yielder#yield","type":"instance_method","visibility":"public"},"StopIteration":{"description":"Raised to stop the iteration, in particular by Enumerator#next. It is\nrescued by Kernel#loop.\n\n  loop do\n    puts \"Hello\"\n    raise StopIteration\n    puts \"World\"\n  end\n  puts \"Done!\"\n\n<em>produces:</em>\n\n  Hello\n  Done!","name":"StopIteration","namespace":"","path":"StopIteration","type":"class","visibility":"public"},"StopIteration#result":{"description":"Returns the return value of the iterator.\n\n  o = Object.new\n  def o.each\n    yield 1\n    yield 2\n    yield 3\n    100\n  end\n\n  e = o.to_enum\n\n  puts e.next                   #=> 1\n  puts e.next                   #=> 2\n  puts e.next                   #=> 3\n\n  begin\n    e.next\n  rescue StopIteration => ex\n    puts ex.result              #=> 100\n  end","name":"result","namespace":"StopIteration","path":"StopIteration#result","type":"instance_method","visibility":"public"},"Warning":{"description":"The Warning module contains a single method named #warn, and the\nmodule extends itself, making <code>Warning.warn</code> available.\nWarning.warn is called for all warnings issued by Ruby.\nBy default, warnings are printed to $stderr.\n\nBy overriding Warning.warn, you can change how warnings are\nhandled by Ruby, either filtering some warnings, and/or outputting\nwarnings somewhere other than $stderr.  When Warning.warn is\noverridden, super can be called to get the default behavior of\nprinting the warning to $stderr.","name":"Warning","namespace":"","path":"Warning","type":"module","visibility":"public"},"Warning#warn":{"description":"Writes warning message +msg+ to $stderr, followed by a newline\nif the message does not end in a newline.  This method is called\nby Ruby for all emitted warnings.","name":"warn","namespace":"Warning","path":"Warning#warn","type":"module_function","visibility":"public"},"Warning::buffer":{"description":"","name":"buffer","namespace":"Warning","path":"Warning::buffer","type":"class","visibility":"public"},"Warning::buffer#write":{"description":"","name":"write","namespace":"Warning::buffer","path":"Warning::buffer#write","type":"instance_method","visibility":"public"},"Errno":{"description":"Ruby exception objects are subclasses of <code>Exception</code>.\nHowever, operating systems typically report errors using plain\nintegers. Module <code>Errno</code> is created dynamically to map\nthese operating system errors to Ruby classes, with each error\nnumber generating its own subclass of <code>SystemCallError</code>.\nAs the subclass is created in module <code>Errno</code>, its name\nwill start <code>Errno::</code>.\n\nThe names of the <code>Errno::</code> classes depend on\nthe environment in which Ruby runs. On a typical Unix or Windows\nplatform, there are <code>Errno</code> classes such as\n<code>Errno::EACCES</code>, <code>Errno::EAGAIN</code>,\n<code>Errno::EINTR</code>, and so on.\n\nThe integer operating system error number corresponding to a\nparticular error is available as the class constant\n<code>Errno::</code><em>error</em><code>::Errno</code>.\n\n   Errno::EACCES::Errno   #=> 13\n   Errno::EAGAIN::Errno   #=> 11\n   Errno::EINTR::Errno    #=> 4\n\nThe full list of operating system errors on your particular platform\nare available as the constants of <code>Errno</code>.\n\n   Errno.constants   #=> :E2BIG, :EACCES, :EADDRINUSE, :EADDRNOTAVAIL, ...","name":"Errno","namespace":"","path":"Errno","type":"module","visibility":"public"},"StandardError":{"description":"The most standard error types are subclasses of StandardError. A\nrescue clause without an explicit Exception class will rescue all\nStandardErrors (and only those).\n\n   def foo\n     raise \"Oups\"\n   end\n   foo rescue \"Hello\"   #=> \"Hello\"\n\nOn the other hand:\n\n   require 'does/not/exist' rescue \"Hi\"\n\n<em>raises the exception:</em>\n\n   LoadError: no such file to load -- does/not/exist","name":"StandardError","namespace":"","path":"StandardError","type":"class","visibility":"public"},"SystemExit":{"description":"Raised by +exit+ to initiate the termination of the script.","name":"SystemExit","namespace":"","path":"SystemExit","type":"class","visibility":"public"},"SystemExit#initialize":{"description":"Create a new +SystemExit+ exception with the given status and message.\nStatus is true, false, or an integer.\nIf status is not given, true is used.","name":"initialize","namespace":"SystemExit","path":"SystemExit#initialize","type":"instance_method","visibility":"public"},"SystemExit#status":{"description":"Return the status value associated with this system exit.","name":"status","namespace":"SystemExit","path":"SystemExit#status","type":"instance_method","visibility":"public"},"SystemExit#success?":{"description":"Returns +true+ if exiting successful, +false+ if not.","name":"success?","namespace":"SystemExit","path":"SystemExit#success?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"SignalException":{"description":"Raised when a signal is received.\n\n   begin\n     Process.kill('HUP',Process.pid)\n     sleep # wait for receiver to handle signal sent by Process.kill\n   rescue SignalException => e\n     puts \"received Exception #{e}\"\n   end\n\n<em>produces:</em>\n\n   received Exception SIGHUP","name":"SignalException","namespace":"","path":"SignalException","type":"class","visibility":"public"},"SignalException#initialize":{"description":"Construct a new SignalException object.  +sig_name+ should be a known\n signal name.","name":"initialize","namespace":"SignalException","path":"SignalException#initialize","type":"instance_method","visibility":"public"},"SignalException#signo":{"description":"Returns a signal number.","name":"signo","namespace":"SignalException","path":"SignalException#signo","type":"instance_method","visibility":"public"},"Interrupt":{"description":"Raised with the interrupt signal is received, typically because the\nuser pressed on Control-C (on most posix platforms). As such, it is a\nsubclass of +SignalException+.\n\n   begin\n     puts \"Press ctrl-C when you get bored\"\n     loop {}\n   rescue Interrupt => e\n     puts \"Note: You will typically use Signal.trap instead.\"\n   end\n\n<em>produces:</em>\n\n   Press ctrl-C when you get bored\n\n<em>then waits until it is interrupted with Control-C and then prints:</em>\n\n   Note: You will typically use Signal.trap instead.","name":"Interrupt","namespace":"","path":"Interrupt","type":"class","visibility":"public"},"Interrupt#initialize":{"description":":nodoc:","name":"initialize","namespace":"Interrupt","path":"Interrupt#initialize","type":"instance_method","visibility":"public"},"TypeError":{"description":"Raised when encountering an object that is not of the expected type.\n\n   [1, 2, 3].first(\"two\")\n\n<em>raises the exception:</em>\n\n   TypeError: no implicit conversion of String into Integer","name":"TypeError","namespace":"","path":"TypeError","type":"class","visibility":"public"},"ArgumentError":{"description":"Raised when the arguments are wrong and there isn't a more specific\nException class.\n\nEx: passing the wrong number of arguments\n\n   [1, 2, 3].first(4, 5)\n\n<em>raises the exception:</em>\n\n   ArgumentError: wrong number of arguments (given 2, expected 1)\n\nEx: passing an argument that is not acceptable:\n\n   [1, 2, 3].first(-4)\n\n<em>raises the exception:</em>\n\n   ArgumentError: negative array size","name":"ArgumentError","namespace":"","path":"ArgumentError","type":"class","visibility":"public"},"IndexError":{"description":"Raised when the given index is invalid.\n\n   a = [:foo, :bar]\n   a.fetch(0)   #=> :foo\n   a[4]         #=> nil\n   a.fetch(4)   #=> IndexError: index 4 outside of array bounds: -2...2","name":"IndexError","namespace":"","path":"IndexError","type":"class","visibility":"public"},"KeyError":{"description":"Raised when the specified key is not found. It is a subclass of\nIndexError.\n\n   h = {\"foo\" => :bar}\n   h.fetch(\"foo\") #=> :bar\n   h.fetch(\"baz\") #=> KeyError: key not found: \"baz\"","name":"KeyError","namespace":"","path":"KeyError","type":"class","visibility":"public"},"KeyError#key":{"description":"Return the key caused this KeyError exception.","name":"key","namespace":"KeyError","path":"KeyError#key","type":"instance_method","visibility":"public"},"KeyError#receiver":{"description":"Return the receiver associated with this KeyError exception.","name":"receiver","namespace":"KeyError","path":"KeyError#receiver","type":"instance_method","visibility":"public"},"RangeError":{"description":"Raised when a given numerical value is out of range.\n\n   [1, 2, 3].drop(1 << 100)\n\n<em>raises the exception:</em>\n\n   RangeError: bignum too big to convert into `long'","name":"RangeError","namespace":"","path":"RangeError","type":"class","visibility":"public"},"ScriptError":{"description":"ScriptError is the superclass for errors raised when a script\ncan not be executed because of a +LoadError+,\n+NotImplementedError+ or a +SyntaxError+. Note these type of\n+ScriptErrors+ are not +StandardError+ and will not be\nrescued unless it is specified explicitly (or its ancestor\n+Exception+).","name":"ScriptError","namespace":"","path":"ScriptError","type":"class","visibility":"public"},"SyntaxError":{"description":"Raised when encountering Ruby code with an invalid syntax.\n\n   eval(\"1+1=2\")\n\n<em>raises the exception:</em>\n\n   SyntaxError: (eval):1: syntax error, unexpected '=', expecting $end","name":"SyntaxError","namespace":"","path":"SyntaxError","type":"class","visibility":"public"},"SyntaxError#initialize":{"description":"Construct a SyntaxError exception.","name":"initialize","namespace":"SyntaxError","path":"SyntaxError#initialize","type":"instance_method","visibility":"public"},"LoadError":{"description":"Raised when a file required (a Ruby script, extension library, ...)\nfails to load.\n\n   require 'this/file/does/not/exist'\n\n<em>raises the exception:</em>\n\n   LoadError: no such file to load -- this/file/does/not/exist","name":"LoadError","namespace":"","path":"LoadError","type":"class","visibility":"public"},"NotImplementedError":{"description":"Raised when a feature is not implemented on the current platform. For\nexample, methods depending on the +fsync+ or +fork+ system calls may\nraise this exception if the underlying operating system or Ruby\nruntime does not support them.\n\nNote that if +fork+ raises a +NotImplementedError+, then\n<code>respond_to?(:fork)</code> returns +false+.","name":"NotImplementedError","namespace":"","path":"NotImplementedError","type":"class","visibility":"public"},"NameError":{"description":"Raised when a given name is invalid or undefined.\n\n   puts foo\n\n<em>raises the exception:</em>\n\n   NameError: undefined local variable or method `foo' for main:Object\n\nSince constant names must start with a capital:\n\n   Integer.const_set :answer, 42\n\n<em>raises the exception:</em>\n\n   NameError: wrong constant name answer","name":"NameError","namespace":"","path":"NameError","type":"class","visibility":"public"},"NameError#initialize":{"description":"Construct a new NameError exception. If given the <i>name</i>\nparameter may subsequently be examined using the <code>NameError.name</code>\nmethod.","name":"initialize","namespace":"NameError","path":"NameError#initialize","type":"instance_method","visibility":"public"},"NameError#local_variables":{"description":"Return a list of the local variable names defined where this\nNameError exception was raised.\n\nInternal use only.","name":"local_variables","namespace":"NameError","path":"NameError#local_variables","type":"instance_method","visibility":"public"},"NameError#name":{"description":"Return the name associated with this NameError exception.","name":"name","namespace":"NameError","path":"NameError#name","type":"instance_method","visibility":"public"},"NameError#receiver":{"description":"Return the receiver associated with this NameError exception.","name":"receiver","namespace":"NameError","path":"NameError#receiver","type":"instance_method","visibility":"public"},"NameError::message":{"description":":nodoc:","name":"message","namespace":"NameError","path":"NameError::message","type":"class","visibility":"public"},"NameError::message#==":{"description":":nodoc:","name":"==","namespace":"NameError::message","path":"NameError::message#==","type":"instance_method","visibility":"public"},"NameError::message#_dump":{"description":":nodoc:","name":"_dump","namespace":"NameError::message","path":"NameError::message#_dump","type":"instance_method","visibility":"public"},"NameError::message#to_str":{"description":":nodoc:","name":"to_str","namespace":"NameError::message","path":"NameError::message#to_str","type":"instance_method","visibility":"public"},"NameError::message._load":{"description":":nodoc:","name":"_load","namespace":"NameError::message","path":"NameError::message._load","type":"class_method","visibility":"public"},"NoMethodError":{"description":"Raised when a method is called on a receiver which doesn't have it\ndefined and also fails to respond with +method_missing+.\n\n   \"hello\".to_ary\n\n<em>raises the exception:</em>\n\n   NoMethodError: undefined method `to_ary' for \"hello\":String","name":"NoMethodError","namespace":"","path":"NoMethodError","type":"class","visibility":"public"},"NoMethodError#args":{"description":"Return the arguments passed in as the third parameter to\nthe constructor.","name":"args","namespace":"NoMethodError","path":"NoMethodError#args","type":"instance_method","visibility":"public"},"NoMethodError#initialize":{"description":"Construct a NoMethodError exception for a method of the given name\ncalled with the given arguments. The name may be accessed using\nthe <code>#name</code> method on the resulting object, and the\narguments using the <code>#args</code> method.","name":"initialize","namespace":"NoMethodError","path":"NoMethodError#initialize","type":"instance_method","visibility":"public"},"NoMethodError#private_call?":{"description":"","name":"private_call?","namespace":"NoMethodError","path":"NoMethodError#private_call?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"FrozenError":{"description":"Raised when there is an attempt to modify a frozen object.\n\n   [1, 2, 3].freeze << 4\n\n<em>raises the exception:</em>\n\n   FrozenError: can't modify frozen Array","name":"FrozenError","namespace":"","path":"FrozenError","type":"class","visibility":"public"},"RuntimeError":{"description":"A generic error class raised when an invalid operation is attempted.\nKernel#raise will raise a RuntimeError if no Exception class is\nspecified.\n\n   raise \"ouch\"\n\n<em>raises the exception:</em>\n\n   RuntimeError: ouch","name":"RuntimeError","namespace":"","path":"RuntimeError","type":"class","visibility":"public"},"SecurityError":{"description":"Raised when attempting a potential unsafe operation, typically when\nthe $SAFE level is raised above 0.\n\n   foo = \"bar\"\n   proc = Proc.new do\n     $SAFE = 3\n     foo.untaint\n   end\n   proc.call\n\n<em>raises the exception:</em>\n\n   SecurityError: Insecure: Insecure operation `untaint' at level 3","name":"SecurityError","namespace":"","path":"SecurityError","type":"class","visibility":"public"},"NoMemoryError":{"description":"Raised when memory allocation fails.","name":"NoMemoryError","namespace":"","path":"NoMemoryError","type":"class","visibility":"public"},"SystemCallError":{"description":"SystemCallError is the base class for all low-level\nplatform-dependent errors.\n\nThe errors available on the current platform are subclasses of\nSystemCallError and are defined in the Errno module.\n\n   File.open(\"does/not/exist\")\n\n<em>raises the exception:</em>\n\n   Errno::ENOENT: No such file or directory - does/not/exist","name":"SystemCallError","namespace":"","path":"SystemCallError","type":"class","visibility":"public"},"SystemCallError#errno":{"description":"Return this SystemCallError's error number.","name":"errno","namespace":"SystemCallError","path":"SystemCallError#errno","type":"instance_method","visibility":"public"},"SystemCallError#initialize":{"description":"If _errno_ corresponds to a known system error code, constructs\nthe appropriate <code>Errno</code> class for that error, otherwise\nconstructs a generic <code>SystemCallError</code> object. The\nerror number is subsequently available via the <code>errno</code>\nmethod.","name":"initialize","namespace":"SystemCallError","path":"SystemCallError#initialize","type":"instance_method","visibility":"public"},"SystemCallError.===":{"description":"Return +true+ if the receiver is a generic +SystemCallError+, or\nif the error numbers +self+ and _other_ are the same.","name":"===","namespace":"SystemCallError","path":"SystemCallError.===","type":"class_method","visibility":"public"},"EncodingError":{"description":"EncodingError is the base class for encoding errors.","name":"EncodingError","namespace":"","path":"EncodingError","type":"class","visibility":"public"},"fatal":{"description":"fatal is an Exception that is raised when Ruby has encountered a fatal\nerror and must exit.  You are not able to rescue fatal.","name":"fatal","namespace":"","path":"fatal","type":"class","visibility":"public"},"Exception":{"description":"Descendants of class Exception are used to communicate between\nKernel#raise and +rescue+ statements in <code>begin ... end</code> blocks.\nException objects carry information about the exception -- its type (the\nexception's class name), an optional descriptive string, and optional\ntraceback information.  Exception subclasses may add additional\ninformation like NameError#name.\n\nPrograms may make subclasses of Exception, typically of StandardError or\nRuntimeError, to provide custom classes and add additional information.\nSee the subclass list below for defaults for +raise+ and +rescue+.\n\nWhen an exception has been raised but not yet handled (in +rescue+,\n+ensure+, +at_exit+ and +END+ blocks) the global variable <code>$!</code>\nwill contain the current exception and <code>$@</code> contains the\ncurrent exception's backtrace.\n\nIt is recommended that a library should have one subclass of StandardError\nor RuntimeError and have specific exception types inherit from it.  This\nallows the user to rescue a generic exception type to catch all exceptions\nthe library may raise even if future versions of the library add new\nexception subclasses.\n\nFor example:\n\n  class MyLibrary\n    class Error < RuntimeError\n    end\n\n    class WidgetError < Error\n    end\n\n    class FrobError < Error\n    end\n\n  end\n\nTo handle both WidgetError and FrobError the library user can rescue\nMyLibrary::Error.\n\nThe built-in subclasses of Exception are:\n\n* NoMemoryError\n* ScriptError\n  * LoadError\n  * NotImplementedError\n  * SyntaxError\n* SecurityError\n* SignalException\n  * Interrupt\n* StandardError -- default for +rescue+\n  * ArgumentError\n    * UncaughtThrowError\n  * EncodingError\n  * FiberError\n  * IOError\n    * EOFError\n  * IndexError\n    * KeyError\n    * StopIteration\n  * LocalJumpError\n  * NameError\n    * NoMethodError\n  * RangeError\n    * FloatDomainError\n  * RegexpError\n  * RuntimeError -- default for +raise+\n    * FrozenError\n  * SystemCallError\n    * Errno::*\n  * ThreadError\n  * TypeError\n  * ZeroDivisionError\n* SystemExit\n* SystemStackError\n* fatal -- impossible to rescue","name":"Exception","namespace":"","path":"Exception","type":"class","visibility":"public"},"Exception#==":{"description":"Equality---If <i>obj</i> is not an <code>Exception</code>, returns\n<code>false</code>. Otherwise, returns <code>true</code> if <i>exc</i> and\n<i>obj</i> share same class, messages, and backtrace.","name":"==","namespace":"Exception","path":"Exception#==","type":"instance_method","visibility":"public"},"Exception#backtrace":{"description":"Returns any backtrace associated with the exception. The backtrace\nis an array of strings, each containing either ``filename:lineNo: in\n`method''' or ``filename:lineNo.''\n\n   def a\n     raise \"boom\"\n   end\n\n   def b\n     a()\n   end\n\n   begin\n     b()\n   rescue => detail\n     print detail.backtrace.join(\"\\n\")\n   end\n\n<em>produces:</em>\n\n   prog.rb:2:in `a'\n   prog.rb:6:in `b'\n   prog.rb:10","name":"backtrace","namespace":"Exception","path":"Exception#backtrace","type":"instance_method","visibility":"public"},"Exception#backtrace_locations":{"description":"Returns any backtrace associated with the exception. This method is\nsimilar to Exception#backtrace, but the backtrace is an array of\nThread::Backtrace::Location.\n\nNow, this method is not affected by Exception#set_backtrace().","name":"backtrace_locations","namespace":"Exception","path":"Exception#backtrace_locations","type":"instance_method","visibility":"public"},"Exception#cause":{"description":"Returns the previous exception ($!) at the time this exception was raised.\nThis is useful for wrapping exceptions and retaining the original exception\ninformation.","name":"cause","namespace":"Exception","path":"Exception#cause","type":"instance_method","visibility":"public"},"Exception#exception":{"description":"call-seq:\n   exc.exception(string)  ->  an_exception or exc\n\nWith no argument, or if the argument is the same as the receiver,\nreturn the receiver. Otherwise, create a new\nexception object of the same class as the receiver, but with a\nmessage equal to <code>string.to_str</code>.","name":"exception","namespace":"Exception","path":"Exception#exception","type":"instance_method","visibility":"public"},"Exception#full_message":{"description":"Returns formatted string of _exception_.\nThe returned string is formatted using the same format that Ruby uses\nwhen printing an uncaught exceptions to stderr.\n\nIf _highlight_ is +true+ the default error handler will send the\nmessages to a tty.\n\n_order_ must be either of +:top+ or +:bottom+, and places the error\nmessage and the innermost backtrace come at the top or the bottom.\n\nThe default values of these options depend on <code>$stderr</code>\nand its +tty?+ at the timing of a call.","name":"full_message","namespace":"Exception","path":"Exception#full_message","type":"instance_method","visibility":"public"},"Exception#initialize":{"description":"Construct a new Exception object, optionally passing in\n a message.","name":"initialize","namespace":"Exception","path":"Exception#initialize","type":"instance_method","visibility":"public"},"Exception#inspect":{"description":"Return this exception's class name and message","name":"inspect","namespace":"Exception","path":"Exception#inspect","type":"instance_method","visibility":"public"},"Exception#message":{"description":"Returns the result of invoking <code>exception.to_s</code>.\nNormally this returns the exception's message or name.","name":"message","namespace":"Exception","path":"Exception#message","type":"instance_method","visibility":"public"},"Exception#set_backtrace":{"description":"Sets the backtrace information associated with +exc+. The +backtrace+ must\nbe an array of String objects or a single String in the format described\nin Exception#backtrace.","name":"set_backtrace","namespace":"Exception","path":"Exception#set_backtrace","type":"instance_method","visibility":"public"},"Exception#to_s":{"description":"Returns exception's message (or the name of the exception if\nno message is set).","name":"to_s","namespace":"Exception","path":"Exception#to_s","type":"instance_method","visibility":"public"},"Exception.exception":{"description":"call-seq:\n   exc.exception(string)  ->  an_exception or exc\n\nWith no argument, or if the argument is the same as the receiver,\nreturn the receiver. Otherwise, create a new\nexception object of the same class as the receiver, but with a\nmessage equal to <code>string.to_str</code>.","name":"exception","namespace":"Exception","path":"Exception.exception","type":"class_method","visibility":"public"},"Exception.to_tty?":{"description":"Returns +true+ if exception messages will be sent to a tty.","name":"to_tty?","namespace":"Exception","path":"Exception.to_tty?","type":"class_method","visibility":"public","return":[["Boolean"],""]},"FileTest":{"description":"<code>FileTest</code> implements file test operations similar to\n those used in <code>File::Stat</code>. It exists as a standalone\n module, and its methods are also insinuated into the <code>File</code>\n class. (Note that this is not done by inclusion: the interpreter cheats).","name":"FileTest","namespace":"","path":"FileTest","type":"class","visibility":"public"},"IO":{"description":"The IO class is the basis for all input and output in Ruby.\nAn I/O stream may be <em>duplexed</em> (that is, bidirectional), and\nso may use more than one native operating system stream.\n\nMany of the examples in this section use the File class, the only standard\nsubclass of IO. The two classes are closely associated.  Like the File\nclass, the Socket library subclasses from IO (such as TCPSocket or\nUDPSocket).\n\nThe Kernel#open method can create an IO (or File) object for these types\nof arguments:\n\n* A plain string represents a filename suitable for the underlying\n  operating system.\n\n* A string starting with <code>\"|\"</code> indicates a subprocess.\n  The remainder of the string following the <code>\"|\"</code> is\n  invoked as a process with appropriate input/output channels\n  connected to it.\n\n* A string equal to <code>\"|-\"</code> will create another Ruby\n  instance as a subprocess.\n\nThe IO may be opened with different file modes (read-only, write-only) and\nencodings for proper conversion.  See IO.new for these options.  See\nKernel#open for details of the various command formats described above.\n\nIO.popen, the Open3 library, or  Process#spawn may also be used to\ncommunicate with subprocesses through an IO.\n\nRuby will convert pathnames between different operating system\nconventions if possible.  For instance, on a Windows system the\nfilename <code>\"/gumby/ruby/test.rb\"</code> will be opened as\n<code>\"\\gumby\\ruby\\test.rb\"</code>.  When specifying a Windows-style\nfilename in a Ruby string, remember to escape the backslashes:\n\n  \"C:\\\\gumby\\\\ruby\\\\test.rb\"\n\nOur examples here will use the Unix-style forward slashes;\nFile::ALT_SEPARATOR can be used to get the platform-specific separator\ncharacter.\n\nThe global constant ARGF (also accessible as <code>$<</code>) provides an\nIO-like stream which allows access to all files mentioned on the\ncommand line (or STDIN if no files are mentioned). ARGF#path and its alias\nARGF#filename are provided to access the name of the file currently being\nread.\n\n== io/console\n\nThe io/console extension provides methods for interacting with the\nconsole.  The console can be accessed from IO.console or the standard\ninput/output/error IO objects.\n\nRequiring io/console adds the following methods:\n\n* IO::console\n* IO#raw\n* IO#raw!\n* IO#cooked\n* IO#cooked!\n* IO#getch\n* IO#echo=\n* IO#echo?\n* IO#noecho\n* IO#winsize\n* IO#winsize=\n* IO#iflush\n* IO#ioflush\n* IO#oflush\n\nExample:\n\n  require 'io/console'\n  rows, columns = $stdout.winsize\n  puts \"Your screen is #{columns} wide and #{rows} tall\"","name":"IO","namespace":"","path":"IO","type":"class","visibility":"public"},"IO#<<":{"description":"String Output---Writes <i>obj</i> to <em>ios</em>.\n<i>obj</i> will be converted to a string using\n<code>to_s</code>.\n\n   $stdout << \"Hello \" << \"world!\\n\"\n\n<em>produces:</em>\n\n   Hello world!","name":"<<","namespace":"IO","path":"IO#<<","type":"instance_method","visibility":"public"},"IO#__read_nonblock":{"description":":nodoc:","name":"__read_nonblock","namespace":"IO","path":"IO#__read_nonblock","type":"instance_method","visibility":"private"},"IO#__write_nonblock":{"description":":nodoc:","name":"__write_nonblock","namespace":"IO","path":"IO#__write_nonblock","type":"instance_method","visibility":"private"},"IO#advise":{"description":"Announce an intention to access data from the current file in a\nspecific pattern. On platforms that do not support the\n<em>posix_fadvise(2)</em> system call, this method is a no-op.\n\n_advice_ is one of the following symbols:\n\n:normal::     No advice to give; the default assumption for an open file.\n:sequential:: The data will be accessed sequentially\n              with lower offsets read before higher ones.\n:random::     The data will be accessed in random order.\n:willneed::   The data will be accessed in the near future.\n:dontneed::   The data will not be accessed in the near future.\n:noreuse::    The data will only be accessed once.\n\nThe semantics of a piece of advice are platform-dependent. See\n<em>man 2 posix_fadvise</em> for details.\n\n\"data\" means the region of the current file that begins at\n_offset_ and extends for _len_ bytes. If _len_ is 0, the region\nends at the last byte of the file. By default, both _offset_ and\n_len_ are 0, meaning that the advice applies to the entire file.\n\nIf an error occurs, one of the following exceptions will be raised:\n\n<code>IOError</code>:: The <code>IO</code> stream is closed.\n<code>Errno::EBADF</code>::\n  The file descriptor of the current file is invalid.\n<code>Errno::EINVAL</code>:: An invalid value for _advice_ was given.\n<code>Errno::ESPIPE</code>::\n  The file descriptor of the current file refers to a FIFO or\n  pipe. (Linux raises <code>Errno::EINVAL</code> in this case).\n<code>TypeError</code>::\n  Either _advice_ was not a Symbol, or one of the\n  other arguments was not an <code>Integer</code>.\n<code>RangeError</code>:: One of the arguments given was too big/small.\n\nThis list is not exhaustive; other Errno:: exceptions are also possible.","name":"advise","namespace":"IO","path":"IO#advise","type":"instance_method","visibility":"public"},"IO#autoclose=":{"description":"Sets auto-close flag.\n\n   f = open(\"/dev/null\")\n   IO.for_fd(f.fileno)\n   # ...\n   f.gets # may cause IOError\n\n   f = open(\"/dev/null\")\n   IO.for_fd(f.fileno).autoclose = true\n   # ...\n   f.gets # won't cause IOError","name":"autoclose=","namespace":"IO","path":"IO#autoclose=","type":"instance_method","visibility":"public"},"IO#autoclose?":{"description":"Returns +true+ if the underlying file descriptor of _ios_ will be\nclosed automatically at its finalization, otherwise +false+.","name":"autoclose?","namespace":"IO","path":"IO#autoclose?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"IO#binmode":{"description":"Puts <em>ios</em> into binary mode.\nOnce a stream is in binary mode, it cannot be reset to nonbinary mode.\n\n- newline conversion disabled\n- encoding conversion disabled\n- content is treated as ASCII-8BIT","name":"binmode","namespace":"IO","path":"IO#binmode","type":"instance_method","visibility":"public"},"IO#binmode?":{"description":"Returns <code>true</code> if <em>ios</em> is binmode.","name":"binmode?","namespace":"IO","path":"IO#binmode?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"IO#bytes":{"description":"This is a deprecated alias for <code>each_byte</code>.","name":"bytes","namespace":"IO","path":"IO#bytes","type":"instance_method","visibility":"public"},"IO#chars":{"description":"This is a deprecated alias for <code>each_char</code>.","name":"chars","namespace":"IO","path":"IO#chars","type":"instance_method","visibility":"public"},"IO#close":{"description":"Closes <em>ios</em> and flushes any pending writes to the operating\nsystem. The stream is unavailable for any further data operations;\nan <code>IOError</code> is raised if such an attempt is made. I/O\nstreams are automatically closed when they are claimed by the\ngarbage collector.\n\nIf <em>ios</em> is opened by <code>IO.popen</code>,\n<code>close</code> sets <code>$?</code>.\n\nCalling this method on closed IO object is just ignored since Ruby 2.3.","name":"close","namespace":"IO","path":"IO#close","type":"instance_method","visibility":"public"},"IO#close_on_exec=":{"description":"Sets a close-on-exec flag.\n\n   f = open(\"/dev/null\")\n   f.close_on_exec = true\n   system(\"cat\", \"/proc/self/fd/#{f.fileno}\") # cat: /proc/self/fd/3: No such file or directory\n   f.closed?                #=> false\n\nRuby sets close-on-exec flags of all file descriptors by default\nsince Ruby 2.0.0.\nSo you don't need to set by yourself.\nAlso, unsetting a close-on-exec flag can cause file descriptor leak\nif another thread use fork() and exec() (via system() method for example).\nIf you really needs file descriptor inheritance to child process,\nuse spawn()'s argument such as fd=>fd.","name":"close_on_exec=","namespace":"IO","path":"IO#close_on_exec=","type":"instance_method","visibility":"public"},"IO#close_on_exec?":{"description":"Returns <code>true</code> if <em>ios</em> will be closed on exec.\n\n   f = open(\"/dev/null\")\n   f.close_on_exec?                 #=> false\n   f.close_on_exec = true\n   f.close_on_exec?                 #=> true\n   f.close_on_exec = false\n   f.close_on_exec?                 #=> false","name":"close_on_exec?","namespace":"IO","path":"IO#close_on_exec?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"IO#close_read":{"description":"Closes the read end of a duplex I/O stream (i.e., one that contains\nboth a read and a write stream, such as a pipe). Will raise an\n<code>IOError</code> if the stream is not duplexed.\n\n   f = IO.popen(\"/bin/sh\",\"r+\")\n   f.close_read\n   f.readlines\n\n<em>produces:</em>\n\n   prog.rb:3:in `readlines': not opened for reading (IOError)\n   \tfrom prog.rb:3\n\nCalling this method on closed IO object is just ignored since Ruby 2.3.","name":"close_read","namespace":"IO","path":"IO#close_read","type":"instance_method","visibility":"public"},"IO#close_write":{"description":"Closes the write end of a duplex I/O stream (i.e., one that contains\nboth a read and a write stream, such as a pipe). Will raise an\n<code>IOError</code> if the stream is not duplexed.\n\n   f = IO.popen(\"/bin/sh\",\"r+\")\n   f.close_write\n   f.print \"nowhere\"\n\n<em>produces:</em>\n\n   prog.rb:3:in `write': not opened for writing (IOError)\n   \tfrom prog.rb:3:in `print'\n   \tfrom prog.rb:3\n\nCalling this method on closed IO object is just ignored since Ruby 2.3.","name":"close_write","namespace":"IO","path":"IO#close_write","type":"instance_method","visibility":"public"},"IO#closed?":{"description":"Returns <code>true</code> if <em>ios</em> is completely closed (for\nduplex streams, both reader and writer), <code>false</code>\notherwise.\n\n   f = File.new(\"testfile\")\n   f.close         #=> nil\n   f.closed?       #=> true\n   f = IO.popen(\"/bin/sh\",\"r+\")\n   f.close_write   #=> nil\n   f.closed?       #=> false\n   f.close_read    #=> nil\n   f.closed?       #=> true","name":"closed?","namespace":"IO","path":"IO#closed?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"IO#codepoints":{"description":"This is a deprecated alias for <code>each_codepoint</code>.","name":"codepoints","namespace":"IO","path":"IO#codepoints","type":"instance_method","visibility":"public"},"IO#each":{"description":"ios.each_line(sep=$/ [, getline_args])     {|line| block } -> ios\n   ios.each_line(limit [, getline_args])      {|line| block } -> ios\n   ios.each_line(sep, limit [, getline_args]) {|line| block } -> ios\n   ios.each_line(...)                        -> an_enumerator\n\nExecutes the block for every line in <em>ios</em>, where lines are\nseparated by <i>sep</i>. <em>ios</em> must be opened for\nreading or an <code>IOError</code> will be raised.\n\nIf no block is given, an enumerator is returned instead.\n\n   f = File.new(\"testfile\")\n   f.each {|line| puts \"#{f.lineno}: #{line}\" }\n\n<em>produces:</em>\n\n   1: This is line one\n   2: This is line two\n   3: This is line three\n   4: And so on...\n\nSee IO.readlines for details about getline_args.","name":"each","namespace":"IO","path":"IO#each","type":"instance_method","visibility":"public"},"IO#each_byte":{"description":"Calls the given block once for each byte (0..255) in <em>ios</em>,\npassing the byte as an argument. The stream must be opened for\nreading or an <code>IOError</code> will be raised.\n\nIf no block is given, an enumerator is returned instead.\n\n   f = File.new(\"testfile\")\n   checksum = 0\n   f.each_byte {|x| checksum ^= x }   #=> #<File:testfile>\n   checksum                           #=> 12","name":"each_byte","namespace":"IO","path":"IO#each_byte","type":"instance_method","visibility":"public"},"IO#each_char":{"description":"Calls the given block once for each character in <em>ios</em>,\npassing the character as an argument. The stream must be opened for\nreading or an <code>IOError</code> will be raised.\n\nIf no block is given, an enumerator is returned instead.\n\n   f = File.new(\"testfile\")\n   f.each_char {|c| print c, ' ' }   #=> #<File:testfile>","name":"each_char","namespace":"IO","path":"IO#each_char","type":"instance_method","visibility":"public"},"IO#each_codepoint":{"description":"Passes the <code>Integer</code> ordinal of each character in <i>ios</i>,\npassing the codepoint as an argument. The stream must be opened for\nreading or an <code>IOError</code> will be raised.\n\nIf no block is given, an enumerator is returned instead.","name":"each_codepoint","namespace":"IO","path":"IO#each_codepoint","type":"instance_method","visibility":"public"},"IO#each_line":{"description":"ios.each_line(sep=$/ [, getline_args])     {|line| block } -> ios\n   ios.each_line(limit [, getline_args])      {|line| block } -> ios\n   ios.each_line(sep, limit [, getline_args]) {|line| block } -> ios\n   ios.each_line(...)                        -> an_enumerator\n\nExecutes the block for every line in <em>ios</em>, where lines are\nseparated by <i>sep</i>. <em>ios</em> must be opened for\nreading or an <code>IOError</code> will be raised.\n\nIf no block is given, an enumerator is returned instead.\n\n   f = File.new(\"testfile\")\n   f.each {|line| puts \"#{f.lineno}: #{line}\" }\n\n<em>produces:</em>\n\n   1: This is line one\n   2: This is line two\n   3: This is line three\n   4: And so on...\n\nSee IO.readlines for details about getline_args.","name":"each_line","namespace":"IO","path":"IO#each_line","type":"instance_method","visibility":"public"},"IO#eof":{"description":"Returns true if <em>ios</em> is at end of file that means\nthere are no more data to read.\nThe stream must be opened for reading or an <code>IOError</code> will be\nraised.\n\n   f = File.new(\"testfile\")\n   dummy = f.readlines\n   f.eof   #=> true\n\nIf <em>ios</em> is a stream such as pipe or socket, <code>IO#eof?</code>\nblocks until the other end sends some data or closes it.\n\n   r, w = IO.pipe\n   Thread.new { sleep 1; w.close }\n   r.eof?  #=> true after 1 second blocking\n\n   r, w = IO.pipe\n   Thread.new { sleep 1; w.puts \"a\" }\n   r.eof?  #=> false after 1 second blocking\n\n   r, w = IO.pipe\n   r.eof?  # blocks forever\n\nNote that <code>IO#eof?</code> reads data to the input byte buffer.\nSo <code>IO#sysread</code> may not behave as you intend with\n<code>IO#eof?</code>, unless you call <code>IO#rewind</code>\nfirst (which is not available for some streams).","name":"eof","namespace":"IO","path":"IO#eof","type":"instance_method","visibility":"public"},"IO#eof?":{"description":"Returns true if <em>ios</em> is at end of file that means\nthere are no more data to read.\nThe stream must be opened for reading or an <code>IOError</code> will be\nraised.\n\n   f = File.new(\"testfile\")\n   dummy = f.readlines\n   f.eof   #=> true\n\nIf <em>ios</em> is a stream such as pipe or socket, <code>IO#eof?</code>\nblocks until the other end sends some data or closes it.\n\n   r, w = IO.pipe\n   Thread.new { sleep 1; w.close }\n   r.eof?  #=> true after 1 second blocking\n\n   r, w = IO.pipe\n   Thread.new { sleep 1; w.puts \"a\" }\n   r.eof?  #=> false after 1 second blocking\n\n   r, w = IO.pipe\n   r.eof?  # blocks forever\n\nNote that <code>IO#eof?</code> reads data to the input byte buffer.\nSo <code>IO#sysread</code> may not behave as you intend with\n<code>IO#eof?</code>, unless you call <code>IO#rewind</code>\nfirst (which is not available for some streams).","name":"eof?","namespace":"IO","path":"IO#eof?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"IO#external_encoding":{"description":"Returns the Encoding object that represents the encoding of the file.\nIf _io_ is in write mode and no encoding is specified, returns +nil+.","name":"external_encoding","namespace":"IO","path":"IO#external_encoding","type":"instance_method","visibility":"public"},"IO#fcntl":{"description":"Provides a mechanism for issuing low-level commands to control or\nquery file-oriented I/O streams. Arguments and results are platform\ndependent. If <i>arg</i> is a number, its value is passed\ndirectly. If it is a string, it is interpreted as a binary sequence\nof bytes (<code>Array#pack</code> might be a useful way to build this\nstring). On Unix platforms, see <code>fcntl(2)</code> for details.\nNot implemented on all platforms.","name":"fcntl","namespace":"IO","path":"IO#fcntl","type":"instance_method","visibility":"public"},"IO#fdatasync":{"description":"Immediately writes all buffered data in <em>ios</em> to disk.\n\nIf the underlying operating system does not support <em>fdatasync(2)</em>,\n<code>IO#fsync</code> is called instead (which might raise a\n<code>NotImplementedError</code>).","name":"fdatasync","namespace":"IO","path":"IO#fdatasync","type":"instance_method","visibility":"public"},"IO#fileno":{"description":"Returns an integer representing the numeric file descriptor for\n<em>ios</em>.\n\n   $stdin.fileno    #=> 0\n   $stdout.fileno   #=> 1","name":"to_i","namespace":"IO","path":"IO#to_i","type":"instance_method","visibility":"public"},"IO#to_i":{"description":"Returns an integer representing the numeric file descriptor for\n<em>ios</em>.\n\n   $stdin.fileno    #=> 0\n   $stdout.fileno   #=> 1","name":"to_i","namespace":"IO","path":"IO#to_i","type":"instance_method","visibility":"public"},"IO#flush":{"description":"Flushes any buffered data within <em>ios</em> to the underlying\noperating system (note that this is Ruby internal buffering only;\nthe OS may buffer the data as well).\n\n   $stdout.print \"no newline\"\n   $stdout.flush\n\n<em>produces:</em>\n\n   no newline","name":"flush","namespace":"IO","path":"IO#flush","type":"instance_method","visibility":"public"},"IO#fsync":{"description":"Immediately writes all buffered data in <em>ios</em> to disk.\nNote that <code>fsync</code> differs from\nusing <code>IO#sync=</code>. The latter ensures that data is flushed\nfrom Ruby's buffers, but does not guarantee that the underlying\noperating system actually writes it to disk.\n\n<code>NotImplementedError</code> is raised\nif the underlying operating system does not support <em>fsync(2)</em>.","name":"fsync","namespace":"IO","path":"IO#fsync","type":"instance_method","visibility":"public"},"IO#getbyte":{"description":"Gets the next 8-bit byte (0..255) from <em>ios</em>. Returns\n+nil+ if called at end of file.\n\n   f = File.new(\"testfile\")\n   f.getbyte   #=> 84\n   f.getbyte   #=> 104","name":"getbyte","namespace":"IO","path":"IO#getbyte","type":"instance_method","visibility":"public"},"IO#getc":{"description":"Reads a one-character string from <em>ios</em>. Returns\n+nil+ if called at end of file.\n\n   f = File.new(\"testfile\")\n   f.getc   #=> \"h\"\n   f.getc   #=> \"e\"","name":"getc","namespace":"IO","path":"IO#getc","type":"instance_method","visibility":"public"},"IO#gets":{"description":"Reads the next ``line'' from the I/O stream; lines are separated by\n<i>sep</i>. A separator of +nil+ reads the entire\ncontents, and a zero-length separator reads the input a paragraph at\na time (two successive newlines in the input separate paragraphs).\nThe stream must be opened for reading or an <code>IOError</code>\nwill be raised. The line read in will be returned and also assigned\nto <code>$_</code>. Returns +nil+ if called at end of\nfile.  If the first argument is an integer, or optional second\nargument is given, the returning string would not be longer than the\ngiven value in bytes.\n\n   File.new(\"testfile\").gets   #=> \"This is line one\\n\"\n   $_                          #=> \"This is line one\\n\"\n\n   File.new(\"testfile\").gets(4)#=> \"This\"\n\nIf IO contains multibyte characters byte then <code>gets(1)</code>\nreturns character entirely:\n\n   # Russian characters take 2 bytes\n   File.write(\"testfile\", \"\\u{442 435 441 442}\")\n   File.open(\"testfile\") {|f|f.gets(1)} #=> \"\\u0442\"\n   File.open(\"testfile\") {|f|f.gets(2)} #=> \"\\u0442\"\n   File.open(\"testfile\") {|f|f.gets(3)} #=> \"\\u0442\\u0435\"\n   File.open(\"testfile\") {|f|f.gets(4)} #=> \"\\u0442\\u0435\"","name":"gets","namespace":"IO","path":"IO#gets","type":"instance_method","visibility":"public"},"IO#initialize":{"description":"Returns a new IO object (a stream) for the given integer file descriptor\n+fd+ and +mode+ string.  +opt+ may be used to specify parts of +mode+ in a\nmore readable fashion.  See also IO.sysopen and IO.for_fd.\n\nIO.new is called by various File and IO opening methods such as IO::open,\nKernel#open, and File::open.\n\n=== Open Mode\n\nWhen +mode+ is an integer it must be combination of the modes defined in\nFile::Constants (+File::RDONLY+, <code>File::WRONLY|File::CREAT</code>).\nSee the open(2) man page for more information.\n\nWhen +mode+ is a string it must be in one of the following forms:\n\n  fmode\n  fmode \":\" ext_enc\n  fmode \":\" ext_enc \":\" int_enc\n  fmode \":\" \"BOM|UTF-*\"\n\n+fmode+ is an IO open mode string, +ext_enc+ is the external encoding for\nthe IO and +int_enc+ is the internal encoding.\n\n==== IO Open Mode\n\nRuby allows the following open modes:\n\n\t\"r\"  Read-only, starts at beginning of file  (default mode).\n\n\t\"r+\" Read-write, starts at beginning of file.\n\n\t\"w\"  Write-only, truncates existing file\n\t     to zero length or creates a new file for writing.\n\n\t\"w+\" Read-write, truncates existing file to zero length\n\t     or creates a new file for reading and writing.\n\n\t\"a\"  Write-only, each write call appends data at end of file.\n\t     Creates a new file for writing if file does not exist.\n\n\t\"a+\" Read-write, each write call appends data at end of file.\n    Creates a new file for reading and writing if file does\n    not exist.\n\nThe following modes must be used separately, and along with one or more of\nthe modes seen above.\n\n\t\"b\"  Binary file mode\n\t     Suppresses EOL <-> CRLF conversion on Windows. And\n\t     sets external encoding to ASCII-8BIT unless explicitly\n\t     specified.\n\n\t\"t\"  Text file mode\n\nWhen the open mode of original IO is read only, the mode cannot be\nchanged to be writable.  Similarly, the open mode cannot be changed from\nwrite only to readable.\n\nWhen such a change is attempted the error is raised in different locations\naccording to the platform.\n\n=== IO Encoding\n\nWhen +ext_enc+ is specified, strings read will be tagged by the encoding\nwhen reading, and strings output will be converted to the specified\nencoding when writing.\n\nWhen +ext_enc+ and +int_enc+ are specified read strings will be converted\nfrom +ext_enc+ to +int_enc+ upon input, and written strings will be\nconverted from +int_enc+ to +ext_enc+ upon output.  See Encoding for\nfurther details of transcoding on input and output.\n\nIf \"BOM|UTF-8\", \"BOM|UTF-16LE\" or \"BOM|UTF16-BE\" are used, Ruby checks for\na Unicode BOM in the input document to help determine the encoding.  For\nUTF-16 encodings the file open mode must be binary.  When present, the BOM\nis stripped and the external encoding from the BOM is used.  When the BOM\nis missing the given Unicode encoding is used as +ext_enc+.  (The BOM-set\nencoding option is case insensitive, so \"bom|utf-8\" is also valid.)\n\n=== Options\n\n+opt+ can be used instead of +mode+ for improved readability.  The\nfollowing keys are supported:\n\n:mode ::\n  Same as +mode+ parameter\n\n:flags ::\n  Specifies file open flags as integer.\n  If +mode+ parameter is given, this parameter will be bitwise-ORed.\n\n:\\external_encoding ::\n  External encoding for the IO.\n\n:\\internal_encoding ::\n  Internal encoding for the IO.  \"-\" is a synonym for the default internal\n  encoding.\n\n  If the value is +nil+ no conversion occurs.\n\n:encoding ::\n  Specifies external and internal encodings as \"extern:intern\".\n\n:textmode ::\n  If the value is truth value, same as \"t\" in argument +mode+.\n\n:binmode ::\n  If the value is truth value, same as \"b\" in argument +mode+.\n\n:autoclose ::\n  If the value is +false+, the +fd+ will be kept open after this IO\n  instance gets finalized.\n\nAlso, +opt+ can have same keys in String#encode for controlling conversion\nbetween the external encoding and the internal encoding.\n\n=== Example 1\n\n  fd = IO.sysopen(\"/dev/tty\", \"w\")\n  a = IO.new(fd,\"w\")\n  $stderr.puts \"Hello\"\n  a.puts \"World\"\n\nProduces:\n\n  Hello\n  World\n\n=== Example 2\n\n  require 'fcntl'\n\n  fd = STDERR.fcntl(Fcntl::F_DUPFD)\n  io = IO.new(fd, mode: 'w:UTF-16LE', cr_newline: true)\n  io.puts \"Hello, World!\"\n\n  fd = STDERR.fcntl(Fcntl::F_DUPFD)\n  io = IO.new(fd, mode: 'w', cr_newline: true,\n              external_encoding: Encoding::UTF_16LE)\n  io.puts \"Hello, World!\"\n\nBoth of above print \"Hello, World!\" in UTF-16LE to standard error output\nwith converting EOL generated by <code>puts</code> to CR.","name":"initialize","namespace":"IO","path":"IO#initialize","type":"instance_method","visibility":"public"},"IO#initialize_copy":{"description":":nodoc:","name":"initialize_copy","namespace":"IO","path":"IO#initialize_copy","type":"instance_method","visibility":"public"},"IO#inspect":{"description":"Return a string describing this IO object.","name":"inspect","namespace":"IO","path":"IO#inspect","type":"instance_method","visibility":"public"},"IO#internal_encoding":{"description":"Returns the Encoding of the internal string if conversion is\nspecified.  Otherwise returns +nil+.","name":"internal_encoding","namespace":"IO","path":"IO#internal_encoding","type":"instance_method","visibility":"public"},"IO#ioctl":{"description":"Provides a mechanism for issuing low-level commands to control or\nquery I/O devices. Arguments and results are platform dependent. If\n<i>arg</i> is a number, its value is passed directly. If it is a\nstring, it is interpreted as a binary sequence of bytes. On Unix\nplatforms, see <code>ioctl(2)</code> for details. Not implemented on\nall platforms.","name":"ioctl","namespace":"IO","path":"IO#ioctl","type":"instance_method","visibility":"public"},"IO#isatty":{"description":"Returns <code>true</code> if <em>ios</em> is associated with a\nterminal device (tty), <code>false</code> otherwise.\n\n   File.new(\"testfile\").isatty   #=> false\n   File.new(\"/dev/tty\").isatty   #=> true","name":"isatty","namespace":"IO","path":"IO#isatty","type":"instance_method","visibility":"public"},"IO#lineno":{"description":"Returns the current line number in <em>ios</em>.  The stream must be\nopened for reading. <code>lineno</code> counts the number of times\n#gets is called rather than the number of newlines encountered.  The two\nvalues will differ if #gets is called with a separator other than newline.\n\nMethods that use <code>$/</code> like #each, #lines and #readline will\nalso increment <code>lineno</code>.\n\nSee also the <code>$.</code> variable.\n\n   f = File.new(\"testfile\")\n   f.lineno   #=> 0\n   f.gets     #=> \"This is line one\\n\"\n   f.lineno   #=> 1\n   f.gets     #=> \"This is line two\\n\"\n   f.lineno   #=> 2","name":"lineno","namespace":"IO","path":"IO#lineno","type":"instance_method","visibility":"public"},"IO#lineno=":{"description":"Manually sets the current line number to the given value.\n<code>$.</code> is updated only on the next read.\n\n   f = File.new(\"testfile\")\n   f.gets                     #=> \"This is line one\\n\"\n   $.                         #=> 1\n   f.lineno = 1000\n   f.lineno                   #=> 1000\n   $.                         #=> 1         # lineno of last read\n   f.gets                     #=> \"This is line two\\n\"\n   $.                         #=> 1001      # lineno of last read","name":"lineno=","namespace":"IO","path":"IO#lineno=","type":"instance_method","visibility":"public"},"IO#lines":{"description":"This is a deprecated alias for <code>each_line</code>.","name":"lines","namespace":"IO","path":"IO#lines","type":"instance_method","visibility":"public"},"IO#pid":{"description":"Returns the process ID of a child process associated with\n<em>ios</em>. This will be set by <code>IO.popen</code>.\n\n   pipe = IO.popen(\"-\")\n   if pipe\n     $stderr.puts \"In parent, child pid is #{pipe.pid}\"\n   else\n     $stderr.puts \"In child, pid is #{$$}\"\n   end\n\n<em>produces:</em>\n\n   In child, pid is 26209\n   In parent, child pid is 26209","name":"pid","namespace":"IO","path":"IO#pid","type":"instance_method","visibility":"public"},"IO#pos":{"description":"Returns the current offset (in bytes) of <em>ios</em>.\n\n   f = File.new(\"testfile\")\n   f.pos    #=> 0\n   f.gets   #=> \"This is line one\\n\"\n   f.pos    #=> 17","name":"pos","namespace":"IO","path":"IO#pos","type":"instance_method","visibility":"public"},"IO#pos=":{"description":"Seeks to the given position (in bytes) in <em>ios</em>.\nIt is not guaranteed that seeking to the right position when <em>ios</em>\nis textmode.\n\n   f = File.new(\"testfile\")\n   f.pos = 17\n   f.gets   #=> \"This is line two\\n\"","name":"pos=","namespace":"IO","path":"IO#pos=","type":"instance_method","visibility":"public"},"IO#pread":{"description":"Reads <i>maxlen</i> bytes from <em>ios</em> using the pread system call\nand returns them as a string without modifying the underlying\ndescriptor offset.  This is advantageous compared to combining IO#seek\nand IO#read in that it is atomic, allowing multiple threads/process to\nshare the same IO object for reading the file at various locations.\nThis bypasses any userspace buffering of the IO layer.\nIf the optional <i>outbuf</i> argument is present, it must\nreference a String, which will receive the data.\nRaises <code>SystemCallError</code> on error, <code>EOFError</code>\nat end of file and <code>NotImplementedError</code> if platform does not\nimplement the system call.\n\n   File.write(\"testfile\", \"This is line one\\nThis is line two\\n\")\n   File.open(\"testfile\") do |f|\n     p f.read           # => \"This is line one\\nThis is line two\\n\"\n     p f.pread(12, 0)   # => \"This is line\"\n     p f.pread(9, 8)    # => \"line one\\n\"\n   end","name":"pread","namespace":"IO","path":"IO#pread","type":"instance_method","visibility":"public"},"IO#print":{"description":"Writes the given object(s) to <em>ios</em>. Returns +nil+.\n\nThe stream must be opened for writing.\nEach given object that isn't a string will be converted by calling\nits <code>to_s</code> method.\nWhen called without arguments, prints the contents of <code>$_</code>.\n\nIf the output field separator (<code>$,</code>) is not +nil+,\nit is inserted between objects.\nIf the output record separator (<code>$\\\\</code>) is not +nil+,\nit is appended to the output.\n\n   $stdout.print(\"This is \", 100, \" percent.\\n\")\n\n<em>produces:</em>\n\n   This is 100 percent.","name":"print","namespace":"IO","path":"IO#print","type":"instance_method","visibility":"public"},"IO#printf":{"description":"Formats and writes to <em>ios</em>, converting parameters under\ncontrol of the format string. See <code>Kernel#sprintf</code>\nfor details.","name":"printf","namespace":"IO","path":"IO#printf","type":"instance_method","visibility":"public"},"IO#putc":{"description":"If <i>obj</i> is <code>Numeric</code>, write the character whose code is\nthe least-significant byte of <i>obj</i>.\nIf <i>obj</i> is <code>String</code>, write the first character\nof <i>obj</i> to <em>ios</em>.\nOtherwise, raise <code>TypeError</code>.\n\n   $stdout.putc \"A\"\n   $stdout.putc 65\n\n<em>produces:</em>\n\n   AA","name":"putc","namespace":"IO","path":"IO#putc","type":"instance_method","visibility":"public"},"IO#puts":{"description":"Writes the given object(s) to <em>ios</em>.\nWrites a newline after any that do not already end\nwith a newline sequence. Returns +nil+.\n\nThe stream must be opened for writing.\nIf called with an array argument, writes each element on a new line.\nEach given object that isn't a string or array will be converted\nby calling its +to_s+ method.\nIf called without arguments, outputs a single newline.\n\n   $stdout.puts(\"this\", \"is\", [\"a\", \"test\"])\n\n<em>produces:</em>\n\n   this\n   is\n   a\n   test\n\nNote that +puts+ always uses newlines and is not affected\nby the output record separator (<code>$\\\\</code>).","name":"puts","namespace":"IO","path":"IO#puts","type":"instance_method","visibility":"public"},"IO#pwrite":{"description":"Writes the given string to <em>ios</em> at <i>offset</i> using pwrite()\nsystem call.  This is advantageous to combining IO#seek and IO#write\nin that it is atomic, allowing multiple threads/process to share the\nsame IO object for reading the file at various locations.\nThis bypasses any userspace buffering of the IO layer.\nReturns the number of bytes written.\nRaises <code>SystemCallError</code> on error and <code>NotImplementedError</code>\nif platform does not implement the system call.\n\n   File.open(\"out\", \"w\") do |f|\n     f.pwrite(\"ABCDEF\", 3)   #=> 6\n   end\n\n   File.read(\"out\")          #=> \"\\u0000\\u0000\\u0000ABCDEF\"","name":"pwrite","namespace":"IO","path":"IO#pwrite","type":"instance_method","visibility":"public"},"IO#read":{"description":"Reads _length_ bytes from the I/O stream.\n\n_length_ must be a non-negative integer or +nil+.\n\nIf _length_ is a positive integer, +read+ tries to read\n_length_ bytes without any conversion (binary mode).\nIt returns +nil+ if an EOF is encountered before anything can be read.\nFewer than _length_ bytes are returned if an EOF is encountered during\nthe read.\nIn the case of an integer _length_, the resulting string is always\nin ASCII-8BIT encoding.\n\nIf _length_ is omitted or is +nil+, it reads until EOF\nand the encoding conversion is applied, if applicable.\nA string is returned even if EOF is encountered before any data is read.\n\nIf _length_ is zero, it returns an empty string (<code>\"\"</code>).\n\nIf the optional _outbuf_ argument is present,\nit must reference a String, which will receive the data.\nThe _outbuf_ will contain only the received data after the method call\neven if it is not empty at the beginning.\n\nWhen this method is called at end of file, it returns +nil+\nor <code>\"\"</code>, depending on _length_:\n+read+, <code>read(nil)</code>, and <code>read(0)</code> return\n<code>\"\"</code>,\n<code>read(<i>positive_integer</i>)</code> returns +nil+.\n\n   f = File.new(\"testfile\")\n   f.read(16)   #=> \"This is line one\"\n\n   # read whole file\n   open(\"file\") do |f|\n     data = f.read   # This returns a string even if the file is empty.\n     # ...\n   end\n\n   # iterate over fixed length records\n   open(\"fixed-record-file\") do |f|\n     while record = f.read(256)\n       # ...\n     end\n   end\n\n   # iterate over variable length records,\n   # each record is prefixed by its 32-bit length\n   open(\"variable-record-file\") do |f|\n     while len = f.read(4)\n       len = len.unpack(\"N\")[0]   # 32-bit length\n       record = f.read(len)       # This returns a string even if len is 0.\n     end\n   end\n\nNote that this method behaves like the fread() function in C.\nThis means it retries to invoke read(2) system calls to read data\nwith the specified length (or until EOF).\nThis behavior is preserved even if <i>ios</i> is in non-blocking mode.\n(This method is non-blocking flag insensitive as other methods.)\nIf you need the behavior like a single read(2) system call,\nconsider #readpartial, #read_nonblock, and #sysread.","name":"read","namespace":"IO","path":"IO#read","type":"instance_method","visibility":"public"},"IO#readbyte":{"description":"Reads a byte as with <code>IO#getbyte</code>, but raises an\n<code>EOFError</code> on end of file.","name":"readbyte","namespace":"IO","path":"IO#readbyte","type":"instance_method","visibility":"public"},"IO#readchar":{"description":"Reads a one-character string from <em>ios</em>. Raises an\n<code>EOFError</code> on end of file.\n\n   f = File.new(\"testfile\")\n   f.readchar   #=> \"h\"\n   f.readchar   #=> \"e\"","name":"readchar","namespace":"IO","path":"IO#readchar","type":"instance_method","visibility":"public"},"IO#readline":{"description":"Reads a line as with <code>IO#gets</code>, but raises an\n<code>EOFError</code> on end of file.","name":"readline","namespace":"IO","path":"IO#readline","type":"instance_method","visibility":"public"},"IO#readlines":{"description":"Reads all of the lines in <em>ios</em>, and returns them in\nan array. Lines are separated by the optional <i>sep</i>. If\n<i>sep</i> is +nil+, the rest of the stream is returned\nas a single record.\nIf the first argument is an integer, or an\noptional second argument is given, the returning string would not be\nlonger than the given value in bytes. The stream must be opened for\nreading or an <code>IOError</code> will be raised.\n\n   f = File.new(\"testfile\")\n   f.readlines[0]   #=> \"This is line one\\n\"\n\n   f = File.new(\"testfile\", chomp: true)\n   f.readlines[0]   #=> \"This is line one\"\n\nSee IO.readlines for details about getline_args.","name":"readlines","namespace":"IO","path":"IO#readlines","type":"instance_method","visibility":"public"},"IO#readpartial":{"description":"Reads at most <i>maxlen</i> bytes from the I/O stream.\nIt blocks only if <em>ios</em> has no data immediately available.\nIt doesn't block if some data available.\n\nIf the optional _outbuf_ argument is present,\nit must reference a String, which will receive the data.\nThe _outbuf_ will contain only the received data after the method call\neven if it is not empty at the beginning.\n\nIt raises <code>EOFError</code> on end of file.\n\nreadpartial is designed for streams such as pipe, socket, tty, etc.\nIt blocks only when no data immediately available.\nThis means that it blocks only when following all conditions hold.\n* the byte buffer in the IO object is empty.\n* the content of the stream is empty.\n* the stream is not reached to EOF.\n\nWhen readpartial blocks, it waits data or EOF on the stream.\nIf some data is reached, readpartial returns with the data.\nIf EOF is reached, readpartial raises EOFError.\n\nWhen readpartial doesn't blocks, it returns or raises immediately.\nIf the byte buffer is not empty, it returns the data in the buffer.\nOtherwise if the stream has some content,\nit returns the data in the stream.\nOtherwise if the stream is reached to EOF, it raises EOFError.\n\n   r, w = IO.pipe           #               buffer          pipe content\n   w << \"abc\"               #               \"\"              \"abc\".\n   r.readpartial(4096)      #=> \"abc\"       \"\"              \"\"\n   r.readpartial(4096)      # blocks because buffer and pipe is empty.\n\n   r, w = IO.pipe           #               buffer          pipe content\n   w << \"abc\"               #               \"\"              \"abc\"\n   w.close                  #               \"\"              \"abc\" EOF\n   r.readpartial(4096)      #=> \"abc\"       \"\"              EOF\n   r.readpartial(4096)      # raises EOFError\n\n   r, w = IO.pipe           #               buffer          pipe content\n   w << \"abc\\ndef\\n\"        #               \"\"              \"abc\\ndef\\n\"\n   r.gets                   #=> \"abc\\n\"     \"def\\n\"         \"\"\n   w << \"ghi\\n\"             #               \"def\\n\"         \"ghi\\n\"\n   r.readpartial(4096)      #=> \"def\\n\"     \"\"              \"ghi\\n\"\n   r.readpartial(4096)      #=> \"ghi\\n\"     \"\"              \"\"\n\nNote that readpartial behaves similar to sysread.\nThe differences are:\n* If the byte buffer is not empty, read from the byte buffer instead of \"sysread for buffered IO (IOError)\".\n* It doesn't cause Errno::EWOULDBLOCK and Errno::EINTR.  When readpartial meets EWOULDBLOCK and EINTR by read system call, readpartial retry the system call.\n\nThe latter means that readpartial is nonblocking-flag insensitive.\nIt blocks on the situation IO#sysread causes Errno::EWOULDBLOCK as if the fd is blocking mode.","name":"readpartial","namespace":"IO","path":"IO#readpartial","type":"instance_method","visibility":"public"},"IO#reopen":{"description":"Reassociates <em>ios</em> with the I/O stream given in\n<i>other_IO</i> or to a new stream opened on <i>path</i>. This may\ndynamically change the actual class of this stream.\n\n   f1 = File.new(\"testfile\")\n   f2 = File.new(\"testfile\")\n   f2.readlines[0]   #=> \"This is line one\\n\"\n   f2.reopen(f1)     #=> #<File:testfile>\n   f2.readlines[0]   #=> \"This is line one\\n\"","name":"reopen","namespace":"IO","path":"IO#reopen","type":"instance_method","visibility":"public"},"IO#rewind":{"description":"Positions <em>ios</em> to the beginning of input, resetting\n<code>lineno</code> to zero.\n\n   f = File.new(\"testfile\")\n   f.readline   #=> \"This is line one\\n\"\n   f.rewind     #=> 0\n   f.lineno     #=> 0\n   f.readline   #=> \"This is line one\\n\"\n\nNote that it cannot be used with streams such as pipes, ttys, and sockets.","name":"rewind","namespace":"IO","path":"IO#rewind","type":"instance_method","visibility":"public"},"IO#seek":{"description":"Seeks to a given offset <i>anInteger</i> in the stream according to\nthe value of <i>whence</i>:\n\n  :CUR or IO::SEEK_CUR  | Seeks to _amount_ plus current position\n  ----------------------+--------------------------------------------------\n  :END or IO::SEEK_END  | Seeks to _amount_ plus end of stream (you\n                        | probably want a negative value for _amount_)\n  ----------------------+--------------------------------------------------\n  :SET or IO::SEEK_SET  | Seeks to the absolute location given by _amount_\n\nExample:\n\n   f = File.new(\"testfile\")\n   f.seek(-13, IO::SEEK_END)   #=> 0\n   f.readline                  #=> \"And so on...\\n\"","name":"seek","namespace":"IO","path":"IO#seek","type":"instance_method","visibility":"public"},"IO#set_encoding":{"description":"If single argument is specified, read string from io is tagged\nwith the encoding specified.  If encoding is a colon separated two\nencoding names \"A:B\", the read string is converted from encoding A\n(external encoding) to encoding B (internal encoding), then tagged\nwith B.  If two arguments are specified, those must be encoding\nobjects or encoding names, and the first one is the external encoding, and the\nsecond one is the internal encoding.\nIf the external encoding and the internal encoding is specified,\noptional hash argument specify the conversion option.","name":"set_encoding","namespace":"IO","path":"IO#set_encoding","type":"instance_method","visibility":"public"},"IO#stat":{"description":"Returns status information for <em>ios</em> as an object of type\n<code>File::Stat</code>.\n\n   f = File.new(\"testfile\")\n   s = f.stat\n   \"%o\" % s.mode   #=> \"100644\"\n   s.blksize       #=> 4096\n   s.atime         #=> Wed Apr 09 08:53:54 CDT 2003","name":"stat","namespace":"IO","path":"IO#stat","type":"instance_method","visibility":"public"},"IO#sync":{"description":"Returns the current ``sync mode'' of <em>ios</em>. When sync mode is\ntrue, all output is immediately flushed to the underlying operating\nsystem and is not buffered by Ruby internally. See also\n<code>IO#fsync</code>.\n\n   f = File.new(\"testfile\")\n   f.sync   #=> false","name":"sync","namespace":"IO","path":"IO#sync","type":"instance_method","visibility":"public"},"IO#sync=":{"description":"","name":"sync=","namespace":"IO","path":"IO#sync=","type":"instance_method","visibility":"public"},"IO#sysread":{"description":"Reads <i>maxlen</i> bytes from <em>ios</em> using a low-level\nread and returns them as a string.  Do not mix with other methods\nthat read from <em>ios</em> or you may get unpredictable results.\n\nIf the optional _outbuf_ argument is present,\nit must reference a String, which will receive the data.\nThe _outbuf_ will contain only the received data after the method call\neven if it is not empty at the beginning.\n\nRaises <code>SystemCallError</code> on error and\n<code>EOFError</code> at end of file.\n\n   f = File.new(\"testfile\")\n   f.sysread(16)   #=> \"This is line one\"","name":"sysread","namespace":"IO","path":"IO#sysread","type":"instance_method","visibility":"public"},"IO#sysseek":{"description":"Seeks to a given <i>offset</i> in the stream according to the value\nof <i>whence</i> (see <code>IO#seek</code> for values of\n<i>whence</i>). Returns the new offset into the file.\n\n   f = File.new(\"testfile\")\n   f.sysseek(-13, IO::SEEK_END)   #=> 53\n   f.sysread(10)                  #=> \"And so on.\"","name":"sysseek","namespace":"IO","path":"IO#sysseek","type":"instance_method","visibility":"public"},"IO#syswrite":{"description":"Writes the given string to <em>ios</em> using a low-level write.\nReturns the number of bytes written. Do not mix with other methods\nthat write to <em>ios</em> or you may get unpredictable results.\nRaises <code>SystemCallError</code> on error.\n\n   f = File.new(\"out\", \"w\")\n   f.syswrite(\"ABCDEF\")   #=> 6","name":"syswrite","namespace":"IO","path":"IO#syswrite","type":"instance_method","visibility":"public"},"IO#tell":{"description":"Returns the current offset (in bytes) of <em>ios</em>.\n\n   f = File.new(\"testfile\")\n   f.pos    #=> 0\n   f.gets   #=> \"This is line one\\n\"\n   f.pos    #=> 17","name":"tell","namespace":"IO","path":"IO#tell","type":"instance_method","visibility":"public"},"IO#to_io":{"description":"Returns <em>ios</em>.","name":"to_io","namespace":"IO","path":"IO#to_io","type":"instance_method","visibility":"public"},"IO#tty?":{"description":"Returns <code>true</code> if <em>ios</em> is associated with a\nterminal device (tty), <code>false</code> otherwise.\n\n   File.new(\"testfile\").isatty   #=> false\n   File.new(\"/dev/tty\").isatty   #=> true","name":"tty?","namespace":"IO","path":"IO#tty?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"IO#ungetbyte":{"description":"Pushes back bytes (passed as a parameter) onto <em>ios</em>,\nsuch that a subsequent buffered read will return it. Only one byte\nmay be pushed back before a subsequent read operation (that is,\nyou will be able to read only the last of several bytes that have been pushed\nback). Has no effect with unbuffered reads (such as <code>IO#sysread</code>).\n\n   f = File.new(\"testfile\")   #=> #<File:testfile>\n   b = f.getbyte              #=> 0x38\n   f.ungetbyte(b)             #=> nil\n   f.getbyte                  #=> 0x38","name":"ungetbyte","namespace":"IO","path":"IO#ungetbyte","type":"instance_method","visibility":"public"},"IO#ungetc":{"description":"Pushes back one character (passed as a parameter) onto <em>ios</em>,\nsuch that a subsequent buffered character read will return it. Only one character\nmay be pushed back before a subsequent read operation (that is,\nyou will be able to read only the last of several characters that have been pushed\nback). Has no effect with unbuffered reads (such as <code>IO#sysread</code>).\n\n   f = File.new(\"testfile\")   #=> #<File:testfile>\n   c = f.getc                 #=> \"8\"\n   f.ungetc(c)                #=> nil\n   f.getc                     #=> \"8\"","name":"ungetc","namespace":"IO","path":"IO#ungetc","type":"instance_method","visibility":"public"},"IO#write":{"description":"Writes the given strings to <em>ios</em>. The stream must be opened\nfor writing. Arguments that are not a string will be converted\nto a string using <code>to_s</code>. Returns the number of bytes\nwritten in total.\n\n   count = $stdout.write(\"This is\", \" a test\\n\")\n   puts \"That was #{count} bytes of data\"\n\n<em>produces:</em>\n\n   This is a test\n   That was 15 bytes of data","name":"write","namespace":"IO","path":"IO#write","type":"instance_method","visibility":"public"},"IO.binread":{"description":"Opens the file, optionally seeks to the given <i>offset</i>, then returns\n<i>length</i> bytes (defaulting to the rest of the file).\n<code>binread</code> ensures the file is closed before returning.\nThe open mode would be \"rb:ASCII-8BIT\".\n\n   IO.binread(\"testfile\")           #=> \"This is line one\\nThis is line two\\nThis is line three\\nAnd so on...\\n\"\n   IO.binread(\"testfile\", 20)       #=> \"This is line one\\nThi\"\n   IO.binread(\"testfile\", 20, 10)   #=> \"ne one\\nThis is line \"","name":"binread","namespace":"IO","path":"IO.binread","type":"class_method","visibility":"public"},"IO.binwrite":{"description":"Same as <code>IO.write</code> except opening the file in binary mode\nand ASCII-8BIT encoding (\"wb:ASCII-8BIT\").","name":"binwrite","namespace":"IO","path":"IO.binwrite","type":"class_method","visibility":"public"},"IO.copy_stream":{"description":"IO.copy_stream copies <i>src</i> to <i>dst</i>.\n<i>src</i> and <i>dst</i> is either a filename or an IO-like object.\nIO-like object for <i>src</i> should have <code>readpartial</code> or\n<code>read</code> method.\nIO-like object for <i>dst</i> should have <code>write</code> method.\n(Specialized mechanisms, such as sendfile system call, may be used\non appropriate situation.)\n\nThis method returns the number of bytes copied.\n\nIf optional arguments are not given,\nthe start position of the copy is\nthe beginning of the filename or\nthe current file offset of the IO.\nThe end position of the copy is the end of file.\n\nIf <i>copy_length</i> is given,\nNo more than <i>copy_length</i> bytes are copied.\n\nIf <i>src_offset</i> is given,\nit specifies the start position of the copy.\n\nWhen <i>src_offset</i> is specified and\n<i>src</i> is an IO,\nIO.copy_stream doesn't move the current file offset.","name":"copy_stream","namespace":"IO","path":"IO.copy_stream","type":"class_method","visibility":"public"},"IO.for_fd":{"description":"Synonym for <code>IO.new</code>.","name":"for_fd","namespace":"IO","path":"IO.for_fd","type":"class_method","visibility":"public"},"IO.foreach":{"description":"Executes the block for every line in the named I/O port, where lines\nare separated by <em>sep</em>.\n\nIf no block is given, an enumerator is returned instead.\n\n   IO.foreach(\"testfile\") {|x| print \"GOT \", x }\n\n<em>produces:</em>\n\n   GOT This is line one\n   GOT This is line two\n   GOT This is line three\n   GOT And so on...\n\nIf the last argument is a hash, it's the keyword argument to open.\nSee IO.readlines for details about getline_args.\nAnd see also IO.read for details about open_args.","name":"foreach","namespace":"IO","path":"IO.foreach","type":"class_method","visibility":"public"},"IO.new":{"description":":nodoc:","name":"new","namespace":"IO","path":"IO.new","type":"class_method","visibility":"public"},"IO.open":{"description":"call-seq:\n   IO.open(fd, mode=\"r\" [, opt])                -> io\n   IO.open(fd, mode=\"r\" [, opt]) {|io| block }  -> obj\n\nWith no associated block, <code>IO.open</code> is a synonym for IO.new.  If\nthe optional code block is given, it will be passed +io+ as an argument,\nand the IO object will automatically be closed when the block terminates.\nIn this instance, IO.open returns the value of the block.\n\nSee IO.new for a description of the +fd+, +mode+ and +opt+ parameters.","name":"open","namespace":"IO","path":"IO.open","type":"class_method","visibility":"public"},"IO.pipe":{"description":"IO.pipe(...) {|read_io, write_io| ... }\n\nCreates a pair of pipe endpoints (connected to each other) and\nreturns them as a two-element array of <code>IO</code> objects:\n<code>[</code> <i>read_io</i>, <i>write_io</i> <code>]</code>.\n\nIf a block is given, the block is called and\nreturns the value of the block.\n<i>read_io</i> and <i>write_io</i> are sent to the block as arguments.\nIf read_io and write_io are not closed when the block exits, they are closed.\ni.e. closing read_io and/or write_io doesn't cause an error.\n\nNot available on all platforms.\n\nIf an encoding (encoding name or encoding object) is specified as an optional argument,\nread string from pipe is tagged with the encoding specified.\nIf the argument is a colon separated two encoding names \"A:B\",\nthe read string is converted from encoding A (external encoding)\nto encoding B (internal encoding), then tagged with B.\nIf two optional arguments are specified, those must be\nencoding objects or encoding names,\nand the first one is the external encoding,\nand the second one is the internal encoding.\nIf the external encoding and the internal encoding is specified,\noptional hash argument specify the conversion option.\n\nIn the example below, the two processes close the ends of the pipe\nthat they are not using. This is not just a cosmetic nicety. The\nread end of a pipe will not generate an end of file condition if\nthere are any writers with the pipe still open. In the case of the\nparent process, the <code>rd.read</code> will never return if it\ndoes not first issue a <code>wr.close</code>.\n\n   rd, wr = IO.pipe\n\n   if fork\n     wr.close\n     puts \"Parent got: <#{rd.read}>\"\n     rd.close\n     Process.wait\n   else\n     rd.close\n     puts \"Sending message to parent\"\n     wr.write \"Hi Dad\"\n     wr.close\n   end\n\n<em>produces:</em>\n\n   Sending message to parent\n   Parent got: <Hi Dad>","name":"pipe","namespace":"IO","path":"IO.pipe","type":"class_method","visibility":"public"},"IO.popen":{"description":"Runs the specified command as a subprocess; the subprocess's\nstandard input and output will be connected to the returned\n<code>IO</code> object.\n\nThe PID of the started process can be obtained by IO#pid method.\n\n_cmd_ is a string or an array as follows.\n\n  cmd:\n    \"-\"                                      : fork\n    commandline                              : command line string which is passed to a shell\n    [env, cmdname, arg1, ..., opts]          : command name and zero or more arguments (no shell)\n    [env, [cmdname, argv0], arg1, ..., opts] : command name, argv[0] and zero or more arguments (no shell)\n  (env and opts are optional.)\n\nIf _cmd_ is a +String+ ``<code>-</code>'',\nthen a new instance of Ruby is started as the subprocess.\n\nIf <i>cmd</i> is an +Array+ of +String+,\nthen it will be used as the subprocess's +argv+ bypassing a shell.\nThe array can contain a hash at first for environments and\na hash at last for options similar to <code>spawn</code>.\n\nThe default mode for the new file object is ``r'',\nbut <i>mode</i> may be set to any of the modes listed in the description for class IO.\nThe last argument <i>opt</i> qualifies <i>mode</i>.\n\n  # set IO encoding\n  IO.popen(\"nkf -e filename\", :external_encoding=>\"EUC-JP\") {|nkf_io|\n    euc_jp_string = nkf_io.read\n  }\n\n  # merge standard output and standard error using\n  # spawn option.  See the document of Kernel.spawn.\n  IO.popen([\"ls\", \"/\", :err=>[:child, :out]]) {|ls_io|\n    ls_result_with_error = ls_io.read\n  }\n\n  # spawn options can be mixed with IO options\n  IO.popen([\"ls\", \"/\"], :err=>[:child, :out]) {|ls_io|\n    ls_result_with_error = ls_io.read\n  }\n\nRaises exceptions which <code>IO.pipe</code> and\n<code>Kernel.spawn</code> raise.\n\nIf a block is given, Ruby will run the command as a child connected\nto Ruby with a pipe. Ruby's end of the pipe will be passed as a\nparameter to the block.\nAt the end of block, Ruby closes the pipe and sets <code>$?</code>.\nIn this case <code>IO.popen</code> returns\nthe value of the block.\n\nIf a block is given with a _cmd_ of ``<code>-</code>'',\nthe block will be run in two separate processes: once in the parent,\nand once in a child. The parent process will be passed the pipe\nobject as a parameter to the block, the child version of the block\nwill be passed +nil+, and the child's standard in and\nstandard out will be connected to the parent through the pipe. Not\navailable on all platforms.\n\n   f = IO.popen(\"uname\")\n   p f.readlines\n   f.close\n   puts \"Parent is #{Process.pid}\"\n   IO.popen(\"date\") {|f| puts f.gets }\n   IO.popen(\"-\") {|f| $stderr.puts \"#{Process.pid} is here, f is #{f.inspect}\"}\n   p $?\n   IO.popen(%w\"sed -e s|^|<foo>| -e s&$&;zot;&\", \"r+\") {|f|\n     f.puts \"bar\"; f.close_write; puts f.gets\n   }\n\n<em>produces:</em>\n\n   [\"Linux\\n\"]\n   Parent is 21346\n   Thu Jan 15 22:41:19 JST 2009\n   21346 is here, f is #<IO:fd 3>\n   21352 is here, f is nil\n   #<Process::Status: pid 21352 exit 0>\n   <foo>bar;zot;","name":"popen","namespace":"IO","path":"IO.popen","type":"class_method","visibility":"public"},"IO.read":{"description":"Opens the file, optionally seeks to the given +offset+, then returns\n+length+ bytes (defaulting to the rest of the file).  <code>read</code>\nensures the file is closed before returning.\n\nIf +name+ starts with a pipe character (<code>\"|\"</code>), a subprocess is\ncreated in the same way as Kernel#open, and its output is returned.\n\n=== Options\n\nThe options hash accepts the following keys:\n\n:encoding::\n  string or encoding\n\n  Specifies the encoding of the read string.  +:encoding+ will be ignored\n  if +length+ is specified.  See Encoding.aliases for possible encodings.\n\n:mode::\n  string or integer\n\n  Specifies the <i>mode</i> argument for open().  It must start\n  with an \"r\", otherwise it will cause an error.\n  See IO.new for the list of possible modes.\n\n:open_args::\n  array\n\n  Specifies arguments for open() as an array.  This key can not be used\n  in combination with either +:encoding+ or +:mode+.\n\nExamples:\n\n  IO.read(\"testfile\")              #=> \"This is line one\\nThis is line two\\nThis is line three\\nAnd so on...\\n\"\n  IO.read(\"testfile\", 20)          #=> \"This is line one\\nThi\"\n  IO.read(\"testfile\", 20, 10)      #=> \"ne one\\nThis is line \"\n  IO.read(\"binfile\", mode: \"rb\")   #=> \"\\xF7\\x00\\x00\\x0E\\x12\"","name":"read","namespace":"IO","path":"IO.read","type":"class_method","visibility":"public"},"IO.readlines":{"description":"Reads the entire file specified by <i>name</i> as individual\nlines, and returns those lines in an array. Lines are separated by\n<i>sep</i>.\n\n   a = IO.readlines(\"testfile\")\n   a[0]   #=> \"This is line one\\n\"\n\n   b = IO.readlines(\"testfile\", chomp: true)\n   b[0]   #=> \"This is line one\"\n\nIf the last argument is a hash, it's the keyword argument to open.\n\n=== Options for getline\n\nThe options hash accepts the following keys:\n\n:chomp::\n  When the optional +chomp+ keyword argument has a true value,\n  <code>\\n</code>, <code>\\r</code>, and <code>\\r\\n</code>\n  will be removed from the end of each line.\n\nSee also IO.read for details about open_args.","name":"readlines","namespace":"IO","path":"IO.readlines","type":"class_method","visibility":"public"},"IO.select":{"description":"Calls select(2) system call.\nIt monitors given arrays of <code>IO</code> objects, waits until one or more\nof <code>IO</code> objects are ready for reading, are ready for writing,\nand have pending exceptions respectively, and returns an array that\ncontains arrays of those IO objects.  It will return +nil+\nif optional <i>timeout</i> value is given and no <code>IO</code> object\nis ready in <i>timeout</i> seconds.\n\n<code>IO.select</code> peeks the buffer of <code>IO</code> objects for testing readability.\nIf the <code>IO</code> buffer is not empty,\n<code>IO.select</code> immediately notifies readability.\nThis \"peek\" only happens for <code>IO</code> objects.\nIt does not happen for IO-like objects such as OpenSSL::SSL::SSLSocket.\n\nThe best way to use <code>IO.select</code> is invoking it\nafter nonblocking methods such as <code>read_nonblock</code>, <code>write_nonblock</code>, etc.\nThe methods raise an exception which is extended by\n<code>IO::WaitReadable</code> or <code>IO::WaitWritable</code>.\nThe modules notify how the caller should wait with <code>IO.select</code>.\nIf <code>IO::WaitReadable</code> is raised, the caller should wait for reading.\nIf <code>IO::WaitWritable</code> is raised, the caller should wait for writing.\n\nSo, blocking read (<code>readpartial</code>) can be emulated using\n<code>read_nonblock</code> and <code>IO.select</code> as follows:\n\n  begin\n    result = io_like.read_nonblock(maxlen)\n  rescue IO::WaitReadable\n    IO.select([io_like])\n    retry\n  rescue IO::WaitWritable\n    IO.select(nil, [io_like])\n    retry\n  end\n\nEspecially, the combination of nonblocking methods and\n<code>IO.select</code> is preferred for <code>IO</code> like\nobjects such as <code>OpenSSL::SSL::SSLSocket</code>.\nIt has <code>to_io</code> method to return underlying <code>IO</code> object.\n<code>IO.select</code> calls <code>to_io</code> to obtain the file descriptor to wait.\n\nThis means that readability notified by <code>IO.select</code> doesn't mean\nreadability from <code>OpenSSL::SSL::SSLSocket</code> object.\n\nThe most likely situation is that <code>OpenSSL::SSL::SSLSocket</code> buffers some data.\n<code>IO.select</code> doesn't see the buffer.\nSo <code>IO.select</code> can block when <code>OpenSSL::SSL::SSLSocket#readpartial</code> doesn't block.\n\nHowever, several more complicated situations exist.\n\nSSL is a protocol which is sequence of records.\nThe record consists of multiple bytes.\nSo, the remote side of SSL sends a partial record,\n<code>IO.select</code> notifies readability but\n<code>OpenSSL::SSL::SSLSocket</code> cannot decrypt a byte and\n<code>OpenSSL::SSL::SSLSocket#readpartial</code> will blocks.\n\nAlso, the remote side can request SSL renegotiation which forces\nthe local SSL engine to write some data.\nThis means <code>OpenSSL::SSL::SSLSocket#readpartial</code> may\ninvoke <code>write</code> system call and it can block.\nIn such a situation, <code>OpenSSL::SSL::SSLSocket#read_nonblock</code>\nraises IO::WaitWritable instead of blocking.\nSo, the caller should wait for ready for writability as above example.\n\nThe combination of nonblocking methods and <code>IO.select</code> is\nalso useful for streams such as tty, pipe socket socket when\nmultiple processes read from a stream.\n\nFinally, Linux kernel developers don't guarantee that\nreadability of select(2) means readability of following read(2) even\nfor a single process.\nSee select(2) manual on GNU/Linux system.\n\nInvoking <code>IO.select</code> before <code>IO#readpartial</code> works well as usual.\nHowever it is not the best way to use <code>IO.select</code>.\n\nThe writability notified by select(2) doesn't show\nhow many bytes writable.\n<code>IO#write</code> method blocks until given whole string is written.\nSo, <code>IO#write(two or more bytes)</code> can block after writability is notified by <code>IO.select</code>.\n<code>IO#write_nonblock</code> is required to avoid the blocking.\n\nBlocking write (<code>write</code>) can be emulated using\n<code>write_nonblock</code> and <code>IO.select</code> as follows:\nIO::WaitReadable should also be rescued for SSL renegotiation in <code>OpenSSL::SSL::SSLSocket</code>.\n\n  while 0 < string.bytesize\n    begin\n      written = io_like.write_nonblock(string)\n    rescue IO::WaitReadable\n      IO.select([io_like])\n      retry\n    rescue IO::WaitWritable\n      IO.select(nil, [io_like])\n      retry\n    end\n    string = string.byteslice(written..-1)\n  end\n\n=== Parameters\nread_array:: an array of <code>IO</code> objects that wait until ready for read\nwrite_array:: an array of <code>IO</code> objects that wait until ready for write\nerror_array:: an array of <code>IO</code> objects that wait for exceptions\ntimeout:: a numeric value in second\n\n=== Example\n\n    rp, wp = IO.pipe\n    mesg = \"ping \"\n    100.times {\n      # IO.select follows IO#read.  Not the best way to use IO.select.\n      rs, ws, = IO.select([rp], [wp])\n      if r = rs[0]\n        ret = r.read(5)\n        print ret\n        case ret\n        when /ping/\n          mesg = \"pong\\n\"\n        when /pong/\n          mesg = \"ping \"\n        end\n      end\n      if w = ws[0]\n        w.write(mesg)\n      end\n    }\n\n<em>produces:</em>\n\n    ping pong\n    ping pong\n    ping pong\n    (snipped)\n    ping","name":"select","namespace":"IO","path":"IO.select","type":"class_method","visibility":"public"},"IO.sysopen":{"description":"Opens the given path, returning the underlying file descriptor as a\n<code>Integer</code>.\n\n   IO.sysopen(\"testfile\")   #=> 3","name":"sysopen","namespace":"IO","path":"IO.sysopen","type":"class_method","visibility":"public"},"IO.try_convert":{"description":"Try to convert <i>obj</i> into an IO, using to_io method.\nReturns converted IO or +nil+ if <i>obj</i> cannot be converted\nfor any reason.\n\n   IO.try_convert(STDOUT)     #=> STDOUT\n   IO.try_convert(\"STDOUT\")   #=> nil\n\n   require 'zlib'\n   f = open(\"/tmp/zz.gz\")       #=> #<File:/tmp/zz.gz>\n   z = Zlib::GzipReader.open(f) #=> #<Zlib::GzipReader:0x81d8744>\n   IO.try_convert(z)            #=> #<File:/tmp/zz.gz>","name":"try_convert","namespace":"IO","path":"IO.try_convert","type":"class_method","visibility":"public"},"IO.write":{"description":"Opens the file, optionally seeks to the given <i>offset</i>, writes\n<i>string</i>, then returns the length written.\n<code>write</code> ensures the file is closed before returning.\nIf <i>offset</i> is not given in write mode, the file is truncated.\nOtherwise, it is not truncated.\n\n  IO.write(\"testfile\", \"0123456789\", 20)  #=> 10\n  # File could contain:  \"This is line one\\nThi0123456789two\\nThis is line three\\nAnd so on...\\n\"\n  IO.write(\"testfile\", \"0123456789\")      #=> 10\n  # File would now read: \"0123456789\"\n\nIf the last argument is a hash, it specifies options for the internal\nopen().  It accepts the following keys:\n\n:encoding::\n  string or encoding\n\n  Specifies the encoding of the read string.\n  See Encoding.aliases for possible encodings.\n\n:mode::\n  string or integer\n\n  Specifies the <i>mode</i> argument for open().  It must start\n  with \"w\", \"a\", or \"r+\", otherwise it will cause an error.\n  See IO.new for the list of possible modes.\n\n:perm::\n  integer\n\n  Specifies the <i>perm</i> argument for open().\n\n:open_args::\n  array\n\n  Specifies arguments for open() as an array.\n  This key can not be used in combination with other keys.","name":"write","namespace":"IO","path":"IO.write","type":"class_method","visibility":"public"},"IO::EAGAINWaitReadable":{"description":"","name":"EAGAINWaitReadable","namespace":"IO","path":"IO::EAGAINWaitReadable","type":"class","visibility":"public"},"IO::EAGAINWaitWritable":{"description":"","name":"EAGAINWaitWritable","namespace":"IO","path":"IO::EAGAINWaitWritable","type":"class","visibility":"public"},"IO::EINPROGRESSWaitReadable":{"description":"","name":"EINPROGRESSWaitReadable","namespace":"IO","path":"IO::EINPROGRESSWaitReadable","type":"class","visibility":"public"},"IO::EINPROGRESSWaitWritable":{"description":"","name":"EINPROGRESSWaitWritable","namespace":"IO","path":"IO::EINPROGRESSWaitWritable","type":"class","visibility":"public"},"IO::EWOULDBLOCKWaitReadable":{"description":":EAGAINWaitReadable","name":"EWOULDBLOCKWaitReadable","namespace":"IO","path":"IO::EWOULDBLOCKWaitReadable","type":"constant","return":["Class",""],"visibility":"public"},"IO::EWOULDBLOCKWaitWritable":{"description":":EAGAINWaitWritable","name":"EWOULDBLOCKWaitWritable","namespace":"IO","path":"IO::EWOULDBLOCKWaitWritable","type":"constant","return":["Class",""],"visibility":"public"},"IO::SEEK_CUR":{"description":"Set I/O position from the current position","name":"SEEK_CUR","namespace":"IO","path":"IO::SEEK_CUR","type":"constant","return":["Fixnum",""],"visibility":"public"},"IO::SEEK_DATA":{"description":"Set I/O position to the next location containing data","name":"SEEK_DATA","namespace":"IO","path":"IO::SEEK_DATA","type":"constant","return":["Fixnum",""],"visibility":"public"},"IO::SEEK_END":{"description":"Set I/O position from the end","name":"SEEK_END","namespace":"IO","path":"IO::SEEK_END","type":"constant","return":["Fixnum",""],"visibility":"public"},"IO::SEEK_HOLE":{"description":"Set I/O position to the next hole","name":"SEEK_HOLE","namespace":"IO","path":"IO::SEEK_HOLE","type":"constant","return":["Fixnum",""],"visibility":"public"},"IO::SEEK_SET":{"description":"Set I/O position from the beginning","name":"SEEK_SET","namespace":"IO","path":"IO::SEEK_SET","type":"constant","return":["Fixnum",""],"visibility":"public"},"IO::WaitReadable":{"description":"","name":"WaitReadable","namespace":"IO","path":"IO::WaitReadable","type":"module","visibility":"public"},"IO::WaitWritable":{"description":"","name":"WaitWritable","namespace":"IO","path":"IO::WaitWritable","type":"module","visibility":"public"},"ObjectSpace":{"description":"The ObjectSpace module contains a number of routines\n that interact with the garbage collection facility and allow you to\n traverse all living objects with an iterator.\n\n ObjectSpace also provides support for object finalizers, procs that will be\n called when a specific object is about to be destroyed by garbage\n collection.\n\n    require 'objspace'\n\n    a = \"A\"\n    b = \"B\"\n\n    ObjectSpace.define_finalizer(a, proc {|id| puts \"Finalizer one on #{id}\" })\n    ObjectSpace.define_finalizer(b, proc {|id| puts \"Finalizer two on #{id}\" })\n\n _produces:_\n\n    Finalizer two on 537763470\n    Finalizer one on 537763480","name":"ObjectSpace","namespace":"","path":"ObjectSpace","type":"module","visibility":"public"},"ObjectSpace#_id2ref":{"description":"Converts an object id to a reference to the object. May not be\ncalled on an object id passed as a parameter to a finalizer.\n\n   s = \"I am a string\"                    #=> \"I am a string\"\n   r = ObjectSpace._id2ref(s.object_id)   #=> \"I am a string\"\n   r == s                                 #=> true","name":"_id2ref","namespace":"ObjectSpace","path":"ObjectSpace#_id2ref","type":"module_function","visibility":"private"},"ObjectSpace#count_objects":{"description":"Counts all objects grouped by type.\n\nIt returns a hash, such as:\n{\n :TOTAL=>10000,\n :FREE=>3011,\n :T_OBJECT=>6,\n :T_CLASS=>404,\n # ...\n}\n\nThe contents of the returned hash are implementation specific.\nIt may be changed in future.\n\nThe keys starting with +:T_+ means live objects.\nFor example, +:T_ARRAY+ is the number of arrays.\n+:FREE+ means object slots which is not used now.\n+:TOTAL+ means sum of above.\n\nIf the optional argument +result_hash+ is given,\nit is overwritten and returned. This is intended to avoid probe effect.\n\n  h = {}\n  ObjectSpace.count_objects(h)\n  puts h\n  # => { :TOTAL=>10000, :T_CLASS=>158280, :T_MODULE=>20672, :T_STRING=>527249 }\n\nThis method is only expected to work on C Ruby.","name":"count_objects","namespace":"ObjectSpace","path":"ObjectSpace#count_objects","type":"module_function","visibility":"private"},"ObjectSpace#define_finalizer":{"description":"Adds <i>aProc</i> as a finalizer, to be called after <i>obj</i>\nwas destroyed. The object ID of the <i>obj</i> will be passed\nas an argument to <i>aProc</i>. If <i>aProc</i> is a lambda or\nmethod, make sure it can be called with a single argument.","name":"define_finalizer","namespace":"ObjectSpace","path":"ObjectSpace#define_finalizer","type":"module_function","visibility":"private"},"ObjectSpace#each_object":{"description":"Calls the block once for each living, nonimmediate object in this\nRuby process. If <i>module</i> is specified, calls the block\nfor only those classes or modules that match (or are a subclass of)\n<i>module</i>. Returns the number of objects found. Immediate\nobjects (<code>Fixnum</code>s, <code>Symbol</code>s\n<code>true</code>, <code>false</code>, and <code>nil</code>) are\nnever returned. In the example below, <code>each_object</code>\nreturns both the numbers we defined and several constants defined in\nthe <code>Math</code> module.\n\nIf no block is given, an enumerator is returned instead.\n\n   a = 102.7\n   b = 95       # Won't be returned\n   c = 12345678987654321\n   count = ObjectSpace.each_object(Numeric) {|x| p x }\n   puts \"Total count: #{count}\"\n\n<em>produces:</em>\n\n   12345678987654321\n   102.7\n   2.71828182845905\n   3.14159265358979\n   2.22044604925031e-16\n   1.7976931348623157e+308\n   2.2250738585072e-308\n   Total count: 7","name":"each_object","namespace":"ObjectSpace","path":"ObjectSpace#each_object","type":"module_function","visibility":"private"},"ObjectSpace#garbage_collect":{"description":"Initiates garbage collection, unless manually disabled.\n\nThis method is defined with keyword arguments that default to true:\n\n   def GC.start(full_mark: true, immediate_sweep: true); end\n\nUse full_mark: false to perform a minor GC.\nUse immediate_sweep: false to defer sweeping (use lazy sweep).\n\nNote: These keyword arguments are implementation and version dependent. They\nare not guaranteed to be future-compatible, and may be ignored if the\nunderlying implementation does not support them.","name":"garbage_collect","namespace":"ObjectSpace","path":"ObjectSpace#garbage_collect","type":"module_function","visibility":"private"},"ObjectSpace#undefine_finalizer":{"description":"Removes all finalizers for <i>obj</i>.","name":"undefine_finalizer","namespace":"ObjectSpace","path":"ObjectSpace#undefine_finalizer","type":"module_function","visibility":"private"},"ObjectSpace._id2ref":{"description":"Converts an object id to a reference to the object. May not be\ncalled on an object id passed as a parameter to a finalizer.\n\n   s = \"I am a string\"                    #=> \"I am a string\"\n   r = ObjectSpace._id2ref(s.object_id)   #=> \"I am a string\"\n   r == s                                 #=> true","name":"_id2ref","namespace":"ObjectSpace","path":"ObjectSpace._id2ref","type":"module_function","visibility":"public"},"ObjectSpace.count_objects":{"description":"Counts all objects grouped by type.\n\nIt returns a hash, such as:\n{\n :TOTAL=>10000,\n :FREE=>3011,\n :T_OBJECT=>6,\n :T_CLASS=>404,\n # ...\n}\n\nThe contents of the returned hash are implementation specific.\nIt may be changed in future.\n\nThe keys starting with +:T_+ means live objects.\nFor example, +:T_ARRAY+ is the number of arrays.\n+:FREE+ means object slots which is not used now.\n+:TOTAL+ means sum of above.\n\nIf the optional argument +result_hash+ is given,\nit is overwritten and returned. This is intended to avoid probe effect.\n\n  h = {}\n  ObjectSpace.count_objects(h)\n  puts h\n  # => { :TOTAL=>10000, :T_CLASS=>158280, :T_MODULE=>20672, :T_STRING=>527249 }\n\nThis method is only expected to work on C Ruby.","name":"count_objects","namespace":"ObjectSpace","path":"ObjectSpace.count_objects","type":"module_function","visibility":"public"},"ObjectSpace.define_finalizer":{"description":"Adds <i>aProc</i> as a finalizer, to be called after <i>obj</i>\nwas destroyed. The object ID of the <i>obj</i> will be passed\nas an argument to <i>aProc</i>. If <i>aProc</i> is a lambda or\nmethod, make sure it can be called with a single argument.","name":"define_finalizer","namespace":"ObjectSpace","path":"ObjectSpace.define_finalizer","type":"module_function","visibility":"public"},"ObjectSpace.each_object":{"description":"Calls the block once for each living, nonimmediate object in this\nRuby process. If <i>module</i> is specified, calls the block\nfor only those classes or modules that match (or are a subclass of)\n<i>module</i>. Returns the number of objects found. Immediate\nobjects (<code>Fixnum</code>s, <code>Symbol</code>s\n<code>true</code>, <code>false</code>, and <code>nil</code>) are\nnever returned. In the example below, <code>each_object</code>\nreturns both the numbers we defined and several constants defined in\nthe <code>Math</code> module.\n\nIf no block is given, an enumerator is returned instead.\n\n   a = 102.7\n   b = 95       # Won't be returned\n   c = 12345678987654321\n   count = ObjectSpace.each_object(Numeric) {|x| p x }\n   puts \"Total count: #{count}\"\n\n<em>produces:</em>\n\n   12345678987654321\n   102.7\n   2.71828182845905\n   3.14159265358979\n   2.22044604925031e-16\n   1.7976931348623157e+308\n   2.2250738585072e-308\n   Total count: 7","name":"each_object","namespace":"ObjectSpace","path":"ObjectSpace.each_object","type":"module_function","visibility":"public"},"ObjectSpace.garbage_collect":{"description":"Initiates garbage collection, unless manually disabled.\n\nThis method is defined with keyword arguments that default to true:\n\n   def GC.start(full_mark: true, immediate_sweep: true); end\n\nUse full_mark: false to perform a minor GC.\nUse immediate_sweep: false to defer sweeping (use lazy sweep).\n\nNote: These keyword arguments are implementation and version dependent. They\nare not guaranteed to be future-compatible, and may be ignored if the\nunderlying implementation does not support them.","name":"garbage_collect","namespace":"ObjectSpace","path":"ObjectSpace.garbage_collect","type":"module_function","visibility":"public"},"ObjectSpace.undefine_finalizer":{"description":"Removes all finalizers for <i>obj</i>.","name":"undefine_finalizer","namespace":"ObjectSpace","path":"ObjectSpace.undefine_finalizer","type":"module_function","visibility":"public"},"ObjectSpace::WeakMap":{"description":"An ObjectSpace::WeakMap object holds references to\nany objects, but those objects can get garbage collected.\n\nThis class is mostly used internally by WeakRef, please use\n+lib/weakref.rb+ for the public interface.","name":"WeakMap","namespace":"ObjectSpace","path":"ObjectSpace::WeakMap","type":"class","visibility":"public"},"ObjectSpace::WeakMap#[]":{"description":"Retrieves a weakly referenced object with the given key","name":"[]","namespace":"ObjectSpace::WeakMap","path":"ObjectSpace::WeakMap#[]","type":"instance_method","visibility":"public"},"ObjectSpace::WeakMap#[]=":{"description":"Creates a weak reference from the given key to the given value","name":"[]=","namespace":"ObjectSpace::WeakMap","path":"ObjectSpace::WeakMap#[]=","type":"instance_method","visibility":"public"},"ObjectSpace::WeakMap#each":{"description":"Iterates over keys and objects in a weakly referenced object","name":"each","namespace":"ObjectSpace::WeakMap","path":"ObjectSpace::WeakMap#each","type":"instance_method","visibility":"public"},"ObjectSpace::WeakMap#each_key":{"description":"Iterates over keys and objects in a weakly referenced object","name":"each_key","namespace":"ObjectSpace::WeakMap","path":"ObjectSpace::WeakMap#each_key","type":"instance_method","visibility":"public"},"ObjectSpace::WeakMap#each_pair":{"description":"Iterates over keys and objects in a weakly referenced object","name":"each_pair","namespace":"ObjectSpace::WeakMap","path":"ObjectSpace::WeakMap#each_pair","type":"instance_method","visibility":"public"},"ObjectSpace::WeakMap#each_value":{"description":"Iterates over keys and objects in a weakly referenced object","name":"each_value","namespace":"ObjectSpace::WeakMap","path":"ObjectSpace::WeakMap#each_value","type":"instance_method","visibility":"public"},"ObjectSpace::WeakMap#finalize":{"description":"","name":"finalize","namespace":"ObjectSpace::WeakMap","path":"ObjectSpace::WeakMap#finalize","type":"instance_method","visibility":"private"},"ObjectSpace::WeakMap#include?":{"description":"Returns +true+ if +key+ is registered","name":"include?","namespace":"ObjectSpace::WeakMap","path":"ObjectSpace::WeakMap#include?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"ObjectSpace::WeakMap#inspect":{"description":"","name":"inspect","namespace":"ObjectSpace::WeakMap","path":"ObjectSpace::WeakMap#inspect","type":"instance_method","visibility":"public"},"ObjectSpace::WeakMap#key?":{"description":"Returns +true+ if +key+ is registered","name":"key?","namespace":"ObjectSpace::WeakMap","path":"ObjectSpace::WeakMap#key?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"ObjectSpace::WeakMap#keys":{"description":"Iterates over keys and objects in a weakly referenced object","name":"keys","namespace":"ObjectSpace::WeakMap","path":"ObjectSpace::WeakMap#keys","type":"instance_method","visibility":"public"},"ObjectSpace::WeakMap#length":{"description":"","name":"length","namespace":"ObjectSpace::WeakMap","path":"ObjectSpace::WeakMap#length","type":"instance_method","visibility":"public"},"ObjectSpace::WeakMap#member?":{"description":"Returns +true+ if +key+ is registered","name":"member?","namespace":"ObjectSpace::WeakMap","path":"ObjectSpace::WeakMap#member?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"ObjectSpace::WeakMap#size":{"description":"","name":"size","namespace":"ObjectSpace::WeakMap","path":"ObjectSpace::WeakMap#size","type":"instance_method","visibility":"public"},"ObjectSpace::WeakMap#values":{"description":"Iterates over values and objects in a weakly referenced object","name":"values","namespace":"ObjectSpace::WeakMap","path":"ObjectSpace::WeakMap#values","type":"instance_method","visibility":"public"},"Hash":{"description":"A Hash is a dictionary-like collection of unique keys and their values.\nAlso called associative arrays, they are similar to Arrays, but where an\nArray uses integers as its index, a Hash allows you to use any object\ntype.\n\nHashes enumerate their values in the order that the corresponding keys\nwere inserted.\n\nA Hash can be easily created by using its implicit form:\n\n  grades = { \"Jane Doe\" => 10, \"Jim Doe\" => 6 }\n\nHashes allow an alternate syntax for keys that are symbols.\nInstead of\n\n  options = { :font_size => 10, :font_family => \"Arial\" }\n\nYou could write it as:\n\n  options = { font_size: 10, font_family: \"Arial\" }\n\nEach named key is a symbol you can access in hash:\n\n  options[:font_size]  # => 10\n\nA Hash can also be created through its ::new method:\n\n  grades = Hash.new\n  grades[\"Dorothy Doe\"] = 9\n\nHashes have a <em>default value</em> that is returned when accessing\nkeys that do not exist in the hash. If no default is set +nil+ is used.\nYou can set the default value by sending it as an argument to Hash.new:\n\n  grades = Hash.new(0)\n\nOr by using the #default= method:\n\n  grades = {\"Timmy Doe\" => 8}\n  grades.default = 0\n\nAccessing a value in a Hash requires using its key:\n\n  puts grades[\"Jane Doe\"] # => 0\n\n=== Common Uses\n\nHashes are an easy way to represent data structures, such as\n\n  books         = {}\n  books[:matz]  = \"The Ruby Programming Language\"\n  books[:black] = \"The Well-Grounded Rubyist\"\n\nHashes are also commonly used as a way to have named parameters in\nfunctions. Note that no brackets are used below. If a hash is the last\nargument on a method call, no braces are needed, thus creating a really\nclean interface:\n\n  Person.create(name: \"John Doe\", age: 27)\n\n  def self.create(params)\n    @name = params[:name]\n    @age  = params[:age]\n  end\n\n=== Hash Keys\n\nTwo objects refer to the same hash key when their <code>hash</code> value\nis identical and the two objects are <code>eql?</code> to each other.\n\nA user-defined class may be used as a hash key if the <code>hash</code>\nand <code>eql?</code> methods are overridden to provide meaningful\nbehavior.  By default, separate instances refer to separate hash keys.\n\nA typical implementation of <code>hash</code> is based on the\nobject's data while <code>eql?</code> is usually aliased to the overridden\n<code>==</code> method:\n\n  class Book\n    attr_reader :author, :title\n\n    def initialize(author, title)\n      @author = author\n      @title = title\n    end\n\n    def ==(other)\n      self.class === other and\n        other.author == @author and\n        other.title == @title\n    end\n\n    alias eql? ==\n\n    def hash\n      @author.hash ^ @title.hash # XOR\n    end\n  end\n\n  book1 = Book.new 'matz', 'Ruby in a Nutshell'\n  book2 = Book.new 'matz', 'Ruby in a Nutshell'\n\n  reviews = {}\n\n  reviews[book1] = 'Great reference!'\n  reviews[book2] = 'Nice and compact!'\n\n  reviews.length #=> 1\n\nSee also Object#hash and Object#eql?","name":"Hash","namespace":"","path":"Hash","type":"class","visibility":"public"},"Hash#<":{"description":"Returns <code>true</code> if <i>hash</i> is subset of\n<i>other</i>.\n\n   h1 = {a:1, b:2}\n   h2 = {a:1, b:2, c:3}\n   h1 < h2    #=> true\n   h2 < h1    #=> false\n   h1 < h1    #=> false","name":"<","namespace":"Hash","path":"Hash#<","type":"instance_method","visibility":"public"},"Hash#<=":{"description":"Returns <code>true</code> if <i>hash</i> is subset of\n<i>other</i> or equals to <i>other</i>.\n\n   h1 = {a:1, b:2}\n   h2 = {a:1, b:2, c:3}\n   h1 <= h2   #=> true\n   h2 <= h1   #=> false\n   h1 <= h1   #=> true","name":"<=","namespace":"Hash","path":"Hash#<=","type":"instance_method","visibility":"public"},"Hash#==":{"description":"Equality---Two hashes are equal if they each contain the same number\nof keys and if each key-value pair is equal to (according to\n<code>Object#==</code>) the corresponding elements in the other\nhash.\n\n   h1 = { \"a\" => 1, \"c\" => 2 }\n   h2 = { 7 => 35, \"c\" => 2, \"a\" => 1 }\n   h3 = { \"a\" => 1, \"c\" => 2, 7 => 35 }\n   h4 = { \"a\" => 1, \"d\" => 2, \"f\" => 35 }\n   h1 == h2   #=> false\n   h2 == h3   #=> true\n   h3 == h4   #=> false\n\nThe orders of each hashes are not compared.\n\n   h1 = { \"a\" => 1, \"c\" => 2 }\n   h2 = { \"c\" => 2, \"a\" => 1 }\n   h1 == h2   #=> true","name":"==","namespace":"Hash","path":"Hash#==","type":"instance_method","visibility":"public"},"Hash#>":{"description":"Returns <code>true</code> if <i>other</i> is subset of\n<i>hash</i>.\n\n   h1 = {a:1, b:2}\n   h2 = {a:1, b:2, c:3}\n   h1 > h2    #=> false\n   h2 > h1    #=> true\n   h1 > h1    #=> false","name":">","namespace":"Hash","path":"Hash#>","type":"instance_method","visibility":"public"},"Hash#>=":{"description":"Returns <code>true</code> if <i>other</i> is subset of\n<i>hash</i> or equals to <i>hash</i>.\n\n   h1 = {a:1, b:2}\n   h2 = {a:1, b:2, c:3}\n   h1 >= h2   #=> false\n   h2 >= h1   #=> true\n   h1 >= h1   #=> true","name":">=","namespace":"Hash","path":"Hash#>=","type":"instance_method","visibility":"public"},"Hash#[]":{"description":"Element Reference---Retrieves the <i>value</i> object corresponding\nto the <i>key</i> object. If not found, returns the default value (see\n<code>Hash::new</code> for details).\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h[\"a\"]   #=> 100\n   h[\"c\"]   #=> nil","name":"[]","namespace":"Hash","path":"Hash#[]","type":"instance_method","visibility":"public"},"Hash#[]=":{"description":"","name":"[]=","namespace":"Hash","path":"Hash#[]=","type":"instance_method","visibility":"public"},"Hash#any?":{"description":"See also Enumerable#any?","name":"any?","namespace":"Hash","path":"Hash#any?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Hash#assoc":{"description":"Searches through the hash comparing _obj_ with the key using <code>==</code>.\nReturns the key-value pair (two elements array) or +nil+\nif no match is found.  See <code>Array#assoc</code>.\n\n   h = {\"colors\"  => [\"red\", \"blue\", \"green\"],\n        \"letters\" => [\"a\", \"b\", \"c\" ]}\n   h.assoc(\"letters\")  #=> [\"letters\", [\"a\", \"b\", \"c\"]]\n   h.assoc(\"foo\")      #=> nil","name":"assoc","namespace":"Hash","path":"Hash#assoc","type":"instance_method","visibility":"public"},"Hash#clear":{"description":"Removes all key-value pairs from <i>hsh</i>.\n\n   h = { \"a\" => 100, \"b\" => 200 }   #=> {\"a\"=>100, \"b\"=>200}\n   h.clear                          #=> {}","name":"clear","namespace":"Hash","path":"Hash#clear","type":"instance_method","visibility":"public"},"Hash#compact":{"description":"Returns a new hash with the nil values/key pairs removed\n\n   h = { a: 1, b: false, c: nil }\n   h.compact     #=> { a: 1, b: false }\n   h             #=> { a: 1, b: false, c: nil }","name":"compact","namespace":"Hash","path":"Hash#compact","type":"instance_method","visibility":"public"},"Hash#compact!":{"description":"Removes all nil values from the hash.\nReturns nil if no changes were made, otherwise returns the hash.\n\n   h = { a: 1, b: false, c: nil }\n   h.compact!     #=> { a: 1, b: false }","name":"compact!","namespace":"Hash","path":"Hash#compact!","type":"instance_method","visibility":"public"},"Hash#compare_by_identity":{"description":"Makes <i>hsh</i> compare its keys by their identity, i.e. it\nwill consider exact same objects as same keys.\n\n   h1 = { \"a\" => 100, \"b\" => 200, :c => \"c\" }\n   h1[\"a\"]        #=> 100\n   h1.compare_by_identity\n   h1.compare_by_identity? #=> true\n   h1[\"a\".dup]    #=> nil  # different objects.\n   h1[:c]         #=> \"c\"  # same symbols are all same.","name":"compare_by_identity","namespace":"Hash","path":"Hash#compare_by_identity","type":"instance_method","visibility":"public"},"Hash#compare_by_identity?":{"description":"Returns <code>true</code> if <i>hsh</i> will compare its keys by\ntheir identity.  Also see <code>Hash#compare_by_identity</code>.","name":"compare_by_identity?","namespace":"Hash","path":"Hash#compare_by_identity?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Hash#default":{"description":"Returns the default value, the value that would be returned by\n<i>hsh</i>[<i>key</i>] if <i>key</i> did not exist in <i>hsh</i>.\nSee also <code>Hash::new</code> and <code>Hash#default=</code>.\n\n   h = Hash.new                            #=> {}\n   h.default                               #=> nil\n   h.default(2)                            #=> nil\n\n   h = Hash.new(\"cat\")                     #=> {}\n   h.default                               #=> \"cat\"\n   h.default(2)                            #=> \"cat\"\n\n   h = Hash.new {|h,k| h[k] = k.to_i*10}   #=> {}\n   h.default                               #=> nil\n   h.default(2)                            #=> 20","name":"default","namespace":"Hash","path":"Hash#default","type":"instance_method","visibility":"public"},"Hash#default=":{"description":"Sets the default value, the value returned for a key that does not\nexist in the hash. It is not possible to set the default to a\n<code>Proc</code> that will be executed on each key lookup.\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h.default = \"Go fish\"\n   h[\"a\"]     #=> 100\n   h[\"z\"]     #=> \"Go fish\"\n   # This doesn't do what you might hope...\n   h.default = proc do |hash, key|\n     hash[key] = key + key\n   end\n   h[2]       #=> #<Proc:0x401b3948@-:6>\n   h[\"cat\"]   #=> #<Proc:0x401b3948@-:6>","name":"default=","namespace":"Hash","path":"Hash#default=","type":"instance_method","visibility":"public"},"Hash#default_proc":{"description":"If <code>Hash::new</code> was invoked with a block, return that\nblock, otherwise return <code>nil</code>.\n\n   h = Hash.new {|h,k| h[k] = k*k }   #=> {}\n   p = h.default_proc                 #=> #<Proc:0x401b3d08@-:1>\n   a = []                             #=> []\n   p.call(a, 2)\n   a                                  #=> [nil, nil, 4]","name":"default_proc","namespace":"Hash","path":"Hash#default_proc","type":"instance_method","visibility":"public"},"Hash#default_proc=":{"description":"Sets the default proc to be executed on each failed key lookup.\n\n   h.default_proc = proc do |hash, key|\n     hash[key] = key + key\n   end\n   h[2]       #=> 4\n   h[\"cat\"]   #=> \"catcat\"","name":"default_proc=","namespace":"Hash","path":"Hash#default_proc=","type":"instance_method","visibility":"public"},"Hash#delete":{"description":"Deletes the key-value pair and returns the value from <i>hsh</i> whose\nkey is equal to <i>key</i>. If the key is not found, it returns\n<em>nil</em>. If the optional code block is given and the\nkey is not found, pass in the key and return the result of\n<i>block</i>.\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h.delete(\"a\")                              #=> 100\n   h.delete(\"z\")                              #=> nil\n   h.delete(\"z\") { |el| \"#{el} not found\" }   #=> \"z not found\"","name":"delete","namespace":"Hash","path":"Hash#delete","type":"instance_method","visibility":"public"},"Hash#delete_if":{"description":"Deletes every key-value pair from <i>hsh</i> for which <i>block</i>\nevaluates to <code>true</code>.\n\nIf no block is given, an enumerator is returned instead.\n\n   h = { \"a\" => 100, \"b\" => 200, \"c\" => 300 }\n   h.delete_if {|key, value| key >= \"b\" }   #=> {\"a\"=>100}","name":"delete_if","namespace":"Hash","path":"Hash#delete_if","type":"instance_method","visibility":"public"},"Hash#dig":{"description":"Extracts the nested value specified by the sequence of <i>key</i>\nobjects by calling +dig+ at each step, returning +nil+ if any\nintermediate step is +nil+.\n\n  h = { foo: {bar: {baz: 1}}}\n\n  h.dig(:foo, :bar, :baz)     #=> 1\n  h.dig(:foo, :zot, :xyz)     #=> nil\n\n  g = { foo: [10, 11, 12] }\n  g.dig(:foo, 1)              #=> 11\n  g.dig(:foo, 1, 0)           #=> TypeError: Integer does not have #dig method\n  g.dig(:foo, :bar)           #=> TypeError: no implicit conversion of Symbol into Integer","name":"dig","namespace":"Hash","path":"Hash#dig","type":"instance_method","visibility":"public"},"Hash#each":{"description":"Calls <i>block</i> once for each key in <i>hsh</i>, passing the key-value\npair as parameters.\n\nIf no block is given, an enumerator is returned instead.\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h.each {|key, value| puts \"#{key} is #{value}\" }\n\n<em>produces:</em>\n\n   a is 100\n   b is 200","name":"each","namespace":"Hash","path":"Hash#each","type":"instance_method","visibility":"public"},"Hash#each_key":{"description":"Calls <i>block</i> once for each key in <i>hsh</i>, passing the key\nas a parameter.\n\nIf no block is given, an enumerator is returned instead.\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h.each_key {|key| puts key }\n\n<em>produces:</em>\n\n   a\n   b","name":"each_key","namespace":"Hash","path":"Hash#each_key","type":"instance_method","visibility":"public"},"Hash#each_pair":{"description":"Calls <i>block</i> once for each key in <i>hsh</i>, passing the key-value\npair as parameters.\n\nIf no block is given, an enumerator is returned instead.\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h.each {|key, value| puts \"#{key} is #{value}\" }\n\n<em>produces:</em>\n\n   a is 100\n   b is 200","name":"each_pair","namespace":"Hash","path":"Hash#each_pair","type":"instance_method","visibility":"public"},"Hash#each_value":{"description":"Calls <i>block</i> once for each key in <i>hsh</i>, passing the\nvalue as a parameter.\n\nIf no block is given, an enumerator is returned instead.\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h.each_value {|value| puts value }\n\n<em>produces:</em>\n\n   100\n   200","name":"each_value","namespace":"Hash","path":"Hash#each_value","type":"instance_method","visibility":"public"},"Hash#empty?":{"description":"Returns <code>true</code> if <i>hsh</i> contains no key-value pairs.\n\n   {}.empty?   #=> true","name":"empty?","namespace":"Hash","path":"Hash#empty?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Hash#eql?":{"description":"Returns <code>true</code> if <i>hash</i> and <i>other</i> are\nboth hashes with the same content.\nThe orders of each hashes are not compared.","name":"eql?","namespace":"Hash","path":"Hash#eql?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Hash#fetch":{"description":"Returns a value from the hash for the given key. If the key can't be\nfound, there are several options: With no other arguments, it will\nraise a <code>KeyError</code> exception; if <i>default</i> is given,\nthen that will be returned; if the optional code block is specified,\nthen that will be run and its result returned.\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h.fetch(\"a\")                            #=> 100\n   h.fetch(\"z\", \"go fish\")                 #=> \"go fish\"\n   h.fetch(\"z\") { |el| \"go fish, #{el}\"}   #=> \"go fish, z\"\n\nThe following example shows that an exception is raised if the key\nis not found and a default value is not supplied.\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h.fetch(\"z\")\n\n<em>produces:</em>\n\n   prog.rb:2:in `fetch': key not found (KeyError)\n    from prog.rb:2","name":"fetch","namespace":"Hash","path":"Hash#fetch","type":"instance_method","visibility":"public"},"Hash#fetch_values":{"description":"Returns an array containing the values associated with the given keys\nbut also raises <code>KeyError</code> when one of keys can't be found.\nAlso see <code>Hash#values_at</code> and <code>Hash#fetch</code>.\n\n  h = { \"cat\" => \"feline\", \"dog\" => \"canine\", \"cow\" => \"bovine\" }\n\n  h.fetch_values(\"cow\", \"cat\")                   #=> [\"bovine\", \"feline\"]\n  h.fetch_values(\"cow\", \"bird\")                  # raises KeyError\n  h.fetch_values(\"cow\", \"bird\") { |k| k.upcase } #=> [\"bovine\", \"BIRD\"]","name":"fetch_values","namespace":"Hash","path":"Hash#fetch_values","type":"instance_method","visibility":"public"},"Hash#flatten":{"description":"Returns a new array that is a one-dimensional flattening of this\nhash. That is, for every key or value that is an array, extract\nits elements into the new array.  Unlike Array#flatten, this\nmethod does not flatten recursively by default.  The optional\n<i>level</i> argument determines the level of recursion to flatten.\n\n   a =  {1=> \"one\", 2 => [2,\"two\"], 3 => \"three\"}\n   a.flatten    # => [1, \"one\", 2, [2, \"two\"], 3, \"three\"]\n   a.flatten(2) # => [1, \"one\", 2, 2, \"two\", 3, \"three\"]","name":"flatten","namespace":"Hash","path":"Hash#flatten","type":"instance_method","visibility":"public"},"Hash#has_key?":{"description":"Returns <code>true</code> if the given key is present in <i>hsh</i>.\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h.has_key?(\"a\")   #=> true\n   h.has_key?(\"z\")   #=> false\n\nNote that <code>include?</code> and <code>member?</code> do not test member\nequality using <code>==</code> as do other Enumerables.\n\nSee also Enumerable#include?","name":"has_key?","namespace":"Hash","path":"Hash#has_key?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Hash#has_value?":{"description":"Returns <code>true</code> if the given value is present for some key\nin <i>hsh</i>.\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h.value?(100)   #=> true\n   h.value?(999)   #=> false","name":"has_value?","namespace":"Hash","path":"Hash#has_value?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Hash#hash":{"description":"Compute a hash-code for this hash. Two hashes with the same content\nwill have the same hash code (and will compare using <code>eql?</code>).\n\nSee also Object#hash.","name":"hash","namespace":"Hash","path":"Hash#hash","type":"instance_method","visibility":"public"},"Hash#include?":{"description":"Returns <code>true</code> if the given key is present in <i>hsh</i>.\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h.has_key?(\"a\")   #=> true\n   h.has_key?(\"z\")   #=> false\n\nNote that <code>include?</code> and <code>member?</code> do not test member\nequality using <code>==</code> as do other Enumerables.\n\nSee also Enumerable#include?","name":"include?","namespace":"Hash","path":"Hash#include?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Hash#index":{"description":":nodoc:","name":"index","namespace":"Hash","path":"Hash#index","type":"instance_method","visibility":"public"},"Hash#initialize":{"description":"Returns a new, empty hash. If this hash is subsequently accessed by\na key that doesn't correspond to a hash entry, the value returned\ndepends on the style of <code>new</code> used to create the hash. In\nthe first form, the access returns <code>nil</code>. If\n<i>obj</i> is specified, this single object will be used for\nall <em>default values</em>. If a block is specified, it will be\ncalled with the hash object and the key, and should return the\ndefault value. It is the block's responsibility to store the value\nin the hash if required.\n\n   h = Hash.new(\"Go Fish\")\n   h[\"a\"] = 100\n   h[\"b\"] = 200\n   h[\"a\"]           #=> 100\n   h[\"c\"]           #=> \"Go Fish\"\n   # The following alters the single default object\n   h[\"c\"].upcase!   #=> \"GO FISH\"\n   h[\"d\"]           #=> \"GO FISH\"\n   h.keys           #=> [\"a\", \"b\"]\n\n   # While this creates a new default object each time\n   h = Hash.new { |hash, key| hash[key] = \"Go Fish: #{key}\" }\n   h[\"c\"]           #=> \"Go Fish: c\"\n   h[\"c\"].upcase!   #=> \"GO FISH: C\"\n   h[\"d\"]           #=> \"Go Fish: d\"\n   h.keys           #=> [\"c\", \"d\"]","name":"initialize","namespace":"Hash","path":"Hash#initialize","type":"instance_method","visibility":"public"},"Hash#initialize_copy":{"description":":nodoc:","name":"initialize_copy","namespace":"Hash","path":"Hash#initialize_copy","type":"instance_method","visibility":"public"},"Hash#inspect":{"description":"Return the contents of this hash as a string.\n\n    h = { \"c\" => 300, \"a\" => 100, \"d\" => 400, \"c\" => 300  }\n    h.to_s   #=> \"{\\\"c\\\"=>300, \\\"a\\\"=>100, \\\"d\\\"=>400}\"","name":"to_s","namespace":"Hash","path":"Hash#to_s","type":"instance_method","visibility":"public"},"Hash#to_s":{"description":"Return the contents of this hash as a string.\n\n    h = { \"c\" => 300, \"a\" => 100, \"d\" => 400, \"c\" => 300  }\n    h.to_s   #=> \"{\\\"c\\\"=>300, \\\"a\\\"=>100, \\\"d\\\"=>400}\"","name":"to_s","namespace":"Hash","path":"Hash#to_s","type":"instance_method","visibility":"public"},"Hash#invert":{"description":"Returns a new hash created by using <i>hsh</i>'s values as keys, and\nthe keys as values.\nIf a key with the same value already exists in the <i>hsh</i>, then\nthe last one defined will be used, the earlier value(s) will be discarded.\n\n   h = { \"n\" => 100, \"m\" => 100, \"y\" => 300, \"d\" => 200, \"a\" => 0 }\n   h.invert   #=> {0=>\"a\", 100=>\"m\", 200=>\"d\", 300=>\"y\"}\n\nIf there is no key with the same value, Hash#invert is involutive.\n\n  h = { a: 1, b: 3, c: 4 }\n  h.invert.invert == h #=> true\n\nThe condition, no key with the same value, can be tested by comparing\nthe size of inverted hash.\n\n  # no key with the same value\n  h = { a: 1, b: 3, c: 4 }\n  h.size == h.invert.size #=> true\n\n  # two (or more) keys has the same value\n  h = { a: 1, b: 3, c: 1 }\n  h.size == h.invert.size #=> false","name":"invert","namespace":"Hash","path":"Hash#invert","type":"instance_method","visibility":"public"},"Hash#keep_if":{"description":"Deletes every key-value pair from <i>hsh</i> for which <i>block</i>\nevaluates to false.\n\nIf no block is given, an enumerator is returned instead.","name":"keep_if","namespace":"Hash","path":"Hash#keep_if","type":"instance_method","visibility":"public"},"Hash#key":{"description":"Returns the key of an occurrence of a given value. If the value is\nnot found, returns <code>nil</code>.\n\n   h = { \"a\" => 100, \"b\" => 200, \"c\" => 300, \"d\" => 300 }\n   h.key(200)   #=> \"b\"\n   h.key(300)   #=> \"c\"\n   h.key(999)   #=> nil","name":"key","namespace":"Hash","path":"Hash#key","type":"instance_method","visibility":"public"},"Hash#key?":{"description":"Returns <code>true</code> if the given key is present in <i>hsh</i>.\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h.has_key?(\"a\")   #=> true\n   h.has_key?(\"z\")   #=> false\n\nNote that <code>include?</code> and <code>member?</code> do not test member\nequality using <code>==</code> as do other Enumerables.\n\nSee also Enumerable#include?","name":"key?","namespace":"Hash","path":"Hash#key?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Hash#keys":{"description":"Returns a new array populated with the keys from this hash. See also\n<code>Hash#values</code>.\n\n   h = { \"a\" => 100, \"b\" => 200, \"c\" => 300, \"d\" => 400 }\n   h.keys   #=> [\"a\", \"b\", \"c\", \"d\"]","name":"keys","namespace":"Hash","path":"Hash#keys","type":"instance_method","visibility":"public"},"Hash#length":{"description":"Returns the number of key-value pairs in the hash.\n\n   h = { \"d\" => 100, \"a\" => 200, \"v\" => 300, \"e\" => 400 }\n   h.length        #=> 4\n   h.delete(\"a\")   #=> 200\n   h.length        #=> 3","name":"length","namespace":"Hash","path":"Hash#length","type":"instance_method","visibility":"public"},"Hash#member?":{"description":"Returns <code>true</code> if the given key is present in <i>hsh</i>.\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h.has_key?(\"a\")   #=> true\n   h.has_key?(\"z\")   #=> false\n\nNote that <code>include?</code> and <code>member?</code> do not test member\nequality using <code>==</code> as do other Enumerables.\n\nSee also Enumerable#include?","name":"member?","namespace":"Hash","path":"Hash#member?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Hash#merge":{"description":"Returns a new hash containing the contents of <i>other_hash</i> and\nthe contents of <i>hsh</i>. If no block is specified, the value for\nentries with duplicate keys will be that of <i>other_hash</i>. Otherwise\nthe value for each duplicate key is determined by calling the block\nwith the key, its value in <i>hsh</i> and its value in <i>other_hash</i>.\n\n   h1 = { \"a\" => 100, \"b\" => 200 }\n   h2 = { \"b\" => 254, \"c\" => 300 }\n   h1.merge(h2)   #=> {\"a\"=>100, \"b\"=>254, \"c\"=>300}\n   h1.merge(h2){|key, oldval, newval| newval - oldval}\n                  #=> {\"a\"=>100, \"b\"=>54,  \"c\"=>300}\n   h1             #=> {\"a\"=>100, \"b\"=>200}","name":"merge","namespace":"Hash","path":"Hash#merge","type":"instance_method","visibility":"public"},"Hash#merge!":{"description":"Adds the contents of _other_hash_ to _hsh_.  If no block is specified,\nentries with duplicate keys are overwritten with the values from\n_other_hash_, otherwise the value of each duplicate key is determined by\ncalling the block with the key, its value in _hsh_ and its value in\n_other_hash_.\n\n   h1 = { \"a\" => 100, \"b\" => 200 }\n   h2 = { \"b\" => 254, \"c\" => 300 }\n   h1.merge!(h2)   #=> {\"a\"=>100, \"b\"=>254, \"c\"=>300}\n   h1              #=> {\"a\"=>100, \"b\"=>254, \"c\"=>300}\n\n   h1 = { \"a\" => 100, \"b\" => 200 }\n   h2 = { \"b\" => 254, \"c\" => 300 }\n   h1.merge!(h2) { |key, v1, v2| v1 }\n                   #=> {\"a\"=>100, \"b\"=>200, \"c\"=>300}\n   h1              #=> {\"a\"=>100, \"b\"=>200, \"c\"=>300}","name":"merge!","namespace":"Hash","path":"Hash#merge!","type":"instance_method","visibility":"public"},"Hash#rassoc":{"description":"Searches through the hash comparing _obj_ with the value using <code>==</code>.\nReturns the first key-value pair (two-element array) that matches. See\nalso <code>Array#rassoc</code>.\n\n   a = {1=> \"one\", 2 => \"two\", 3 => \"three\", \"ii\" => \"two\"}\n   a.rassoc(\"two\")    #=> [2, \"two\"]\n   a.rassoc(\"four\")   #=> nil","name":"rassoc","namespace":"Hash","path":"Hash#rassoc","type":"instance_method","visibility":"public"},"Hash#rehash":{"description":"Rebuilds the hash based on the current hash values for each key. If\nvalues of key objects have changed since they were inserted, this\nmethod will reindex <i>hsh</i>. If <code>Hash#rehash</code> is\ncalled while an iterator is traversing the hash, a\n<code>RuntimeError</code> will be raised in the iterator.\n\n   a = [ \"a\", \"b\" ]\n   c = [ \"c\", \"d\" ]\n   h = { a => 100, c => 300 }\n   h[a]       #=> 100\n   a[0] = \"z\"\n   h[a]       #=> nil\n   h.rehash   #=> {[\"z\", \"b\"]=>100, [\"c\", \"d\"]=>300}\n   h[a]       #=> 100","name":"rehash","namespace":"Hash","path":"Hash#rehash","type":"instance_method","visibility":"public"},"Hash#reject":{"description":"Returns a new hash consisting of entries for which the block returns false.\n\nIf no block is given, an enumerator is returned instead.\n\n   h = { \"a\" => 100, \"b\" => 200, \"c\" => 300 }\n   h.reject {|k,v| k < \"b\"}  #=> {\"b\" => 200, \"c\" => 300}\n   h.reject {|k,v| v > 100}  #=> {\"a\" => 100}","name":"reject","namespace":"Hash","path":"Hash#reject","type":"instance_method","visibility":"public"},"Hash#reject!":{"description":"Equivalent to <code>Hash#delete_if</code>, but returns\n<code>nil</code> if no changes were made.","name":"reject!","namespace":"Hash","path":"Hash#reject!","type":"instance_method","visibility":"public"},"Hash#replace":{"description":"Replaces the contents of <i>hsh</i> with the contents of\n<i>other_hash</i>.\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h.replace({ \"c\" => 300, \"d\" => 400 })   #=> {\"c\"=>300, \"d\"=>400}","name":"replace","namespace":"Hash","path":"Hash#replace","type":"instance_method","visibility":"public"},"Hash#select":{"description":"Returns a new hash consisting of entries for which the block returns true.\n\nIf no block is given, an enumerator is returned instead.\n\n   h = { \"a\" => 100, \"b\" => 200, \"c\" => 300 }\n   h.select {|k,v| k > \"a\"}  #=> {\"b\" => 200, \"c\" => 300}\n   h.select {|k,v| v < 200}  #=> {\"a\" => 100}","name":"select","namespace":"Hash","path":"Hash#select","type":"instance_method","visibility":"public"},"Hash#select!":{"description":"Equivalent to <code>Hash#keep_if</code>, but returns\n<code>nil</code> if no changes were made.","name":"select!","namespace":"Hash","path":"Hash#select!","type":"instance_method","visibility":"public"},"Hash#shift":{"description":"Removes a key-value pair from <i>hsh</i> and returns it as the\ntwo-item array <code>[</code> <i>key, value</i> <code>]</code>, or\nthe hash's default value if the hash is empty.\n\n   h = { 1 => \"a\", 2 => \"b\", 3 => \"c\" }\n   h.shift   #=> [1, \"a\"]\n   h         #=> {2=>\"b\", 3=>\"c\"}","name":"shift","namespace":"Hash","path":"Hash#shift","type":"instance_method","visibility":"public"},"Hash#size":{"description":"Returns the number of key-value pairs in the hash.\n\n   h = { \"d\" => 100, \"a\" => 200, \"v\" => 300, \"e\" => 400 }\n   h.length        #=> 4\n   h.delete(\"a\")   #=> 200\n   h.length        #=> 3","name":"size","namespace":"Hash","path":"Hash#size","type":"instance_method","visibility":"public"},"Hash#slice":{"description":"Returns a hash containing only the given keys and their values.\n\n   h = { a: 100, b: 200, c: 300 }\n   h.slice(:a)           #=> {:a=>100}\n   h.slice(:b, :c, :d)   #=> {:b=>200, :c=>300}","name":"slice","namespace":"Hash","path":"Hash#slice","type":"instance_method","visibility":"public"},"Hash#store":{"description":"","name":"store","namespace":"Hash","path":"Hash#store","type":"instance_method","visibility":"public"},"Hash#to_a":{"description":"Converts <i>hsh</i> to a nested array of <code>[</code> <i>key,\nvalue</i> <code>]</code> arrays.\n\n   h = { \"c\" => 300, \"a\" => 100, \"d\" => 400, \"c\" => 300  }\n   h.to_a   #=> [[\"c\", 300], [\"a\", 100], [\"d\", 400]]","name":"to_a","namespace":"Hash","path":"Hash#to_a","type":"instance_method","visibility":"public"},"Hash#to_h":{"description":"Returns +self+. If called on a subclass of Hash, converts\nthe receiver to a Hash object.","name":"to_h","namespace":"Hash","path":"Hash#to_h","type":"instance_method","visibility":"public"},"Hash#to_hash":{"description":"Returns +self+.","name":"to_hash","namespace":"Hash","path":"Hash#to_hash","type":"instance_method","visibility":"public"},"Hash#to_proc":{"description":"","name":"to_proc","namespace":"Hash","path":"Hash#to_proc","type":"instance_method","visibility":"public"},"Hash#transform_keys":{"description":"Returns a new hash with the results of running the block once for\nevery key.\nThis method does not change the values.\n\n   h = { a: 1, b: 2, c: 3 }\n   h.transform_keys {|k| k.to_s }  #=> { \"a\" => 1, \"b\" => 2, \"c\" => 3 }\n   h.transform_keys(&:to_s)        #=> { \"a\" => 1, \"b\" => 2, \"c\" => 3 }\n   h.transform_keys.with_index {|k, i| \"#{k}.#{i}\" }\n                                   #=> { \"a.0\" => 1, \"b.1\" => 2, \"c.2\" => 3 }\n\nIf no block is given, an enumerator is returned instead.","name":"transform_keys","namespace":"Hash","path":"Hash#transform_keys","type":"instance_method","visibility":"public"},"Hash#transform_keys!":{"description":"Invokes the given block once for each key in <i>hsh</i>, replacing it\nwith the new key returned by the block, and then returns <i>hsh</i>.\nThis method does not change the values.\n\n   h = { a: 1, b: 2, c: 3 }\n   h.transform_keys! {|k| k.to_s }  #=> { \"a\" => 1, \"b\" => 2, \"c\" => 3 }\n   h.transform_keys!(&:to_sym)      #=> { a: 1, b: 2, c: 3 }\n   h.transform_keys!.with_index {|k, i| \"#{k}.#{i}\" }\n                                    #=> { \"a.0\" => 1, \"b.1\" => 2, \"c.2\" => 3 }\n\nIf no block is given, an enumerator is returned instead.","name":"transform_keys!","namespace":"Hash","path":"Hash#transform_keys!","type":"instance_method","visibility":"public"},"Hash#transform_values":{"description":"Returns a new hash with the results of running the block once for\nevery value.\nThis method does not change the keys.\n\n   h = { a: 1, b: 2, c: 3 }\n   h.transform_values {|v| v * v + 1 }  #=> { a: 2, b: 5, c: 10 }\n   h.transform_values(&:to_s)           #=> { a: \"1\", b: \"2\", c: \"3\" }\n   h.transform_values.with_index {|v, i| \"#{v}.#{i}\" }\n                                        #=> { a: \"1.0\", b: \"2.1\", c: \"3.2\" }\n\nIf no block is given, an enumerator is returned instead.","name":"transform_values","namespace":"Hash","path":"Hash#transform_values","type":"instance_method","visibility":"public"},"Hash#transform_values!":{"description":"Invokes the given block once for each value in <i>hsh</i>, replacing it\nwith the new value returned by the block, and then returns <i>hsh</i>.\nThis method does not change the keys.\n\n   h = { a: 1, b: 2, c: 3 }\n   h.transform_values! {|v| v * v + 1 }  #=> { a: 2, b: 5, c: 10 }\n   h.transform_values!(&:to_s)           #=> { a: \"2\", b: \"5\", c: \"10\" }\n   h.transform_values!.with_index {|v, i| \"#{v}.#{i}\" }\n                                         #=> { a: \"2.0\", b: \"5.1\", c: \"10.2\" }\n\nIf no block is given, an enumerator is returned instead.","name":"transform_values!","namespace":"Hash","path":"Hash#transform_values!","type":"instance_method","visibility":"public"},"Hash#update":{"description":"Adds the contents of _other_hash_ to _hsh_.  If no block is specified,\nentries with duplicate keys are overwritten with the values from\n_other_hash_, otherwise the value of each duplicate key is determined by\ncalling the block with the key, its value in _hsh_ and its value in\n_other_hash_.\n\n   h1 = { \"a\" => 100, \"b\" => 200 }\n   h2 = { \"b\" => 254, \"c\" => 300 }\n   h1.merge!(h2)   #=> {\"a\"=>100, \"b\"=>254, \"c\"=>300}\n   h1              #=> {\"a\"=>100, \"b\"=>254, \"c\"=>300}\n\n   h1 = { \"a\" => 100, \"b\" => 200 }\n   h2 = { \"b\" => 254, \"c\" => 300 }\n   h1.merge!(h2) { |key, v1, v2| v1 }\n                   #=> {\"a\"=>100, \"b\"=>200, \"c\"=>300}\n   h1              #=> {\"a\"=>100, \"b\"=>200, \"c\"=>300}","name":"update","namespace":"Hash","path":"Hash#update","type":"instance_method","visibility":"public"},"Hash#value?":{"description":"Returns <code>true</code> if the given value is present for some key\nin <i>hsh</i>.\n\n   h = { \"a\" => 100, \"b\" => 200 }\n   h.value?(100)   #=> true\n   h.value?(999)   #=> false","name":"value?","namespace":"Hash","path":"Hash#value?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Hash#values":{"description":"Returns a new array populated with the values from <i>hsh</i>. See\nalso <code>Hash#keys</code>.\n\n   h = { \"a\" => 100, \"b\" => 200, \"c\" => 300 }\n   h.values   #=> [100, 200, 300]","name":"values","namespace":"Hash","path":"Hash#values","type":"instance_method","visibility":"public"},"Hash#values_at":{"description":"Return an array containing the values associated with the given keys.\nAlso see <code>Hash.select</code>.\n\n  h = { \"cat\" => \"feline\", \"dog\" => \"canine\", \"cow\" => \"bovine\" }\n  h.values_at(\"cow\", \"cat\")  #=> [\"bovine\", \"feline\"]","name":"values_at","namespace":"Hash","path":"Hash#values_at","type":"instance_method","visibility":"public"},"Hash.[]":{"description":"Creates a new hash populated with the given objects.\n\nSimilar to the literal <code>{ _key_ => _value_, ... }</code>. In the first\nform, keys and values occur in pairs, so there must be an even number of\narguments.\n\nThe second and third form take a single argument which is either an array\nof key-value pairs or an object convertible to a hash.\n\n   Hash[\"a\", 100, \"b\", 200]             #=> {\"a\"=>100, \"b\"=>200}\n   Hash[ [ [\"a\", 100], [\"b\", 200] ] ]   #=> {\"a\"=>100, \"b\"=>200}\n   Hash[\"a\" => 100, \"b\" => 200]         #=> {\"a\"=>100, \"b\"=>200}","name":"[]","namespace":"Hash","path":"Hash.[]","type":"class_method","visibility":"public"},"Hash.try_convert":{"description":"Try to convert <i>obj</i> into a hash, using to_hash method.\nReturns converted hash or nil if <i>obj</i> cannot be converted\nfor any reason.\n\n   Hash.try_convert({1=>2})   # => {1=>2}\n   Hash.try_convert(\"1=>2\")   # => nil","name":"try_convert","namespace":"Hash","path":"Hash.try_convert","type":"class_method","visibility":"public"},"IOError":{"description":"Raised when an IO operation fails.\n\n   File.open(\"/etc/hosts\") {|f| f << \"example\"}\n     #=> IOError: not opened for writing\n\n   File.open(\"/etc/hosts\") {|f| f.close; f.read }\n     #=> IOError: closed stream\n\nNote that some IO failures raise <code>SystemCallError</code>s\nand these are not subclasses of IOError:\n\n   File.open(\"does/not/exist\")\n     #=> Errno::ENOENT: No such file or directory - does/not/exist","name":"IOError","namespace":"","path":"IOError","type":"class","visibility":"public"},"EOFError":{"description":"Raised by some IO operations when reaching the end of file. Many IO\nmethods exist in two forms,\n\none that returns +nil+ when the end of file is reached, the other\nraises +EOFError+.\n\n+EOFError+ is a subclass of +IOError+.\n\n   file = File.open(\"/etc/hosts\")\n   file.read\n   file.gets     #=> nil\n   file.readline #=> EOFError: end of file reached","name":"EOFError","namespace":"","path":"EOFError","type":"class","visibility":"public"},"ARGF":{"description":"+ARGF+ is a stream designed for use in scripts that process files given as\ncommand-line arguments or passed in via STDIN.\n\nThe arguments passed to your script are stored in the +ARGV+ Array, one\nargument per element. +ARGF+ assumes that any arguments that aren't\nfilenames have been removed from +ARGV+. For example:\n\n    $ ruby argf.rb --verbose file1 file2\n\n    ARGV  #=> [\"--verbose\", \"file1\", \"file2\"]\n    option = ARGV.shift #=> \"--verbose\"\n    ARGV  #=> [\"file1\", \"file2\"]\n\nYou can now use +ARGF+ to work with a concatenation of each of these named\nfiles. For instance, +ARGF.read+ will return the contents of _file1_\nfollowed by the contents of _file2_.\n\nAfter a file in +ARGV+ has been read +ARGF+ removes it from the Array.\nThus, after all files have been read +ARGV+ will be empty.\n\nYou can manipulate +ARGV+ yourself to control what +ARGF+ operates on. If\nyou remove a file from +ARGV+, it is ignored by +ARGF+; if you add files to\n+ARGV+, they are treated as if they were named on the command line. For\nexample:\n\n    ARGV.replace [\"file1\"]\n    ARGF.readlines # Returns the contents of file1 as an Array\n    ARGV           #=> []\n    ARGV.replace [\"file2\", \"file3\"]\n    ARGF.read      # Returns the contents of file2 and file3\n\nIf +ARGV+ is empty, +ARGF+ acts as if it contained STDIN, i.e. the data\npiped to your script. For example:\n\n    $ echo \"glark\" | ruby -e 'p ARGF.read'\n    \"glark\\n\"","name":"ARGF","namespace":"","path":"ARGF","type":"class","visibility":"public"},"ARGF#argv":{"description":"Returns the +ARGV+ array, which contains the arguments passed to your\nscript, one per element.\n\nFor example:\n\n    $ ruby argf.rb -v glark.txt\n\n    ARGF.argv   #=> [\"-v\", \"glark.txt\"]","name":"argv","namespace":"ARGF","path":"ARGF#argv","type":"instance_method","visibility":"public"},"ARGF#binmode":{"description":"Puts +ARGF+ into binary mode. Once a stream is in binary mode, it cannot\nbe reset to non-binary mode. This option has the following effects:\n\n*  Newline conversion is disabled.\n*  Encoding conversion is disabled.\n*  Content is treated as ASCII-8BIT.","name":"binmode","namespace":"ARGF","path":"ARGF#binmode","type":"instance_method","visibility":"public"},"ARGF#binmode?":{"description":"Returns true if +ARGF+ is being read in binary mode; false otherwise.\nTo enable binary mode use +ARGF.binmode+.\n\nFor example:\n\n   ARGF.binmode?  #=> false\n   ARGF.binmode\n   ARGF.binmode?  #=> true","name":"binmode?","namespace":"ARGF","path":"ARGF#binmode?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"ARGF#bytes":{"description":"This is a deprecated alias for <code>each_byte</code>.","name":"bytes","namespace":"ARGF","path":"ARGF#bytes","type":"instance_method","visibility":"public"},"ARGF#chars":{"description":"This is a deprecated alias for <code>each_char</code>.","name":"chars","namespace":"ARGF","path":"ARGF#chars","type":"instance_method","visibility":"public"},"ARGF#close":{"description":"Closes the current file and skips to the next file in ARGV. If there are\nno more files to open, just closes the current file. +STDIN+ will not be\nclosed.\n\nFor example:\n\n   $ ruby argf.rb foo bar\n\n   ARGF.filename  #=> \"foo\"\n   ARGF.close\n   ARGF.filename  #=> \"bar\"\n   ARGF.close","name":"close","namespace":"ARGF","path":"ARGF#close","type":"instance_method","visibility":"public"},"ARGF#closed?":{"description":"Returns _true_ if the current file has been closed; _false_ otherwise. Use\n+ARGF.close+ to actually close the current file.","name":"closed?","namespace":"ARGF","path":"ARGF#closed?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"ARGF#codepoints":{"description":"This is a deprecated alias for <code>each_codepoint</code>.","name":"codepoints","namespace":"ARGF","path":"ARGF#codepoints","type":"instance_method","visibility":"public"},"ARGF#each":{"description":"ARGF.each_line(sep=$/)        {|line| block }  -> ARGF\n   ARGF.each_line(sep=$/, limit) {|line| block }  -> ARGF\n   ARGF.each_line(...)                            -> an_enumerator\n\nReturns an enumerator which iterates over each line (separated by _sep_,\nwhich defaults to your platform's newline character) of each file in\n+ARGV+. If a block is supplied, each line in turn will be yielded to the\nblock, otherwise an enumerator is returned.\nThe optional _limit_ argument is an +Integer+ specifying the maximum\nlength of each line; longer lines will be split according to this limit.\n\nThis method allows you to treat the files supplied on the command line as\na single file consisting of the concatenation of each named file. After\nthe last line of the first file has been returned, the first line of the\nsecond file is returned. The +ARGF.filename+ and +ARGF.lineno+ methods can\nbe used to determine the filename and line number, respectively, of the\ncurrent line.\n\nFor example, the following code prints out each line of each named file\nprefixed with its line number, displaying the filename once per file:\n\n   ARGF.each_line do |line|\n     puts ARGF.filename if ARGF.lineno == 1\n     puts \"#{ARGF.lineno}: #{line}\"\n   end","name":"each","namespace":"ARGF","path":"ARGF#each","type":"instance_method","visibility":"public"},"ARGF#each_byte":{"description":"ARGF.each_byte {|byte| block }  -> ARGF\n   ARGF.each_byte                  -> an_enumerator\n\nIterates over each byte of each file in +ARGV+.\nA byte is returned as an +Integer+ in the range 0..255.\n\nThis method allows you to treat the files supplied on the command line as\na single file consisting of the concatenation of each named file. After\nthe last byte of the first file has been returned, the first byte of the\nsecond file is returned. The +ARGF.filename+ method can be used to\ndetermine the filename of the current byte.\n\nIf no block is given, an enumerator is returned instead.\n\nFor example:\n\n   ARGF.bytes.to_a  #=> [35, 32, ... 95, 10]","name":"each_byte","namespace":"ARGF","path":"ARGF#each_byte","type":"instance_method","visibility":"public"},"ARGF#each_char":{"description":"Iterates over each character of each file in +ARGF+.\n\nThis method allows you to treat the files supplied on the command line as\na single file consisting of the concatenation of each named file. After\nthe last character of the first file has been returned, the first\ncharacter of the second file is returned. The +ARGF.filename+ method can\nbe used to determine the name of the file in which the current character\nappears.\n\nIf no block is given, an enumerator is returned instead.","name":"each_char","namespace":"ARGF","path":"ARGF#each_char","type":"instance_method","visibility":"public"},"ARGF#each_codepoint":{"description":"Iterates over each codepoint of each file in +ARGF+.\n\nThis method allows you to treat the files supplied on the command line as\na single file consisting of the concatenation of each named file. After\nthe last codepoint of the first file has been returned, the first\ncodepoint of the second file is returned. The +ARGF.filename+ method can\nbe used to determine the name of the file in which the current codepoint\nappears.\n\nIf no block is given, an enumerator is returned instead.","name":"each_codepoint","namespace":"ARGF","path":"ARGF#each_codepoint","type":"instance_method","visibility":"public"},"ARGF#each_line":{"description":"ARGF.each_line(sep=$/)        {|line| block }  -> ARGF\n   ARGF.each_line(sep=$/, limit) {|line| block }  -> ARGF\n   ARGF.each_line(...)                            -> an_enumerator\n\nReturns an enumerator which iterates over each line (separated by _sep_,\nwhich defaults to your platform's newline character) of each file in\n+ARGV+. If a block is supplied, each line in turn will be yielded to the\nblock, otherwise an enumerator is returned.\nThe optional _limit_ argument is an +Integer+ specifying the maximum\nlength of each line; longer lines will be split according to this limit.\n\nThis method allows you to treat the files supplied on the command line as\na single file consisting of the concatenation of each named file. After\nthe last line of the first file has been returned, the first line of the\nsecond file is returned. The +ARGF.filename+ and +ARGF.lineno+ methods can\nbe used to determine the filename and line number, respectively, of the\ncurrent line.\n\nFor example, the following code prints out each line of each named file\nprefixed with its line number, displaying the filename once per file:\n\n   ARGF.each_line do |line|\n     puts ARGF.filename if ARGF.lineno == 1\n     puts \"#{ARGF.lineno}: #{line}\"\n   end","name":"each_line","namespace":"ARGF","path":"ARGF#each_line","type":"instance_method","visibility":"public"},"ARGF#eof":{"description":"Returns true if the current file in +ARGF+ is at end of file, i.e. it has\nno data to read. The stream must be opened for reading or an +IOError+\nwill be raised.\n\n   $ echo \"eof\" | ruby argf.rb\n\n   ARGF.eof?                 #=> false\n   3.times { ARGF.readchar }\n   ARGF.eof?                 #=> false\n   ARGF.readchar             #=> \"\\n\"\n   ARGF.eof?                 #=> true","name":"eof","namespace":"ARGF","path":"ARGF#eof","type":"instance_method","visibility":"public"},"ARGF#eof?":{"description":"Returns true if the current file in +ARGF+ is at end of file, i.e. it has\nno data to read. The stream must be opened for reading or an +IOError+\nwill be raised.\n\n   $ echo \"eof\" | ruby argf.rb\n\n   ARGF.eof?                 #=> false\n   3.times { ARGF.readchar }\n   ARGF.eof?                 #=> false\n   ARGF.readchar             #=> \"\\n\"\n   ARGF.eof?                 #=> true","name":"eof?","namespace":"ARGF","path":"ARGF#eof?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"ARGF#external_encoding":{"description":"Returns the external encoding for files read from +ARGF+ as an +Encoding+\nobject. The external encoding is the encoding of the text as stored in a\nfile. Contrast with +ARGF.internal_encoding+, which is the encoding used\nto represent this text within Ruby.\n\nTo set the external encoding use +ARGF.set_encoding+.\n\nFor example:\n\n   ARGF.external_encoding  #=>  #<Encoding:UTF-8>","name":"external_encoding","namespace":"ARGF","path":"ARGF#external_encoding","type":"instance_method","visibility":"public"},"ARGF#file":{"description":"Returns the current file as an +IO+ or +File+ object.\n<code>$stdin</code> is returned when the current file is STDIN.\n\nFor example:\n\n   $ echo \"foo\" > foo\n   $ echo \"bar\" > bar\n\n   $ ruby argf.rb foo bar\n\n   ARGF.file      #=> #<File:foo>\n   ARGF.read(5)   #=> \"foo\\nb\"\n   ARGF.file      #=> #<File:bar>","name":"file","namespace":"ARGF","path":"ARGF#file","type":"instance_method","visibility":"public"},"ARGF#filename":{"description":"Returns the current filename. \"-\" is returned when the current file is\nSTDIN.\n\nFor example:\n\n   $ echo \"foo\" > foo\n   $ echo \"bar\" > bar\n   $ echo \"glark\" > glark\n\n   $ ruby argf.rb foo bar glark\n\n   ARGF.filename  #=> \"foo\"\n   ARGF.read(5)   #=> \"foo\\nb\"\n   ARGF.filename  #=> \"bar\"\n   ARGF.skip\n   ARGF.filename  #=> \"glark\"","name":"filename","namespace":"ARGF","path":"ARGF#filename","type":"instance_method","visibility":"public"},"ARGF#fileno":{"description":"Returns an integer representing the numeric file descriptor for\nthe current file. Raises an +ArgumentError+ if there isn't a current file.\n\n   ARGF.fileno    #=> 3","name":"fileno","namespace":"ARGF","path":"ARGF#fileno","type":"instance_method","visibility":"public"},"ARGF#getbyte":{"description":"Gets the next 8-bit byte (0..255) from +ARGF+. Returns +nil+ if called at\nthe end of the stream.\n\nFor example:\n\n   $ echo \"foo\" > file\n   $ ruby argf.rb file\n\n   ARGF.getbyte #=> 102\n   ARGF.getbyte #=> 111\n   ARGF.getbyte #=> 111\n   ARGF.getbyte #=> 10\n   ARGF.getbyte #=> nil","name":"getbyte","namespace":"ARGF","path":"ARGF#getbyte","type":"instance_method","visibility":"public"},"ARGF#getc":{"description":"Reads the next character from +ARGF+ and returns it as a +String+. Returns\n+nil+ at the end of the stream.\n\n+ARGF+ treats the files named on the command line as a single file created\nby concatenating their contents. After returning the last character of the\nfirst file, it returns the first character of the second file, and so on.\n\nFor example:\n\n   $ echo \"foo\" > file\n   $ ruby argf.rb file\n\n   ARGF.getc  #=> \"f\"\n   ARGF.getc  #=> \"o\"\n   ARGF.getc  #=> \"o\"\n   ARGF.getc  #=> \"\\n\"\n   ARGF.getc  #=> nil\n   ARGF.getc  #=> nil","name":"getc","namespace":"ARGF","path":"ARGF#getc","type":"instance_method","visibility":"public"},"ARGF#gets":{"description":"Returns the next line from the current file in +ARGF+.\n\nBy default lines are assumed to be separated by <code>$/</code>;\nto use a different character as a separator, supply it as a +String+\nfor the _sep_ argument.\n\nThe optional _limit_ argument specifies how many characters of each line\nto return. By default all characters are returned.\n\nSee IO.readlines for details about getline_args.","name":"gets","namespace":"ARGF","path":"ARGF#gets","type":"instance_method","visibility":"public"},"ARGF#initialize":{"description":":nodoc:","name":"initialize","namespace":"ARGF","path":"ARGF#initialize","type":"instance_method","visibility":"public"},"ARGF#initialize_copy":{"description":":nodoc:","name":"initialize_copy","namespace":"ARGF","path":"ARGF#initialize_copy","type":"instance_method","visibility":"public"},"ARGF#inplace_mode":{"description":"Returns the file extension appended to the names of modified files under\nin-place edit mode. This value can be set using +ARGF.inplace_mode=+ or\npassing the +-i+ switch to the Ruby binary.","name":"inplace_mode","namespace":"ARGF","path":"ARGF#inplace_mode","type":"instance_method","visibility":"public"},"ARGF#inplace_mode=":{"description":"Sets the filename extension for in-place editing mode to the given String.\nEach file being edited has this value appended to its filename. The\nmodified file is saved under this new name.\n\nFor example:\n\n    $ ruby argf.rb file.txt\n\n    ARGF.inplace_mode = '.bak'\n    ARGF.each_line do |line|\n      print line.sub(\"foo\",\"bar\")\n    end\n\nEach line of _file.txt_ has the first occurrence of \"foo\" replaced with\n\"bar\", then the new line is written out to _file.txt.bak_.","name":"inplace_mode=","namespace":"ARGF","path":"ARGF#inplace_mode=","type":"instance_method","visibility":"public"},"ARGF#inspect":{"description":"Returns \"ARGF\".","name":"inspect","namespace":"ARGF","path":"ARGF#inspect","type":"instance_method","visibility":"public"},"ARGF#internal_encoding":{"description":"Returns the internal encoding for strings read from +ARGF+ as an\n+Encoding+ object.\n\nIf +ARGF.set_encoding+ has been called with two encoding names, the second\nis returned. Otherwise, if +Encoding.default_external+ has been set, that\nvalue is returned. Failing that, if a default external encoding was\nspecified on the command-line, that value is used. If the encoding is\nunknown, +nil+ is returned.","name":"internal_encoding","namespace":"ARGF","path":"ARGF#internal_encoding","type":"instance_method","visibility":"public"},"ARGF#lineno":{"description":"Returns the current line number of ARGF as a whole. This value\ncan be set manually with +ARGF.lineno=+.\n\nFor example:\n\n    ARGF.lineno   #=> 0\n    ARGF.readline #=> \"This is line 1\\n\"\n    ARGF.lineno   #=> 1","name":"lineno","namespace":"ARGF","path":"ARGF#lineno","type":"instance_method","visibility":"public"},"ARGF#lineno=":{"description":"Sets the line number of +ARGF+ as a whole to the given +Integer+.\n\n+ARGF+ sets the line number automatically as you read data, so normally\nyou will not need to set it explicitly. To access the current line number\nuse +ARGF.lineno+.\n\nFor example:\n\n    ARGF.lineno      #=> 0\n    ARGF.readline    #=> \"This is line 1\\n\"\n    ARGF.lineno      #=> 1\n    ARGF.lineno = 0  #=> 0\n    ARGF.lineno      #=> 0","name":"lineno=","namespace":"ARGF","path":"ARGF#lineno=","type":"instance_method","visibility":"public"},"ARGF#lines":{"description":"This is a deprecated alias for <code>each_line</code>.","name":"lines","namespace":"ARGF","path":"ARGF#lines","type":"instance_method","visibility":"public"},"ARGF#path":{"description":"Returns the current filename. \"-\" is returned when the current file is\nSTDIN.\n\nFor example:\n\n   $ echo \"foo\" > foo\n   $ echo \"bar\" > bar\n   $ echo \"glark\" > glark\n\n   $ ruby argf.rb foo bar glark\n\n   ARGF.filename  #=> \"foo\"\n   ARGF.read(5)   #=> \"foo\\nb\"\n   ARGF.filename  #=> \"bar\"\n   ARGF.skip\n   ARGF.filename  #=> \"glark\"","name":"path","namespace":"ARGF","path":"ARGF#path","type":"instance_method","visibility":"public"},"ARGF#pos":{"description":"Returns the current offset (in bytes) of the current file in +ARGF+.\n\n   ARGF.pos    #=> 0\n   ARGF.gets   #=> \"This is line one\\n\"\n   ARGF.pos    #=> 17","name":"pos","namespace":"ARGF","path":"ARGF#pos","type":"instance_method","visibility":"public"},"ARGF#pos=":{"description":"Seeks to the position given by _position_ (in bytes) in +ARGF+.\n\nFor example:\n\n    ARGF.pos = 17\n    ARGF.gets   #=> \"This is line two\\n\"","name":"pos=","namespace":"ARGF","path":"ARGF#pos=","type":"instance_method","visibility":"public"},"ARGF#print":{"description":"Writes the given object(s) to <em>ios</em>. Returns +nil+.\n\nThe stream must be opened for writing.\nEach given object that isn't a string will be converted by calling\nits <code>to_s</code> method.\nWhen called without arguments, prints the contents of <code>$_</code>.\n\nIf the output field separator (<code>$,</code>) is not +nil+,\nit is inserted between objects.\nIf the output record separator (<code>$\\\\</code>) is not +nil+,\nit is appended to the output.\n\n   $stdout.print(\"This is \", 100, \" percent.\\n\")\n\n<em>produces:</em>\n\n   This is 100 percent.","name":"print","namespace":"ARGF","path":"ARGF#print","type":"instance_method","visibility":"public"},"ARGF#printf":{"description":"Formats and writes to <em>ios</em>, converting parameters under\ncontrol of the format string. See <code>Kernel#sprintf</code>\nfor details.","name":"printf","namespace":"ARGF","path":"ARGF#printf","type":"instance_method","visibility":"public"},"ARGF#putc":{"description":"If <i>obj</i> is <code>Numeric</code>, write the character whose code is\nthe least-significant byte of <i>obj</i>.\nIf <i>obj</i> is <code>String</code>, write the first character\nof <i>obj</i> to <em>ios</em>.\nOtherwise, raise <code>TypeError</code>.\n\n   $stdout.putc \"A\"\n   $stdout.putc 65\n\n<em>produces:</em>\n\n   AA","name":"putc","namespace":"ARGF","path":"ARGF#putc","type":"instance_method","visibility":"public"},"ARGF#puts":{"description":"Writes the given object(s) to <em>ios</em>.\nWrites a newline after any that do not already end\nwith a newline sequence. Returns +nil+.\n\nThe stream must be opened for writing.\nIf called with an array argument, writes each element on a new line.\nEach given object that isn't a string or array will be converted\nby calling its +to_s+ method.\nIf called without arguments, outputs a single newline.\n\n   $stdout.puts(\"this\", \"is\", [\"a\", \"test\"])\n\n<em>produces:</em>\n\n   this\n   is\n   a\n   test\n\nNote that +puts+ always uses newlines and is not affected\nby the output record separator (<code>$\\\\</code>).","name":"puts","namespace":"ARGF","path":"ARGF#puts","type":"instance_method","visibility":"public"},"ARGF#read":{"description":"Reads _length_ bytes from ARGF. The files named on the command line\nare concatenated and treated as a single file by this method, so when\ncalled without arguments the contents of this pseudo file are returned in\ntheir entirety.\n\n_length_ must be a non-negative integer or +nil+.\n\nIf _length_ is a positive integer, +read+ tries to read\n_length_ bytes without any conversion (binary mode).\nIt returns +nil+ if an EOF is encountered before anything can be read.\nFewer than _length_ bytes are returned if an EOF is encountered during\nthe read.\nIn the case of an integer _length_, the resulting string is always\nin ASCII-8BIT encoding.\n\nIf _length_ is omitted or is +nil+, it reads until EOF\nand the encoding conversion is applied, if applicable.\nA string is returned even if EOF is encountered before any data is read.\n\nIf _length_ is zero, it returns an empty string (<code>\"\"</code>).\n\nIf the optional _outbuf_ argument is present,\nit must reference a String, which will receive the data.\nThe _outbuf_ will contain only the received data after the method call\neven if it is not empty at the beginning.\n\nFor example:\n\n   $ echo \"small\" > small.txt\n   $ echo \"large\" > large.txt\n   $ ./glark.rb small.txt large.txt\n\n   ARGF.read      #=> \"small\\nlarge\"\n   ARGF.read(200) #=> \"small\\nlarge\"\n   ARGF.read(2)   #=> \"sm\"\n   ARGF.read(0)   #=> \"\"\n\nNote that this method behaves like the fread() function in C.\nThis means it retries to invoke read(2) system calls to read data\nwith the specified length.\nIf you need the behavior like a single read(2) system call,\nconsider ARGF#readpartial or ARGF#read_nonblock.","name":"read","namespace":"ARGF","path":"ARGF#read","type":"instance_method","visibility":"public"},"ARGF#read_nonblock":{"description":"Reads at most _maxlen_ bytes from the ARGF stream in non-blocking mode.","name":"read_nonblock","namespace":"ARGF","path":"ARGF#read_nonblock","type":"instance_method","visibility":"public"},"ARGF#readbyte":{"description":"Reads the next 8-bit byte from ARGF and returns it as an +Integer+. Raises\nan +EOFError+ after the last byte of the last file has been read.\n\nFor example:\n\n   $ echo \"foo\" > file\n   $ ruby argf.rb file\n\n   ARGF.readbyte  #=> 102\n   ARGF.readbyte  #=> 111\n   ARGF.readbyte  #=> 111\n   ARGF.readbyte  #=> 10\n   ARGF.readbyte  #=> end of file reached (EOFError)","name":"readbyte","namespace":"ARGF","path":"ARGF#readbyte","type":"instance_method","visibility":"public"},"ARGF#readchar":{"description":"Reads the next character from +ARGF+ and returns it as a +String+. Raises\nan +EOFError+ after the last character of the last file has been read.\n\nFor example:\n\n   $ echo \"foo\" > file\n   $ ruby argf.rb file\n\n   ARGF.readchar  #=> \"f\"\n   ARGF.readchar  #=> \"o\"\n   ARGF.readchar  #=> \"o\"\n   ARGF.readchar  #=> \"\\n\"\n   ARGF.readchar  #=> end of file reached (EOFError)","name":"readchar","namespace":"ARGF","path":"ARGF#readchar","type":"instance_method","visibility":"public"},"ARGF#readline":{"description":"Returns the next line from the current file in +ARGF+.\n\nBy default lines are assumed to be separated by <code>$/</code>;\nto use a different character as a separator, supply it as a +String+\nfor the _sep_ argument.\n\nThe optional _limit_ argument specifies how many characters of each line\nto return. By default all characters are returned.\n\nAn +EOFError+ is raised at the end of the file.","name":"readline","namespace":"ARGF","path":"ARGF#readline","type":"instance_method","visibility":"public"},"ARGF#readlines":{"description":"ARGF.to_a(sep=$/)     -> array\n   ARGF.to_a(limit)      -> array\n   ARGF.to_a(sep, limit) -> array\n\nReads +ARGF+'s current file in its entirety, returning an +Array+ of its\nlines, one line per element. Lines are assumed to be separated by _sep_.\n\n   lines = ARGF.readlines\n   lines[0]                #=> \"This is line one\\n\"","name":"readlines","namespace":"ARGF","path":"ARGF#readlines","type":"instance_method","visibility":"public"},"ARGF#readpartial":{"description":"Reads at most _maxlen_ bytes from the ARGF stream.\n\nIf the optional _outbuf_ argument is present,\nit must reference a String, which will receive the data.\nThe _outbuf_ will contain only the received data after the method call\neven if it is not empty at the beginning.\n\nIt raises <code>EOFError</code> on end of ARGF stream.\nSince ARGF stream is a concatenation of multiple files,\ninternally EOF is occur for each file.\nARGF.readpartial returns empty strings for EOFs except the last one and\nraises <code>EOFError</code> for the last one.","name":"readpartial","namespace":"ARGF","path":"ARGF#readpartial","type":"instance_method","visibility":"public"},"ARGF#rewind":{"description":"Positions the current file to the beginning of input, resetting\n+ARGF.lineno+ to zero.\n\n   ARGF.readline   #=> \"This is line one\\n\"\n   ARGF.rewind     #=> 0\n   ARGF.lineno     #=> 0\n   ARGF.readline   #=> \"This is line one\\n\"","name":"rewind","namespace":"ARGF","path":"ARGF#rewind","type":"instance_method","visibility":"public"},"ARGF#seek":{"description":"Seeks to offset _amount_ (an +Integer+) in the +ARGF+ stream according to\nthe value of _whence_. See IO#seek for further details.","name":"seek","namespace":"ARGF","path":"ARGF#seek","type":"instance_method","visibility":"public"},"ARGF#set_encoding":{"description":"If single argument is specified, strings read from ARGF are tagged with\nthe encoding specified.\n\nIf two encoding names separated by a colon are given, e.g. \"ascii:utf-8\",\nthe read string is converted from the first encoding (external encoding)\nto the second encoding (internal encoding), then tagged with the second\nencoding.\n\nIf two arguments are specified, they must be encoding objects or encoding\nnames. Again, the first specifies the external encoding; the second\nspecifies the internal encoding.\n\nIf the external encoding and the internal encoding are specified, the\noptional +Hash+ argument can be used to adjust the conversion process. The\nstructure of this hash is explained in the String#encode documentation.\n\nFor example:\n\n    ARGF.set_encoding('ascii')         # Tag the input as US-ASCII text\n    ARGF.set_encoding(Encoding::UTF_8) # Tag the input as UTF-8 text\n    ARGF.set_encoding('utf-8','ascii') # Transcode the input from US-ASCII\n                                       # to UTF-8.","name":"set_encoding","namespace":"ARGF","path":"ARGF#set_encoding","type":"instance_method","visibility":"public"},"ARGF#skip":{"description":"Sets the current file to the next file in ARGV. If there aren't any more\nfiles it has no effect.\n\nFor example:\n\n   $ ruby argf.rb foo bar\n   ARGF.filename  #=> \"foo\"\n   ARGF.skip\n   ARGF.filename  #=> \"bar\"","name":"skip","namespace":"ARGF","path":"ARGF#skip","type":"instance_method","visibility":"public"},"ARGF#tell":{"description":"Returns the current offset (in bytes) of the current file in +ARGF+.\n\n   ARGF.pos    #=> 0\n   ARGF.gets   #=> \"This is line one\\n\"\n   ARGF.pos    #=> 17","name":"tell","namespace":"ARGF","path":"ARGF#tell","type":"instance_method","visibility":"public"},"ARGF#to_a":{"description":"ARGF.to_a(sep=$/)     -> array\n   ARGF.to_a(limit)      -> array\n   ARGF.to_a(sep, limit) -> array\n\nReads +ARGF+'s current file in its entirety, returning an +Array+ of its\nlines, one line per element. Lines are assumed to be separated by _sep_.\n\n   lines = ARGF.readlines\n   lines[0]                #=> \"This is line one\\n\"","name":"to_a","namespace":"ARGF","path":"ARGF#to_a","type":"instance_method","visibility":"public"},"ARGF#to_i":{"description":"Returns an integer representing the numeric file descriptor for\nthe current file. Raises an +ArgumentError+ if there isn't a current file.\n\n   ARGF.fileno    #=> 3","name":"to_i","namespace":"ARGF","path":"ARGF#to_i","type":"instance_method","visibility":"public"},"ARGF#to_io":{"description":"Returns an +IO+ object representing the current file. This will be a\n+File+ object unless the current file is a stream such as STDIN.\n\nFor example:\n\n   ARGF.to_io    #=> #<File:glark.txt>\n   ARGF.to_io    #=> #<IO:<STDIN>>","name":"to_io","namespace":"ARGF","path":"ARGF#to_io","type":"instance_method","visibility":"public"},"ARGF#to_s":{"description":"Returns \"ARGF\".","name":"inspect","namespace":"ARGF","path":"ARGF#inspect","type":"instance_method","visibility":"public"},"ARGF#to_write_io":{"description":"Returns IO instance tied to _ARGF_ for writing if inplace mode is\nenabled.","name":"to_write_io","namespace":"ARGF","path":"ARGF#to_write_io","type":"instance_method","visibility":"public"},"ARGF#write":{"description":"Writes _string_ if inplace mode.","name":"write","namespace":"ARGF","path":"ARGF#write","type":"instance_method","visibility":"public"},"Marshal":{"description":"","name":"Marshal","namespace":"","path":"Marshal","type":"module","visibility":"public"},"Marshal#dump":{"description":"Serializes obj and all descendant objects. If anIO is\nspecified, the serialized data will be written to it, otherwise the\ndata will be returned as a String. If limit is specified, the\ntraversal of subobjects will be limited to that depth. If limit is\nnegative, no checking of depth will be performed.\n\n    class Klass\n      def initialize(str)\n        @str = str\n      end\n      def say_hello\n        @str\n      end\n    end\n\n(produces no output)\n\n    o = Klass.new(\"hello\\n\")\n    data = Marshal.dump(o)\n    obj = Marshal.load(data)\n    obj.say_hello  #=> \"hello\\n\"\n\nMarshal can't dump following objects:\n* anonymous Class/Module.\n* objects which are related to system (ex: Dir, File::Stat, IO, File, Socket\n  and so on)\n* an instance of MatchData, Data, Method, UnboundMethod, Proc, Thread,\n  ThreadGroup, Continuation\n* objects which define singleton methods","name":"dump","namespace":"Marshal","path":"Marshal#dump","type":"module_function","visibility":"private"},"Marshal#load":{"description":"Returns the result of converting the serialized data in source into a\nRuby object (possibly with associated subordinate objects). source\nmay be either an instance of IO or an object that responds to\nto_str. If proc is specified, each object will be passed to the proc, as the object\nis being deserialized.\n\nNever pass untrusted data (including user supplied input) to this method.\nPlease see the overview for further details.","name":"load","namespace":"Marshal","path":"Marshal#load","type":"module_function","visibility":"private"},"Marshal#restore":{"description":"Returns the result of converting the serialized data in source into a\nRuby object (possibly with associated subordinate objects). source\nmay be either an instance of IO or an object that responds to\nto_str. If proc is specified, each object will be passed to the proc, as the object\nis being deserialized.\n\nNever pass untrusted data (including user supplied input) to this method.\nPlease see the overview for further details.","name":"restore","namespace":"Marshal","path":"Marshal#restore","type":"module_function","visibility":"private"},"Marshal.dump":{"description":"Serializes obj and all descendant objects. If anIO is\nspecified, the serialized data will be written to it, otherwise the\ndata will be returned as a String. If limit is specified, the\ntraversal of subobjects will be limited to that depth. If limit is\nnegative, no checking of depth will be performed.\n\n    class Klass\n      def initialize(str)\n        @str = str\n      end\n      def say_hello\n        @str\n      end\n    end\n\n(produces no output)\n\n    o = Klass.new(\"hello\\n\")\n    data = Marshal.dump(o)\n    obj = Marshal.load(data)\n    obj.say_hello  #=> \"hello\\n\"\n\nMarshal can't dump following objects:\n* anonymous Class/Module.\n* objects which are related to system (ex: Dir, File::Stat, IO, File, Socket\n  and so on)\n* an instance of MatchData, Data, Method, UnboundMethod, Proc, Thread,\n  ThreadGroup, Continuation\n* objects which define singleton methods","name":"dump","namespace":"Marshal","path":"Marshal.dump","type":"module_function","visibility":"public"},"Marshal.load":{"description":"Returns the result of converting the serialized data in source into a\nRuby object (possibly with associated subordinate objects). source\nmay be either an instance of IO or an object that responds to\nto_str. If proc is specified, each object will be passed to the proc, as the object\nis being deserialized.\n\nNever pass untrusted data (including user supplied input) to this method.\nPlease see the overview for further details.","name":"load","namespace":"Marshal","path":"Marshal.load","type":"module_function","visibility":"public"},"Marshal.restore":{"description":"Returns the result of converting the serialized data in source into a\nRuby object (possibly with associated subordinate objects). source\nmay be either an instance of IO or an object that responds to\nto_str. If proc is specified, each object will be passed to the proc, as the object\nis being deserialized.\n\nNever pass untrusted data (including user supplied input) to this method.\nPlease see the overview for further details.","name":"restore","namespace":"Marshal","path":"Marshal.restore","type":"module_function","visibility":"public"},"Marshal::MAJOR_VERSION":{"description":"major version","name":"MAJOR_VERSION","namespace":"Marshal","path":"Marshal::MAJOR_VERSION","type":"constant","return":["Fixnum",""],"visibility":"public"},"Marshal::MINOR_VERSION":{"description":"minor version","name":"MINOR_VERSION","namespace":"Marshal","path":"Marshal::MINOR_VERSION","type":"constant","return":["Fixnum",""],"visibility":"public"},"Integer":{"description":"******************************************************************\n\n\n  Holds Integer values.  You cannot add a singleton method to an\n  Integer object, any attempt to do so will raise a TypeError.","name":"Integer","namespace":"","path":"Integer","type":"class","visibility":"public"},"Integer#%":{"description":"Returns +int+ modulo +other+.\n\nSee Numeric#divmod for more information.","name":"%","namespace":"Integer","path":"Integer#%","type":"instance_method","visibility":"public"},"Integer#&":{"description":"Bitwise AND.","name":"&","namespace":"Integer","path":"Integer#&","type":"instance_method","visibility":"public"},"Integer#*":{"description":"Performs multiplication: the class of the resulting object depends on\nthe class of +numeric+.","name":"*","namespace":"Integer","path":"Integer#*","type":"instance_method","visibility":"public"},"Integer#**":{"description":"Raises +int+ to the power of +numeric+, which may be negative or\nfractional.\nThe result may be an Integer, a Float, a Rational, or a complex number.\n\n   2 ** 3        #=> 8\n   2 ** -1       #=> (1/2)\n   2 ** 0.5      #=> 1.4142135623730951\n   (-1) ** 0.5   #=> (0.0+1.0i)\n\n   123456789 ** 2     #=> 15241578750190521\n   123456789 ** 1.2   #=> 5126464716.0993185\n   123456789 ** -2    #=> (1/15241578750190521)","name":"**","namespace":"Integer","path":"Integer#**","type":"instance_method","visibility":"public"},"Integer#+":{"description":"Performs addition: the class of the resulting object depends on\nthe class of +numeric+.","name":"+","namespace":"Integer","path":"Integer#+","type":"instance_method","visibility":"public"},"Integer#-":{"description":"Performs subtraction: the class of the resulting object depends on\nthe class of +numeric+.","name":"-","namespace":"Integer","path":"Integer#-","type":"instance_method","visibility":"public"},"Integer#-@":{"description":"Returns +int+, negated.","name":"-@","namespace":"Integer","path":"Integer#-@","type":"instance_method","visibility":"public"},"Integer#/":{"description":"Performs division: the class of the resulting object depends on\nthe class of +numeric+.","name":"/","namespace":"Integer","path":"Integer#/","type":"instance_method","visibility":"public"},"Integer#<":{"description":"Returns +true+ if the value of +int+ is less than that of +real+.","name":"<","namespace":"Integer","path":"Integer#<","type":"instance_method","visibility":"public"},"Integer#<<":{"description":"Returns +int+ shifted left +count+ positions, or right if +count+\nis negative.","name":"<<","namespace":"Integer","path":"Integer#<<","type":"instance_method","visibility":"public"},"Integer#<=":{"description":"Returns +true+ if the value of +int+ is less than or equal to that of\n+real+.","name":"<=","namespace":"Integer","path":"Integer#<=","type":"instance_method","visibility":"public"},"Integer#<=>":{"description":"Comparison---Returns -1, 0, or +1 depending on whether +int+ is\nless than, equal to, or greater than +numeric+.\n\nThis is the basis for the tests in the Comparable module.\n\n+nil+ is returned if the two values are incomparable.","name":"<=>","namespace":"Integer","path":"Integer#<=>","type":"instance_method","visibility":"public"},"Integer#==":{"description":"Returns +true+ if +int+ equals +other+ numerically.\nContrast this with Integer#eql?, which requires +other+ to be an Integer.\n\n   1 == 2     #=> false\n   1 == 1.0   #=> true","name":"==","namespace":"Integer","path":"Integer#==","type":"instance_method","visibility":"public"},"Integer#===":{"description":"Returns +true+ if +int+ equals +other+ numerically.\nContrast this with Integer#eql?, which requires +other+ to be an Integer.\n\n   1 == 2     #=> false\n   1 == 1.0   #=> true","name":"===","namespace":"Integer","path":"Integer#===","type":"instance_method","visibility":"public"},"Integer#>":{"description":"Returns +true+ if the value of +int+ is greater than that of +real+.","name":">","namespace":"Integer","path":"Integer#>","type":"instance_method","visibility":"public"},"Integer#>=":{"description":"Returns +true+ if the value of +int+ is greater than or equal to that of\n+real+.","name":">=","namespace":"Integer","path":"Integer#>=","type":"instance_method","visibility":"public"},"Integer#>>":{"description":"Returns +int+ shifted right +count+ positions, or left if +count+\nis negative.","name":">>","namespace":"Integer","path":"Integer#>>","type":"instance_method","visibility":"public"},"Integer#[]":{"description":"Bit Reference---Returns the <code>n</code>th bit in the\nbinary representation of +int+, where <code>int[0]</code>\nis the least significant bit.\n\n   a = 0b11001100101010\n   30.downto(0) {|n| print a[n] }\n   #=> 0000000000000000011001100101010\n\n   a = 9**15\n   50.downto(0) {|n| print a[n] }\n   #=> 000101110110100000111000011110010100111100010111001","name":"[]","namespace":"Integer","path":"Integer#[]","type":"instance_method","visibility":"public"},"Integer#^":{"description":"Bitwise EXCLUSIVE OR.","name":"^","namespace":"Integer","path":"Integer#^","type":"instance_method","visibility":"public"},"Integer#abs":{"description":"","name":"abs","namespace":"Integer","path":"Integer#abs","type":"instance_method","visibility":"public"},"Integer#allbits?":{"description":"Returns +true+ if all bits of <code>+int+ & +mask+</code> are 1.","name":"allbits?","namespace":"Integer","path":"Integer#allbits?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Integer#anybits?":{"description":"Returns +true+ if any bits of <code>+int+ & +mask+</code> are 1.","name":"anybits?","namespace":"Integer","path":"Integer#anybits?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Integer#bit_length":{"description":"Returns the number of bits of the value of +int+.\n\n\"Number of bits\" means the bit position of the highest bit\nwhich is different from the sign bit\n(where the least significant bit has bit position 1).\nIf there is no such bit (zero or minus one), zero is returned.\n\nI.e. this method returns <i>ceil(log2(int < 0 ? -int : int+1))</i>.\n\n   (-2**1000-1).bit_length   #=> 1001\n   (-2**1000).bit_length     #=> 1000\n   (-2**1000+1).bit_length   #=> 1000\n   (-2**12-1).bit_length     #=> 13\n   (-2**12).bit_length       #=> 12\n   (-2**12+1).bit_length     #=> 12\n   -0x101.bit_length         #=> 9\n   -0x100.bit_length         #=> 8\n   -0xff.bit_length          #=> 8\n   -2.bit_length             #=> 1\n   -1.bit_length             #=> 0\n   0.bit_length              #=> 0\n   1.bit_length              #=> 1\n   0xff.bit_length           #=> 8\n   0x100.bit_length          #=> 9\n   (2**12-1).bit_length      #=> 12\n   (2**12).bit_length        #=> 13\n   (2**12+1).bit_length      #=> 13\n   (2**1000-1).bit_length    #=> 1000\n   (2**1000).bit_length      #=> 1001\n   (2**1000+1).bit_length    #=> 1001\n\nThis method can be used to detect overflow in Array#pack as follows:\n\n   if n.bit_length < 32\n     [n].pack(\"l\") # no overflow\n   else\n     raise \"overflow\"\n   end","name":"bit_length","namespace":"Integer","path":"Integer#bit_length","type":"instance_method","visibility":"public"},"Integer#ceil":{"description":"Returns the smallest number greater than or equal to +int+ with\na precision of +ndigits+ decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer\nwith at least <code>ndigits.abs</code> trailing zeros.\n\nReturns +self+ when +ndigits+ is zero or positive.\n\n   1.ceil           #=> 1\n   1.ceil(2)        #=> 1\n   18.ceil(-1)      #=> 20\n   (-18).ceil(-1)   #=> -10","name":"ceil","namespace":"Integer","path":"Integer#ceil","type":"instance_method","visibility":"public"},"Integer#chr":{"description":"Returns a string containing the character represented by the +int+'s value\naccording to +encoding+.\n\n   65.chr    #=> \"A\"\n   230.chr   #=> \"\\xE6\"\n   255.chr(Encoding::UTF_8)   #=> \"\\u00FF\"","name":"chr","namespace":"Integer","path":"Integer#chr","type":"instance_method","visibility":"public"},"Integer#coerce":{"description":"Returns an array with both a +numeric+ and a +big+ represented as Bignum\nobjects.\n\nThis is achieved by converting +numeric+ to a Bignum.\n\nA TypeError is raised if the +numeric+ is not a Fixnum or Bignum type.\n\n    (0x3FFFFFFFFFFFFFFF+1).coerce(42)   #=> [42, 4611686018427387904]","name":"coerce","namespace":"Integer","path":"Integer#coerce","type":"instance_method","visibility":"public"},"Integer#denominator":{"description":"Returns 1.","name":"denominator","namespace":"Integer","path":"Integer#denominator","type":"instance_method","visibility":"public"},"Integer#digits":{"description":"Returns the digits of +int+'s place-value representation\nwith radix +base+ (default: 10).\nThe digits are returned as an array with the least significant digit\nas the first array element.\n\n+base+ must be greater than or equal to 2.\n\n   12345.digits      #=> [5, 4, 3, 2, 1]\n   12345.digits(7)   #=> [4, 6, 6, 0, 5]\n   12345.digits(100) #=> [45, 23, 1]\n\n   -12345.digits(7)  #=> Math::DomainError","name":"digits","namespace":"Integer","path":"Integer#digits","type":"instance_method","visibility":"public"},"Integer#div":{"description":"Performs integer division: returns the integer result of dividing +int+\nby +numeric+.","name":"div","namespace":"Integer","path":"Integer#div","type":"instance_method","visibility":"public"},"Integer#divmod":{"description":"See Numeric#divmod.","name":"divmod","namespace":"Integer","path":"Integer#divmod","type":"instance_method","visibility":"public"},"Integer#downto":{"description":"Iterates the given block, passing in decreasing values from +int+ down to\nand including +limit+.\n\nIf no block is given, an Enumerator is returned instead.\n\n   5.downto(1) { |n| print n, \".. \" }\n   puts \"Liftoff!\"\n   #=> \"5.. 4.. 3.. 2.. 1.. Liftoff!\"","name":"downto","namespace":"Integer","path":"Integer#downto","type":"instance_method","visibility":"public"},"Integer#even?":{"description":"Returns +true+ if +int+ is an even number.","name":"even?","namespace":"Integer","path":"Integer#even?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Integer#fdiv":{"description":"Returns the floating point result of dividing +int+ by +numeric+.\n\n   654321.fdiv(13731)      #=> 47.652829364212366\n   654321.fdiv(13731.24)   #=> 47.65199646936475\n   -654321.fdiv(13731)     #=> -47.652829364212366","name":"fdiv","namespace":"Integer","path":"Integer#fdiv","type":"instance_method","visibility":"public"},"Integer#floor":{"description":"Returns the largest number less than or equal to +int+ with\na precision of +ndigits+ decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer\nwith at least <code>ndigits.abs</code> trailing zeros.\n\nReturns +self+ when +ndigits+ is zero or positive.\n\n   1.floor           #=> 1\n   1.floor(2)        #=> 1\n   18.floor(-1)      #=> 10\n   (-18).floor(-1)   #=> -20","name":"floor","namespace":"Integer","path":"Integer#floor","type":"instance_method","visibility":"public"},"Integer#gcd":{"description":"Returns the greatest common divisor of the two integers.\nThe result is always positive. 0.gcd(x) and x.gcd(0) return x.abs.\n\n   36.gcd(60)                  #=> 12\n   2.gcd(2)                    #=> 2\n   3.gcd(-7)                   #=> 1\n   ((1<<31)-1).gcd((1<<61)-1)  #=> 1","name":"gcd","namespace":"Integer","path":"Integer#gcd","type":"instance_method","visibility":"public"},"Integer#gcdlcm":{"description":"Returns an array with the greatest common divisor and\nthe least common multiple of the two integers, [gcd, lcm].\n\n   36.gcdlcm(60)                  #=> [12, 180]\n   2.gcdlcm(2)                    #=> [2, 2]\n   3.gcdlcm(-7)                   #=> [1, 21]\n   ((1<<31)-1).gcdlcm((1<<61)-1)  #=> [1, 4951760154835678088235319297]","name":"gcdlcm","namespace":"Integer","path":"Integer#gcdlcm","type":"instance_method","visibility":"public"},"Integer#inspect":{"description":"Returns a string containing the place-value representation of +int+\nwith radix +base+ (between 2 and 36).\n\n   12345.to_s       #=> \"12345\"\n   12345.to_s(2)    #=> \"11000000111001\"\n   12345.to_s(8)    #=> \"30071\"\n   12345.to_s(10)   #=> \"12345\"\n   12345.to_s(16)   #=> \"3039\"\n   12345.to_s(36)   #=> \"9ix\"\n   78546939656932.to_s(36)  #=> \"rubyrules\"","name":"inspect","namespace":"Integer","path":"Integer#inspect","type":"instance_method","visibility":"public"},"Integer#integer?":{"description":"Since +int+ is already an Integer, this always returns +true+.","name":"integer?","namespace":"Integer","path":"Integer#integer?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Integer#lcm":{"description":"Returns the least common multiple of the two integers.\nThe result is always positive. 0.lcm(x) and x.lcm(0) return zero.\n\n   36.lcm(60)                  #=> 180\n   2.lcm(2)                    #=> 2\n   3.lcm(-7)                   #=> 21\n   ((1<<31)-1).lcm((1<<61)-1)  #=> 4951760154835678088235319297","name":"lcm","namespace":"Integer","path":"Integer#lcm","type":"instance_method","visibility":"public"},"Integer#magnitude":{"description":"Returns the absolute value of +int+.\n\n   (-12345).abs   #=> 12345\n   -12345.abs     #=> 12345\n   12345.abs      #=> 12345\n\nInteger#magnitude is an alias for Integer#abs.","name":"magnitude","namespace":"Integer","path":"Integer#magnitude","type":"instance_method","visibility":"public"},"Integer#modulo":{"description":"Returns +int+ modulo +other+.\n\nSee Numeric#divmod for more information.","name":"modulo","namespace":"Integer","path":"Integer#modulo","type":"instance_method","visibility":"public"},"Integer#next":{"description":"Returns the successor of +int+,\ni.e. the Integer equal to <code>int+1</code>.\n\n   1.next      #=> 2\n   (-1).next   #=> 0\n   1.succ      #=> 2\n   (-1).succ   #=> 0","name":"next","namespace":"Integer","path":"Integer#next","type":"instance_method","visibility":"public"},"Integer#nobits?":{"description":"Returns +true+ if no bits of <code>+int+ & +mask+</code> are 1.","name":"nobits?","namespace":"Integer","path":"Integer#nobits?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Integer#numerator":{"description":"Returns self.","name":"numerator","namespace":"Integer","path":"Integer#numerator","type":"instance_method","visibility":"public"},"Integer#odd?":{"description":"Returns +true+ if +int+ is an odd number.","name":"odd?","namespace":"Integer","path":"Integer#odd?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Integer#ord":{"description":"Returns the +int+ itself.\n\n   97.ord   #=> 97\n\nThis method is intended for compatibility to character literals\nin Ruby 1.9.\n\nFor example, <code>?a.ord</code> returns 97 both in 1.8 and 1.9.","name":"ord","namespace":"Integer","path":"Integer#ord","type":"instance_method","visibility":"public"},"Integer#pow":{"description":"Returns (modular) exponentiation as:\n\n  a.pow(b)     #=> same as a**b\n  a.pow(b, m)  #=> same as (a**b) % m, but avoids huge temporary values","name":"pow","namespace":"Integer","path":"Integer#pow","type":"instance_method","visibility":"public"},"Integer#pred":{"description":"","name":"pred","namespace":"Integer","path":"Integer#pred","type":"instance_method","visibility":"public"},"Integer#rationalize":{"description":"Returns the value as a rational.  The optional argument +eps+ is\nalways ignored.","name":"rationalize","namespace":"Integer","path":"Integer#rationalize","type":"instance_method","visibility":"public"},"Integer#remainder":{"description":"Returns the remainder after dividing +int+ by +numeric+.\n\n<code>x.remainder(y)</code> means <code>x-y*(x/y).truncate</code>.\n\n   5.remainder(3)     #=> 2\n   -5.remainder(3)    #=> -2\n   5.remainder(-3)    #=> 2\n   -5.remainder(-3)   #=> -2\n   5.remainder(1.5)   #=> 0.5\n\nSee Numeric#divmod.","name":"remainder","namespace":"Integer","path":"Integer#remainder","type":"instance_method","visibility":"public"},"Integer#round":{"description":"Returns +int+ rounded to the nearest value with\na precision of +ndigits+ decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer\nwith at least <code>ndigits.abs</code> trailing zeros.\n\nReturns +self+ when +ndigits+ is zero or positive.\n\n   1.round           #=> 1\n   1.round(2)        #=> 1\n   15.round(-1)      #=> 20\n   (-15).round(-1)   #=> -20\n\nThe optional +half+ keyword argument is available\nsimilar to Float#round.\n\n   25.round(-1, half: :up)      #=> 30\n   25.round(-1, half: :down)    #=> 20\n   25.round(-1, half: :even)    #=> 20\n   35.round(-1, half: :up)      #=> 40\n   35.round(-1, half: :down)    #=> 30\n   35.round(-1, half: :even)    #=> 40\n   (-25).round(-1, half: :up)   #=> -30\n   (-25).round(-1, half: :down) #=> -20\n   (-25).round(-1, half: :even) #=> -20","name":"round","namespace":"Integer","path":"Integer#round","type":"instance_method","visibility":"public"},"Integer#size":{"description":"Returns the number of bytes in the machine representation of +int+\n(machine dependent).\n\n   1.size               #=> 8\n   -1.size              #=> 8\n   2147483647.size      #=> 8\n   (256**10 - 1).size   #=> 10\n   (256**20 - 1).size   #=> 20\n   (256**40 - 1).size   #=> 40","name":"size","namespace":"Integer","path":"Integer#size","type":"instance_method","visibility":"public"},"Integer#succ":{"description":"Returns the successor of +int+,\ni.e. the Integer equal to <code>int+1</code>.\n\n   1.next      #=> 2\n   (-1).next   #=> 0\n   1.succ      #=> 2\n   (-1).succ   #=> 0","name":"succ","namespace":"Integer","path":"Integer#succ","type":"instance_method","visibility":"public"},"Integer#times":{"description":"Iterates the given block +int+ times, passing in values from zero to\n<code>int - 1</code>.\n\nIf no block is given, an Enumerator is returned instead.\n\n   5.times {|i| print i, \" \" }   #=> 0 1 2 3 4","name":"times","namespace":"Integer","path":"Integer#times","type":"instance_method","visibility":"public"},"Integer#to_f":{"description":"Converts +int+ to a Float.  If +int+ doesn't fit in a Float,\nthe result is infinity.","name":"to_f","namespace":"Integer","path":"Integer#to_f","type":"instance_method","visibility":"public"},"Integer#to_i":{"description":"Since +int+ is already an Integer, returns +self+.\n\n#to_int is an alias for #to_i.","name":"to_i","namespace":"Integer","path":"Integer#to_i","type":"instance_method","visibility":"public"},"Integer#to_int":{"description":"Since +int+ is already an Integer, returns +self+.\n\n#to_int is an alias for #to_i.","name":"to_int","namespace":"Integer","path":"Integer#to_int","type":"instance_method","visibility":"public"},"Integer#to_r":{"description":"Returns the value as a rational.\n\n   1.to_r        #=> (1/1)\n   (1<<64).to_r  #=> (18446744073709551616/1)","name":"to_r","namespace":"Integer","path":"Integer#to_r","type":"instance_method","visibility":"public"},"Integer#to_s":{"description":"Returns a string containing the place-value representation of +int+\nwith radix +base+ (between 2 and 36).\n\n   12345.to_s       #=> \"12345\"\n   12345.to_s(2)    #=> \"11000000111001\"\n   12345.to_s(8)    #=> \"30071\"\n   12345.to_s(10)   #=> \"12345\"\n   12345.to_s(16)   #=> \"3039\"\n   12345.to_s(36)   #=> \"9ix\"\n   78546939656932.to_s(36)  #=> \"rubyrules\"","name":"inspect","namespace":"Integer","path":"Integer#inspect","type":"instance_method","visibility":"public"},"Integer#truncate":{"description":"Returns +int+ truncated (toward zero) to\na precision of +ndigits+ decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer\nwith at least <code>ndigits.abs</code> trailing zeros.\n\nReturns +self+ when +ndigits+ is zero or positive.\n\n   1.truncate           #=> 1\n   1.truncate(2)        #=> 1\n   18.truncate(-1)      #=> 10\n   (-18).truncate(-1)   #=> -10","name":"truncate","namespace":"Integer","path":"Integer#truncate","type":"instance_method","visibility":"public"},"Integer#upto":{"description":"Iterates the given block, passing in integer values from +int+ up to and\nincluding +limit+.\n\nIf no block is given, an Enumerator is returned instead.\n\n   5.upto(10) {|i| print i, \" \" }   #=> 5 6 7 8 9 10","name":"upto","namespace":"Integer","path":"Integer#upto","type":"instance_method","visibility":"public"},"Integer#|":{"description":"Bitwise OR.","name":"|","namespace":"Integer","path":"Integer#|","type":"instance_method","visibility":"public"},"Integer#~":{"description":"One's complement: returns a number where each bit is flipped.\n\nInverts the bits in an Integer. As integers are conceptually of\ninfinite length, the result acts as if it had an infinite number of\none bits to the left. In hex representations, this is displayed\nas two periods to the left of the digits.\n\n  sprintf(\"%X\", ~0x1122334455)    #=> \"..FEEDDCCBBAA\"","name":"~","namespace":"Integer","path":"Integer#~","type":"instance_method","visibility":"public"},"Integer.sqrt":{"description":"Returns the integer square root of the non-negative integer +n+,\ni.e. the largest non-negative integer less than or equal to the\nsquare root of +n+.\n\n  Integer.sqrt(0)        #=> 0\n  Integer.sqrt(1)        #=> 1\n  Integer.sqrt(24)       #=> 4\n  Integer.sqrt(25)       #=> 5\n  Integer.sqrt(10**400)  #=> 10**200\n\nEquivalent to <code>Math.sqrt(n).floor</code>, except that\nthe result of the latter code may differ from the true value\ndue to the limited precision of floating point arithmetic.\n\n  Integer.sqrt(10**46)     #=> 100000000000000000000000\n  Math.sqrt(10**46).floor  #=>  99999999999999991611392 (!)\n\nIf +n+ is not an Integer, it is converted to an Integer first.\nIf +n+ is negative, a Math::DomainError is raised.","name":"sqrt","namespace":"Integer","path":"Integer.sqrt","type":"class_method","visibility":"public"},"Integer::GMP_VERSION":{"description":"The version of loaded GMP.","name":"GMP_VERSION","namespace":"Integer","path":"Integer::GMP_VERSION","type":"constant","return":null,"visibility":"public"},"ZeroDivisionError":{"description":"Raised when attempting to divide an integer by 0.\n\n   42 / 0   #=> ZeroDivisionError: divided by 0\n\nNote that only division by an exact 0 will raise the exception:\n\n   42 /  0.0   #=> Float::INFINITY\n   42 / -0.0   #=> -Float::INFINITY\n   0  /  0.0   #=> NaN","name":"ZeroDivisionError","namespace":"","path":"ZeroDivisionError","type":"class","visibility":"public"},"FloatDomainError":{"description":"Raised when attempting to convert special float values (in particular\n+Infinity+ or +NaN+) to numerical classes which don't support them.\n\n   Float::INFINITY.to_r   #=> FloatDomainError: Infinity","name":"FloatDomainError","namespace":"","path":"FloatDomainError","type":"class","visibility":"public"},"TrueClass":{"description":"*********************************************************************\n\n  The global value <code>true</code> is the only instance of class\n  <code>TrueClass</code> and represents a logically true value in\n  boolean expressions. The class provides operators allowing\n  <code>true</code> to be used in logical expressions.","name":"TrueClass","namespace":"","path":"TrueClass","type":"class","visibility":"public"},"TrueClass#&":{"description":"And---Returns <code>false</code> if <i>obj</i> is\n<code>nil</code> or <code>false</code>, <code>true</code> otherwise.","name":"&","namespace":"TrueClass","path":"TrueClass#&","type":"instance_method","visibility":"public"},"TrueClass#===":{"description":"Case Equality -- For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants to provide\nmeaningful semantics in +case+ statements.","name":"===","namespace":"TrueClass","path":"TrueClass#===","type":"instance_method","visibility":"public"},"TrueClass#^":{"description":"Exclusive Or---Returns <code>true</code> if <i>obj</i> is\n<code>nil</code> or <code>false</code>, <code>false</code>\notherwise.","name":"^","namespace":"TrueClass","path":"TrueClass#^","type":"instance_method","visibility":"public"},"TrueClass#inspect":{"description":"The string representation of <code>true</code> is \"true\".","name":"inspect","namespace":"TrueClass","path":"TrueClass#inspect","type":"instance_method","visibility":"public"},"TrueClass#to_s":{"description":"The string representation of <code>true</code> is \"true\".","name":"inspect","namespace":"TrueClass","path":"TrueClass#inspect","type":"instance_method","visibility":"public"},"TrueClass#|":{"description":"Or---Returns <code>true</code>. As <i>obj</i> is an argument to\na method call, it is always evaluated; there is no short-circuit\nevaluation in this case.\n\n   true |  puts(\"or\")\n   true || puts(\"logical or\")\n\n<em>produces:</em>\n\n   or","name":"|","namespace":"TrueClass","path":"TrueClass#|","type":"instance_method","visibility":"public"},"FalseClass":{"description":"The global value <code>false</code> is the only instance of class\n<code>FalseClass</code> and represents a logically false value in\nboolean expressions. The class provides operators allowing\n<code>false</code> to participate correctly in logical expressions.","name":"FalseClass","namespace":"","path":"FalseClass","type":"class","visibility":"public"},"FalseClass#&":{"description":"And---Returns <code>false</code>. <i>obj</i> is always\nevaluated as it is the argument to a method call---there is no\nshort-circuit evaluation in this case.","name":"&","namespace":"FalseClass","path":"FalseClass#&","type":"instance_method","visibility":"public"},"FalseClass#===":{"description":"Case Equality -- For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants to provide\nmeaningful semantics in +case+ statements.","name":"===","namespace":"FalseClass","path":"FalseClass#===","type":"instance_method","visibility":"public"},"FalseClass#^":{"description":"Exclusive Or---If <i>obj</i> is <code>nil</code> or\n<code>false</code>, returns <code>false</code>; otherwise, returns\n<code>true</code>.","name":"^","namespace":"FalseClass","path":"FalseClass#^","type":"instance_method","visibility":"public"},"FalseClass#inspect":{"description":"The string representation of <code>false</code> is \"false\".","name":"inspect","namespace":"FalseClass","path":"FalseClass#inspect","type":"instance_method","visibility":"public"},"FalseClass#to_s":{"description":"The string representation of <code>false</code> is \"false\".","name":"inspect","namespace":"FalseClass","path":"FalseClass#inspect","type":"instance_method","visibility":"public"},"FalseClass#|":{"description":"Or---Returns <code>false</code> if <i>obj</i> is\n<code>nil</code> or <code>false</code>; <code>true</code> otherwise.","name":"|","namespace":"FalseClass","path":"FalseClass#|","type":"instance_method","visibility":"public"},"Data":{"description":"This is a deprecated class, base class for C extensions using\nData_Make_Struct or Data_Wrap_Struct.","name":"Data","namespace":"","path":"Data","type":"class","visibility":"public"},"Ripper":{"description":"","name":"Ripper","namespace":"","path":"Ripper","type":"class","visibility":"public"},"Ripper#column":{"description":"Return column number of current parsing line.\nThis number starts from 0.","name":"column","namespace":"Ripper","path":"Ripper#column","type":"instance_method","visibility":"public"},"Ripper#dedent_string":{"description":"","name":"dedent_string","namespace":"Ripper","path":"Ripper#dedent_string","type":"instance_method","visibility":"private"},"Ripper#encoding":{"description":"Return encoding of the source.","name":"encoding","namespace":"Ripper","path":"Ripper#encoding","type":"instance_method","visibility":"public"},"Ripper#end_seen?":{"description":"Return true if parsed source ended by +\\_\\_END\\_\\_+.","name":"end_seen?","namespace":"Ripper","path":"Ripper#end_seen?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Ripper#error?":{"description":"Return true if parsed source has errors.","name":"error?","namespace":"Ripper","path":"Ripper#error?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Ripper#filename":{"description":"Return current parsing filename.","name":"filename","namespace":"Ripper","path":"Ripper#filename","type":"instance_method","visibility":"public"},"Ripper#initialize":{"description":"Create a new Ripper object.\n_src_ must be a String, an IO, or an Object which has #gets method.\n\nThis method does not starts parsing.\nSee also Ripper#parse and Ripper.parse.","name":"initialize","namespace":"Ripper","path":"Ripper#initialize","type":"instance_method","visibility":"public"},"Ripper#lineno":{"description":"Return line number of current parsing line.\nThis number starts from 1.","name":"lineno","namespace":"Ripper","path":"Ripper#lineno","type":"instance_method","visibility":"public"},"Ripper#parse":{"description":"Start parsing and returns the value of the root action.","name":"parse","namespace":"Ripper","path":"Ripper#parse","type":"instance_method","visibility":"public"},"Ripper#state":{"description":"Return scanner state of current token.","name":"state","namespace":"Ripper","path":"Ripper#state","type":"instance_method","visibility":"public"},"Ripper#yydebug":{"description":"Get yydebug.","name":"yydebug","namespace":"Ripper","path":"Ripper#yydebug","type":"instance_method","visibility":"public"},"Ripper#yydebug=":{"description":"Set yydebug.","name":"yydebug=","namespace":"Ripper","path":"Ripper#yydebug=","type":"instance_method","visibility":"public"},"Ripper.dedent_string":{"description":"","name":"dedent_string","namespace":"Ripper","path":"Ripper.dedent_string","type":"class_method","visibility":"public"},"Ripper.lex_state_name":{"description":"","name":"lex_state_name","namespace":"Ripper","path":"Ripper.lex_state_name","type":"class_method","visibility":"public"},"Ripper::Version":{"description":"version of Ripper","name":"Version","namespace":"Ripper","path":"Ripper::Version","type":"constant","return":null,"visibility":"public"},"Method":{"description":"********************************************************************\n\n\n  Method objects are created by <code>Object#method</code>, and are\n  associated with a particular object (not just with a class). They\n  may be used to invoke the method within the object, and as a block\n  associated with an iterator. They may also be unbound from one\n  object (creating an <code>UnboundMethod</code>) and bound to\n  another.\n\n     class Thing\n       def square(n)\n         n*n\n       end\n     end\n     thing = Thing.new\n     meth  = thing.method(:square)\n\n     meth.call(9)                 #=> 81\n     [ 1, 2, 3 ].collect(&meth)   #=> [1, 4, 9]","name":"Method","namespace":"","path":"Method","type":"class","visibility":"public"},"Method#==":{"description":"Two method objects are equal if they are bound to the same\nobject and refer to the same method definition and their owners are the\nsame class or module.","name":"==","namespace":"Method","path":"Method#==","type":"instance_method","visibility":"public"},"Method#===":{"description":"Invokes the <i>meth</i> with the specified arguments, returning the\nmethod's return value.\n\n   m = 12.method(\"+\")\n   m.call(3)    #=> 15\n   m.call(20)   #=> 32","name":"===","namespace":"Method","path":"Method#===","type":"instance_method","visibility":"public"},"Method#[]":{"description":"Invokes the <i>meth</i> with the specified arguments, returning the\nmethod's return value.\n\n   m = 12.method(\"+\")\n   m.call(3)    #=> 15\n   m.call(20)   #=> 32","name":"[]","namespace":"Method","path":"Method#[]","type":"instance_method","visibility":"public"},"Method#arity":{"description":"Returns an indication of the number of arguments accepted by a\nmethod. Returns a nonnegative integer for methods that take a fixed\nnumber of arguments. For Ruby methods that take a variable number of\narguments, returns -n-1, where n is the number of required arguments.\nKeyword arguments will be considered as a single additional argument,\nthat argument being mandatory if any keyword argument is mandatory.\nFor methods written in C, returns -1 if the call takes a\nvariable number of arguments.\n\n   class C\n     def one;    end\n     def two(a); end\n     def three(*a);  end\n     def four(a, b); end\n     def five(a, b, *c);    end\n     def six(a, b, *c, &d); end\n     def seven(a, b, x:0); end\n     def eight(x:, y:); end\n     def nine(x:, y:, **z); end\n     def ten(*a, x:, y:); end\n   end\n   c = C.new\n   c.method(:one).arity     #=> 0\n   c.method(:two).arity     #=> 1\n   c.method(:three).arity   #=> -1\n   c.method(:four).arity    #=> 2\n   c.method(:five).arity    #=> -3\n   c.method(:six).arity     #=> -3\n   c.method(:seven).arity   #=> -3\n   c.method(:eight).arity   #=> 1\n   c.method(:nine).arity    #=> 1\n   c.method(:ten).arity     #=> -2\n\n   \"cat\".method(:size).arity      #=> 0\n   \"cat\".method(:replace).arity   #=> 1\n   \"cat\".method(:squeeze).arity   #=> -1\n   \"cat\".method(:count).arity     #=> -1","name":"arity","namespace":"Method","path":"Method#arity","type":"instance_method","visibility":"public"},"Method#call":{"description":"Invokes the <i>meth</i> with the specified arguments, returning the\nmethod's return value.\n\n   m = 12.method(\"+\")\n   m.call(3)    #=> 15\n   m.call(20)   #=> 32","name":"call","namespace":"Method","path":"Method#call","type":"instance_method","visibility":"public"},"Method#clone":{"description":"Returns a clone of this method.\n\n  class A\n    def foo\n      return \"bar\"\n    end\n  end\n\n  m = A.new.method(:foo)\n  m.call # => \"bar\"\n  n = m.clone.call # => \"bar\"","name":"clone","namespace":"Method","path":"Method#clone","type":"instance_method","visibility":"public"},"Method#curry":{"description":"Returns a curried proc based on the method. When the proc is called with a number of\narguments that is lower than the method's arity, then another curried proc is returned.\nOnly when enough arguments have been supplied to satisfy the method signature, will the\nmethod actually be called.\n\nThe optional <i>arity</i> argument should be supplied when currying methods with\nvariable arguments to determine how many arguments are needed before the method is\ncalled.\n\n   def foo(a,b,c)\n     [a, b, c]\n   end\n\n   proc  = self.method(:foo).curry\n   proc2 = proc.call(1, 2)          #=> #<Proc>\n   proc2.call(3)                    #=> [1,2,3]\n\n   def vararg(*args)\n     args\n   end\n\n   proc = self.method(:vararg).curry(4)\n   proc2 = proc.call(:x)      #=> #<Proc>\n   proc3 = proc2.call(:y, :z) #=> #<Proc>\n   proc3.call(:a)             #=> [:x, :y, :z, :a]","name":"curry","namespace":"Method","path":"Method#curry","type":"instance_method","visibility":"public"},"Method#eql?":{"description":"Two method objects are equal if they are bound to the same\nobject and refer to the same method definition and their owners are the\nsame class or module.","name":"eql?","namespace":"Method","path":"Method#eql?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Method#hash":{"description":"Returns a hash value corresponding to the method object.\n\nSee also Object#hash.","name":"hash","namespace":"Method","path":"Method#hash","type":"instance_method","visibility":"public"},"Method#inspect":{"description":"Returns the name of the underlying method.\n\n  \"cat\".method(:count).inspect   #=> \"#<Method: String#count>\"","name":"inspect","namespace":"Method","path":"Method#inspect","type":"instance_method","visibility":"public"},"Method#name":{"description":"Returns the name of the method.","name":"name","namespace":"Method","path":"Method#name","type":"instance_method","visibility":"public"},"Method#original_name":{"description":"Returns the original name of the method.\n\n  class C\n    def foo; end\n    alias bar foo\n  end\n  C.instance_method(:bar).original_name # => :foo","name":"original_name","namespace":"Method","path":"Method#original_name","type":"instance_method","visibility":"public"},"Method#owner":{"description":"Returns the class or module that defines the method.","name":"owner","namespace":"Method","path":"Method#owner","type":"instance_method","visibility":"public"},"Method#parameters":{"description":"Returns the parameter information of this method.\n\n   def foo(bar); end\n   method(:foo).parameters #=> [[:req, :bar]]\n\n   def foo(bar, baz, bat, &blk); end\n   method(:foo).parameters #=> [[:req, :bar], [:req, :baz], [:req, :bat], [:block, :blk]]\n\n   def foo(bar, *args); end\n   method(:foo).parameters #=> [[:req, :bar], [:rest, :args]]\n\n   def foo(bar, baz, *args, &blk); end\n   method(:foo).parameters #=> [[:req, :bar], [:req, :baz], [:rest, :args], [:block, :blk]]","name":"parameters","namespace":"Method","path":"Method#parameters","type":"instance_method","visibility":"public"},"Method#receiver":{"description":"Returns the bound receiver of the method object.","name":"receiver","namespace":"Method","path":"Method#receiver","type":"instance_method","visibility":"public"},"Method#source_location":{"description":"Returns the Ruby source filename and line number containing this method\nor nil if this method was not defined in Ruby (i.e. native).","name":"source_location","namespace":"Method","path":"Method#source_location","type":"instance_method","visibility":"public"},"Method#super_method":{"description":"Returns a Method of superclass which would be called when super is used\nor nil if there is no method on superclass.","name":"super_method","namespace":"Method","path":"Method#super_method","type":"instance_method","visibility":"public"},"Method#to_proc":{"description":"Returns a <code>Proc</code> object corresponding to this method.","name":"to_proc","namespace":"Method","path":"Method#to_proc","type":"instance_method","visibility":"public"},"Method#to_s":{"description":"Returns the name of the underlying method.\n\n  \"cat\".method(:count).inspect   #=> \"#<Method: String#count>\"","name":"to_s","namespace":"Method","path":"Method#to_s","type":"instance_method","visibility":"public"},"Method#unbind":{"description":"Dissociates <i>meth</i> from its current receiver. The resulting\n<code>UnboundMethod</code> can subsequently be bound to a new object\nof the same class (see <code>UnboundMethod</code>).","name":"unbind","namespace":"Method","path":"Method#unbind","type":"instance_method","visibility":"public"},"UnboundMethod":{"description":"********************************************************************\n\n\n  Ruby supports two forms of objectified methods. Class\n  <code>Method</code> is used to represent methods that are associated\n  with a particular object: these method objects are bound to that\n  object. Bound method objects for an object can be created using\n  <code>Object#method</code>.\n\n  Ruby also supports unbound methods; methods objects that are not\n  associated with a particular object. These can be created either by\n  calling <code>Module#instance_method</code> or by calling\n  <code>unbind</code> on a bound method object. The result of both of\n  these is an <code>UnboundMethod</code> object.\n\n  Unbound methods can only be called after they are bound to an\n  object. That object must be a kind_of? the method's original\n  class.\n\n     class Square\n       def area\n         @side * @side\n       end\n       def initialize(side)\n         @side = side\n       end\n     end\n\n     area_un = Square.instance_method(:area)\n\n     s = Square.new(12)\n     area = area_un.bind(s)\n     area.call   #=> 144\n\n  Unbound methods are a reference to the method at the time it was\n  objectified: subsequent changes to the underlying class will not\n  affect the unbound method.\n\n     class Test\n       def test\n         :original\n       end\n     end\n     um = Test.instance_method(:test)\n     class Test\n       def test\n         :modified\n       end\n     end\n     t = Test.new\n     t.test            #=> :modified\n     um.bind(t).call   #=> :original","name":"UnboundMethod","namespace":"","path":"UnboundMethod","type":"class","visibility":"public"},"UnboundMethod#==":{"description":"Two method objects are equal if they are bound to the same\nobject and refer to the same method definition and their owners are the\nsame class or module.","name":"==","namespace":"UnboundMethod","path":"UnboundMethod#==","type":"instance_method","visibility":"public"},"UnboundMethod#arity":{"description":"Returns an indication of the number of arguments accepted by a\nmethod. Returns a nonnegative integer for methods that take a fixed\nnumber of arguments. For Ruby methods that take a variable number of\narguments, returns -n-1, where n is the number of required arguments.\nKeyword arguments will be considered as a single additional argument,\nthat argument being mandatory if any keyword argument is mandatory.\nFor methods written in C, returns -1 if the call takes a\nvariable number of arguments.\n\n   class C\n     def one;    end\n     def two(a); end\n     def three(*a);  end\n     def four(a, b); end\n     def five(a, b, *c);    end\n     def six(a, b, *c, &d); end\n     def seven(a, b, x:0); end\n     def eight(x:, y:); end\n     def nine(x:, y:, **z); end\n     def ten(*a, x:, y:); end\n   end\n   c = C.new\n   c.method(:one).arity     #=> 0\n   c.method(:two).arity     #=> 1\n   c.method(:three).arity   #=> -1\n   c.method(:four).arity    #=> 2\n   c.method(:five).arity    #=> -3\n   c.method(:six).arity     #=> -3\n   c.method(:seven).arity   #=> -3\n   c.method(:eight).arity   #=> 1\n   c.method(:nine).arity    #=> 1\n   c.method(:ten).arity     #=> -2\n\n   \"cat\".method(:size).arity      #=> 0\n   \"cat\".method(:replace).arity   #=> 1\n   \"cat\".method(:squeeze).arity   #=> -1\n   \"cat\".method(:count).arity     #=> -1","name":"arity","namespace":"UnboundMethod","path":"UnboundMethod#arity","type":"instance_method","visibility":"public"},"UnboundMethod#bind":{"description":"Bind <i>umeth</i> to <i>obj</i>. If <code>Klass</code> was the class\nfrom which <i>umeth</i> was obtained,\n<code>obj.kind_of?(Klass)</code> must be true.\n\n   class A\n     def test\n       puts \"In test, class = #{self.class}\"\n     end\n   end\n   class B < A\n   end\n   class C < B\n   end\n\n\n   um = B.instance_method(:test)\n   bm = um.bind(C.new)\n   bm.call\n   bm = um.bind(B.new)\n   bm.call\n   bm = um.bind(A.new)\n   bm.call\n\n<em>produces:</em>\n\n   In test, class = C\n   In test, class = B\n   prog.rb:16:in `bind': bind argument must be an instance of B (TypeError)\n   \tfrom prog.rb:16","name":"bind","namespace":"UnboundMethod","path":"UnboundMethod#bind","type":"instance_method","visibility":"public"},"UnboundMethod#clone":{"description":"Returns a clone of this method.\n\n  class A\n    def foo\n      return \"bar\"\n    end\n  end\n\n  m = A.new.method(:foo)\n  m.call # => \"bar\"\n  n = m.clone.call # => \"bar\"","name":"clone","namespace":"UnboundMethod","path":"UnboundMethod#clone","type":"instance_method","visibility":"public"},"UnboundMethod#eql?":{"description":"Two method objects are equal if they are bound to the same\nobject and refer to the same method definition and their owners are the\nsame class or module.","name":"eql?","namespace":"UnboundMethod","path":"UnboundMethod#eql?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"UnboundMethod#hash":{"description":"Returns a hash value corresponding to the method object.\n\nSee also Object#hash.","name":"hash","namespace":"UnboundMethod","path":"UnboundMethod#hash","type":"instance_method","visibility":"public"},"UnboundMethod#inspect":{"description":"Returns the name of the underlying method.\n\n  \"cat\".method(:count).inspect   #=> \"#<Method: String#count>\"","name":"inspect","namespace":"UnboundMethod","path":"UnboundMethod#inspect","type":"instance_method","visibility":"public"},"UnboundMethod#name":{"description":"Returns the name of the method.","name":"name","namespace":"UnboundMethod","path":"UnboundMethod#name","type":"instance_method","visibility":"public"},"UnboundMethod#original_name":{"description":"Returns the original name of the method.\n\n  class C\n    def foo; end\n    alias bar foo\n  end\n  C.instance_method(:bar).original_name # => :foo","name":"original_name","namespace":"UnboundMethod","path":"UnboundMethod#original_name","type":"instance_method","visibility":"public"},"UnboundMethod#owner":{"description":"Returns the class or module that defines the method.","name":"owner","namespace":"UnboundMethod","path":"UnboundMethod#owner","type":"instance_method","visibility":"public"},"UnboundMethod#parameters":{"description":"Returns the parameter information of this method.\n\n   def foo(bar); end\n   method(:foo).parameters #=> [[:req, :bar]]\n\n   def foo(bar, baz, bat, &blk); end\n   method(:foo).parameters #=> [[:req, :bar], [:req, :baz], [:req, :bat], [:block, :blk]]\n\n   def foo(bar, *args); end\n   method(:foo).parameters #=> [[:req, :bar], [:rest, :args]]\n\n   def foo(bar, baz, *args, &blk); end\n   method(:foo).parameters #=> [[:req, :bar], [:req, :baz], [:rest, :args], [:block, :blk]]","name":"parameters","namespace":"UnboundMethod","path":"UnboundMethod#parameters","type":"instance_method","visibility":"public"},"UnboundMethod#source_location":{"description":"Returns the Ruby source filename and line number containing this method\nor nil if this method was not defined in Ruby (i.e. native).","name":"source_location","namespace":"UnboundMethod","path":"UnboundMethod#source_location","type":"instance_method","visibility":"public"},"UnboundMethod#super_method":{"description":"Returns a Method of superclass which would be called when super is used\nor nil if there is no method on superclass.","name":"super_method","namespace":"UnboundMethod","path":"UnboundMethod#super_method","type":"instance_method","visibility":"public"},"UnboundMethod#to_s":{"description":"Returns the name of the underlying method.\n\n  \"cat\".method(:count).inspect   #=> \"#<Method: String#count>\"","name":"to_s","namespace":"UnboundMethod","path":"UnboundMethod#to_s","type":"instance_method","visibility":"public"},"LocalJumpError":{"description":"Raised when Ruby can't yield as requested.\n\nA typical scenario is attempting to yield when no block is given:\n\n   def call_block\n     yield 42\n   end\n   call_block\n\n<em>raises the exception:</em>\n\n   LocalJumpError: no block given (yield)\n\nA more subtle example:\n\n   def get_me_a_return\n     Proc.new { return 42 }\n   end\n   get_me_a_return.call\n\n<em>raises the exception:</em>\n\n   LocalJumpError: unexpected return","name":"LocalJumpError","namespace":"","path":"LocalJumpError","type":"class","visibility":"public"},"LocalJumpError#exit_value":{"description":"Returns the exit value associated with this +LocalJumpError+.","name":"exit_value","namespace":"LocalJumpError","path":"LocalJumpError#exit_value","type":"instance_method","visibility":"public"},"LocalJumpError#reason":{"description":"The reason this block was terminated:\n:break, :redo, :retry, :next, :return, or :noreason.","name":"reason","namespace":"LocalJumpError","path":"LocalJumpError#reason","type":"instance_method","visibility":"public"},"SystemStackError":{"description":"Raised in case of a stack overflow.\n\n   def me_myself_and_i\n     me_myself_and_i\n   end\n   me_myself_and_i\n\n<em>raises the exception:</em>\n\n  SystemStackError: stack level too deep","name":"SystemStackError","namespace":"","path":"SystemStackError","type":"class","visibility":"public"},"Proc":{"description":"<code>Proc</code> objects are blocks of code that have been bound to\na set of local variables. Once bound, the code may be called in\ndifferent contexts and still access those variables.\n\n   def gen_times(factor)\n     return Proc.new {|n| n*factor }\n   end\n\n   times3 = gen_times(3)\n   times5 = gen_times(5)\n\n   times3.call(12)               #=> 36\n   times5.call(5)                #=> 25\n   times3.call(times5.call(4))   #=> 60","name":"Proc","namespace":"","path":"Proc","type":"class","visibility":"public"},"Proc#===":{"description":"call-seq:\n   proc === obj   -> result_of_proc\n\nInvokes the block with +obj+ as the proc's parameter like Proc#call.  It\nis to allow a proc object to be a target of +when+ clause in a case\nstatement.","name":"===","namespace":"Proc","path":"Proc#===","type":"instance_method","visibility":"public"},"Proc#[]":{"description":"call-seq:\n   prc.call(params,...)   -> obj\n   prc[params,...]        -> obj\n   prc.(params,...)       -> obj\n   prc.yield(params,...)  -> obj\n\nInvokes the block, setting the block's parameters to the values in\n<i>params</i> using something close to method calling semantics.\nReturns the value of the last expression evaluated in the block.\n\n   a_proc = Proc.new {|scalar, *values| values.map {|value| value*scalar } }\n   a_proc.call(9, 1, 2, 3)    #=> [9, 18, 27]\n   a_proc[9, 1, 2, 3]         #=> [9, 18, 27]\n   a_proc.(9, 1, 2, 3)        #=> [9, 18, 27]\n   a_proc.yield(9, 1, 2, 3)   #=> [9, 18, 27]\n\nNote that <code>prc.()</code> invokes <code>prc.call()</code> with\nthe parameters given.  It's syntactic sugar to hide \"call\".\n\nFor procs created using <code>lambda</code> or <code>->()</code> an error\nis generated if the wrong number of parameters are passed to the proc.\nFor procs created using <code>Proc.new</code> or <code>Kernel.proc</code>,\nextra parameters are silently discarded and missing parameters are\nset to +nil+.\n\n   a_proc = proc {|a,b| [a,b] }\n   a_proc.call(1)   #=> [1, nil]\n\n   a_proc = lambda {|a,b| [a,b] }\n   a_proc.call(1)   # ArgumentError: wrong number of arguments (given 1, expected 2)\n\nSee also Proc#lambda?.","name":"[]","namespace":"Proc","path":"Proc#[]","type":"instance_method","visibility":"public"},"Proc#arity":{"description":"Returns the number of mandatory arguments. If the block\nis declared to take no arguments, returns 0. If the block is known\nto take exactly n arguments, returns n.\nIf the block has optional arguments, returns -n-1, where n is the\nnumber of mandatory arguments, with the exception for blocks that\nare not lambdas and have only a finite number of optional arguments;\nin this latter case, returns n.\nKeyword arguments will be considered as a single additional argument,\nthat argument being mandatory if any keyword argument is mandatory.\nA <code>proc</code> with no argument declarations\nis the same as a block declaring <code>||</code> as its arguments.\n\n   proc {}.arity                  #=>  0\n   proc { || }.arity              #=>  0\n   proc { |a| }.arity             #=>  1\n   proc { |a, b| }.arity          #=>  2\n   proc { |a, b, c| }.arity       #=>  3\n   proc { |*a| }.arity            #=> -1\n   proc { |a, *b| }.arity         #=> -2\n   proc { |a, *b, c| }.arity      #=> -3\n   proc { |x:, y:, z:0| }.arity   #=>  1\n   proc { |*a, x:, y:0| }.arity   #=> -2\n\n   proc   { |a=0| }.arity         #=>  0\n   lambda { |a=0| }.arity         #=> -1\n   proc   { |a=0, b| }.arity      #=>  1\n   lambda { |a=0, b| }.arity      #=> -2\n   proc   { |a=0, b=0| }.arity    #=>  0\n   lambda { |a=0, b=0| }.arity    #=> -1\n   proc   { |a, b=0| }.arity      #=>  1\n   lambda { |a, b=0| }.arity      #=> -2\n   proc   { |(a, b), c=0| }.arity #=>  1\n   lambda { |(a, b), c=0| }.arity #=> -2\n   proc   { |a, x:0, y:0| }.arity #=>  1\n   lambda { |a, x:0, y:0| }.arity #=> -2","name":"arity","namespace":"Proc","path":"Proc#arity","type":"instance_method","visibility":"public"},"Proc#binding":{"description":"Returns the binding associated with <i>prc</i>. Note that\n<code>Kernel#eval</code> accepts either a <code>Proc</code> or a\n<code>Binding</code> object as its second parameter.\n\n   def fred(param)\n     proc {}\n   end\n\n   b = fred(99)\n   eval(\"param\", b.binding)   #=> 99","name":"binding","namespace":"Proc","path":"Proc#binding","type":"instance_method","visibility":"public"},"Proc#call":{"description":"call-seq:\n   prc.call(params,...)   -> obj\n   prc[params,...]        -> obj\n   prc.(params,...)       -> obj\n   prc.yield(params,...)  -> obj\n\nInvokes the block, setting the block's parameters to the values in\n<i>params</i> using something close to method calling semantics.\nReturns the value of the last expression evaluated in the block.\n\n   a_proc = Proc.new {|scalar, *values| values.map {|value| value*scalar } }\n   a_proc.call(9, 1, 2, 3)    #=> [9, 18, 27]\n   a_proc[9, 1, 2, 3]         #=> [9, 18, 27]\n   a_proc.(9, 1, 2, 3)        #=> [9, 18, 27]\n   a_proc.yield(9, 1, 2, 3)   #=> [9, 18, 27]\n\nNote that <code>prc.()</code> invokes <code>prc.call()</code> with\nthe parameters given.  It's syntactic sugar to hide \"call\".\n\nFor procs created using <code>lambda</code> or <code>->()</code> an error\nis generated if the wrong number of parameters are passed to the proc.\nFor procs created using <code>Proc.new</code> or <code>Kernel.proc</code>,\nextra parameters are silently discarded and missing parameters are\nset to +nil+.\n\n   a_proc = proc {|a,b| [a,b] }\n   a_proc.call(1)   #=> [1, nil]\n\n   a_proc = lambda {|a,b| [a,b] }\n   a_proc.call(1)   # ArgumentError: wrong number of arguments (given 1, expected 2)\n\nSee also Proc#lambda?.","name":"call","namespace":"Proc","path":"Proc#call","type":"instance_method","visibility":"public"},"Proc#clone":{"description":":nodoc:","name":"clone","namespace":"Proc","path":"Proc#clone","type":"instance_method","visibility":"public"},"Proc#curry":{"description":"Returns a curried proc. If the optional <i>arity</i> argument is given,\nit determines the number of arguments.\nA curried proc receives some arguments. If a sufficient number of\narguments are supplied, it passes the supplied arguments to the original\nproc and returns the result. Otherwise, returns another curried proc that\ntakes the rest of arguments.\n\n   b = proc {|x, y, z| (x||0) + (y||0) + (z||0) }\n   p b.curry[1][2][3]           #=> 6\n   p b.curry[1, 2][3, 4]        #=> 6\n   p b.curry(5)[1][2][3][4][5]  #=> 6\n   p b.curry(5)[1, 2][3, 4][5]  #=> 6\n   p b.curry(1)[1]              #=> 1\n\n   b = proc {|x, y, z, *w| (x||0) + (y||0) + (z||0) + w.inject(0, &:+) }\n   p b.curry[1][2][3]           #=> 6\n   p b.curry[1, 2][3, 4]        #=> 10\n   p b.curry(5)[1][2][3][4][5]  #=> 15\n   p b.curry(5)[1, 2][3, 4][5]  #=> 15\n   p b.curry(1)[1]              #=> 1\n\n   b = lambda {|x, y, z| (x||0) + (y||0) + (z||0) }\n   p b.curry[1][2][3]           #=> 6\n   p b.curry[1, 2][3, 4]        #=> wrong number of arguments (given 4, expected 3)\n   p b.curry(5)                 #=> wrong number of arguments (given 5, expected 3)\n   p b.curry(1)                 #=> wrong number of arguments (given 1, expected 3)\n\n   b = lambda {|x, y, z, *w| (x||0) + (y||0) + (z||0) + w.inject(0, &:+) }\n   p b.curry[1][2][3]           #=> 6\n   p b.curry[1, 2][3, 4]        #=> 10\n   p b.curry(5)[1][2][3][4][5]  #=> 15\n   p b.curry(5)[1, 2][3, 4][5]  #=> 15\n   p b.curry(1)                 #=> wrong number of arguments (given 1, expected 3)\n\n   b = proc { :foo }\n   p b.curry[]                  #=> :foo","name":"curry","namespace":"Proc","path":"Proc#curry","type":"instance_method","visibility":"public"},"Proc#dup":{"description":":nodoc:","name":"dup","namespace":"Proc","path":"Proc#dup","type":"instance_method","visibility":"public"},"Proc#hash":{"description":"Returns a hash value corresponding to proc body.\n\nSee also Object#hash.","name":"hash","namespace":"Proc","path":"Proc#hash","type":"instance_method","visibility":"public"},"Proc#inspect":{"description":"Returns the unique identifier for this proc, along with\nan indication of where the proc was defined.","name":"inspect","namespace":"Proc","path":"Proc#inspect","type":"instance_method","visibility":"public"},"Proc#lambda?":{"description":"Returns +true+ for a Proc object for which argument handling is rigid.\nSuch procs are typically generated by +lambda+.\n\nA Proc object generated by +proc+ ignores extra arguments.\n\n  proc {|a,b| [a,b] }.call(1,2,3)    #=> [1,2]\n\nIt provides +nil+ for missing arguments.\n\n  proc {|a,b| [a,b] }.call(1)        #=> [1,nil]\n\nIt expands a single array argument.\n\n  proc {|a,b| [a,b] }.call([1,2])    #=> [1,2]\n\nA Proc object generated by +lambda+ doesn't have such tricks.\n\n  lambda {|a,b| [a,b] }.call(1,2,3)  #=> ArgumentError\n  lambda {|a,b| [a,b] }.call(1)      #=> ArgumentError\n  lambda {|a,b| [a,b] }.call([1,2])  #=> ArgumentError\n\nProc#lambda? is a predicate for the tricks.\nIt returns +true+ if no tricks apply.\n\n  lambda {}.lambda?            #=> true\n  proc {}.lambda?              #=> false\n\nProc.new is the same as +proc+.\n\n  Proc.new {}.lambda?          #=> false\n\n+lambda+, +proc+ and Proc.new preserve the tricks of\na Proc object given by <code>&</code> argument.\n\n  lambda(&lambda {}).lambda?   #=> true\n  proc(&lambda {}).lambda?     #=> true\n  Proc.new(&lambda {}).lambda? #=> true\n\n  lambda(&proc {}).lambda?     #=> false\n  proc(&proc {}).lambda?       #=> false\n  Proc.new(&proc {}).lambda?   #=> false\n\nA Proc object generated by <code>&</code> argument has the tricks\n\n  def n(&b) b.lambda? end\n  n {}                         #=> false\n\nThe <code>&</code> argument preserves the tricks if a Proc object\nis given by <code>&</code> argument.\n\n  n(&lambda {})                #=> true\n  n(&proc {})                  #=> false\n  n(&Proc.new {})              #=> false\n\nA Proc object converted from a method has no tricks.\n\n  def m() end\n  method(:m).to_proc.lambda?   #=> true\n\n  n(&method(:m))               #=> true\n  n(&method(:m).to_proc)       #=> true\n\n+define_method+ is treated the same as method definition.\nThe defined method has no tricks.\n\n  class C\n    define_method(:d) {}\n  end\n  C.new.d(1,2)       #=> ArgumentError\n  C.new.method(:d).to_proc.lambda?   #=> true\n\n+define_method+ always defines a method without the tricks,\neven if a non-lambda Proc object is given.\nThis is the only exception for which the tricks are not preserved.\n\n  class C\n    define_method(:e, &proc {})\n  end\n  C.new.e(1,2)       #=> ArgumentError\n  C.new.method(:e).to_proc.lambda?   #=> true\n\nThis exception ensures that methods never have tricks\nand makes it easy to have wrappers to define methods that behave as usual.\n\n  class C\n    def self.def2(name, &body)\n      define_method(name, &body)\n    end\n\n    def2(:f) {}\n  end\n  C.new.f(1,2)       #=> ArgumentError\n\nThe wrapper <i>def2</i> defines a method which has no tricks.","name":"lambda?","namespace":"Proc","path":"Proc#lambda?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Proc#parameters":{"description":"Returns the parameter information of this proc.\n\n   prc = lambda{|x, y=42, *other|}\n   prc.parameters  #=> [[:req, :x], [:opt, :y], [:rest, :other]]","name":"parameters","namespace":"Proc","path":"Proc#parameters","type":"instance_method","visibility":"public"},"Proc#source_location":{"description":"Returns the Ruby source filename and line number containing this proc\nor +nil+ if this proc was not defined in Ruby (i.e. native).","name":"source_location","namespace":"Proc","path":"Proc#source_location","type":"instance_method","visibility":"public"},"Proc#to_proc":{"description":"Part of the protocol for converting objects to <code>Proc</code>\nobjects. Instances of class <code>Proc</code> simply return\nthemselves.","name":"to_proc","namespace":"Proc","path":"Proc#to_proc","type":"instance_method","visibility":"public"},"Proc#to_s":{"description":"Returns the unique identifier for this proc, along with\nan indication of where the proc was defined.","name":"inspect","namespace":"Proc","path":"Proc#inspect","type":"instance_method","visibility":"public"},"Proc#yield":{"description":"call-seq:\n   prc.call(params,...)   -> obj\n   prc[params,...]        -> obj\n   prc.(params,...)       -> obj\n   prc.yield(params,...)  -> obj\n\nInvokes the block, setting the block's parameters to the values in\n<i>params</i> using something close to method calling semantics.\nReturns the value of the last expression evaluated in the block.\n\n   a_proc = Proc.new {|scalar, *values| values.map {|value| value*scalar } }\n   a_proc.call(9, 1, 2, 3)    #=> [9, 18, 27]\n   a_proc[9, 1, 2, 3]         #=> [9, 18, 27]\n   a_proc.(9, 1, 2, 3)        #=> [9, 18, 27]\n   a_proc.yield(9, 1, 2, 3)   #=> [9, 18, 27]\n\nNote that <code>prc.()</code> invokes <code>prc.call()</code> with\nthe parameters given.  It's syntactic sugar to hide \"call\".\n\nFor procs created using <code>lambda</code> or <code>->()</code> an error\nis generated if the wrong number of parameters are passed to the proc.\nFor procs created using <code>Proc.new</code> or <code>Kernel.proc</code>,\nextra parameters are silently discarded and missing parameters are\nset to +nil+.\n\n   a_proc = proc {|a,b| [a,b] }\n   a_proc.call(1)   #=> [1, nil]\n\n   a_proc = lambda {|a,b| [a,b] }\n   a_proc.call(1)   # ArgumentError: wrong number of arguments (given 1, expected 2)\n\nSee also Proc#lambda?.","name":"yield","namespace":"Proc","path":"Proc#yield","type":"instance_method","visibility":"public"},"Proc.new":{"description":"Creates a new <code>Proc</code> object, bound to the current\ncontext. <code>Proc::new</code> may be called without a block only\nwithin a method with an attached block, in which case that block is\nconverted to the <code>Proc</code> object.\n\n   def proc_from\n     Proc.new\n   end\n   proc = proc_from { \"hello\" }\n   proc.call   #=> \"hello\"","name":"new","namespace":"Proc","path":"Proc.new","type":"class_method","visibility":"public"},"Binding":{"description":"Objects of class <code>Binding</code> encapsulate the execution\ncontext at some particular place in the code and retain this context\nfor future use. The variables, methods, value of <code>self</code>,\nand possibly an iterator block that can be accessed in this context\nare all retained. Binding objects can be created using\n<code>Kernel#binding</code>, and are made available to the callback\nof <code>Kernel#set_trace_func</code>.\n\nThese binding objects can be passed as the second argument of the\n<code>Kernel#eval</code> method, establishing an environment for the\nevaluation.\n\n   class Demo\n     def initialize(n)\n       @secret = n\n     end\n     def get_binding\n       binding\n     end\n   end\n\n   k1 = Demo.new(99)\n   b1 = k1.get_binding\n   k2 = Demo.new(-3)\n   b2 = k2.get_binding\n\n   eval(\"@secret\", b1)   #=> 99\n   eval(\"@secret\", b2)   #=> -3\n   eval(\"@secret\")       #=> nil\n\nBinding objects have no class-specific methods.","name":"Binding","namespace":"","path":"Binding","type":"class","visibility":"public"},"Binding#clone":{"description":":nodoc:","name":"clone","namespace":"Binding","path":"Binding#clone","type":"instance_method","visibility":"public"},"Binding#dup":{"description":":nodoc:","name":"dup","namespace":"Binding","path":"Binding#dup","type":"instance_method","visibility":"public"},"Binding#eval":{"description":"Evaluates the Ruby expression(s) in <em>string</em>, in the\n<em>binding</em>'s context.  If the optional <em>filename</em> and\n<em>lineno</em> parameters are present, they will be used when\nreporting syntax errors.\n\n   def get_binding(param)\n     binding\n   end\n   b = get_binding(\"hello\")\n   b.eval(\"param\")   #=> \"hello\"","name":"eval","namespace":"Binding","path":"Binding#eval","type":"instance_method","visibility":"public"},"Binding#local_variable_defined?":{"description":"Returns +true+ if a local variable +symbol+ exists.\n\ndef foo\n\t  a = 1\n\t  binding.local_variable_defined?(:a) #=> true\n\t  binding.local_variable_defined?(:b) #=> false\n\tend\n\nThis method is the short version of the following code:\n\nbinding.eval(\"defined?(#{symbol}) == 'local-variable'\")","name":"local_variable_defined?","namespace":"Binding","path":"Binding#local_variable_defined?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Binding#local_variable_get":{"description":"Returns the value of the local variable +symbol+.\n\ndef foo\n\t  a = 1\n\t  binding.local_variable_get(:a) #=> 1\n\t  binding.local_variable_get(:b) #=> NameError\n\tend\n\nThis method is the short version of the following code:\n\nbinding.eval(\"#{symbol}\")","name":"local_variable_get","namespace":"Binding","path":"Binding#local_variable_get","type":"instance_method","visibility":"public"},"Binding#local_variable_set":{"description":"Set local variable named +symbol+ as +obj+.\n\ndef foo\n\t  a = 1\n\t  bind = binding\n\t  bind.local_variable_set(:a, 2) # set existing local variable `a'\n\t  bind.local_variable_set(:b, 3) # create new local variable `b'\n\t                                 # `b' exists only in binding\n\n\t  p bind.local_variable_get(:a)  #=> 2\n\t  p bind.local_variable_get(:b)  #=> 3\n\t  p a                            #=> 2\n\t  p b                            #=> NameError\n\tend\n\nThis method behaves similarly to the following code:\n\n  binding.eval(\"#{symbol} = #{obj}\")\n\nif +obj+ can be dumped in Ruby code.","name":"local_variable_set","namespace":"Binding","path":"Binding#local_variable_set","type":"instance_method","visibility":"public"},"Binding#local_variables":{"description":"Returns the names of the binding's local variables as symbols.\n\ndef foo\n\t  a = 1\n\t  2.times do |n|\n\t    binding.local_variables #=> [:a, :n]\n\t  end\n\tend\n\nThis method is the short version of the following code:\n\nbinding.eval(\"local_variables\")","name":"local_variables","namespace":"Binding","path":"Binding#local_variables","type":"instance_method","visibility":"public"},"Binding#receiver":{"description":"Returns the bound receiver of the binding object.","name":"receiver","namespace":"Binding","path":"Binding#receiver","type":"instance_method","visibility":"public"},"Random":{"description":"Random provides an interface to Ruby's pseudo-random number generator, or\nPRNG.  The PRNG produces a deterministic sequence of bits which approximate\ntrue randomness. The sequence may be represented by integers, floats, or\nbinary strings.\n\nThe generator may be initialized with either a system-generated or\nuser-supplied seed value by using Random.srand.\n\nThe class method Random.rand provides the base functionality of Kernel.rand\nalong with better handling of floating point values. These are both\ninterfaces to Random::DEFAULT, the Ruby system PRNG.\n\nRandom.new will create a new PRNG with a state independent of\nRandom::DEFAULT, allowing multiple generators with different seed values or\nsequence positions to exist simultaneously. Random objects can be\nmarshaled, allowing sequences to be saved and resumed.\n\nPRNGs are currently implemented as a modified Mersenne Twister with a period\nof 2**19937-1.","name":"Random","namespace":"","path":"Random","type":"class","visibility":"public"},"Random#==":{"description":"Returns true if the two generators have the same internal state, otherwise\nfalse.  Equivalent generators will return the same sequence of\npseudo-random numbers.  Two generators will generally have the same state\nonly if they were initialized with the same seed\n\n  Random.new == Random.new             # => false\n  Random.new(1234) == Random.new(1234) # => true\n\nand have the same invocation history.\n\n  prng1 = Random.new(1234)\n  prng2 = Random.new(1234)\n  prng1 == prng2 # => true\n\n  prng1.rand     # => 0.1915194503788923\n  prng1 == prng2 # => false\n\n  prng2.rand     # => 0.1915194503788923\n  prng1 == prng2 # => true","name":"==","namespace":"Random","path":"Random#==","type":"instance_method","visibility":"public"},"Random#bytes":{"description":"Returns a random binary string containing +size+ bytes.\n\n  random_string = Random.new.bytes(10) # => \"\\xD7:R\\xAB?\\x83\\xCE\\xFAkO\"\n  random_string.size                   # => 10","name":"bytes","namespace":"Random","path":"Random#bytes","type":"instance_method","visibility":"public"},"Random#initialize":{"description":"Creates a new PRNG using +seed+ to set the initial state. If +seed+ is\nomitted, the generator is initialized with Random.new_seed.\n\nSee Random.srand for more information on the use of seed values.","name":"initialize","namespace":"Random","path":"Random#initialize","type":"instance_method","visibility":"public"},"Random#initialize_copy":{"description":":nodoc:","name":"initialize_copy","namespace":"Random","path":"Random#initialize_copy","type":"instance_method","visibility":"public"},"Random#left":{"description":":nodoc:","name":"left","namespace":"Random","path":"Random#left","type":"instance_method","visibility":"private"},"Random#marshal_dump":{"description":":nodoc:","name":"marshal_dump","namespace":"Random","path":"Random#marshal_dump","type":"instance_method","visibility":"private"},"Random#marshal_load":{"description":":nodoc:","name":"marshal_load","namespace":"Random","path":"Random#marshal_load","type":"instance_method","visibility":"private"},"Random#rand":{"description":"When +max+ is an Integer, +rand+ returns a random integer greater than\nor equal to zero and less than +max+. Unlike Kernel.rand, when +max+\nis a negative integer or zero, +rand+ raises an ArgumentError.\n\n  prng = Random.new\n  prng.rand(100)       # => 42\n\nWhen +max+ is a Float, +rand+ returns a random floating point number\nbetween 0.0 and +max+, including 0.0 and excluding +max+.\n\n  prng.rand(1.5)       # => 1.4600282860034115\n\nWhen +max+ is a Range, +rand+ returns a random number where\nrange.member?(number) == true.\n\n  prng.rand(5..9)      # => one of [5, 6, 7, 8, 9]\n  prng.rand(5...9)     # => one of [5, 6, 7, 8]\n  prng.rand(5.0..9.0)  # => between 5.0 and 9.0, including 9.0\n  prng.rand(5.0...9.0) # => between 5.0 and 9.0, excluding 9.0\n\nBoth the beginning and ending values of the range must respond to subtract\n(<tt>-</tt>) and add (<tt>+</tt>)methods, or rand will raise an\nArgumentError.","name":"rand","namespace":"Random","path":"Random#rand","type":"instance_method","visibility":"public"},"Random#seed":{"description":"Returns the seed value used to initialize the generator. This may be used to\ninitialize another generator with the same state at a later time, causing it\nto produce the same sequence of numbers.\n\n  prng1 = Random.new(1234)\n  prng1.seed       #=> 1234\n  prng1.rand(100)  #=> 47\n\n  prng2 = Random.new(prng1.seed)\n  prng2.rand(100)  #=> 47","name":"seed","namespace":"Random","path":"Random#seed","type":"instance_method","visibility":"public"},"Random#state":{"description":":nodoc:","name":"state","namespace":"Random","path":"Random#state","type":"instance_method","visibility":"private"},"Random.new_seed":{"description":"Returns an arbitrary seed value. This is used by Random.new\nwhen no seed value is specified as an argument.\n\n  Random.new_seed  #=> 115032730400174366788466674494640623225","name":"new_seed","namespace":"Random","path":"Random.new_seed","type":"class_method","visibility":"public"},"Random.rand":{"description":"Alias of Random::DEFAULT.rand.","name":"rand","namespace":"Random","path":"Random.rand","type":"class_method","visibility":"public"},"Random.srand":{"description":"Seeds the system pseudo-random number generator, Random::DEFAULT, with\n+number+.  The previous seed value is returned.\n\nIf +number+ is omitted, seeds the generator using a source of entropy\nprovided by the operating system, if available (/dev/urandom on Unix systems\nor the RSA cryptographic provider on Windows), which is then combined with\nthe time, the process id, and a sequence number.\n\nsrand may be used to ensure repeatable sequences of pseudo-random numbers\nbetween different runs of the program. By setting the seed to a known value,\nprograms can be made deterministic during testing.\n\n  srand 1234               # => 268519324636777531569100071560086917274\n  [ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n  [ rand(10), rand(1000) ] # => [4, 664]\n  srand 1234               # => 1234\n  [ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]","name":"srand","namespace":"Random","path":"Random.srand","type":"class_method","visibility":"public"},"Random.urandom":{"description":"Returns a string, using platform providing features.\nReturned value is expected to be a cryptographically secure\npseudo-random number in binary form.\nThis method raises a RuntimeError if the feature provided by platform\nfailed to prepare the result.\n\nIn 2017, Linux manpage random(7) writes that \"no cryptographic\nprimitive available today can hope to promise more than 256 bits of\nsecurity\".  So it might be questionable to pass size > 32 to this\nmethod.\n\n  Random.urandom(8)  #=> \"\\x78\\x41\\xBA\\xAF\\x7D\\xEA\\xD8\\xEA\"","name":"urandom","namespace":"Random","path":"Random.urandom","type":"class_method","visibility":"public"},"Random::DEFAULT":{"description":"","name":"DEFAULT","namespace":"Random","path":"Random::DEFAULT","type":"constant","return":["Random",""],"visibility":"public"},"Random::Formatter":{"description":"","name":"Formatter","namespace":"Random","path":"Random::Formatter","type":"module","visibility":"public"},"Random::Formatter#rand":{"description":"","name":"rand","namespace":"Random::Formatter","path":"Random::Formatter#rand","type":"module_function","visibility":"public"},"Random::Formatter#random_number":{"description":"","name":"random_number","namespace":"Random::Formatter","path":"Random::Formatter#random_number","type":"module_function","visibility":"public"},"Range":{"description":"A <code>Range</code> represents an interval---a set of values with a\nbeginning and an end. Ranges may be constructed using the\n<em>s</em><code>..</code><em>e</em> and\n<em>s</em><code>...</code><em>e</em> literals, or with\nRange::new. Ranges constructed using <code>..</code>\nrun from the beginning to the end inclusively. Those created using\n<code>...</code> exclude the end value. When used as an iterator,\nranges return each value in the sequence.\n\n   (-1..-5).to_a      #=> []\n   (-5..-1).to_a      #=> [-5, -4, -3, -2, -1]\n   ('a'..'e').to_a    #=> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n   ('a'...'e').to_a   #=> [\"a\", \"b\", \"c\", \"d\"]\n\n== Custom Objects in Ranges\n\nRanges can be constructed using any objects that can be compared\nusing the <code><=></code> operator.\nMethods that treat the range as a sequence (#each and methods inherited\nfrom Enumerable) expect the begin object to implement a\n<code>succ</code> method to return the next object in sequence.\nThe #step and #include? methods require the begin\nobject to implement <code>succ</code> or to be numeric.\n\nIn the <code>Xs</code> class below both <code><=></code> and\n<code>succ</code> are implemented so <code>Xs</code> can be used\nto construct ranges. Note that the Comparable module is included\nso the <code>==</code> method is defined in terms of <code><=></code>.\n\n   class Xs                # represent a string of 'x's\n     include Comparable\n     attr :length\n     def initialize(n)\n       @length = n\n     end\n     def succ\n       Xs.new(@length + 1)\n     end\n     def <=>(other)\n       @length <=> other.length\n     end\n     def to_s\n       sprintf \"%2d #{inspect}\", @length\n     end\n     def inspect\n       'x' * @length\n     end\n   end\n\nAn example of using <code>Xs</code> to construct a range:\n\n   r = Xs.new(3)..Xs.new(6)   #=> xxx..xxxxxx\n   r.to_a                     #=> [xxx, xxxx, xxxxx, xxxxxx]\n   r.member?(Xs.new(5))       #=> true","name":"Range","namespace":"","path":"Range","type":"class","visibility":"public"},"Range#==":{"description":"Returns <code>true</code> only if +obj+ is a Range, has equivalent\nbegin and end items (by comparing them with <code>==</code>), and has\nthe same #exclude_end? setting as the range.\n\n  (0..2) == (0..2)            #=> true\n  (0..2) == Range.new(0,2)    #=> true\n  (0..2) == (0...2)           #=> false","name":"==","namespace":"Range","path":"Range#==","type":"instance_method","visibility":"public"},"Range#===":{"description":"Returns <code>true</code> if +obj+ is an element of the range,\n<code>false</code> otherwise.  Conveniently, <code>===</code> is the\ncomparison operator used by <code>case</code> statements.\n\n   case 79\n   when 1..50   then   print \"low\\n\"\n   when 51..75  then   print \"medium\\n\"\n   when 76..100 then   print \"high\\n\"\n   end\n\n<em>produces:</em>\n\n   high","name":"===","namespace":"Range","path":"Range#===","type":"instance_method","visibility":"public"},"Range#begin":{"description":"Returns the object that defines the beginning of the range.\n\n    (1..10).begin   #=> 1","name":"begin","namespace":"Range","path":"Range#begin","type":"instance_method","visibility":"public"},"Range#bsearch":{"description":"By using binary search, finds a value in range which meets the given\ncondition in O(log n) where n is the size of the range.\n\nYou can use this method in two use cases: a find-minimum mode and\na find-any mode.  In either case, the elements of the range must be\nmonotone (or sorted) with respect to the block.\n\nIn find-minimum mode (this is a good choice for typical use case),\nthe block must return true or false, and there must be a value x\nso that:\n\n- the block returns false for any value which is less than x, and\n- the block returns true for any value which is greater than or\n  equal to x.\n\nIf x is within the range, this method returns the value x.\nOtherwise, it returns nil.\n\n   ary = [0, 4, 7, 10, 12]\n   (0...ary.size).bsearch {|i| ary[i] >= 4 } #=> 1\n   (0...ary.size).bsearch {|i| ary[i] >= 6 } #=> 2\n   (0...ary.size).bsearch {|i| ary[i] >= 8 } #=> 3\n   (0...ary.size).bsearch {|i| ary[i] >= 100 } #=> nil\n\n   (0.0...Float::INFINITY).bsearch {|x| Math.log(x) >= 0 } #=> 1.0\n\nIn find-any mode (this behaves like libc's bsearch(3)), the block\nmust return a number, and there must be two values x and y (x <= y)\nso that:\n\n- the block returns a positive number for v if v < x,\n- the block returns zero for v if x <= v < y, and\n- the block returns a negative number for v if y <= v.\n\nThis method returns any value which is within the intersection of\nthe given range and x...y (if any).  If there is no value that\nsatisfies the condition, it returns nil.\n\n   ary = [0, 100, 100, 100, 200]\n   (0..4).bsearch {|i| 100 - ary[i] } #=> 1, 2 or 3\n   (0..4).bsearch {|i| 300 - ary[i] } #=> nil\n   (0..4).bsearch {|i|  50 - ary[i] } #=> nil\n\nYou must not mix the two modes at a time; the block must always\nreturn either true/false, or always return a number.  It is\nundefined which value is actually picked up at each iteration.","name":"bsearch","namespace":"Range","path":"Range#bsearch","type":"instance_method","visibility":"public"},"Range#cover?":{"description":"Returns <code>true</code> if +obj+ is between the begin and end of\nthe range.\n\nThis tests <code>begin <= obj <= end</code> when #exclude_end? is +false+\nand <code>begin <= obj < end</code> when #exclude_end? is +true+.\n\n   (\"a\"..\"z\").cover?(\"c\")    #=> true\n   (\"a\"..\"z\").cover?(\"5\")    #=> false\n   (\"a\"..\"z\").cover?(\"cc\")   #=> true","name":"cover?","namespace":"Range","path":"Range#cover?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Range#each":{"description":"Iterates over the elements of range, passing each in turn to the\nblock.\n\nThe +each+ method can only be used if the begin object of the range\nsupports the +succ+ method.  A TypeError is raised if the object\ndoes not have +succ+ method defined (like Float).\n\nIf no block is given, an enumerator is returned instead.\n\n   (10..15).each {|n| print n, ' ' }\n   # prints: 10 11 12 13 14 15\n\n   (2.5..5).each {|n| print n, ' ' }\n   # raises: TypeError: can't iterate from Float","name":"each","namespace":"Range","path":"Range#each","type":"instance_method","visibility":"public"},"Range#end":{"description":"Returns the object that defines the end of the range.\n\n   (1..10).end    #=> 10\n   (1...10).end   #=> 10","name":"end","namespace":"Range","path":"Range#end","type":"instance_method","visibility":"public"},"Range#eql?":{"description":"Returns <code>true</code> only if +obj+ is a Range, has equivalent\nbegin and end items (by comparing them with <code>eql?</code>),\nand has the same #exclude_end? setting as the range.\n\n  (0..2).eql?(0..2)            #=> true\n  (0..2).eql?(Range.new(0,2))  #=> true\n  (0..2).eql?(0...2)           #=> false","name":"eql?","namespace":"Range","path":"Range#eql?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Range#exclude_end?":{"description":"Returns <code>true</code> if the range excludes its end value.\n\n   (1..5).exclude_end?     #=> false\n   (1...5).exclude_end?    #=> true","name":"exclude_end?","namespace":"Range","path":"Range#exclude_end?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Range#first":{"description":"Returns the first object in the range, or an array of the first +n+\nelements.\n\n  (10..20).first     #=> 10\n  (10..20).first(3)  #=> [10, 11, 12]","name":"first","namespace":"Range","path":"Range#first","type":"instance_method","visibility":"public"},"Range#hash":{"description":"Compute a hash-code for this range. Two ranges with equal\nbegin and end points (using <code>eql?</code>), and the same\n#exclude_end? value will generate the same hash-code.\n\nSee also Object#hash.","name":"hash","namespace":"Range","path":"Range#hash","type":"instance_method","visibility":"public"},"Range#include?":{"description":"Returns <code>true</code> if +obj+ is an element of\nthe range, <code>false</code> otherwise.  If begin and end are\nnumeric, comparison is done according to the magnitude of the values.\n\n   (\"a\"..\"z\").include?(\"g\")   #=> true\n   (\"a\"..\"z\").include?(\"A\")   #=> false\n   (\"a\"..\"z\").include?(\"cc\")  #=> false","name":"include?","namespace":"Range","path":"Range#include?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Range#initialize":{"description":"Constructs a range using the given +begin+ and +end+. If the +exclude_end+\nparameter is omitted or is <code>false</code>, the +rng+ will include\nthe end object; otherwise, it will be excluded.","name":"initialize","namespace":"Range","path":"Range#initialize","type":"instance_method","visibility":"public"},"Range#initialize_copy":{"description":":nodoc:","name":"initialize_copy","namespace":"Range","path":"Range#initialize_copy","type":"instance_method","visibility":"public"},"Range#inspect":{"description":"Convert this range object to a printable form (using\n<code>inspect</code> to convert the begin and end\nobjects).","name":"inspect","namespace":"Range","path":"Range#inspect","type":"instance_method","visibility":"public"},"Range#last":{"description":"Returns the last object in the range,\nor an array of the last +n+ elements.\n\nNote that with no arguments +last+ will return the object that defines\nthe end of the range even if #exclude_end? is +true+.\n\n  (10..20).last      #=> 20\n  (10...20).last     #=> 20\n  (10..20).last(3)   #=> [18, 19, 20]\n  (10...20).last(3)  #=> [17, 18, 19]","name":"last","namespace":"Range","path":"Range#last","type":"instance_method","visibility":"public"},"Range#max":{"description":"Returns the maximum value in the range. Returns +nil+ if the begin\nvalue of the range larger than the end value. Returns +nil+ if\nthe begin value of an exclusive range is equal to the end value.\n\nCan be given an optional block to override the default comparison\nmethod <code>a <=> b</code>.\n\n  (10..20).max    #=> 20","name":"max","namespace":"Range","path":"Range#max","type":"instance_method","visibility":"public"},"Range#member?":{"description":"Returns <code>true</code> if +obj+ is an element of\nthe range, <code>false</code> otherwise.  If begin and end are\nnumeric, comparison is done according to the magnitude of the values.\n\n   (\"a\"..\"z\").include?(\"g\")   #=> true\n   (\"a\"..\"z\").include?(\"A\")   #=> false\n   (\"a\"..\"z\").include?(\"cc\")  #=> false","name":"member?","namespace":"Range","path":"Range#member?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Range#min":{"description":"Returns the minimum value in the range. Returns +nil+ if the begin\nvalue of the range is larger than the end value. Returns +nil+ if\nthe begin value of an exclusive range is equal to the end value.\n\nCan be given an optional block to override the default comparison\nmethod <code>a <=> b</code>.\n\n  (10..20).min    #=> 10","name":"min","namespace":"Range","path":"Range#min","type":"instance_method","visibility":"public"},"Range#size":{"description":"Returns the number of elements in the range. Both the begin and the end of\nthe Range must be Numeric, otherwise nil is returned.\n\n  (10..20).size    #=> 11\n  ('a'..'z').size  #=> nil\n  (-Float::INFINITY..Float::INFINITY).size #=> Infinity","name":"size","namespace":"Range","path":"Range#size","type":"instance_method","visibility":"public"},"Range#step":{"description":"Iterates over the range, passing each <code>n</code>th element to the block.\nIf begin and end are numeric, +n+ is added for each iteration.\nOtherwise <code>step</code> invokes <code>succ</code> to iterate through\nrange elements.\n\nIf no block is given, an enumerator is returned instead.\n\n  range = Xs.new(1)..Xs.new(10)\n  range.step(2) {|x| puts x}\n  puts\n  range.step(3) {|x| puts x}\n\n<em>produces:</em>\n\n   1 x\n   3 xxx\n   5 xxxxx\n   7 xxxxxxx\n   9 xxxxxxxxx\n\n   1 x\n   4 xxxx\n   7 xxxxxxx\n  10 xxxxxxxxxx\n\nSee Range for the definition of class Xs.","name":"step","namespace":"Range","path":"Range#step","type":"instance_method","visibility":"public"},"Range#to_s":{"description":"Convert this range object to a printable form (using #to_s to convert the\nbegin and end objects).","name":"to_s","namespace":"Range","path":"Range#to_s","type":"instance_method","visibility":"public"},"Rational":{"description":"A rational number can be represented as a pair of integer numbers:\na/b (b>0), where a is the numerator and b is the denominator.\nInteger a equals rational a/1 mathematically.\n\nIn Ruby, you can create rational objects with the Kernel#Rational,\nto_r, or rationalize methods or by suffixing +r+ to a literal.\nThe return values will be irreducible fractions.\n\n   Rational(1)      #=> (1/1)\n   Rational(2, 3)   #=> (2/3)\n   Rational(4, -6)  #=> (-2/3)\n   3.to_r           #=> (3/1)\n   2/3r             #=> (2/3)\n\nYou can also create rational objects from floating-point numbers or\nstrings.\n\n   Rational(0.3)    #=> (5404319552844595/18014398509481984)\n   Rational('0.3')  #=> (3/10)\n   Rational('2/3')  #=> (2/3)\n\n   0.3.to_r         #=> (5404319552844595/18014398509481984)\n   '0.3'.to_r       #=> (3/10)\n   '2/3'.to_r       #=> (2/3)\n   0.3.rationalize  #=> (3/10)\n\nA rational object is an exact number, which helps you to write\nprograms without any rounding errors.\n\n   10.times.inject(0) {|t| t + 0.1 }              #=> 0.9999999999999999\n   10.times.inject(0) {|t| t + Rational('0.1') }  #=> (1/1)\n\nHowever, when an expression includes an inexact component (numerical value\nor operation), it will produce an inexact result.\n\n   Rational(10) / 3   #=> (10/3)\n   Rational(10) / 3.0 #=> 3.3333333333333335\n\n   Rational(-8) ** Rational(1, 3)\n                      #=> (1.0000000000000002+1.7320508075688772i)","name":"Rational","namespace":"","path":"Rational","type":"class","visibility":"public"},"Rational#*":{"description":"Performs multiplication.\n\n   Rational(2, 3)  * Rational(2, 3)   #=> (4/9)\n   Rational(900)   * Rational(1)      #=> (900/1)\n   Rational(-2, 9) * Rational(-9, 2)  #=> (1/1)\n   Rational(9, 8)  * 4                #=> (9/2)\n   Rational(20, 9) * 9.8              #=> 21.77777777777778","name":"*","namespace":"Rational","path":"Rational#*","type":"instance_method","visibility":"public"},"Rational#**":{"description":"Performs exponentiation.\n\n   Rational(2)    ** Rational(3)     #=> (8/1)\n   Rational(10)   ** -2              #=> (1/100)\n   Rational(10)   ** -2.0            #=> 0.01\n   Rational(-4)   ** Rational(1, 2)  #=> (0.0+2.0i)\n   Rational(1, 2) ** 0               #=> (1/1)\n   Rational(1, 2) ** 0.0             #=> 1.0","name":"**","namespace":"Rational","path":"Rational#**","type":"instance_method","visibility":"public"},"Rational#+":{"description":"Performs addition.\n\n   Rational(2, 3)  + Rational(2, 3)   #=> (4/3)\n   Rational(900)   + Rational(1)      #=> (901/1)\n   Rational(-2, 9) + Rational(-9, 2)  #=> (-85/18)\n   Rational(9, 8)  + 4                #=> (41/8)\n   Rational(20, 9) + 9.8              #=> 12.022222222222222","name":"+","namespace":"Rational","path":"Rational#+","type":"instance_method","visibility":"public"},"Rational#-":{"description":"Performs subtraction.\n\n   Rational(2, 3)  - Rational(2, 3)   #=> (0/1)\n   Rational(900)   - Rational(1)      #=> (899/1)\n   Rational(-2, 9) - Rational(-9, 2)  #=> (77/18)\n   Rational(9, 8)  - 4                #=> (-23/8)\n   Rational(20, 9) - 9.8              #=> -7.577777777777778","name":"-","namespace":"Rational","path":"Rational#-","type":"instance_method","visibility":"public"},"Rational#-@":{"description":"Negates +rat+.","name":"-@","namespace":"Rational","path":"Rational#-@","type":"instance_method","visibility":"public"},"Rational#/":{"description":"Performs division.\n\n   Rational(2, 3)  / Rational(2, 3)   #=> (1/1)\n   Rational(900)   / Rational(1)      #=> (900/1)\n   Rational(-2, 9) / Rational(-9, 2)  #=> (4/81)\n   Rational(9, 8)  / 4                #=> (9/32)\n   Rational(20, 9) / 9.8              #=> 0.22675736961451246","name":"/","namespace":"Rational","path":"Rational#/","type":"instance_method","visibility":"public"},"Rational#<=>":{"description":"Returns -1, 0, or +1 depending on whether +rational+ is\nless than, equal to, or greater than +numeric+.\n\n+nil+ is returned if the two values are incomparable.\n\n   Rational(2, 3) <=> Rational(2, 3)  #=> 0\n   Rational(5)    <=> 5               #=> 0\n   Rational(2, 3) <=> Rational(1, 3)  #=> 1\n   Rational(1, 3) <=> 1               #=> -1\n   Rational(1, 3) <=> 0.3             #=> 1\n\n   Rational(1, 3) <=> \"0.3\"           #=> nil","name":"<=>","namespace":"Rational","path":"Rational#<=>","type":"instance_method","visibility":"public"},"Rational#==":{"description":"Returns +true+ if +rat+ equals +object+ numerically.\n\n   Rational(2, 3)  == Rational(2, 3)   #=> true\n   Rational(5)     == 5                #=> true\n   Rational(0)     == 0.0              #=> true\n   Rational('1/3') == 0.33             #=> false\n   Rational('1/2') == '1/2'            #=> false","name":"==","namespace":"Rational","path":"Rational#==","type":"instance_method","visibility":"public"},"Rational#abs":{"description":"Returns the absolute value of +rat+.\n\n   (1/2r).abs    #=> (1/2)\n   (-1/2r).abs   #=> (1/2)\n\nRational#magnitude is an alias for Rational#abs.","name":"abs","namespace":"Rational","path":"Rational#abs","type":"instance_method","visibility":"public"},"Rational#ceil":{"description":"Returns the smallest number greater than or equal to +rat+ with\na precision of +ndigits+ decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer\nwith at least <code>ndigits.abs</code> trailing zeros.\n\nReturns a rational when +ndigits+ is positive,\notherwise returns an integer.\n\n   Rational(3).ceil      #=> 3\n   Rational(2, 3).ceil   #=> 1\n   Rational(-3, 2).ceil  #=> -1\n\n     #    decimal      -  1  2  3 . 4  5  6\n     #                   ^  ^  ^  ^   ^  ^\n     #   precision      -3 -2 -1  0  +1 +2\n\n   Rational('-123.456').ceil(+1).to_f  #=> -123.4\n   Rational('-123.456').ceil(-1)       #=> -120","name":"ceil","namespace":"Rational","path":"Rational#ceil","type":"instance_method","visibility":"public"},"Rational#coerce":{"description":":nodoc:","name":"coerce","namespace":"Rational","path":"Rational#coerce","type":"instance_method","visibility":"public"},"Rational#denominator":{"description":"Returns the denominator (always positive).\n\n   Rational(7).denominator             #=> 1\n   Rational(7, 1).denominator          #=> 1\n   Rational(9, -4).denominator         #=> 4\n   Rational(-2, -10).denominator       #=> 5","name":"denominator","namespace":"Rational","path":"Rational#denominator","type":"instance_method","visibility":"public"},"Rational#exact?":{"description":":nodoc:","name":"exact?","namespace":"Rational","path":"Rational#exact?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Rational#fdiv":{"description":"Performs division and returns the value as a Float.\n\n   Rational(2, 3).fdiv(1)       #=> 0.6666666666666666\n   Rational(2, 3).fdiv(0.5)     #=> 1.3333333333333333\n   Rational(2).fdiv(3)          #=> 0.6666666666666666","name":"fdiv","namespace":"Rational","path":"Rational#fdiv","type":"instance_method","visibility":"public"},"Rational#floor":{"description":"Returns the largest number less than or equal to +rat+ with\na precision of +ndigits+ decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer\nwith at least <code>ndigits.abs</code> trailing zeros.\n\nReturns a rational when +ndigits+ is positive,\notherwise returns an integer.\n\n   Rational(3).floor      #=> 3\n   Rational(2, 3).floor   #=> 0\n   Rational(-3, 2).floor  #=> -2\n\n     #    decimal      -  1  2  3 . 4  5  6\n     #                   ^  ^  ^  ^   ^  ^\n     #   precision      -3 -2 -1  0  +1 +2\n\n   Rational('-123.456').floor(+1).to_f  #=> -123.5\n   Rational('-123.456').floor(-1)       #=> -130","name":"floor","namespace":"Rational","path":"Rational#floor","type":"instance_method","visibility":"public"},"Rational#hash":{"description":":nodoc:","name":"hash","namespace":"Rational","path":"Rational#hash","type":"instance_method","visibility":"public"},"Rational#inspect":{"description":"Returns the value as a string for inspection.\n\n   Rational(2).inspect      #=> \"(2/1)\"\n   Rational(-8, 6).inspect  #=> \"(-4/3)\"\n   Rational('1/2').inspect  #=> \"(1/2)\"","name":"inspect","namespace":"Rational","path":"Rational#inspect","type":"instance_method","visibility":"public"},"Rational#magnitude":{"description":"Returns the absolute value of +rat+.\n\n   (1/2r).abs    #=> (1/2)\n   (-1/2r).abs   #=> (1/2)\n\nRational#magnitude is an alias for Rational#abs.","name":"magnitude","namespace":"Rational","path":"Rational#magnitude","type":"instance_method","visibility":"public"},"Rational#marshal_dump":{"description":":nodoc:","name":"marshal_dump","namespace":"Rational","path":"Rational#marshal_dump","type":"instance_method","visibility":"private"},"Rational#negative?":{"description":"Returns +true+ if +rat+ is less than 0.","name":"negative?","namespace":"Rational","path":"Rational#negative?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Rational#numerator":{"description":"Returns the numerator.\n\n   Rational(7).numerator        #=> 7\n   Rational(7, 1).numerator     #=> 7\n   Rational(9, -4).numerator    #=> -9\n   Rational(-2, -10).numerator  #=> 1","name":"numerator","namespace":"Rational","path":"Rational#numerator","type":"instance_method","visibility":"public"},"Rational#positive?":{"description":"Returns +true+ if +rat+ is greater than 0.","name":"positive?","namespace":"Rational","path":"Rational#positive?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Rational#quo":{"description":"Performs division.\n\n   Rational(2, 3)  / Rational(2, 3)   #=> (1/1)\n   Rational(900)   / Rational(1)      #=> (900/1)\n   Rational(-2, 9) / Rational(-9, 2)  #=> (4/81)\n   Rational(9, 8)  / 4                #=> (9/32)\n   Rational(20, 9) / 9.8              #=> 0.22675736961451246","name":"quo","namespace":"Rational","path":"Rational#quo","type":"instance_method","visibility":"public"},"Rational#quot":{"description":":nodoc:","name":"quot","namespace":"Rational","path":"Rational#quot","type":"instance_method","visibility":"public"},"Rational#quotrem":{"description":":nodoc:","name":"quotrem","namespace":"Rational","path":"Rational#quotrem","type":"instance_method","visibility":"public"},"Rational#rational?":{"description":":nodoc:","name":"rational?","namespace":"Rational","path":"Rational#rational?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Rational#rationalize":{"description":"Returns a simpler approximation of the value if the optional\nargument +eps+ is given (rat-|eps| <= result <= rat+|eps|),\nself otherwise.\n\n   r = Rational(5033165, 16777216)\n   r.rationalize                    #=> (5033165/16777216)\n   r.rationalize(Rational('0.01'))  #=> (3/10)\n   r.rationalize(Rational('0.1'))   #=> (1/3)","name":"rationalize","namespace":"Rational","path":"Rational#rationalize","type":"instance_method","visibility":"public"},"Rational#round":{"description":"Returns +rat+ rounded to the nearest value with\na precision of +ndigits+ decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer\nwith at least <code>ndigits.abs</code> trailing zeros.\n\nReturns a rational when +ndigits+ is positive,\notherwise returns an integer.\n\n   Rational(3).round      #=> 3\n   Rational(2, 3).round   #=> 1\n   Rational(-3, 2).round  #=> -2\n\n     #    decimal      -  1  2  3 . 4  5  6\n     #                   ^  ^  ^  ^   ^  ^\n     #   precision      -3 -2 -1  0  +1 +2\n\n   Rational('-123.456').round(+1).to_f  #=> -123.5\n   Rational('-123.456').round(-1)       #=> -120\n\nThe optional +half+ keyword argument is available\nsimilar to Float#round.\n\n   Rational(25, 100).round(1, half: :up)    #=> (3/10)\n   Rational(25, 100).round(1, half: :down)  #=> (1/5)\n   Rational(25, 100).round(1, half: :even)  #=> (1/5)\n   Rational(35, 100).round(1, half: :up)    #=> (2/5)\n   Rational(35, 100).round(1, half: :down)  #=> (3/10)\n   Rational(35, 100).round(1, half: :even)  #=> (2/5)\n   Rational(-25, 100).round(1, half: :up)   #=> (-3/10)\n   Rational(-25, 100).round(1, half: :down) #=> (-1/5)\n   Rational(-25, 100).round(1, half: :even) #=> (-1/5)","name":"round","namespace":"Rational","path":"Rational#round","type":"instance_method","visibility":"public"},"Rational#to_f":{"description":"Returns the value as a Float.\n\n   Rational(2).to_f      #=> 2.0\n   Rational(9, 4).to_f   #=> 2.25\n   Rational(-3, 4).to_f  #=> -0.75\n   Rational(20, 3).to_f  #=> 6.666666666666667","name":"to_f","namespace":"Rational","path":"Rational#to_f","type":"instance_method","visibility":"public"},"Rational#to_i":{"description":"Returns the truncated value as an integer.\n\nEquivalent to Rational#truncate.\n\n   Rational(2, 3).to_i    #=> 0\n   Rational(3).to_i       #=> 3\n   Rational(300.6).to_i   #=> 300\n   Rational(98, 71).to_i  #=> 1\n   Rational(-31, 2).to_i  #=> -15","name":"to_i","namespace":"Rational","path":"Rational#to_i","type":"instance_method","visibility":"public"},"Rational#to_r":{"description":"Returns self.\n\n   Rational(2).to_r      #=> (2/1)\n   Rational(-8, 6).to_r  #=> (-4/3)","name":"to_r","namespace":"Rational","path":"Rational#to_r","type":"instance_method","visibility":"public"},"Rational#to_s":{"description":"Returns the value as a string.\n\n   Rational(2).to_s      #=> \"2/1\"\n   Rational(-8, 6).to_s  #=> \"-4/3\"\n   Rational('1/2').to_s  #=> \"1/2\"","name":"to_s","namespace":"Rational","path":"Rational#to_s","type":"instance_method","visibility":"public"},"Rational#truncate":{"description":"Returns +rat+ truncated (toward zero) to\na precision of +ndigits+ decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer\nwith at least <code>ndigits.abs</code> trailing zeros.\n\nReturns a rational when +ndigits+ is positive,\notherwise returns an integer.\n\n   Rational(3).truncate      #=> 3\n   Rational(2, 3).truncate   #=> 0\n   Rational(-3, 2).truncate  #=> -1\n\n     #    decimal      -  1  2  3 . 4  5  6\n     #                   ^  ^  ^  ^   ^  ^\n     #   precision      -3 -2 -1  0  +1 +2\n\n   Rational('-123.456').truncate(+1).to_f  #=> -123.4\n   Rational('-123.456').truncate(-1)       #=> -120","name":"truncate","namespace":"Rational","path":"Rational#truncate","type":"instance_method","visibility":"public"},"Rational::compatible":{"description":"","name":"compatible","namespace":"Rational","path":"Rational::compatible","type":"class","visibility":"public"},"Rational::compatible#marshal_load":{"description":":nodoc:","name":"marshal_load","namespace":"Rational::compatible","path":"Rational::compatible#marshal_load","type":"instance_method","visibility":"private"},"MatchData":{"description":"<code>MatchData</code> is the type of the special variable <code>$~</code>,\nand is the type of the object returned by <code>Regexp#match</code> and\n<code>Regexp.last_match</code>. It encapsulates all the results of a pattern\nmatch, results normally accessed through the special variables\n<code>$&</code>, <code>$'</code>, <code>$`</code>, <code>$1</code>,\n<code>$2</code>, and so on.","name":"MatchData","namespace":"","path":"MatchData","type":"class","visibility":"public"},"MatchData#==":{"description":"Equality---Two matchdata are equal if their target strings,\n patterns, and matched positions are identical.","name":"==","namespace":"MatchData","path":"MatchData#==","type":"instance_method","visibility":"public"},"MatchData#[]":{"description":"Match Reference -- <code>MatchData</code> acts as an array, and may be\naccessed using the normal array indexing techniques.  <code>mtch[0]</code>\nis equivalent to the special variable <code>$&</code>, and returns the\nentire matched string.  <code>mtch[1]</code>, <code>mtch[2]</code>, and so\non return the values of the matched backreferences (portions of the\npattern between parentheses).\n\n   m = /(.)(.)(\\d+)(\\d)/.match(\"THX1138.\")\n   m          #=> #<MatchData \"HX1138\" 1:\"H\" 2:\"X\" 3:\"113\" 4:\"8\">\n   m[0]       #=> \"HX1138\"\n   m[1, 2]    #=> [\"H\", \"X\"]\n   m[1..3]    #=> [\"H\", \"X\", \"113\"]\n   m[-3, 2]   #=> [\"X\", \"113\"]\n\n   m = /(?<foo>a+)b/.match(\"ccaaab\")\n   m          #=> #<MatchData \"aaab\" foo:\"aaa\">\n   m[\"foo\"]   #=> \"aaa\"\n   m[:foo]    #=> \"aaa\"","name":"[]","namespace":"MatchData","path":"MatchData#[]","type":"instance_method","visibility":"public"},"MatchData#begin":{"description":"Returns the offset of the start of the <em>n</em>th element of the match\narray in the string.\n<em>n</em> can be a string or symbol to reference a named capture.\n\n   m = /(.)(.)(\\d+)(\\d)/.match(\"THX1138.\")\n   m.begin(0)       #=> 1\n   m.begin(2)       #=> 2\n\n   m = /(?<foo>.)(.)(?<bar>.)/.match(\"hoge\")\n   p m.begin(:foo)  #=> 0\n   p m.begin(:bar)  #=> 2","name":"begin","namespace":"MatchData","path":"MatchData#begin","type":"instance_method","visibility":"public"},"MatchData#captures":{"description":"Returns the array of captures; equivalent to <code>mtch.to_a[1..-1]</code>.\n\n   f1,f2,f3,f4 = /(.)(.)(\\d+)(\\d)/.match(\"THX1138.\").captures\n   f1    #=> \"H\"\n   f2    #=> \"X\"\n   f3    #=> \"113\"\n   f4    #=> \"8\"","name":"captures","namespace":"MatchData","path":"MatchData#captures","type":"instance_method","visibility":"public"},"MatchData#end":{"description":"Returns the offset of the character immediately following the end of the\n<em>n</em>th element of the match array in the string.\n<em>n</em> can be a string or symbol to reference a named capture.\n\n   m = /(.)(.)(\\d+)(\\d)/.match(\"THX1138.\")\n   m.end(0)         #=> 7\n   m.end(2)         #=> 3\n\n   m = /(?<foo>.)(.)(?<bar>.)/.match(\"hoge\")\n   p m.end(:foo)    #=> 1\n   p m.end(:bar)    #=> 3","name":"end","namespace":"MatchData","path":"MatchData#end","type":"instance_method","visibility":"public"},"MatchData#eql?":{"description":"Equality---Two matchdata are equal if their target strings,\n patterns, and matched positions are identical.","name":"eql?","namespace":"MatchData","path":"MatchData#eql?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"MatchData#hash":{"description":"Produce a hash based on the target string, regexp and matched\npositions of this matchdata.\n\nSee also Object#hash.","name":"hash","namespace":"MatchData","path":"MatchData#hash","type":"instance_method","visibility":"public"},"MatchData#initialize_copy":{"description":":nodoc:","name":"initialize_copy","namespace":"MatchData","path":"MatchData#initialize_copy","type":"instance_method","visibility":"public"},"MatchData#inspect":{"description":"Returns a printable version of <i>mtch</i>.\n\n    puts /.$/.match(\"foo\").inspect\n    #=> #<MatchData \"o\">\n\n    puts /(.)(.)(.)/.match(\"foo\").inspect\n    #=> #<MatchData \"foo\" 1:\"f\" 2:\"o\" 3:\"o\">\n\n    puts /(.)(.)?(.)/.match(\"fo\").inspect\n    #=> #<MatchData \"fo\" 1:\"f\" 2:nil 3:\"o\">\n\n    puts /(?<foo>.)(?<bar>.)(?<baz>.)/.match(\"hoge\").inspect\n    #=> #<MatchData \"hog\" foo:\"h\" bar:\"o\" baz:\"g\">","name":"inspect","namespace":"MatchData","path":"MatchData#inspect","type":"instance_method","visibility":"public"},"MatchData#length":{"description":"Returns the number of elements in the match array.\n\n   m = /(.)(.)(\\d+)(\\d)/.match(\"THX1138.\")\n   m.length   #=> 5\n   m.size     #=> 5","name":"length","namespace":"MatchData","path":"MatchData#length","type":"instance_method","visibility":"public"},"MatchData#named_captures":{"description":"Returns a Hash using named capture.\n\nA key of the hash is a name of the named captures.\nA value of the hash is a string of last successful capture of corresponding\ngroup.\n\n   m = /(?<a>.)(?<b>.)/.match(\"01\")\n   m.named_captures #=> {\"a\" => \"0\", \"b\" => \"1\"}\n\n   m = /(?<a>.)(?<b>.)?/.match(\"0\")\n   m.named_captures #=> {\"a\" => \"0\", \"b\" => nil}\n\n   m = /(?<a>.)(?<a>.)/.match(\"01\")\n   m.named_captures #=> {\"a\" => \"1\"}\n\n   m = /(?<a>x)|(?<a>y)/.match(\"x\")\n   m.named_captures #=> {\"a\" => \"x\"}","name":"named_captures","namespace":"MatchData","path":"MatchData#named_captures","type":"instance_method","visibility":"public"},"MatchData#names":{"description":"Returns a list of names of captures as an array of strings.\nIt is same as mtch.regexp.names.\n\n    /(?<foo>.)(?<bar>.)(?<baz>.)/.match(\"hoge\").names\n    #=> [\"foo\", \"bar\", \"baz\"]\n\n    m = /(?<x>.)(?<y>.)?/.match(\"a\") #=> #<MatchData \"a\" x:\"a\" y:nil>\n    m.names                          #=> [\"x\", \"y\"]","name":"names","namespace":"MatchData","path":"MatchData#names","type":"instance_method","visibility":"public"},"MatchData#offset":{"description":"Returns a two-element array containing the beginning and ending offsets of\nthe <em>n</em>th match.\n<em>n</em> can be a string or symbol to reference a named capture.\n\n   m = /(.)(.)(\\d+)(\\d)/.match(\"THX1138.\")\n   m.offset(0)      #=> [1, 7]\n   m.offset(4)      #=> [6, 7]\n\n   m = /(?<foo>.)(.)(?<bar>.)/.match(\"hoge\")\n   p m.offset(:foo) #=> [0, 1]\n   p m.offset(:bar) #=> [2, 3]","name":"offset","namespace":"MatchData","path":"MatchData#offset","type":"instance_method","visibility":"public"},"MatchData#post_match":{"description":"Returns the portion of the original string after the current match.\nEquivalent to the special variable <code>$'</code>.\n\n   m = /(.)(.)(\\d+)(\\d)/.match(\"THX1138: The Movie\")\n   m.post_match   #=> \": The Movie\"","name":"post_match","namespace":"MatchData","path":"MatchData#post_match","type":"instance_method","visibility":"public"},"MatchData#pre_match":{"description":"Returns the portion of the original string before the current match.\nEquivalent to the special variable <code>$`</code>.\n\n   m = /(.)(.)(\\d+)(\\d)/.match(\"THX1138.\")\n   m.pre_match   #=> \"T\"","name":"pre_match","namespace":"MatchData","path":"MatchData#pre_match","type":"instance_method","visibility":"public"},"MatchData#regexp":{"description":"Returns the regexp.\n\n    m = /a.*b/.match(\"abc\")\n    m.regexp #=> /a.*b/","name":"regexp","namespace":"MatchData","path":"MatchData#regexp","type":"instance_method","visibility":"public"},"MatchData#size":{"description":"Returns the number of elements in the match array.\n\n   m = /(.)(.)(\\d+)(\\d)/.match(\"THX1138.\")\n   m.length   #=> 5\n   m.size     #=> 5","name":"size","namespace":"MatchData","path":"MatchData#size","type":"instance_method","visibility":"public"},"MatchData#string":{"description":"Returns a frozen copy of the string passed in to <code>match</code>.\n\n   m = /(.)(.)(\\d+)(\\d)/.match(\"THX1138.\")\n   m.string   #=> \"THX1138.\"","name":"string","namespace":"MatchData","path":"MatchData#string","type":"instance_method","visibility":"public"},"MatchData#to_a":{"description":"Returns the array of matches.\n\n   m = /(.)(.)(\\d+)(\\d)/.match(\"THX1138.\")\n   m.to_a   #=> [\"HX1138\", \"H\", \"X\", \"113\", \"8\"]\n\nBecause <code>to_a</code> is called when expanding\n<code>*</code><em>variable</em>, there's a useful assignment\nshortcut for extracting matched fields. This is slightly slower than\naccessing the fields directly (as an intermediate array is\ngenerated).\n\n   all,f1,f2,f3 = * /(.)(.)(\\d+)(\\d)/.match(\"THX1138.\")\n   all   #=> \"HX1138\"\n   f1    #=> \"H\"\n   f2    #=> \"X\"\n   f3    #=> \"113\"","name":"to_a","namespace":"MatchData","path":"MatchData#to_a","type":"instance_method","visibility":"public"},"MatchData#to_s":{"description":"Returns the entire matched string.\n\n   m = /(.)(.)(\\d+)(\\d)/.match(\"THX1138.\")\n   m.to_s   #=> \"HX1138\"","name":"to_s","namespace":"MatchData","path":"MatchData#to_s","type":"instance_method","visibility":"public"},"MatchData#values_at":{"description":"Uses each <i>index</i> to access the matching values, returning an array of\nthe corresponding matches.\n\n   m = /(.)(.)(\\d+)(\\d)/.match(\"THX1138: The Movie\")\n   m.to_a               #=> [\"HX1138\", \"H\", \"X\", \"113\", \"8\"]\n   m.values_at(0, 2, -2)   #=> [\"HX1138\", \"X\", \"113\"]\n\n   m = /(?<a>\\d+) *(?<op>[+\\-*\\/]) *(?<b>\\d+)/.match(\"1 + 2\")\n   m.to_a               #=> [\"1 + 2\", \"1\", \"+\", \"2\"]\n   m.values_at(:a, :b, :op) #=> [\"1\", \"2\", \"+\"]","name":"values_at","namespace":"MatchData","path":"MatchData#values_at","type":"instance_method","visibility":"public"},"RegexpError":{"description":"Raised when given an invalid regexp expression.\n\n   Regexp.new(\"?\")\n\n<em>raises the exception:</em>\n\n   RegexpError: target of repeat operator is not specified: /?/","name":"RegexpError","namespace":"","path":"RegexpError","type":"class","visibility":"public"},"Regexp":{"description":"A <code>Regexp</code> holds a regular expression, used to match a pattern\nagainst strings. Regexps are created using the <code>/.../</code> and\n<code>%r{...}</code> literals, and by the <code>Regexp::new</code>\nconstructor.\n\n:include: doc/regexp.rdoc","name":"Regexp","namespace":"","path":"Regexp","type":"class","visibility":"public"},"Regexp#==":{"description":"Equality---Two regexps are equal if their patterns are identical, they have\nthe same character set code, and their <code>casefold?</code> values are the\nsame.\n\n   /abc/  == /abc/x   #=> false\n   /abc/  == /abc/i   #=> false\n   /abc/  == /abc/u   #=> false\n   /abc/u == /abc/n   #=> false","name":"==","namespace":"Regexp","path":"Regexp#==","type":"instance_method","visibility":"public"},"Regexp#===":{"description":"Case Equality---Used in case statements.\n\n   a = \"HELLO\"\n   case a\n   when /\\A[a-z]*\\z/; print \"Lower case\\n\"\n   when /\\A[A-Z]*\\z/; print \"Upper case\\n\"\n   else;              print \"Mixed case\\n\"\n   end\n   #=> \"Upper case\"\n\nFollowing a regular expression literal with the #=== operator allows you to\ncompare against a String.\n\n/^[a-z]*$/ === \"HELLO\" #=> false\n/^[A-Z]*$/ === \"HELLO\" #=> true","name":"===","namespace":"Regexp","path":"Regexp#===","type":"instance_method","visibility":"public"},"Regexp#=~":{"description":"Match---Matches <i>rxp</i> against <i>str</i>.\n\n   /at/ =~ \"input data\"   #=> 7\n   /ax/ =~ \"input data\"   #=> nil\n\nIf <code>=~</code> is used with a regexp literal with named captures,\ncaptured strings (or nil) is assigned to local variables named by\nthe capture names.\n\n   /(?<lhs>\\w+)\\s*=\\s*(?<rhs>\\w+)/ =~ \"  x = y  \"\n   p lhs    #=> \"x\"\n   p rhs    #=> \"y\"\n\nIf it is not matched, nil is assigned for the variables.\n\n   /(?<lhs>\\w+)\\s*=\\s*(?<rhs>\\w+)/ =~ \"  x = \"\n   p lhs    #=> nil\n   p rhs    #=> nil\n\nThis assignment is implemented in the Ruby parser.\nThe parser detects 'regexp-literal =~ expression' for the assignment.\nThe regexp must be a literal without interpolation and placed at left hand side.\n\nThe assignment does not occur if the regexp is not a literal.\n\n   re = /(?<lhs>\\w+)\\s*=\\s*(?<rhs>\\w+)/\n   re =~ \"  x = y  \"\n   p lhs    # undefined local variable\n   p rhs    # undefined local variable\n\nA regexp interpolation, <code>#{}</code>, also disables\nthe assignment.\n\n   rhs_pat = /(?<rhs>\\w+)/\n   /(?<lhs>\\w+)\\s*=\\s*#{rhs_pat}/ =~ \"x = y\"\n   p lhs    # undefined local variable\n\nThe assignment does not occur if the regexp is placed at the right hand side.\n\n  \"  x = y  \" =~ /(?<lhs>\\w+)\\s*=\\s*(?<rhs>\\w+)/\n  p lhs, rhs # undefined local variable","name":"=~","namespace":"Regexp","path":"Regexp#=~","type":"instance_method","visibility":"public"},"Regexp#casefold?":{"description":"Returns the value of the case-insensitive flag.\n\n    /a/.casefold?           #=> false\n    /a/i.casefold?          #=> true\n    /(?i:a)/.casefold?      #=> false","name":"casefold?","namespace":"Regexp","path":"Regexp#casefold?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Regexp#encoding":{"description":"Returns the Encoding object that represents the encoding of obj.","name":"encoding","namespace":"Regexp","path":"Regexp#encoding","type":"instance_method","visibility":"public"},"Regexp#eql?":{"description":"Equality---Two regexps are equal if their patterns are identical, they have\nthe same character set code, and their <code>casefold?</code> values are the\nsame.\n\n   /abc/  == /abc/x   #=> false\n   /abc/  == /abc/i   #=> false\n   /abc/  == /abc/u   #=> false\n   /abc/u == /abc/n   #=> false","name":"eql?","namespace":"Regexp","path":"Regexp#eql?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Regexp#fixed_encoding?":{"description":"Returns false if rxp is applicable to\na string with any ASCII compatible encoding.\nReturns true otherwise.\n\n    r = /a/\n    r.fixed_encoding?                               #=> false\n    r =~ \"\\u{6666} a\"                               #=> 2\n    r =~ \"\\xa1\\xa2 a\".force_encoding(\"euc-jp\")      #=> 2\n    r =~ \"abc\".force_encoding(\"euc-jp\")             #=> 0\n\n    r = /a/u\n    r.fixed_encoding?                               #=> true\n    r.encoding                                      #=> #<Encoding:UTF-8>\n    r =~ \"\\u{6666} a\"                               #=> 2\n    r =~ \"\\xa1\\xa2\".force_encoding(\"euc-jp\")        #=> Encoding::CompatibilityError\n    r =~ \"abc\".force_encoding(\"euc-jp\")             #=> 0\n\n    r = /\\u{6666}/\n    r.fixed_encoding?                               #=> true\n    r.encoding                                      #=> #<Encoding:UTF-8>\n    r =~ \"\\u{6666} a\"                               #=> 0\n    r =~ \"\\xa1\\xa2\".force_encoding(\"euc-jp\")        #=> Encoding::CompatibilityError\n    r =~ \"abc\".force_encoding(\"euc-jp\")             #=> nil","name":"fixed_encoding?","namespace":"Regexp","path":"Regexp#fixed_encoding?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Regexp#hash":{"description":"Produce a hash based on the text and options of this regular expression.\n\nSee also Object#hash.","name":"hash","namespace":"Regexp","path":"Regexp#hash","type":"instance_method","visibility":"public"},"Regexp#initialize":{"description":"Constructs a new regular expression from +pattern+, which can be either a\nString or a Regexp (in which case that regexp's options are propagated),\nand new options may not be specified (a change as of Ruby 1.8).\n\nIf +options+ is an Integer, it should be one or more of the constants\nRegexp::EXTENDED, Regexp::IGNORECASE, and Regexp::MULTILINE,\n<em>or</em>-ed together.  Otherwise, if +options+ is not\n+nil+ or +false+, the regexp will be case insensitive.\n\n  r1 = Regexp.new('^a-z+:\\\\s+\\w+') #=> /^a-z+:\\s+\\w+/\n  r2 = Regexp.new('cat', true)     #=> /cat/i\n  r3 = Regexp.new(r2)              #=> /cat/i\n  r4 = Regexp.new('dog', Regexp::EXTENDED | Regexp::IGNORECASE) #=> /dog/ix","name":"initialize","namespace":"Regexp","path":"Regexp#initialize","type":"instance_method","visibility":"public"},"Regexp#initialize_copy":{"description":":nodoc:","name":"initialize_copy","namespace":"Regexp","path":"Regexp#initialize_copy","type":"instance_method","visibility":"public"},"Regexp#inspect":{"description":"Produce a nicely formatted string-version of _rxp_. Perhaps surprisingly,\n<code>#inspect</code> actually produces the more natural version of\nthe string than <code>#to_s</code>.\n\n     /ab+c/ix.inspect        #=> \"/ab+c/ix\"","name":"inspect","namespace":"Regexp","path":"Regexp#inspect","type":"instance_method","visibility":"public"},"Regexp#match":{"description":"Returns a <code>MatchData</code> object describing the match, or\n<code>nil</code> if there was no match. This is equivalent to retrieving the\nvalue of the special variable <code>$~</code> following a normal match.\nIf the second parameter is present, it specifies the position in the string\nto begin the search.\n\n   /(.)(.)(.)/.match(\"abc\")[2]   #=> \"b\"\n   /(.)(.)/.match(\"abc\", 1)[2]   #=> \"c\"\n\nIf a block is given, invoke the block with MatchData if match succeed, so\nthat you can write\n\n   /M(.*)/.match(\"Matz\") do |m|\n     puts m[0]\n     puts m[1]\n   end\n\ninstead of\n\n   if m = /M(.*)/.match(\"Matz\")\n     puts m[0]\n     puts m[1]\n   end\n\nThe return value is a value from block execution in this case.","name":"match","namespace":"Regexp","path":"Regexp#match","type":"instance_method","visibility":"public"},"Regexp#match?":{"description":"Returns a <code>true</code> or <code>false</code> indicates whether the\nregexp is matched or not without updating $~ and other related variables.\nIf the second parameter is present, it specifies the position in the string\nto begin the search.\n\n   /R.../.match?(\"Ruby\")    #=> true\n   /R.../.match?(\"Ruby\", 1) #=> false\n   /P.../.match?(\"Ruby\")    #=> false\n   $&                       #=> nil","name":"match?","namespace":"Regexp","path":"Regexp#match?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Regexp#named_captures":{"description":"Returns a hash representing information about named captures of <i>rxp</i>.\n\nA key of the hash is a name of the named captures.\nA value of the hash is an array which is list of indexes of corresponding\nnamed captures.\n\n   /(?<foo>.)(?<bar>.)/.named_captures\n   #=> {\"foo\"=>[1], \"bar\"=>[2]}\n\n   /(?<foo>.)(?<foo>.)/.named_captures\n   #=> {\"foo\"=>[1, 2]}\n\nIf there are no named captures, an empty hash is returned.\n\n   /(.)(.)/.named_captures\n   #=> {}","name":"named_captures","namespace":"Regexp","path":"Regexp#named_captures","type":"instance_method","visibility":"public"},"Regexp#names":{"description":"Returns a list of names of captures as an array of strings.\n\n    /(?<foo>.)(?<bar>.)(?<baz>.)/.names\n    #=> [\"foo\", \"bar\", \"baz\"]\n\n    /(?<foo>.)(?<foo>.)/.names\n    #=> [\"foo\"]\n\n    /(.)(.)/.names\n    #=> []","name":"names","namespace":"Regexp","path":"Regexp#names","type":"instance_method","visibility":"public"},"Regexp#options":{"description":"Returns the set of bits corresponding to the options used when creating this\nRegexp (see <code>Regexp::new</code> for details. Note that additional bits\nmay be set in the returned options: these are used internally by the regular\nexpression code. These extra bits are ignored if the options are passed to\n<code>Regexp::new</code>.\n\n   Regexp::IGNORECASE                  #=> 1\n   Regexp::EXTENDED                    #=> 2\n   Regexp::MULTILINE                   #=> 4\n\n   /cat/.options                       #=> 0\n   /cat/ix.options                     #=> 3\n   Regexp.new('cat', true).options     #=> 1\n   /\\xa1\\xa2/e.options                 #=> 16\n\n   r = /cat/ix\n   Regexp.new(r.source, r.options)     #=> /cat/ix","name":"options","namespace":"Regexp","path":"Regexp#options","type":"instance_method","visibility":"public"},"Regexp#source":{"description":"Returns the original string of the pattern.\n\n    /ab+c/ix.source #=> \"ab+c\"\n\nNote that escape sequences are retained as is.\n\n   /\\x20\\+/.source  #=> \"\\\\x20\\\\+\"","name":"source","namespace":"Regexp","path":"Regexp#source","type":"instance_method","visibility":"public"},"Regexp#to_s":{"description":"Returns a string containing the regular expression and its options (using the\n<code>(?opts:source)</code> notation. This string can be fed back in to\n<code>Regexp::new</code> to a regular expression with the same semantics as\nthe original. (However, <code>Regexp#==</code> may not return true when\ncomparing the two, as the source of the regular expression itself may\ndiffer, as the example shows).  <code>Regexp#inspect</code> produces a\ngenerally more readable version of <i>rxp</i>.\n\n    r1 = /ab+c/ix           #=> /ab+c/ix\n    s1 = r1.to_s            #=> \"(?ix-m:ab+c)\"\n    r2 = Regexp.new(s1)     #=> /(?ix-m:ab+c)/\n    r1 == r2                #=> false\n    r1.source               #=> \"ab+c\"\n    r2.source               #=> \"(?ix-m:ab+c)\"","name":"to_s","namespace":"Regexp","path":"Regexp#to_s","type":"instance_method","visibility":"public"},"Regexp#~":{"description":"Match---Matches <i>rxp</i> against the contents of <code>$_</code>.\nEquivalent to <code><i>rxp</i> =~ $_</code>.\n\n   $_ = \"input data\"\n   ~ /at/   #=> 7","name":"~","namespace":"Regexp","path":"Regexp#~","type":"instance_method","visibility":"public"},"Regexp.compile":{"description":"Allocates and initializes an instance of \\a klass.\n\nEquivalent to \\c Class\\#new in Ruby\n\n\\param[in] argc  the number of arguments to \\c #initialize\n\\param[in] argv  a pointer to an array of arguments to \\c #initialize\n\\param[in] klass a Class object\n\\return the new instance of \\a klass\n\\sa rb_obj_call_init\n\\sa rb_obj_alloc","name":"compile","namespace":"Regexp","path":"Regexp.compile","type":"class_method","visibility":"public"},"Regexp.escape":{"description":"Escapes any characters that would have special meaning in a regular\nexpression. Returns a new escaped string, or self if no characters are\nescaped.  For any string,\n<code>Regexp.new(Regexp.escape(<i>str</i>))=~<i>str</i></code> will be true.\n\n   Regexp.escape('\\*?{}.')   #=> \\\\\\*\\?\\{\\}\\.","name":"escape","namespace":"Regexp","path":"Regexp.escape","type":"class_method","visibility":"public"},"Regexp.last_match":{"description":"The first form returns the MatchData object generated by the\nlast successful pattern match.  Equivalent to reading the special global\nvariable <code>$~</code> (see Special global variables in Regexp for\ndetails).\n\nThe second form returns the <i>n</i>th field in this MatchData object.\n_n_ can be a string or symbol to reference a named capture.\n\nNote that the last_match is local to the thread and method scope of the\nmethod that did the pattern match.\n\n   /c(.)t/ =~ 'cat'        #=> 0\n   Regexp.last_match       #=> #<MatchData \"cat\" 1:\"a\">\n   Regexp.last_match(0)    #=> \"cat\"\n   Regexp.last_match(1)    #=> \"a\"\n   Regexp.last_match(2)    #=> nil\n\n   /(?<lhs>\\w+)\\s*=\\s*(?<rhs>\\w+)/ =~ \"var = val\"\n   Regexp.last_match       #=> #<MatchData \"var = val\" lhs:\"var\" rhs:\"val\">\n   Regexp.last_match(:lhs) #=> \"var\"\n   Regexp.last_match(:rhs) #=> \"val\"","name":"last_match","namespace":"Regexp","path":"Regexp.last_match","type":"class_method","visibility":"public"},"Regexp.quote":{"description":"Escapes any characters that would have special meaning in a regular\nexpression. Returns a new escaped string, or self if no characters are\nescaped.  For any string,\n<code>Regexp.new(Regexp.escape(<i>str</i>))=~<i>str</i></code> will be true.\n\n   Regexp.escape('\\*?{}.')   #=> \\\\\\*\\?\\{\\}\\.","name":"quote","namespace":"Regexp","path":"Regexp.quote","type":"class_method","visibility":"public"},"Regexp.try_convert":{"description":"Try to convert <i>obj</i> into a Regexp, using to_regexp method.\nReturns converted regexp or nil if <i>obj</i> cannot be converted\nfor any reason.\n\n   Regexp.try_convert(/re/)         #=> /re/\n   Regexp.try_convert(\"re\")         #=> nil\n\n   o = Object.new\n   Regexp.try_convert(o)            #=> nil\n   def o.to_regexp() /foo/ end\n   Regexp.try_convert(o)            #=> /foo/","name":"try_convert","namespace":"Regexp","path":"Regexp.try_convert","type":"class_method","visibility":"public"},"Regexp.union":{"description":"Return a <code>Regexp</code> object that is the union of the given\n<em>pattern</em>s, i.e., will match any of its parts. The <em>pattern</em>s\ncan be Regexp objects, in which case their options will be preserved, or\nStrings. If no patterns are given, returns <code>/(?!)/</code>.\nThe behavior is unspecified if any given <em>pattern</em> contains capture.\n\n   Regexp.union                         #=> /(?!)/\n   Regexp.union(\"penzance\")             #=> /penzance/\n   Regexp.union(\"a+b*c\")                #=> /a\\+b\\*c/\n   Regexp.union(\"skiing\", \"sledding\")   #=> /skiing|sledding/\n   Regexp.union([\"skiing\", \"sledding\"]) #=> /skiing|sledding/\n   Regexp.union(/dogs/, /cats/i)        #=> /(?-mix:dogs)|(?i-mx:cats)/\n\nNote: the arguments for ::union will try to be converted into a regular\nexpression literal via #to_regexp.","name":"union","namespace":"Regexp","path":"Regexp.union","type":"class_method","visibility":"public"},"Regexp::EXTENDED":{"description":"see Regexp.options and Regexp.new","name":"EXTENDED","namespace":"Regexp","path":"Regexp::EXTENDED","type":"constant","return":["Fixnum",""],"visibility":"public"},"Regexp::FIXEDENCODING":{"description":"see Regexp.options and Regexp.new","name":"FIXEDENCODING","namespace":"Regexp","path":"Regexp::FIXEDENCODING","type":"constant","return":["Fixnum",""],"visibility":"public"},"Regexp::IGNORECASE":{"description":"see Regexp.options and Regexp.new","name":"IGNORECASE","namespace":"Regexp","path":"Regexp::IGNORECASE","type":"constant","return":["Fixnum",""],"visibility":"public"},"Regexp::MULTILINE":{"description":"see Regexp.options and Regexp.new","name":"MULTILINE","namespace":"Regexp","path":"Regexp::MULTILINE","type":"constant","return":["Fixnum",""],"visibility":"public"},"Regexp::NOENCODING":{"description":"see Regexp.options and Regexp.new","name":"NOENCODING","namespace":"Regexp","path":"Regexp::NOENCODING","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process":{"description":"","name":"Process","namespace":"","path":"Process","type":"module","visibility":"public"},"Process#argv0":{"description":"Returns the name of the script being executed.  The value is not\naffected by assigning a new value to $0.\n\nThis method first appeared in Ruby 2.1 to serve as a global\nvariable free means to get the script name.","name":"argv0","namespace":"Process","path":"Process#argv0","type":"module_function","visibility":"private"},"Process#clock_getres":{"description":"Returns the time resolution returned by POSIX clock_getres() function.\n\n+clock_id+ specifies a kind of clock.\nSee the document of +Process.clock_gettime+ for details.\n\n+clock_id+ can be a symbol as +Process.clock_gettime+.\nHowever the result may not be accurate.\nFor example, +Process.clock_getres(:GETTIMEOFDAY_BASED_CLOCK_REALTIME)+\nreturns 1.0e-06 which means 1 microsecond, but actual resolution can be more coarse.\n\nIf the given +clock_id+ is not supported, Errno::EINVAL is raised.\n\n+unit+ specifies a type of the return value.\n+Process.clock_getres+ accepts +unit+ as +Process.clock_gettime+.\nThe default value, +:float_second+, is also same as\n+Process.clock_gettime+.\n\n+Process.clock_getres+ also accepts +:hertz+ as +unit+.\n+:hertz+ means a the reciprocal of +:float_second+.\n\n+:hertz+ can be used to obtain the exact value of\nthe clock ticks per second for times() function and\nCLOCKS_PER_SEC for clock() function.\n\n+Process.clock_getres(:TIMES_BASED_CLOCK_PROCESS_CPUTIME_ID, :hertz)+\nreturns the clock ticks per second.\n\n+Process.clock_getres(:CLOCK_BASED_CLOCK_PROCESS_CPUTIME_ID, :hertz)+\nreturns CLOCKS_PER_SEC.\n\n  p Process.clock_getres(Process::CLOCK_MONOTONIC)\n  #=> 1.0e-09","name":"clock_getres","namespace":"Process","path":"Process#clock_getres","type":"module_function","visibility":"private"},"Process#clock_gettime":{"description":"Returns a time returned by POSIX clock_gettime() function.\n\n  p Process.clock_gettime(Process::CLOCK_MONOTONIC)\n  #=> 896053.968060096\n\n+clock_id+ specifies a kind of clock.\nIt is specified as a constant which begins with <code>Process::CLOCK_</code>\nsuch as Process::CLOCK_REALTIME and Process::CLOCK_MONOTONIC.\n\nThe supported constants depends on OS and version.\nRuby provides following types of +clock_id+ if available.\n\n[CLOCK_REALTIME] SUSv2 to 4, Linux 2.5.63, FreeBSD 3.0, NetBSD 2.0, OpenBSD 2.1, macOS 10.12\n[CLOCK_MONOTONIC] SUSv3 to 4, Linux 2.5.63, FreeBSD 3.0, NetBSD 2.0, OpenBSD 3.4, macOS 10.12\n[CLOCK_PROCESS_CPUTIME_ID] SUSv3 to 4, Linux 2.5.63, OpenBSD 5.4, macOS 10.12\n[CLOCK_THREAD_CPUTIME_ID] SUSv3 to 4, Linux 2.5.63, FreeBSD 7.1, OpenBSD 5.4, macOS 10.12\n[CLOCK_VIRTUAL] FreeBSD 3.0, OpenBSD 2.1\n[CLOCK_PROF] FreeBSD 3.0, OpenBSD 2.1\n[CLOCK_REALTIME_FAST] FreeBSD 8.1\n[CLOCK_REALTIME_PRECISE] FreeBSD 8.1\n[CLOCK_REALTIME_COARSE] Linux 2.6.32\n[CLOCK_REALTIME_ALARM] Linux 3.0\n[CLOCK_MONOTONIC_FAST] FreeBSD 8.1\n[CLOCK_MONOTONIC_PRECISE] FreeBSD 8.1\n[CLOCK_MONOTONIC_COARSE] Linux 2.6.32\n[CLOCK_MONOTONIC_RAW] Linux 2.6.28, macOS 10.12\n[CLOCK_MONOTONIC_RAW_APPROX] macOS 10.12\n[CLOCK_BOOTTIME] Linux 2.6.39\n[CLOCK_BOOTTIME_ALARM] Linux 3.0\n[CLOCK_UPTIME] FreeBSD 7.0, OpenBSD 5.5\n[CLOCK_UPTIME_FAST] FreeBSD 8.1\n[CLOCK_UPTIME_RAW] macOS 10.12\n[CLOCK_UPTIME_RAW_APPROX] macOS 10.12\n[CLOCK_UPTIME_PRECISE] FreeBSD 8.1\n[CLOCK_SECOND] FreeBSD 8.1\n\nNote that SUS stands for Single Unix Specification.\nSUS contains POSIX and clock_gettime is defined in the POSIX part.\nSUS defines CLOCK_REALTIME mandatory but\nCLOCK_MONOTONIC, CLOCK_PROCESS_CPUTIME_ID and CLOCK_THREAD_CPUTIME_ID are optional.\n\nAlso, several symbols are accepted as +clock_id+.\nThere are emulations for clock_gettime().\n\nFor example, Process::CLOCK_REALTIME is defined as\n+:GETTIMEOFDAY_BASED_CLOCK_REALTIME+ when clock_gettime() is not available.\n\nEmulations for +CLOCK_REALTIME+:\n[:GETTIMEOFDAY_BASED_CLOCK_REALTIME]\n  Use gettimeofday() defined by SUS.\n  (SUSv4 obsoleted it, though.)\n  The resolution is 1 microsecond.\n[:TIME_BASED_CLOCK_REALTIME]\n  Use time() defined by ISO C.\n  The resolution is 1 second.\n\nEmulations for +CLOCK_MONOTONIC+:\n[:MACH_ABSOLUTE_TIME_BASED_CLOCK_MONOTONIC]\n  Use mach_absolute_time(), available on Darwin.\n  The resolution is CPU dependent.\n[:TIMES_BASED_CLOCK_MONOTONIC]\n  Use the result value of times() defined by POSIX.\n  POSIX defines it as \"times() shall return the elapsed real time, in clock ticks, since an arbitrary point in the past (for example, system start-up time)\".\n  For example, GNU/Linux returns a value based on jiffies and it is monotonic.\n  However, 4.4BSD uses gettimeofday() and it is not monotonic.\n  (FreeBSD uses clock_gettime(CLOCK_MONOTONIC) instead, though.)\n  The resolution is the clock tick.\n  \"getconf CLK_TCK\" command shows the clock ticks per second.\n  (The clock ticks per second is defined by HZ macro in older systems.)\n  If it is 100 and clock_t is 32 bits integer type, the resolution is 10 millisecond and\n  cannot represent over 497 days.\n\nEmulations for +CLOCK_PROCESS_CPUTIME_ID+:\n[:GETRUSAGE_BASED_CLOCK_PROCESS_CPUTIME_ID]\n  Use getrusage() defined by SUS.\n  getrusage() is used with RUSAGE_SELF to obtain the time only for\n  the calling process (excluding the time for child processes).\n  The result is addition of user time (ru_utime) and system time (ru_stime).\n  The resolution is 1 microsecond.\n[:TIMES_BASED_CLOCK_PROCESS_CPUTIME_ID]\n  Use times() defined by POSIX.\n  The result is addition of user time (tms_utime) and system time (tms_stime).\n  tms_cutime and tms_cstime are ignored to exclude the time for child processes.\n  The resolution is the clock tick.\n  \"getconf CLK_TCK\" command shows the clock ticks per second.\n  (The clock ticks per second is defined by HZ macro in older systems.)\n  If it is 100, the resolution is 10 millisecond.\n[:CLOCK_BASED_CLOCK_PROCESS_CPUTIME_ID]\n  Use clock() defined by ISO C.\n  The resolution is 1/CLOCKS_PER_SEC.\n  CLOCKS_PER_SEC is the C-level macro defined by time.h.\n  SUS defines CLOCKS_PER_SEC is 1000000.\n  Non-Unix systems may define it a different value, though.\n  If CLOCKS_PER_SEC is 1000000 as SUS, the resolution is 1 microsecond.\n  If CLOCKS_PER_SEC is 1000000 and clock_t is 32 bits integer type, it cannot represent over 72 minutes.\n\nIf the given +clock_id+ is not supported, Errno::EINVAL is raised.\n\n+unit+ specifies a type of the return value.\n\n[:float_second] number of seconds as a float (default)\n[:float_millisecond] number of milliseconds as a float\n[:float_microsecond] number of microseconds as a float\n[:second] number of seconds as an integer\n[:millisecond] number of milliseconds as an integer\n[:microsecond] number of microseconds as an integer\n[:nanosecond] number of nanoseconds as an integer\n\nThe underlying function, clock_gettime(), returns a number of nanoseconds.\nFloat object (IEEE 754 double) is not enough to represent\nthe return value for CLOCK_REALTIME.\nIf the exact nanoseconds value is required, use +:nanoseconds+ as the +unit+.\n\nThe origin (zero) of the returned value varies.\nFor example, system start up time, process start up time, the Epoch, etc.\n\nThe origin in CLOCK_REALTIME is defined as the Epoch\n(1970-01-01 00:00:00 UTC).\nBut some systems count leap seconds and others doesn't.\nSo the result can be interpreted differently across systems.\nTime.now is recommended over CLOCK_REALTIME.","name":"clock_gettime","namespace":"Process","path":"Process#clock_gettime","type":"module_function","visibility":"private"},"Process#daemon":{"description":"Detach the process from controlling terminal and run in\nthe background as system daemon.  Unless the argument\nnochdir is true (i.e. non false), it changes the current\nworking directory to the root (\"/\"). Unless the argument\nnoclose is true, daemon() will redirect standard input,\nstandard output and standard error to /dev/null.\nReturn zero on success, or raise one of Errno::*.","name":"daemon","namespace":"Process","path":"Process#daemon","type":"module_function","visibility":"private"},"Process#detach":{"description":"Some operating systems retain the status of terminated child\nprocesses until the parent collects that status (normally using\nsome variant of <code>wait()</code>). If the parent never collects\nthis status, the child stays around as a <em>zombie</em> process.\n<code>Process::detach</code> prevents this by setting up a\nseparate Ruby thread whose sole job is to reap the status of the\nprocess _pid_ when it terminates. Use <code>detach</code>\nonly when you do not intend to explicitly wait for the child to\nterminate.\n\nThe waiting thread returns the exit status of the detached process\nwhen it terminates, so you can use <code>Thread#join</code> to\nknow the result.  If specified _pid_ is not a valid child process\nID, the thread returns +nil+ immediately.\n\nThe waiting thread has <code>pid</code> method which returns the pid.\n\nIn this first example, we don't reap the first child process, so\nit appears as a zombie in the process status display.\n\n   p1 = fork { sleep 0.1 }\n   p2 = fork { sleep 0.2 }\n   Process.waitpid(p2)\n   sleep 2\n   system(\"ps -ho pid,state -p #{p1}\")\n\n<em>produces:</em>\n\n   27389 Z\n\nIn the next example, <code>Process::detach</code> is used to reap\nthe child automatically.\n\n   p1 = fork { sleep 0.1 }\n   p2 = fork { sleep 0.2 }\n   Process.detach(p1)\n   Process.waitpid(p2)\n   sleep 2\n   system(\"ps -ho pid,state -p #{p1}\")\n\n<em>(produces no output)</em>","name":"detach","namespace":"Process","path":"Process#detach","type":"module_function","visibility":"private"},"Process#egid":{"description":"Returns the effective group ID for this process. Not available on\nall platforms.\n\n   Process.egid   #=> 500","name":"egid","namespace":"Process","path":"Process#egid","type":"module_function","visibility":"private"},"Process#egid=":{"description":"","name":"egid=","namespace":"Process","path":"Process#egid=","type":"module_function","visibility":"private"},"Process#euid":{"description":"Returns the effective user ID for this process.\n\n   Process.euid   #=> 501","name":"euid","namespace":"Process","path":"Process#euid","type":"module_function","visibility":"private"},"Process#euid=":{"description":"Sets the effective user ID for this process. Not available on all\nplatforms.","name":"euid=","namespace":"Process","path":"Process#euid=","type":"module_function","visibility":"private"},"Process#getpgid":{"description":"Returns the process group ID for the given process id. Not\navailable on all platforms.\n\n   Process.getpgid(Process.ppid())   #=> 25527","name":"getpgid","namespace":"Process","path":"Process#getpgid","type":"module_function","visibility":"private"},"Process#getpgrp":{"description":"Returns the process group ID for this process. Not available on\nall platforms.\n\n   Process.getpgid(0)   #=> 25527\n   Process.getpgrp      #=> 25527","name":"getpgrp","namespace":"Process","path":"Process#getpgrp","type":"module_function","visibility":"private"},"Process#getpriority":{"description":"Gets the scheduling priority for specified process, process group,\nor user. <em>kind</em> indicates the kind of entity to find: one\nof <code>Process::PRIO_PGRP</code>,\n<code>Process::PRIO_USER</code>, or\n<code>Process::PRIO_PROCESS</code>. _integer_ is an id\nindicating the particular process, process group, or user (an id\nof 0 means _current_). Lower priorities are more favorable\nfor scheduling. Not available on all platforms.\n\n   Process.getpriority(Process::PRIO_USER, 0)      #=> 19\n   Process.getpriority(Process::PRIO_PROCESS, 0)   #=> 19","name":"getpriority","namespace":"Process","path":"Process#getpriority","type":"module_function","visibility":"private"},"Process#getrlimit":{"description":"Gets the resource limit of the process.\n_cur_limit_ means current (soft) limit and\n_max_limit_ means maximum (hard) limit.\n\n_resource_ indicates the kind of resource to limit.\nIt is specified as a symbol such as <code>:CORE</code>,\na string such as <code>\"CORE\"</code> or\na constant such as <code>Process::RLIMIT_CORE</code>.\nSee Process.setrlimit for details.\n\n_cur_limit_ and _max_limit_ may be <code>Process::RLIM_INFINITY</code>,\n<code>Process::RLIM_SAVED_MAX</code> or\n<code>Process::RLIM_SAVED_CUR</code>.\nSee Process.setrlimit and the system getrlimit(2) manual for details.","name":"getrlimit","namespace":"Process","path":"Process#getrlimit","type":"module_function","visibility":"private"},"Process#getsid":{"description":"Returns the session ID for the given process id. If not given,\nreturn current process sid. Not available on all platforms.\n\n   Process.getsid()                #=> 27422\n   Process.getsid(0)               #=> 27422\n   Process.getsid(Process.pid())   #=> 27422","name":"getsid","namespace":"Process","path":"Process#getsid","type":"module_function","visibility":"private"},"Process#gid":{"description":"Returns the (real) group ID for this process.\n\n   Process.gid   #=> 500","name":"gid","namespace":"Process","path":"Process#gid","type":"module_function","visibility":"private"},"Process#gid=":{"description":"Sets the group ID for this process.","name":"gid=","namespace":"Process","path":"Process#gid=","type":"module_function","visibility":"private"},"Process#groups":{"description":"Get an <code>Array</code> of the gids of groups in the\nsupplemental group access list for this process.\n\n   Process.groups   #=> [27, 6, 10, 11]","name":"groups","namespace":"Process","path":"Process#groups","type":"module_function","visibility":"private"},"Process#groups=":{"description":"Set the supplemental group access list to the given\n<code>Array</code> of group IDs.\n\n   Process.groups   #=> [0, 1, 2, 3, 4, 6, 10, 11, 20, 26, 27]\n   Process.groups = [27, 6, 10, 11]   #=> [27, 6, 10, 11]\n   Process.groups   #=> [27, 6, 10, 11]","name":"groups=","namespace":"Process","path":"Process#groups=","type":"module_function","visibility":"private"},"Process#initgroups":{"description":"Initializes the supplemental group access list by reading the\nsystem group database and using all groups of which the given user\nis a member. The group with the specified <em>gid</em> is also\nadded to the list. Returns the resulting <code>Array</code> of the\ngids of all the groups in the supplementary group access list. Not\navailable on all platforms.\n\n   Process.groups   #=> [0, 1, 2, 3, 4, 6, 10, 11, 20, 26, 27]\n   Process.initgroups( \"mgranger\", 30 )   #=> [30, 6, 10, 11]\n   Process.groups   #=> [30, 6, 10, 11]","name":"initgroups","namespace":"Process","path":"Process#initgroups","type":"module_function","visibility":"private"},"Process#kill":{"description":"Sends the given signal to the specified process id(s) if _pid_ is positive.\nIf _pid_ is zero _signal_ is sent to all processes whose group ID is equal\nto the group ID of the process. _signal_ may be an integer signal number or\na POSIX signal name (either with or without a +SIG+ prefix). If _signal_ is\nnegative (or starts with a minus sign), kills process groups instead of\nprocesses. Not all signals are available on all platforms.\nThe keys and values of +Signal.list+ are known signal names and numbers,\nrespectively.\n\n   pid = fork do\n      Signal.trap(\"HUP\") { puts \"Ouch!\"; exit }\n      # ... do some work ...\n   end\n   # ...\n   Process.kill(\"HUP\", pid)\n   Process.wait\n\n<em>produces:</em>\n\n   Ouch!\n\nIf _signal_ is an integer but wrong for signal,\n<code>Errno::EINVAL</code> or +RangeError+ will be raised.\nOtherwise unless _signal_ is a +String+ or a +Symbol+, and a known\nsignal name, +ArgumentError+ will be raised.\n\nAlso, <code>Errno::ESRCH</code> or +RangeError+ for invalid _pid_,\n<code>Errno::EPERM</code> when failed because of no privilege,\nwill be raised.  In these cases, signals may have been sent to\npreceding processes.","name":"kill","namespace":"Process","path":"Process#kill","type":"module_function","visibility":"private"},"Process#maxgroups":{"description":"Returns the maximum number of gids allowed in the supplemental\ngroup access list.\n\n   Process.maxgroups   #=> 32","name":"maxgroups","namespace":"Process","path":"Process#maxgroups","type":"module_function","visibility":"private"},"Process#maxgroups=":{"description":"Sets the maximum number of gids allowed in the supplemental group\naccess list.","name":"maxgroups=","namespace":"Process","path":"Process#maxgroups=","type":"module_function","visibility":"private"},"Process#pid":{"description":"Returns the process id of this process. Not available on all\nplatforms.\n\n   Process.pid   #=> 27415","name":"pid","namespace":"Process","path":"Process#pid","type":"module_function","visibility":"private"},"Process#ppid":{"description":"Returns the process id of the parent of this process. Returns\nuntrustworthy value on Win32/64. Not available on all platforms.\n\n   puts \"I am #{Process.pid}\"\n   Process.fork { puts \"Dad is #{Process.ppid}\" }\n\n<em>produces:</em>\n\n   I am 27417\n   Dad is 27417","name":"ppid","namespace":"Process","path":"Process#ppid","type":"module_function","visibility":"private"},"Process#setpgid":{"description":"Sets the process group ID of _pid_ (0 indicates this\nprocess) to <em>integer</em>. Not available on all platforms.","name":"setpgid","namespace":"Process","path":"Process#setpgid","type":"module_function","visibility":"private"},"Process#setpgrp":{"description":"Equivalent to <code>setpgid(0,0)</code>. Not available on all\nplatforms.","name":"setpgrp","namespace":"Process","path":"Process#setpgrp","type":"module_function","visibility":"private"},"Process#setpriority":{"description":"See <code>Process#getpriority</code>.\n\n   Process.setpriority(Process::PRIO_USER, 0, 19)      #=> 0\n   Process.setpriority(Process::PRIO_PROCESS, 0, 19)   #=> 0\n   Process.getpriority(Process::PRIO_USER, 0)          #=> 19\n   Process.getpriority(Process::PRIO_PROCESS, 0)       #=> 19","name":"setpriority","namespace":"Process","path":"Process#setpriority","type":"module_function","visibility":"private"},"Process#setproctitle":{"description":"Sets the process title that appears on the ps(1) command.  Not\nnecessarily effective on all platforms.  No exception will be\nraised regardless of the result, nor will NotImplementedError be\nraised even if the platform does not support the feature.\n\nCalling this method does not affect the value of $0.\n\n   Process.setproctitle('myapp: worker #%d' % worker_id)\n\nThis method first appeared in Ruby 2.1 to serve as a global\nvariable free means to change the process title.","name":"setproctitle","namespace":"Process","path":"Process#setproctitle","type":"module_function","visibility":"private"},"Process#setrlimit":{"description":"Sets the resource limit of the process.\n_cur_limit_ means current (soft) limit and\n_max_limit_ means maximum (hard) limit.\n\nIf _max_limit_ is not given, _cur_limit_ is used.\n\n_resource_ indicates the kind of resource to limit.\nIt should be a symbol such as <code>:CORE</code>,\na string such as <code>\"CORE\"</code> or\na constant such as <code>Process::RLIMIT_CORE</code>.\nThe available resources are OS dependent.\nRuby may support following resources.\n\n[AS] total available memory (bytes) (SUSv3, NetBSD, FreeBSD, OpenBSD but 4.4BSD-Lite)\n[CORE] core size (bytes) (SUSv3)\n[CPU] CPU time (seconds) (SUSv3)\n[DATA] data segment (bytes) (SUSv3)\n[FSIZE] file size (bytes) (SUSv3)\n[MEMLOCK] total size for mlock(2) (bytes) (4.4BSD, GNU/Linux)\n[MSGQUEUE] allocation for POSIX message queues (bytes) (GNU/Linux)\n[NICE] ceiling on process's nice(2) value (number) (GNU/Linux)\n[NOFILE] file descriptors (number) (SUSv3)\n[NPROC] number of processes for the user (number) (4.4BSD, GNU/Linux)\n[RSS] resident memory size (bytes) (4.2BSD, GNU/Linux)\n[RTPRIO] ceiling on the process's real-time priority (number) (GNU/Linux)\n[RTTIME] CPU time for real-time process (us) (GNU/Linux)\n[SBSIZE] all socket buffers (bytes) (NetBSD, FreeBSD)\n[SIGPENDING] number of queued signals allowed (signals) (GNU/Linux)\n[STACK] stack size (bytes) (SUSv3)\n\n_cur_limit_ and _max_limit_ may be\n<code>:INFINITY</code>, <code>\"INFINITY\"</code> or\n<code>Process::RLIM_INFINITY</code>,\nwhich means that the resource is not limited.\nThey may be <code>Process::RLIM_SAVED_MAX</code>,\n<code>Process::RLIM_SAVED_CUR</code> and\ncorresponding symbols and strings too.\nSee system setrlimit(2) manual for details.\n\nThe following example raises the soft limit of core size to\nthe hard limit to try to make core dump possible.\n\n  Process.setrlimit(:CORE, Process.getrlimit(:CORE)[1])","name":"setrlimit","namespace":"Process","path":"Process#setrlimit","type":"module_function","visibility":"private"},"Process#setsid":{"description":"Establishes this process as a new session and process group\nleader, with no controlling tty. Returns the session id. Not\navailable on all platforms.\n\n   Process.setsid   #=> 27422","name":"setsid","namespace":"Process","path":"Process#setsid","type":"module_function","visibility":"private"},"Process#times":{"description":"Returns a <code>Tms</code> structure (see <code>Process::Tms</code>)\nthat contains user and system CPU times for this process,\nand also for children processes.\n\n   t = Process.times\n   [ t.utime, t.stime, t.cutime, t.cstime ]   #=> [0.0, 0.02, 0.00, 0.00]","name":"times","namespace":"Process","path":"Process#times","type":"module_function","visibility":"private"},"Process#uid":{"description":"Returns the (real) user ID of this process.\n\n   Process.uid   #=> 501","name":"uid","namespace":"Process","path":"Process#uid","type":"module_function","visibility":"private"},"Process#uid=":{"description":"Sets the (user) user ID for this process. Not available on all\nplatforms.","name":"uid=","namespace":"Process","path":"Process#uid=","type":"module_function","visibility":"private"},"Process#wait":{"description":"Waits for a child process to exit, returns its process id, and\nsets <code>$?</code> to a <code>Process::Status</code> object\ncontaining information on that process. Which child it waits on\ndepends on the value of _pid_:\n\n> 0::   Waits for the child whose process ID equals _pid_.\n\n0::     Waits for any child whose process group ID equals that of the\n        calling process.\n\n-1::    Waits for any child process (the default if no _pid_ is\n        given).\n\n< -1::  Waits for any child whose process group ID equals the absolute\n        value of _pid_.\n\nThe _flags_ argument may be a logical or of the flag values\n<code>Process::WNOHANG</code> (do not block if no child available)\nor <code>Process::WUNTRACED</code> (return stopped children that\nhaven't been reported). Not all flags are available on all\nplatforms, but a flag value of zero will work on all platforms.\n\nCalling this method raises a SystemCallError if there are no child\nprocesses. Not available on all platforms.\n\n   include Process\n   fork { exit 99 }                 #=> 27429\n   wait                             #=> 27429\n   $?.exitstatus                    #=> 99\n\n   pid = fork { sleep 3 }           #=> 27440\n   Time.now                         #=> 2008-03-08 19:56:16 +0900\n   waitpid(pid, Process::WNOHANG)   #=> nil\n   Time.now                         #=> 2008-03-08 19:56:16 +0900\n   waitpid(pid, 0)                  #=> 27440\n   Time.now                         #=> 2008-03-08 19:56:19 +0900","name":"wait","namespace":"Process","path":"Process#wait","type":"module_function","visibility":"private"},"Process#wait2":{"description":"Waits for a child process to exit (see Process::waitpid for exact\nsemantics) and returns an array containing the process id and the\nexit status (a <code>Process::Status</code> object) of that\nchild. Raises a SystemCallError if there are no child processes.\n\n   Process.fork { exit 99 }   #=> 27437\n   pid, status = Process.wait2\n   pid                        #=> 27437\n   status.exitstatus          #=> 99","name":"wait2","namespace":"Process","path":"Process#wait2","type":"module_function","visibility":"private"},"Process#waitall":{"description":"Waits for all children, returning an array of\n_pid_/_status_ pairs (where _status_ is a\n<code>Process::Status</code> object).\n\n   fork { sleep 0.2; exit 2 }   #=> 27432\n   fork { sleep 0.1; exit 1 }   #=> 27433\n   fork {            exit 0 }   #=> 27434\n   p Process.waitall\n\n<em>produces</em>:\n\n   [[30982, #<Process::Status: pid 30982 exit 0>],\n    [30979, #<Process::Status: pid 30979 exit 1>],\n    [30976, #<Process::Status: pid 30976 exit 2>]]","name":"waitall","namespace":"Process","path":"Process#waitall","type":"module_function","visibility":"private"},"Process#waitpid":{"description":"Waits for a child process to exit, returns its process id, and\nsets <code>$?</code> to a <code>Process::Status</code> object\ncontaining information on that process. Which child it waits on\ndepends on the value of _pid_:\n\n> 0::   Waits for the child whose process ID equals _pid_.\n\n0::     Waits for any child whose process group ID equals that of the\n        calling process.\n\n-1::    Waits for any child process (the default if no _pid_ is\n        given).\n\n< -1::  Waits for any child whose process group ID equals the absolute\n        value of _pid_.\n\nThe _flags_ argument may be a logical or of the flag values\n<code>Process::WNOHANG</code> (do not block if no child available)\nor <code>Process::WUNTRACED</code> (return stopped children that\nhaven't been reported). Not all flags are available on all\nplatforms, but a flag value of zero will work on all platforms.\n\nCalling this method raises a SystemCallError if there are no child\nprocesses. Not available on all platforms.\n\n   include Process\n   fork { exit 99 }                 #=> 27429\n   wait                             #=> 27429\n   $?.exitstatus                    #=> 99\n\n   pid = fork { sleep 3 }           #=> 27440\n   Time.now                         #=> 2008-03-08 19:56:16 +0900\n   waitpid(pid, Process::WNOHANG)   #=> nil\n   Time.now                         #=> 2008-03-08 19:56:16 +0900\n   waitpid(pid, 0)                  #=> 27440\n   Time.now                         #=> 2008-03-08 19:56:19 +0900","name":"waitpid","namespace":"Process","path":"Process#waitpid","type":"module_function","visibility":"private"},"Process#waitpid2":{"description":"Waits for a child process to exit (see Process::waitpid for exact\nsemantics) and returns an array containing the process id and the\nexit status (a <code>Process::Status</code> object) of that\nchild. Raises a SystemCallError if there are no child processes.\n\n   Process.fork { exit 99 }   #=> 27437\n   pid, status = Process.wait2\n   pid                        #=> 27437\n   status.exitstatus          #=> 99","name":"waitpid2","namespace":"Process","path":"Process#waitpid2","type":"module_function","visibility":"private"},"Process.abort":{"description":"Terminate execution immediately, effectively by calling\n<code>Kernel.exit(false)</code>. If _msg_ is given, it is written\nto STDERR prior to terminating.","name":"abort","namespace":"Process","path":"Process.abort","type":"module_function","visibility":"public"},"Process.argv0":{"description":"Returns the name of the script being executed.  The value is not\naffected by assigning a new value to $0.\n\nThis method first appeared in Ruby 2.1 to serve as a global\nvariable free means to get the script name.","name":"argv0","namespace":"Process","path":"Process.argv0","type":"module_function","visibility":"public"},"Process.clock_getres":{"description":"Returns the time resolution returned by POSIX clock_getres() function.\n\n+clock_id+ specifies a kind of clock.\nSee the document of +Process.clock_gettime+ for details.\n\n+clock_id+ can be a symbol as +Process.clock_gettime+.\nHowever the result may not be accurate.\nFor example, +Process.clock_getres(:GETTIMEOFDAY_BASED_CLOCK_REALTIME)+\nreturns 1.0e-06 which means 1 microsecond, but actual resolution can be more coarse.\n\nIf the given +clock_id+ is not supported, Errno::EINVAL is raised.\n\n+unit+ specifies a type of the return value.\n+Process.clock_getres+ accepts +unit+ as +Process.clock_gettime+.\nThe default value, +:float_second+, is also same as\n+Process.clock_gettime+.\n\n+Process.clock_getres+ also accepts +:hertz+ as +unit+.\n+:hertz+ means a the reciprocal of +:float_second+.\n\n+:hertz+ can be used to obtain the exact value of\nthe clock ticks per second for times() function and\nCLOCKS_PER_SEC for clock() function.\n\n+Process.clock_getres(:TIMES_BASED_CLOCK_PROCESS_CPUTIME_ID, :hertz)+\nreturns the clock ticks per second.\n\n+Process.clock_getres(:CLOCK_BASED_CLOCK_PROCESS_CPUTIME_ID, :hertz)+\nreturns CLOCKS_PER_SEC.\n\n  p Process.clock_getres(Process::CLOCK_MONOTONIC)\n  #=> 1.0e-09","name":"clock_getres","namespace":"Process","path":"Process.clock_getres","type":"module_function","visibility":"public"},"Process.clock_gettime":{"description":"Returns a time returned by POSIX clock_gettime() function.\n\n  p Process.clock_gettime(Process::CLOCK_MONOTONIC)\n  #=> 896053.968060096\n\n+clock_id+ specifies a kind of clock.\nIt is specified as a constant which begins with <code>Process::CLOCK_</code>\nsuch as Process::CLOCK_REALTIME and Process::CLOCK_MONOTONIC.\n\nThe supported constants depends on OS and version.\nRuby provides following types of +clock_id+ if available.\n\n[CLOCK_REALTIME] SUSv2 to 4, Linux 2.5.63, FreeBSD 3.0, NetBSD 2.0, OpenBSD 2.1, macOS 10.12\n[CLOCK_MONOTONIC] SUSv3 to 4, Linux 2.5.63, FreeBSD 3.0, NetBSD 2.0, OpenBSD 3.4, macOS 10.12\n[CLOCK_PROCESS_CPUTIME_ID] SUSv3 to 4, Linux 2.5.63, OpenBSD 5.4, macOS 10.12\n[CLOCK_THREAD_CPUTIME_ID] SUSv3 to 4, Linux 2.5.63, FreeBSD 7.1, OpenBSD 5.4, macOS 10.12\n[CLOCK_VIRTUAL] FreeBSD 3.0, OpenBSD 2.1\n[CLOCK_PROF] FreeBSD 3.0, OpenBSD 2.1\n[CLOCK_REALTIME_FAST] FreeBSD 8.1\n[CLOCK_REALTIME_PRECISE] FreeBSD 8.1\n[CLOCK_REALTIME_COARSE] Linux 2.6.32\n[CLOCK_REALTIME_ALARM] Linux 3.0\n[CLOCK_MONOTONIC_FAST] FreeBSD 8.1\n[CLOCK_MONOTONIC_PRECISE] FreeBSD 8.1\n[CLOCK_MONOTONIC_COARSE] Linux 2.6.32\n[CLOCK_MONOTONIC_RAW] Linux 2.6.28, macOS 10.12\n[CLOCK_MONOTONIC_RAW_APPROX] macOS 10.12\n[CLOCK_BOOTTIME] Linux 2.6.39\n[CLOCK_BOOTTIME_ALARM] Linux 3.0\n[CLOCK_UPTIME] FreeBSD 7.0, OpenBSD 5.5\n[CLOCK_UPTIME_FAST] FreeBSD 8.1\n[CLOCK_UPTIME_RAW] macOS 10.12\n[CLOCK_UPTIME_RAW_APPROX] macOS 10.12\n[CLOCK_UPTIME_PRECISE] FreeBSD 8.1\n[CLOCK_SECOND] FreeBSD 8.1\n\nNote that SUS stands for Single Unix Specification.\nSUS contains POSIX and clock_gettime is defined in the POSIX part.\nSUS defines CLOCK_REALTIME mandatory but\nCLOCK_MONOTONIC, CLOCK_PROCESS_CPUTIME_ID and CLOCK_THREAD_CPUTIME_ID are optional.\n\nAlso, several symbols are accepted as +clock_id+.\nThere are emulations for clock_gettime().\n\nFor example, Process::CLOCK_REALTIME is defined as\n+:GETTIMEOFDAY_BASED_CLOCK_REALTIME+ when clock_gettime() is not available.\n\nEmulations for +CLOCK_REALTIME+:\n[:GETTIMEOFDAY_BASED_CLOCK_REALTIME]\n  Use gettimeofday() defined by SUS.\n  (SUSv4 obsoleted it, though.)\n  The resolution is 1 microsecond.\n[:TIME_BASED_CLOCK_REALTIME]\n  Use time() defined by ISO C.\n  The resolution is 1 second.\n\nEmulations for +CLOCK_MONOTONIC+:\n[:MACH_ABSOLUTE_TIME_BASED_CLOCK_MONOTONIC]\n  Use mach_absolute_time(), available on Darwin.\n  The resolution is CPU dependent.\n[:TIMES_BASED_CLOCK_MONOTONIC]\n  Use the result value of times() defined by POSIX.\n  POSIX defines it as \"times() shall return the elapsed real time, in clock ticks, since an arbitrary point in the past (for example, system start-up time)\".\n  For example, GNU/Linux returns a value based on jiffies and it is monotonic.\n  However, 4.4BSD uses gettimeofday() and it is not monotonic.\n  (FreeBSD uses clock_gettime(CLOCK_MONOTONIC) instead, though.)\n  The resolution is the clock tick.\n  \"getconf CLK_TCK\" command shows the clock ticks per second.\n  (The clock ticks per second is defined by HZ macro in older systems.)\n  If it is 100 and clock_t is 32 bits integer type, the resolution is 10 millisecond and\n  cannot represent over 497 days.\n\nEmulations for +CLOCK_PROCESS_CPUTIME_ID+:\n[:GETRUSAGE_BASED_CLOCK_PROCESS_CPUTIME_ID]\n  Use getrusage() defined by SUS.\n  getrusage() is used with RUSAGE_SELF to obtain the time only for\n  the calling process (excluding the time for child processes).\n  The result is addition of user time (ru_utime) and system time (ru_stime).\n  The resolution is 1 microsecond.\n[:TIMES_BASED_CLOCK_PROCESS_CPUTIME_ID]\n  Use times() defined by POSIX.\n  The result is addition of user time (tms_utime) and system time (tms_stime).\n  tms_cutime and tms_cstime are ignored to exclude the time for child processes.\n  The resolution is the clock tick.\n  \"getconf CLK_TCK\" command shows the clock ticks per second.\n  (The clock ticks per second is defined by HZ macro in older systems.)\n  If it is 100, the resolution is 10 millisecond.\n[:CLOCK_BASED_CLOCK_PROCESS_CPUTIME_ID]\n  Use clock() defined by ISO C.\n  The resolution is 1/CLOCKS_PER_SEC.\n  CLOCKS_PER_SEC is the C-level macro defined by time.h.\n  SUS defines CLOCKS_PER_SEC is 1000000.\n  Non-Unix systems may define it a different value, though.\n  If CLOCKS_PER_SEC is 1000000 as SUS, the resolution is 1 microsecond.\n  If CLOCKS_PER_SEC is 1000000 and clock_t is 32 bits integer type, it cannot represent over 72 minutes.\n\nIf the given +clock_id+ is not supported, Errno::EINVAL is raised.\n\n+unit+ specifies a type of the return value.\n\n[:float_second] number of seconds as a float (default)\n[:float_millisecond] number of milliseconds as a float\n[:float_microsecond] number of microseconds as a float\n[:second] number of seconds as an integer\n[:millisecond] number of milliseconds as an integer\n[:microsecond] number of microseconds as an integer\n[:nanosecond] number of nanoseconds as an integer\n\nThe underlying function, clock_gettime(), returns a number of nanoseconds.\nFloat object (IEEE 754 double) is not enough to represent\nthe return value for CLOCK_REALTIME.\nIf the exact nanoseconds value is required, use +:nanoseconds+ as the +unit+.\n\nThe origin (zero) of the returned value varies.\nFor example, system start up time, process start up time, the Epoch, etc.\n\nThe origin in CLOCK_REALTIME is defined as the Epoch\n(1970-01-01 00:00:00 UTC).\nBut some systems count leap seconds and others doesn't.\nSo the result can be interpreted differently across systems.\nTime.now is recommended over CLOCK_REALTIME.","name":"clock_gettime","namespace":"Process","path":"Process.clock_gettime","type":"module_function","visibility":"public"},"Process.daemon":{"description":"Detach the process from controlling terminal and run in\nthe background as system daemon.  Unless the argument\nnochdir is true (i.e. non false), it changes the current\nworking directory to the root (\"/\"). Unless the argument\nnoclose is true, daemon() will redirect standard input,\nstandard output and standard error to /dev/null.\nReturn zero on success, or raise one of Errno::*.","name":"daemon","namespace":"Process","path":"Process.daemon","type":"module_function","visibility":"public"},"Process.detach":{"description":"Some operating systems retain the status of terminated child\nprocesses until the parent collects that status (normally using\nsome variant of <code>wait()</code>). If the parent never collects\nthis status, the child stays around as a <em>zombie</em> process.\n<code>Process::detach</code> prevents this by setting up a\nseparate Ruby thread whose sole job is to reap the status of the\nprocess _pid_ when it terminates. Use <code>detach</code>\nonly when you do not intend to explicitly wait for the child to\nterminate.\n\nThe waiting thread returns the exit status of the detached process\nwhen it terminates, so you can use <code>Thread#join</code> to\nknow the result.  If specified _pid_ is not a valid child process\nID, the thread returns +nil+ immediately.\n\nThe waiting thread has <code>pid</code> method which returns the pid.\n\nIn this first example, we don't reap the first child process, so\nit appears as a zombie in the process status display.\n\n   p1 = fork { sleep 0.1 }\n   p2 = fork { sleep 0.2 }\n   Process.waitpid(p2)\n   sleep 2\n   system(\"ps -ho pid,state -p #{p1}\")\n\n<em>produces:</em>\n\n   27389 Z\n\nIn the next example, <code>Process::detach</code> is used to reap\nthe child automatically.\n\n   p1 = fork { sleep 0.1 }\n   p2 = fork { sleep 0.2 }\n   Process.detach(p1)\n   Process.waitpid(p2)\n   sleep 2\n   system(\"ps -ho pid,state -p #{p1}\")\n\n<em>(produces no output)</em>","name":"detach","namespace":"Process","path":"Process.detach","type":"module_function","visibility":"public"},"Process.egid":{"description":"Returns the effective group ID for this process. Not available on\nall platforms.\n\n   Process.egid   #=> 500","name":"egid","namespace":"Process","path":"Process.egid","type":"module_function","visibility":"public"},"Process.egid=":{"description":"","name":"egid=","namespace":"Process","path":"Process.egid=","type":"module_function","visibility":"public"},"Process.euid":{"description":"Returns the effective user ID for this process.\n\n   Process.euid   #=> 501","name":"euid","namespace":"Process","path":"Process.euid","type":"module_function","visibility":"public"},"Process.euid=":{"description":"Sets the effective user ID for this process. Not available on all\nplatforms.","name":"euid=","namespace":"Process","path":"Process.euid=","type":"module_function","visibility":"public"},"Process.exec":{"description":"Replaces the current process by running the given external _command_, which\ncan take one of the following forms:\n\n[<code>exec(commandline)</code>]\ncommand line string which is passed to the standard shell\n[<code>exec(cmdname, arg1, ...)</code>]\ncommand name and one or more arguments (no shell)\n[<code>exec([cmdname, argv0], arg1, ...)</code>]\ncommand name, argv[0] and zero or more arguments (no shell)\n\nIn the first form, the string is taken as a command line that is subject to\nshell expansion before being executed.\n\nThe standard shell always means <code>\"/bin/sh\"</code> on Unix-like systems,\nsame as <code>ENV[\"RUBYSHELL\"]</code>\n(or <code>ENV[\"COMSPEC\"]</code> on Windows NT series), and similar.\n\nIf the string from the first form (<code>exec(\"command\")</code>) follows\nthese simple rules:\n\n* no meta characters\n* no shell reserved word and no special built-in\n* Ruby invokes the command directly without shell\n\nYou can force shell invocation by adding \";\" to the string (because \";\" is\na meta character).\n\nNote that this behavior is observable by pid obtained\n(return value of spawn() and IO#pid for IO.popen) is the pid of the invoked\ncommand, not shell.\n\nIn the second form (<code>exec(\"command1\", \"arg1\", ...)</code>), the first\nis taken as a command name and the rest are passed as parameters to command\nwith no shell expansion.\n\nIn the third form (<code>exec([\"command\", \"argv0\"], \"arg1\", ...)</code>),\nstarting a two-element array at the beginning of the command, the first\nelement is the command to be executed, and the second argument is used as\nthe <code>argv[0]</code> value, which may show up in process listings.\n\nIn order to execute the command, one of the <code>exec(2)</code> system\ncalls are used, so the running command may inherit some of the environment\nof the original program (including open file descriptors).\n\nThis behavior is modified by the given +env+ and +options+ parameters. See\n::spawn for details.\n\nIf the command fails to execute (typically <code>Errno::ENOENT</code> when\nit was not found) a SystemCallError exception is raised.\n\nThis method modifies process attributes according to given +options+ before\n<code>exec(2)</code> system call. See ::spawn for more details about the\ngiven +options+.\n\nThe modified attributes may be retained when <code>exec(2)</code> system\ncall fails.\n\nFor example, hard resource limits are not restorable.\n\nConsider to create a child process using ::spawn or Kernel#system if this\nis not acceptable.\n\n   exec \"echo *\"       # echoes list of files in current directory\n   # never get here\n\n   exec \"echo\", \"*\"    # echoes an asterisk\n   # never get here","name":"exec","namespace":"Process","path":"Process.exec","type":"module_function","visibility":"public"},"Process.exit":{"description":"Initiates the termination of the Ruby script by raising the\n<code>SystemExit</code> exception. This exception may be caught. The\noptional parameter is used to return a status code to the invoking\nenvironment.\n+true+ and +FALSE+ of _status_ means success and failure\nrespectively.  The interpretation of other integer values are\nsystem dependent.\n\n   begin\n     exit\n     puts \"never get here\"\n   rescue SystemExit\n     puts \"rescued a SystemExit exception\"\n   end\n   puts \"after begin block\"\n\n<em>produces:</em>\n\n   rescued a SystemExit exception\n   after begin block\n\nJust prior to termination, Ruby executes any <code>at_exit</code> functions\n(see Kernel::at_exit) and runs any object finalizers (see\nObjectSpace::define_finalizer).\n\n   at_exit { puts \"at_exit function\" }\n   ObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\n   exit\n\n<em>produces:</em>\n\n   at_exit function\n   in finalizer","name":"exit","namespace":"Process","path":"Process.exit","type":"module_function","visibility":"public"},"Process.exit!":{"description":"Exits the process immediately. No exit handlers are\nrun. <em>status</em> is returned to the underlying system as the\nexit status.\n\n   Process.exit!(true)","name":"exit!","namespace":"Process","path":"Process.exit!","type":"module_function","visibility":"public"},"Process.fork":{"description":"Creates a subprocess. If a block is specified, that block is run\nin the subprocess, and the subprocess terminates with a status of\nzero. Otherwise, the +fork+ call returns twice, once in\nthe parent, returning the process ID of the child, and once in\nthe child, returning _nil_. The child process can exit using\n<code>Kernel.exit!</code> to avoid running any\n<code>at_exit</code> functions. The parent process should\nuse <code>Process.wait</code> to collect the termination statuses\nof its children or use <code>Process.detach</code> to register\ndisinterest in their status; otherwise, the operating system\nmay accumulate zombie processes.\n\nThe thread calling fork is the only thread in the created child process.\nfork doesn't copy other threads.\n\nIf fork is not usable, Process.respond_to?(:fork) returns false.\n\nNote that fork(2) is not available on some platforms like Windows and NetBSD 4.\nTherefore you should use spawn() instead of fork().","name":"fork","namespace":"Process","path":"Process.fork","type":"module_function","visibility":"public"},"Process.getpgid":{"description":"Returns the process group ID for the given process id. Not\navailable on all platforms.\n\n   Process.getpgid(Process.ppid())   #=> 25527","name":"getpgid","namespace":"Process","path":"Process.getpgid","type":"module_function","visibility":"public"},"Process.getpgrp":{"description":"Returns the process group ID for this process. Not available on\nall platforms.\n\n   Process.getpgid(0)   #=> 25527\n   Process.getpgrp      #=> 25527","name":"getpgrp","namespace":"Process","path":"Process.getpgrp","type":"module_function","visibility":"public"},"Process.getpriority":{"description":"Gets the scheduling priority for specified process, process group,\nor user. <em>kind</em> indicates the kind of entity to find: one\nof <code>Process::PRIO_PGRP</code>,\n<code>Process::PRIO_USER</code>, or\n<code>Process::PRIO_PROCESS</code>. _integer_ is an id\nindicating the particular process, process group, or user (an id\nof 0 means _current_). Lower priorities are more favorable\nfor scheduling. Not available on all platforms.\n\n   Process.getpriority(Process::PRIO_USER, 0)      #=> 19\n   Process.getpriority(Process::PRIO_PROCESS, 0)   #=> 19","name":"getpriority","namespace":"Process","path":"Process.getpriority","type":"module_function","visibility":"public"},"Process.getrlimit":{"description":"Gets the resource limit of the process.\n_cur_limit_ means current (soft) limit and\n_max_limit_ means maximum (hard) limit.\n\n_resource_ indicates the kind of resource to limit.\nIt is specified as a symbol such as <code>:CORE</code>,\na string such as <code>\"CORE\"</code> or\na constant such as <code>Process::RLIMIT_CORE</code>.\nSee Process.setrlimit for details.\n\n_cur_limit_ and _max_limit_ may be <code>Process::RLIM_INFINITY</code>,\n<code>Process::RLIM_SAVED_MAX</code> or\n<code>Process::RLIM_SAVED_CUR</code>.\nSee Process.setrlimit and the system getrlimit(2) manual for details.","name":"getrlimit","namespace":"Process","path":"Process.getrlimit","type":"module_function","visibility":"public"},"Process.getsid":{"description":"Returns the session ID for the given process id. If not given,\nreturn current process sid. Not available on all platforms.\n\n   Process.getsid()                #=> 27422\n   Process.getsid(0)               #=> 27422\n   Process.getsid(Process.pid())   #=> 27422","name":"getsid","namespace":"Process","path":"Process.getsid","type":"module_function","visibility":"public"},"Process.gid":{"description":"Returns the (real) group ID for this process.\n\n   Process.gid   #=> 500","name":"gid","namespace":"Process","path":"Process.gid","type":"module_function","visibility":"public"},"Process.gid=":{"description":"Sets the group ID for this process.","name":"gid=","namespace":"Process","path":"Process.gid=","type":"module_function","visibility":"public"},"Process.groups":{"description":"Get an <code>Array</code> of the gids of groups in the\nsupplemental group access list for this process.\n\n   Process.groups   #=> [27, 6, 10, 11]","name":"groups","namespace":"Process","path":"Process.groups","type":"module_function","visibility":"public"},"Process.groups=":{"description":"Set the supplemental group access list to the given\n<code>Array</code> of group IDs.\n\n   Process.groups   #=> [0, 1, 2, 3, 4, 6, 10, 11, 20, 26, 27]\n   Process.groups = [27, 6, 10, 11]   #=> [27, 6, 10, 11]\n   Process.groups   #=> [27, 6, 10, 11]","name":"groups=","namespace":"Process","path":"Process.groups=","type":"module_function","visibility":"public"},"Process.initgroups":{"description":"Initializes the supplemental group access list by reading the\nsystem group database and using all groups of which the given user\nis a member. The group with the specified <em>gid</em> is also\nadded to the list. Returns the resulting <code>Array</code> of the\ngids of all the groups in the supplementary group access list. Not\navailable on all platforms.\n\n   Process.groups   #=> [0, 1, 2, 3, 4, 6, 10, 11, 20, 26, 27]\n   Process.initgroups( \"mgranger\", 30 )   #=> [30, 6, 10, 11]\n   Process.groups   #=> [30, 6, 10, 11]","name":"initgroups","namespace":"Process","path":"Process.initgroups","type":"module_function","visibility":"public"},"Process.kill":{"description":"Sends the given signal to the specified process id(s) if _pid_ is positive.\nIf _pid_ is zero _signal_ is sent to all processes whose group ID is equal\nto the group ID of the process. _signal_ may be an integer signal number or\na POSIX signal name (either with or without a +SIG+ prefix). If _signal_ is\nnegative (or starts with a minus sign), kills process groups instead of\nprocesses. Not all signals are available on all platforms.\nThe keys and values of +Signal.list+ are known signal names and numbers,\nrespectively.\n\n   pid = fork do\n      Signal.trap(\"HUP\") { puts \"Ouch!\"; exit }\n      # ... do some work ...\n   end\n   # ...\n   Process.kill(\"HUP\", pid)\n   Process.wait\n\n<em>produces:</em>\n\n   Ouch!\n\nIf _signal_ is an integer but wrong for signal,\n<code>Errno::EINVAL</code> or +RangeError+ will be raised.\nOtherwise unless _signal_ is a +String+ or a +Symbol+, and a known\nsignal name, +ArgumentError+ will be raised.\n\nAlso, <code>Errno::ESRCH</code> or +RangeError+ for invalid _pid_,\n<code>Errno::EPERM</code> when failed because of no privilege,\nwill be raised.  In these cases, signals may have been sent to\npreceding processes.","name":"kill","namespace":"Process","path":"Process.kill","type":"module_function","visibility":"public"},"Process.last_status":{"description":"Returns the status of the last executed child process in the\ncurrent thread.\n\n   Process.wait Process.spawn(\"ruby\", \"-e\", \"exit 13\")\n   Process.last_status   #=> #<Process::Status: pid 4825 exit 13>\n\nIf no child process has ever been executed in the current\nthread, this returns +nil+.\n\n   Process.last_status   #=> nil","name":"last_status","namespace":"Process","path":"Process.last_status","type":"module_function","visibility":"public"},"Process.maxgroups":{"description":"Returns the maximum number of gids allowed in the supplemental\ngroup access list.\n\n   Process.maxgroups   #=> 32","name":"maxgroups","namespace":"Process","path":"Process.maxgroups","type":"module_function","visibility":"public"},"Process.maxgroups=":{"description":"Sets the maximum number of gids allowed in the supplemental group\naccess list.","name":"maxgroups=","namespace":"Process","path":"Process.maxgroups=","type":"module_function","visibility":"public"},"Process.pid":{"description":"Returns the process id of this process. Not available on all\nplatforms.\n\n   Process.pid   #=> 27415","name":"pid","namespace":"Process","path":"Process.pid","type":"module_function","visibility":"public"},"Process.ppid":{"description":"Returns the process id of the parent of this process. Returns\nuntrustworthy value on Win32/64. Not available on all platforms.\n\n   puts \"I am #{Process.pid}\"\n   Process.fork { puts \"Dad is #{Process.ppid}\" }\n\n<em>produces:</em>\n\n   I am 27417\n   Dad is 27417","name":"ppid","namespace":"Process","path":"Process.ppid","type":"module_function","visibility":"public"},"Process.setpgid":{"description":"Sets the process group ID of _pid_ (0 indicates this\nprocess) to <em>integer</em>. Not available on all platforms.","name":"setpgid","namespace":"Process","path":"Process.setpgid","type":"module_function","visibility":"public"},"Process.setpgrp":{"description":"Equivalent to <code>setpgid(0,0)</code>. Not available on all\nplatforms.","name":"setpgrp","namespace":"Process","path":"Process.setpgrp","type":"module_function","visibility":"public"},"Process.setpriority":{"description":"See <code>Process#getpriority</code>.\n\n   Process.setpriority(Process::PRIO_USER, 0, 19)      #=> 0\n   Process.setpriority(Process::PRIO_PROCESS, 0, 19)   #=> 0\n   Process.getpriority(Process::PRIO_USER, 0)          #=> 19\n   Process.getpriority(Process::PRIO_PROCESS, 0)       #=> 19","name":"setpriority","namespace":"Process","path":"Process.setpriority","type":"module_function","visibility":"public"},"Process.setproctitle":{"description":"Sets the process title that appears on the ps(1) command.  Not\nnecessarily effective on all platforms.  No exception will be\nraised regardless of the result, nor will NotImplementedError be\nraised even if the platform does not support the feature.\n\nCalling this method does not affect the value of $0.\n\n   Process.setproctitle('myapp: worker #%d' % worker_id)\n\nThis method first appeared in Ruby 2.1 to serve as a global\nvariable free means to change the process title.","name":"setproctitle","namespace":"Process","path":"Process.setproctitle","type":"module_function","visibility":"public"},"Process.setrlimit":{"description":"Sets the resource limit of the process.\n_cur_limit_ means current (soft) limit and\n_max_limit_ means maximum (hard) limit.\n\nIf _max_limit_ is not given, _cur_limit_ is used.\n\n_resource_ indicates the kind of resource to limit.\nIt should be a symbol such as <code>:CORE</code>,\na string such as <code>\"CORE\"</code> or\na constant such as <code>Process::RLIMIT_CORE</code>.\nThe available resources are OS dependent.\nRuby may support following resources.\n\n[AS] total available memory (bytes) (SUSv3, NetBSD, FreeBSD, OpenBSD but 4.4BSD-Lite)\n[CORE] core size (bytes) (SUSv3)\n[CPU] CPU time (seconds) (SUSv3)\n[DATA] data segment (bytes) (SUSv3)\n[FSIZE] file size (bytes) (SUSv3)\n[MEMLOCK] total size for mlock(2) (bytes) (4.4BSD, GNU/Linux)\n[MSGQUEUE] allocation for POSIX message queues (bytes) (GNU/Linux)\n[NICE] ceiling on process's nice(2) value (number) (GNU/Linux)\n[NOFILE] file descriptors (number) (SUSv3)\n[NPROC] number of processes for the user (number) (4.4BSD, GNU/Linux)\n[RSS] resident memory size (bytes) (4.2BSD, GNU/Linux)\n[RTPRIO] ceiling on the process's real-time priority (number) (GNU/Linux)\n[RTTIME] CPU time for real-time process (us) (GNU/Linux)\n[SBSIZE] all socket buffers (bytes) (NetBSD, FreeBSD)\n[SIGPENDING] number of queued signals allowed (signals) (GNU/Linux)\n[STACK] stack size (bytes) (SUSv3)\n\n_cur_limit_ and _max_limit_ may be\n<code>:INFINITY</code>, <code>\"INFINITY\"</code> or\n<code>Process::RLIM_INFINITY</code>,\nwhich means that the resource is not limited.\nThey may be <code>Process::RLIM_SAVED_MAX</code>,\n<code>Process::RLIM_SAVED_CUR</code> and\ncorresponding symbols and strings too.\nSee system setrlimit(2) manual for details.\n\nThe following example raises the soft limit of core size to\nthe hard limit to try to make core dump possible.\n\n  Process.setrlimit(:CORE, Process.getrlimit(:CORE)[1])","name":"setrlimit","namespace":"Process","path":"Process.setrlimit","type":"module_function","visibility":"public"},"Process.setsid":{"description":"Establishes this process as a new session and process group\nleader, with no controlling tty. Returns the session id. Not\navailable on all platforms.\n\n   Process.setsid   #=> 27422","name":"setsid","namespace":"Process","path":"Process.setsid","type":"module_function","visibility":"public"},"Process.spawn":{"description":"spawn executes specified command and return its pid.\n\n  pid = spawn(\"tar xf ruby-2.0.0-p195.tar.bz2\")\n  Process.wait pid\n\n  pid = spawn(RbConfig.ruby, \"-eputs'Hello, world!'\")\n  Process.wait pid\n\nThis method is similar to Kernel#system but it doesn't wait for the command\nto finish.\n\nThe parent process should\nuse <code>Process.wait</code> to collect\nthe termination status of its child or\nuse <code>Process.detach</code> to register\ndisinterest in their status;\notherwise, the operating system may accumulate zombie processes.\n\nspawn has bunch of options to specify process attributes:\n\n  env: hash\n    name => val : set the environment variable\n    name => nil : unset the environment variable\n\n    the keys and the values except for +nil+ must be strings.\n  command...:\n    commandline                 : command line string which is passed to the standard shell\n    cmdname, arg1, ...          : command name and one or more arguments (This form does not use the shell. See below for caveats.)\n    [cmdname, argv0], arg1, ... : command name, argv[0] and zero or more arguments (no shell)\n  options: hash\n    clearing environment variables:\n      :unsetenv_others => true   : clear environment variables except specified by env\n      :unsetenv_others => false  : don't clear (default)\n    process group:\n      :pgroup => true or 0 : make a new process group\n      :pgroup => pgid      : join the specified process group\n      :pgroup => nil       : don't change the process group (default)\n    create new process group: Windows only\n      :new_pgroup => true  : the new process is the root process of a new process group\n      :new_pgroup => false : don't create a new process group (default)\n    resource limit: resourcename is core, cpu, data, etc.  See Process.setrlimit.\n      :rlimit_resourcename => limit\n      :rlimit_resourcename => [cur_limit, max_limit]\n    umask:\n      :umask => int\n    redirection:\n      key:\n        FD              : single file descriptor in child process\n        [FD, FD, ...]   : multiple file descriptor in child process\n      value:\n        FD                        : redirect to the file descriptor in parent process\n        string                    : redirect to file with open(string, \"r\" or \"w\")\n        [string]                  : redirect to file with open(string, File::RDONLY)\n        [string, open_mode]       : redirect to file with open(string, open_mode, 0644)\n        [string, open_mode, perm] : redirect to file with open(string, open_mode, perm)\n        [:child, FD]              : redirect to the redirected file descriptor\n        :close                    : close the file descriptor in child process\n      FD is one of follows\n        :in     : the file descriptor 0 which is the standard input\n        :out    : the file descriptor 1 which is the standard output\n        :err    : the file descriptor 2 which is the standard error\n        integer : the file descriptor of specified the integer\n        io      : the file descriptor specified as io.fileno\n    file descriptor inheritance: close non-redirected non-standard fds (3, 4, 5, ...) or not\n      :close_others => true  : don't inherit\n    current directory:\n      :chdir => str\n\n    The 'cmdname, arg1, ...' form does not use the shell. However,\n    on different OSes, different things are provided as built-in\n    commands. An example of this is 'echo', which is a built-in\n    on Windows, but is a normal program on Linux and Mac OS X.\n    This means that `Process.spawn 'echo', '%Path%'` will display\n    the contents of the `%Path%` environment variable on Windows,\n    but `Process.spawn 'echo', '$PATH'` prints the literal '$PATH'.\n\nIf a hash is given as +env+, the environment is\nupdated by +env+ before <code>exec(2)</code> in the child process.\nIf a pair in +env+ has nil as the value, the variable is deleted.\n\n  # set FOO as BAR and unset BAZ.\n  pid = spawn({\"FOO\"=>\"BAR\", \"BAZ\"=>nil}, command)\n\nIf a hash is given as +options+,\nit specifies\nprocess group,\ncreate new process group,\nresource limit,\ncurrent directory,\numask and\nredirects for the child process.\nAlso, it can be specified to clear environment variables.\n\nThe <code>:unsetenv_others</code> key in +options+ specifies\nto clear environment variables, other than specified by +env+.\n\n  pid = spawn(command, :unsetenv_others=>true) # no environment variable\n  pid = spawn({\"FOO\"=>\"BAR\"}, command, :unsetenv_others=>true) # FOO only\n\nThe <code>:pgroup</code> key in +options+ specifies a process group.\nThe corresponding value should be true, zero, a positive integer, or nil.\ntrue and zero cause the process to be a process leader of a new process group.\nA non-zero positive integer causes the process to join the provided process group.\nThe default value, nil, causes the process to remain in the same process group.\n\n  pid = spawn(command, :pgroup=>true) # process leader\n  pid = spawn(command, :pgroup=>10) # belongs to the process group 10\n\nThe <code>:new_pgroup</code> key in +options+ specifies to pass\n+CREATE_NEW_PROCESS_GROUP+ flag to <code>CreateProcessW()</code> that is\nWindows API. This option is only for Windows.\ntrue means the new process is the root process of the new process group.\nThe new process has CTRL+C disabled. This flag is necessary for\n<code>Process.kill(:SIGINT, pid)</code> on the subprocess.\n:new_pgroup is false by default.\n\n  pid = spawn(command, :new_pgroup=>true)  # new process group\n  pid = spawn(command, :new_pgroup=>false) # same process group\n\nThe <code>:rlimit_</code><em>foo</em> key specifies a resource limit.\n<em>foo</em> should be one of resource types such as <code>core</code>.\nThe corresponding value should be an integer or an array which have one or\ntwo integers: same as cur_limit and max_limit arguments for\nProcess.setrlimit.\n\n  cur, max = Process.getrlimit(:CORE)\n  pid = spawn(command, :rlimit_core=>[0,max]) # disable core temporary.\n  pid = spawn(command, :rlimit_core=>max) # enable core dump\n  pid = spawn(command, :rlimit_core=>0) # never dump core.\n\nThe <code>:umask</code> key in +options+ specifies the umask.\n\n  pid = spawn(command, :umask=>077)\n\nThe :in, :out, :err, an integer, an IO and an array key specifies a redirection.\nThe redirection maps a file descriptor in the child process.\n\nFor example, stderr can be merged into stdout as follows:\n\n  pid = spawn(command, :err=>:out)\n  pid = spawn(command, 2=>1)\n  pid = spawn(command, STDERR=>:out)\n  pid = spawn(command, STDERR=>STDOUT)\n\nThe hash keys specifies a file descriptor\nin the child process started by <code>spawn</code>.\n:err, 2 and STDERR specifies the standard error stream (stderr).\n\nThe hash values specifies a file descriptor\nin the parent process which invokes <code>spawn</code>.\n:out, 1 and STDOUT specifies the standard output stream (stdout).\n\nIn the above example,\nthe standard output in the child process is not specified.\nSo it is inherited from the parent process.\n\nThe standard input stream (stdin) can be specified by :in, 0 and STDIN.\n\nA filename can be specified as a hash value.\n\n  pid = spawn(command, :in=>\"/dev/null\") # read mode\n  pid = spawn(command, :out=>\"/dev/null\") # write mode\n  pid = spawn(command, :err=>\"log\") # write mode\n  pid = spawn(command, [:out, :err]=>\"/dev/null\") # write mode\n  pid = spawn(command, 3=>\"/dev/null\") # read mode\n\nFor stdout and stderr (and combination of them),\nit is opened in write mode.\nOtherwise read mode is used.\n\nFor specifying flags and permission of file creation explicitly,\nan array is used instead.\n\n  pid = spawn(command, :in=>[\"file\"]) # read mode is assumed\n  pid = spawn(command, :in=>[\"file\", \"r\"])\n  pid = spawn(command, :out=>[\"log\", \"w\"]) # 0644 assumed\n  pid = spawn(command, :out=>[\"log\", \"w\", 0600])\n  pid = spawn(command, :out=>[\"log\", File::WRONLY|File::EXCL|File::CREAT, 0600])\n\nThe array specifies a filename, flags and permission.\nThe flags can be a string or an integer.\nIf the flags is omitted or nil, File::RDONLY is assumed.\nThe permission should be an integer.\nIf the permission is omitted or nil, 0644 is assumed.\n\nIf an array of IOs and integers are specified as a hash key,\nall the elements are redirected.\n\n  # stdout and stderr is redirected to log file.\n  # The file \"log\" is opened just once.\n  pid = spawn(command, [:out, :err]=>[\"log\", \"w\"])\n\nAnother way to merge multiple file descriptors is [:child, fd].\n\\[:child, fd] means the file descriptor in the child process.\nThis is different from fd.\nFor example, :err=>:out means redirecting child stderr to parent stdout.\nBut :err=>[:child, :out] means redirecting child stderr to child stdout.\nThey differ if stdout is redirected in the child process as follows.\n\n  # stdout and stderr is redirected to log file.\n  # The file \"log\" is opened just once.\n  pid = spawn(command, :out=>[\"log\", \"w\"], :err=>[:child, :out])\n\n\\[:child, :out] can be used to merge stderr into stdout in IO.popen.\nIn this case, IO.popen redirects stdout to a pipe in the child process\nand [:child, :out] refers the redirected stdout.\n\n  io = IO.popen([\"sh\", \"-c\", \"echo out; echo err >&2\", :err=>[:child, :out]])\n  p io.read #=> \"out\\nerr\\n\"\n\nThe <code>:chdir</code> key in +options+ specifies the current directory.\n\n  pid = spawn(command, :chdir=>\"/var/tmp\")\n\nspawn closes all non-standard unspecified descriptors by default.\nThe \"standard\" descriptors are 0, 1 and 2.\nThis behavior is specified by :close_others option.\n:close_others doesn't affect the standard descriptors which are\nclosed only if :close is specified explicitly.\n\n  pid = spawn(command, :close_others=>true)  # close 3,4,5,... (default)\n  pid = spawn(command, :close_others=>false) # don't close 3,4,5,...\n\n:close_others is true by default for spawn and IO.popen.\n\nNote that fds which close-on-exec flag is already set are closed\nregardless of :close_others option.\n\nSo IO.pipe and spawn can be used as IO.popen.\n\n  # similar to r = IO.popen(command)\n  r, w = IO.pipe\n  pid = spawn(command, :out=>w)   # r, w is closed in the child process.\n  w.close\n\n:close is specified as a hash value to close a fd individually.\n\n  f = open(foo)\n  system(command, f=>:close)        # don't inherit f.\n\nIf a file descriptor need to be inherited,\nio=>io can be used.\n\n  # valgrind has --log-fd option for log destination.\n  # log_w=>log_w indicates log_w.fileno inherits to child process.\n  log_r, log_w = IO.pipe\n  pid = spawn(\"valgrind\", \"--log-fd=#{log_w.fileno}\", \"echo\", \"a\", log_w=>log_w)\n  log_w.close\n  p log_r.read\n\nIt is also possible to exchange file descriptors.\n\n  pid = spawn(command, :out=>:err, :err=>:out)\n\nThe hash keys specify file descriptors in the child process.\nThe hash values specifies file descriptors in the parent process.\nSo the above specifies exchanging stdout and stderr.\nInternally, +spawn+ uses an extra file descriptor to resolve such cyclic\nfile descriptor mapping.\n\nSee <code>Kernel.exec</code> for the standard shell.","name":"spawn","namespace":"Process","path":"Process.spawn","type":"module_function","visibility":"public"},"Process.times":{"description":"Returns a <code>Tms</code> structure (see <code>Process::Tms</code>)\nthat contains user and system CPU times for this process,\nand also for children processes.\n\n   t = Process.times\n   [ t.utime, t.stime, t.cutime, t.cstime ]   #=> [0.0, 0.02, 0.00, 0.00]","name":"times","namespace":"Process","path":"Process.times","type":"module_function","visibility":"public"},"Process.uid":{"description":"Returns the (real) user ID of this process.\n\n   Process.uid   #=> 501","name":"uid","namespace":"Process","path":"Process.uid","type":"module_function","visibility":"public"},"Process.uid=":{"description":"Sets the (user) user ID for this process. Not available on all\nplatforms.","name":"uid=","namespace":"Process","path":"Process.uid=","type":"module_function","visibility":"public"},"Process.wait":{"description":"Waits for a child process to exit, returns its process id, and\nsets <code>$?</code> to a <code>Process::Status</code> object\ncontaining information on that process. Which child it waits on\ndepends on the value of _pid_:\n\n> 0::   Waits for the child whose process ID equals _pid_.\n\n0::     Waits for any child whose process group ID equals that of the\n        calling process.\n\n-1::    Waits for any child process (the default if no _pid_ is\n        given).\n\n< -1::  Waits for any child whose process group ID equals the absolute\n        value of _pid_.\n\nThe _flags_ argument may be a logical or of the flag values\n<code>Process::WNOHANG</code> (do not block if no child available)\nor <code>Process::WUNTRACED</code> (return stopped children that\nhaven't been reported). Not all flags are available on all\nplatforms, but a flag value of zero will work on all platforms.\n\nCalling this method raises a SystemCallError if there are no child\nprocesses. Not available on all platforms.\n\n   include Process\n   fork { exit 99 }                 #=> 27429\n   wait                             #=> 27429\n   $?.exitstatus                    #=> 99\n\n   pid = fork { sleep 3 }           #=> 27440\n   Time.now                         #=> 2008-03-08 19:56:16 +0900\n   waitpid(pid, Process::WNOHANG)   #=> nil\n   Time.now                         #=> 2008-03-08 19:56:16 +0900\n   waitpid(pid, 0)                  #=> 27440\n   Time.now                         #=> 2008-03-08 19:56:19 +0900","name":"wait","namespace":"Process","path":"Process.wait","type":"module_function","visibility":"public"},"Process.wait2":{"description":"Waits for a child process to exit (see Process::waitpid for exact\nsemantics) and returns an array containing the process id and the\nexit status (a <code>Process::Status</code> object) of that\nchild. Raises a SystemCallError if there are no child processes.\n\n   Process.fork { exit 99 }   #=> 27437\n   pid, status = Process.wait2\n   pid                        #=> 27437\n   status.exitstatus          #=> 99","name":"wait2","namespace":"Process","path":"Process.wait2","type":"module_function","visibility":"public"},"Process.waitall":{"description":"Waits for all children, returning an array of\n_pid_/_status_ pairs (where _status_ is a\n<code>Process::Status</code> object).\n\n   fork { sleep 0.2; exit 2 }   #=> 27432\n   fork { sleep 0.1; exit 1 }   #=> 27433\n   fork {            exit 0 }   #=> 27434\n   p Process.waitall\n\n<em>produces</em>:\n\n   [[30982, #<Process::Status: pid 30982 exit 0>],\n    [30979, #<Process::Status: pid 30979 exit 1>],\n    [30976, #<Process::Status: pid 30976 exit 2>]]","name":"waitall","namespace":"Process","path":"Process.waitall","type":"module_function","visibility":"public"},"Process.waitpid":{"description":"Waits for a child process to exit, returns its process id, and\nsets <code>$?</code> to a <code>Process::Status</code> object\ncontaining information on that process. Which child it waits on\ndepends on the value of _pid_:\n\n> 0::   Waits for the child whose process ID equals _pid_.\n\n0::     Waits for any child whose process group ID equals that of the\n        calling process.\n\n-1::    Waits for any child process (the default if no _pid_ is\n        given).\n\n< -1::  Waits for any child whose process group ID equals the absolute\n        value of _pid_.\n\nThe _flags_ argument may be a logical or of the flag values\n<code>Process::WNOHANG</code> (do not block if no child available)\nor <code>Process::WUNTRACED</code> (return stopped children that\nhaven't been reported). Not all flags are available on all\nplatforms, but a flag value of zero will work on all platforms.\n\nCalling this method raises a SystemCallError if there are no child\nprocesses. Not available on all platforms.\n\n   include Process\n   fork { exit 99 }                 #=> 27429\n   wait                             #=> 27429\n   $?.exitstatus                    #=> 99\n\n   pid = fork { sleep 3 }           #=> 27440\n   Time.now                         #=> 2008-03-08 19:56:16 +0900\n   waitpid(pid, Process::WNOHANG)   #=> nil\n   Time.now                         #=> 2008-03-08 19:56:16 +0900\n   waitpid(pid, 0)                  #=> 27440\n   Time.now                         #=> 2008-03-08 19:56:19 +0900","name":"waitpid","namespace":"Process","path":"Process.waitpid","type":"module_function","visibility":"public"},"Process.waitpid2":{"description":"Waits for a child process to exit (see Process::waitpid for exact\nsemantics) and returns an array containing the process id and the\nexit status (a <code>Process::Status</code> object) of that\nchild. Raises a SystemCallError if there are no child processes.\n\n   Process.fork { exit 99 }   #=> 27437\n   pid, status = Process.wait2\n   pid                        #=> 27437\n   status.exitstatus          #=> 99","name":"waitpid2","namespace":"Process","path":"Process.waitpid2","type":"module_function","visibility":"public"},"Process::CLOCK_BOOTTIME":{"description":"see Process.clock_gettime","name":"CLOCK_BOOTTIME","namespace":"Process","path":"Process::CLOCK_BOOTTIME","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::CLOCK_BOOTTIME_ALARM":{"description":"see Process.clock_gettime","name":"CLOCK_BOOTTIME_ALARM","namespace":"Process","path":"Process::CLOCK_BOOTTIME_ALARM","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::CLOCK_MONOTONIC":{"description":"see Process.clock_gettime","name":"CLOCK_MONOTONIC","namespace":"Process","path":"Process::CLOCK_MONOTONIC","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::CLOCK_MONOTONIC_COARSE":{"description":"see Process.clock_gettime","name":"CLOCK_MONOTONIC_COARSE","namespace":"Process","path":"Process::CLOCK_MONOTONIC_COARSE","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::CLOCK_MONOTONIC_FAST":{"description":"see Process.clock_gettime","name":"CLOCK_MONOTONIC_FAST","namespace":"Process","path":"Process::CLOCK_MONOTONIC_FAST","type":"constant","return":null,"visibility":"public"},"Process::CLOCK_MONOTONIC_PRECISE":{"description":"see Process.clock_gettime","name":"CLOCK_MONOTONIC_PRECISE","namespace":"Process","path":"Process::CLOCK_MONOTONIC_PRECISE","type":"constant","return":null,"visibility":"public"},"Process::CLOCK_MONOTONIC_RAW":{"description":"see Process.clock_gettime","name":"CLOCK_MONOTONIC_RAW","namespace":"Process","path":"Process::CLOCK_MONOTONIC_RAW","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::CLOCK_MONOTONIC_RAW_APPROX":{"description":"see Process.clock_gettime","name":"CLOCK_MONOTONIC_RAW_APPROX","namespace":"Process","path":"Process::CLOCK_MONOTONIC_RAW_APPROX","type":"constant","return":null,"visibility":"public"},"Process::CLOCK_PROCESS_CPUTIME_ID":{"description":"see Process.clock_gettime","name":"CLOCK_PROCESS_CPUTIME_ID","namespace":"Process","path":"Process::CLOCK_PROCESS_CPUTIME_ID","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::CLOCK_PROF":{"description":"see Process.clock_gettime","name":"CLOCK_PROF","namespace":"Process","path":"Process::CLOCK_PROF","type":"constant","return":null,"visibility":"public"},"Process::CLOCK_REALTIME":{"description":"see Process.clock_gettime","name":"CLOCK_REALTIME","namespace":"Process","path":"Process::CLOCK_REALTIME","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::CLOCK_REALTIME_ALARM":{"description":"see Process.clock_gettime","name":"CLOCK_REALTIME_ALARM","namespace":"Process","path":"Process::CLOCK_REALTIME_ALARM","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::CLOCK_REALTIME_COARSE":{"description":"see Process.clock_gettime","name":"CLOCK_REALTIME_COARSE","namespace":"Process","path":"Process::CLOCK_REALTIME_COARSE","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::CLOCK_REALTIME_FAST":{"description":"see Process.clock_gettime","name":"CLOCK_REALTIME_FAST","namespace":"Process","path":"Process::CLOCK_REALTIME_FAST","type":"constant","return":null,"visibility":"public"},"Process::CLOCK_REALTIME_PRECISE":{"description":"see Process.clock_gettime","name":"CLOCK_REALTIME_PRECISE","namespace":"Process","path":"Process::CLOCK_REALTIME_PRECISE","type":"constant","return":null,"visibility":"public"},"Process::CLOCK_SECOND":{"description":"see Process.clock_gettime","name":"CLOCK_SECOND","namespace":"Process","path":"Process::CLOCK_SECOND","type":"constant","return":null,"visibility":"public"},"Process::CLOCK_THREAD_CPUTIME_ID":{"description":"see Process.clock_gettime","name":"CLOCK_THREAD_CPUTIME_ID","namespace":"Process","path":"Process::CLOCK_THREAD_CPUTIME_ID","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::CLOCK_UPTIME":{"description":"see Process.clock_gettime","name":"CLOCK_UPTIME","namespace":"Process","path":"Process::CLOCK_UPTIME","type":"constant","return":null,"visibility":"public"},"Process::CLOCK_UPTIME_FAST":{"description":"see Process.clock_gettime","name":"CLOCK_UPTIME_FAST","namespace":"Process","path":"Process::CLOCK_UPTIME_FAST","type":"constant","return":null,"visibility":"public"},"Process::CLOCK_UPTIME_PRECISE":{"description":"see Process.clock_gettime","name":"CLOCK_UPTIME_PRECISE","namespace":"Process","path":"Process::CLOCK_UPTIME_PRECISE","type":"constant","return":null,"visibility":"public"},"Process::CLOCK_UPTIME_RAW":{"description":"see Process.clock_gettime","name":"CLOCK_UPTIME_RAW","namespace":"Process","path":"Process::CLOCK_UPTIME_RAW","type":"constant","return":null,"visibility":"public"},"Process::CLOCK_UPTIME_RAW_APPROX":{"description":"see Process.clock_gettime","name":"CLOCK_UPTIME_RAW_APPROX","namespace":"Process","path":"Process::CLOCK_UPTIME_RAW_APPROX","type":"constant","return":null,"visibility":"public"},"Process::CLOCK_VIRTUAL":{"description":"see Process.clock_gettime","name":"CLOCK_VIRTUAL","namespace":"Process","path":"Process::CLOCK_VIRTUAL","type":"constant","return":null,"visibility":"public"},"Process::GID":{"description":"******************************************************************\n\n\n  The <code>Process::GID</code> module contains a collection of\n  module functions which can be used to portably get, set, and\n  switch the current process's real, effective, and saved group IDs.","name":"GID","namespace":"Process","path":"Process::GID","type":"class","visibility":"public"},"Process::PRIO_PGRP":{"description":"see Process.setpriority","name":"PRIO_PGRP","namespace":"Process","path":"Process::PRIO_PGRP","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::PRIO_PROCESS":{"description":"see Process.setpriority","name":"PRIO_PROCESS","namespace":"Process","path":"Process::PRIO_PROCESS","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::PRIO_USER":{"description":"see Process.setpriority","name":"PRIO_USER","namespace":"Process","path":"Process::PRIO_USER","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIMIT_AS":{"description":"Maximum size of the process's virtual memory (address space) in bytes.\n\nsee the system getrlimit(2) manual for details.","name":"RLIMIT_AS","namespace":"Process","path":"Process::RLIMIT_AS","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIMIT_CORE":{"description":"Maximum size of the core file.\n\nsee the system getrlimit(2) manual for details.","name":"RLIMIT_CORE","namespace":"Process","path":"Process::RLIMIT_CORE","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIMIT_CPU":{"description":"CPU time limit in seconds.\n\nsee the system getrlimit(2) manual for details.","name":"RLIMIT_CPU","namespace":"Process","path":"Process::RLIMIT_CPU","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIMIT_DATA":{"description":"Maximum size of the process's data segment.\n\nsee the system getrlimit(2) manual for details.","name":"RLIMIT_DATA","namespace":"Process","path":"Process::RLIMIT_DATA","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIMIT_FSIZE":{"description":"Maximum size of files that the process may create.\n\nsee the system getrlimit(2) manual for details.","name":"RLIMIT_FSIZE","namespace":"Process","path":"Process::RLIMIT_FSIZE","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIMIT_MEMLOCK":{"description":"Maximum number of bytes of memory that may be locked into RAM.\n\nsee the system getrlimit(2) manual for details.","name":"RLIMIT_MEMLOCK","namespace":"Process","path":"Process::RLIMIT_MEMLOCK","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIMIT_MSGQUEUE":{"description":"Specifies the limit on the number of bytes that can be allocated\nfor POSIX message queues for the real user ID of the calling process.\n\nsee the system getrlimit(2) manual for details.","name":"RLIMIT_MSGQUEUE","namespace":"Process","path":"Process::RLIMIT_MSGQUEUE","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIMIT_NICE":{"description":"Specifies a ceiling to which the process's nice value can be raised.\n\nsee the system getrlimit(2) manual for details.","name":"RLIMIT_NICE","namespace":"Process","path":"Process::RLIMIT_NICE","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIMIT_NOFILE":{"description":"Specifies a value one greater than the maximum file descriptor\nnumber that can be opened by this process.\n\nsee the system getrlimit(2) manual for details.","name":"RLIMIT_NOFILE","namespace":"Process","path":"Process::RLIMIT_NOFILE","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIMIT_NPROC":{"description":"The maximum number of processes that can be created for the\nreal user ID of the calling process.\n\nsee the system getrlimit(2) manual for details.","name":"RLIMIT_NPROC","namespace":"Process","path":"Process::RLIMIT_NPROC","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIMIT_RSS":{"description":"Specifies the limit (in pages) of the process's resident set.\n\nsee the system getrlimit(2) manual for details.","name":"RLIMIT_RSS","namespace":"Process","path":"Process::RLIMIT_RSS","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIMIT_RTPRIO":{"description":"Specifies a ceiling on the real-time priority that may be set for this process.\n\nsee the system getrlimit(2) manual for details.","name":"RLIMIT_RTPRIO","namespace":"Process","path":"Process::RLIMIT_RTPRIO","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIMIT_RTTIME":{"description":"Specifies limit on CPU time this process scheduled under a real-time\nscheduling policy can consume.\n\nsee the system getrlimit(2) manual for details.","name":"RLIMIT_RTTIME","namespace":"Process","path":"Process::RLIMIT_RTTIME","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIMIT_SBSIZE":{"description":"Maximum size of the socket buffer.","name":"RLIMIT_SBSIZE","namespace":"Process","path":"Process::RLIMIT_SBSIZE","type":"constant","return":null,"visibility":"public"},"Process::RLIMIT_SIGPENDING":{"description":"Specifies a limit on the number of signals that may be queued for\nthe real user ID of the calling process.\n\nsee the system getrlimit(2) manual for details.","name":"RLIMIT_SIGPENDING","namespace":"Process","path":"Process::RLIMIT_SIGPENDING","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIMIT_STACK":{"description":"Maximum size of the stack, in bytes.\n\nsee the system getrlimit(2) manual for details.","name":"RLIMIT_STACK","namespace":"Process","path":"Process::RLIMIT_STACK","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::RLIM_INFINITY":{"description":"see Process.setrlimit","name":"RLIM_INFINITY","namespace":"Process","path":"Process::RLIM_INFINITY","type":"constant","return":["Bignum",""],"visibility":"public"},"Process::RLIM_SAVED_CUR":{"description":"see Process.setrlimit","name":"RLIM_SAVED_CUR","namespace":"Process","path":"Process::RLIM_SAVED_CUR","type":"constant","return":["Bignum",""],"visibility":"public"},"Process::RLIM_SAVED_MAX":{"description":"see Process.setrlimit","name":"RLIM_SAVED_MAX","namespace":"Process","path":"Process::RLIM_SAVED_MAX","type":"constant","return":["Bignum",""],"visibility":"public"},"Process::Status":{"description":"*******************************************************************\n\n\n  <code>Process::Status</code> encapsulates the information on the\n  status of a running or terminated system process. The built-in\n  variable <code>$?</code> is either +nil+ or a\n  <code>Process::Status</code> object.\n\n     fork { exit 99 }   #=> 26557\n     Process.wait       #=> 26557\n     $?.class           #=> Process::Status\n     $?.to_i            #=> 25344\n     $? >> 8            #=> 99\n     $?.stopped?        #=> false\n     $?.exited?         #=> true\n     $?.exitstatus      #=> 99\n\n  Posix systems record information on processes using a 16-bit\n  integer.  The lower bits record the process status (stopped,\n  exited, signaled) and the upper bits possibly contain additional\n  information (for example the program's return code in the case of\n  exited processes). Pre Ruby 1.8, these bits were exposed directly\n  to the Ruby program. Ruby now encapsulates these in a\n  <code>Process::Status</code> object. To maximize compatibility,\n  however, these objects retain a bit-oriented interface. In the\n  descriptions that follow, when we talk about the integer value of\n  _stat_, we're referring to this 16 bit value.","name":"Status","namespace":"Process","path":"Process::Status","type":"class","visibility":"public"},"Process::Status#&":{"description":"Logical AND of the bits in _stat_ with <em>num</em>.\n\n   fork { exit 0x37 }\n   Process.wait\n   sprintf('%04x', $?.to_i)       #=> \"3700\"\n   sprintf('%04x', $? & 0x1e00)   #=> \"1600\"","name":"&","namespace":"Process::Status","path":"Process::Status#&","type":"instance_method","visibility":"public"},"Process::Status#==":{"description":"Returns +true+ if the integer value of _stat_\nequals <em>other</em>.","name":"==","namespace":"Process::Status","path":"Process::Status#==","type":"instance_method","visibility":"public"},"Process::Status#>>":{"description":"Shift the bits in _stat_ right <em>num</em> places.\n\n   fork { exit 99 }   #=> 26563\n   Process.wait       #=> 26563\n   $?.to_i            #=> 25344\n   $? >> 8            #=> 99","name":">>","namespace":"Process::Status","path":"Process::Status#>>","type":"instance_method","visibility":"public"},"Process::Status#coredump?":{"description":"Returns +true+ if _stat_ generated a coredump\nwhen it terminated. Not available on all platforms.","name":"coredump?","namespace":"Process::Status","path":"Process::Status#coredump?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Process::Status#exited?":{"description":"Returns +true+ if _stat_ exited normally (for\nexample using an <code>exit()</code> call or finishing the\nprogram).","name":"exited?","namespace":"Process::Status","path":"Process::Status#exited?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Process::Status#exitstatus":{"description":"Returns the least significant eight bits of the return code of\n_stat_. Only available if <code>exited?</code> is\n+true+.\n\n   fork { }           #=> 26572\n   Process.wait       #=> 26572\n   $?.exited?         #=> true\n   $?.exitstatus      #=> 0\n\n   fork { exit 99 }   #=> 26573\n   Process.wait       #=> 26573\n   $?.exited?         #=> true\n   $?.exitstatus      #=> 99","name":"exitstatus","namespace":"Process::Status","path":"Process::Status#exitstatus","type":"instance_method","visibility":"public"},"Process::Status#inspect":{"description":"Override the inspection method.\n\n  system(\"false\")\n  p $?.inspect #=> \"#<Process::Status: pid 12861 exit 1>\"","name":"inspect","namespace":"Process::Status","path":"Process::Status#inspect","type":"instance_method","visibility":"public"},"Process::Status#pid":{"description":"Returns the process ID that this status object represents.\n\n   fork { exit }   #=> 26569\n   Process.wait    #=> 26569\n   $?.pid          #=> 26569","name":"pid","namespace":"Process::Status","path":"Process::Status#pid","type":"instance_method","visibility":"public"},"Process::Status#signaled?":{"description":"Returns +true+ if _stat_ terminated because of\nan uncaught signal.","name":"signaled?","namespace":"Process::Status","path":"Process::Status#signaled?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Process::Status#stopped?":{"description":"Returns +true+ if this process is stopped. This is only\nreturned if the corresponding <code>wait</code> call had the\n<code>WUNTRACED</code> flag set.","name":"stopped?","namespace":"Process::Status","path":"Process::Status#stopped?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Process::Status#stopsig":{"description":"Returns the number of the signal that caused _stat_ to stop\n(or +nil+ if self is not stopped).","name":"stopsig","namespace":"Process::Status","path":"Process::Status#stopsig","type":"instance_method","visibility":"public"},"Process::Status#success?":{"description":"Returns +true+ if _stat_ is successful, +false+ if not.\nReturns +nil+ if <code>exited?</code> is not +true+.","name":"success?","namespace":"Process::Status","path":"Process::Status#success?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Process::Status#termsig":{"description":"Returns the number of the signal that caused _stat_ to\nterminate (or +nil+ if self was not terminated by an\nuncaught signal).","name":"termsig","namespace":"Process::Status","path":"Process::Status#termsig","type":"instance_method","visibility":"public"},"Process::Status#to_i":{"description":"Returns the bits in _stat_ as a <code>Integer</code>. Poking\naround in these bits is platform dependent.\n\n   fork { exit 0xab }         #=> 26566\n   Process.wait               #=> 26566\n   sprintf('%04x', $?.to_i)   #=> \"ab00\"","name":"to_i","namespace":"Process::Status","path":"Process::Status#to_i","type":"instance_method","visibility":"public"},"Process::Status#to_s":{"description":"Show pid and exit status as a string.\n\n  system(\"false\")\n  p $?.to_s         #=> \"pid 12766 exit 1\"","name":"to_s","namespace":"Process::Status","path":"Process::Status#to_s","type":"instance_method","visibility":"public"},"Process::Sys":{"description":"*******************************************************************\n\n  The <code>Process::Sys</code> module contains UID and GID\n  functions which provide direct bindings to the system calls of the\n  same names instead of the more-portable versions of the same\n  functionality found in the <code>Process</code>,\n  <code>Process::UID</code>, and <code>Process::GID</code> modules.","name":"Sys","namespace":"Process","path":"Process::Sys","type":"class","visibility":"public"},"Process::UID":{"description":"******************************************************************\n\n\n  The <code>Process::UID</code> module contains a collection of\n  module functions which can be used to portably get, set, and\n  switch the current process's real, effective, and saved user IDs.","name":"UID","namespace":"Process","path":"Process::UID","type":"class","visibility":"public"},"Process::WNOHANG":{"description":"see Process.wait","name":"WNOHANG","namespace":"Process","path":"Process::WNOHANG","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::WUNTRACED":{"description":"see Process.wait","name":"WUNTRACED","namespace":"Process","path":"Process::WUNTRACED","type":"constant","return":["Fixnum",""],"visibility":"public"},"Process::Waiter":{"description":"","name":"Waiter","namespace":"Process","path":"Process::Waiter","type":"class","visibility":"public"},"Process::Waiter#pid":{"description":"","name":"pid","namespace":"Process::Waiter","path":"Process::Waiter#pid","type":"instance_method","visibility":"public"},"Signal":{"description":"","name":"Signal","namespace":"","path":"Signal","type":"module","visibility":"public"},"Signal#list":{"description":"Returns a list of signal names mapped to the corresponding\nunderlying signal numbers.\n\n  Signal.list   #=> {\"EXIT\"=>0, \"HUP\"=>1, \"INT\"=>2, \"QUIT\"=>3, \"ILL\"=>4, \"TRAP\"=>5, \"IOT\"=>6, \"ABRT\"=>6, \"FPE\"=>8, \"KILL\"=>9, \"BUS\"=>7, \"SEGV\"=>11, \"SYS\"=>31, \"PIPE\"=>13, \"ALRM\"=>14, \"TERM\"=>15, \"URG\"=>23, \"STOP\"=>19, \"TSTP\"=>20, \"CONT\"=>18, \"CHLD\"=>17, \"CLD\"=>17, \"TTIN\"=>21, \"TTOU\"=>22, \"IO\"=>29, \"XCPU\"=>24, \"XFSZ\"=>25, \"VTALRM\"=>26, \"PROF\"=>27, \"WINCH\"=>28, \"USR1\"=>10, \"USR2\"=>12, \"PWR\"=>30, \"POLL\"=>29}","name":"list","namespace":"Signal","path":"Signal#list","type":"module_function","visibility":"private"},"Signal#signame":{"description":"Convert signal number to signal name.\n Returns +nil+ if the signo is an invalid signal number.\n\n    Signal.trap(\"INT\") { |signo| puts Signal.signame(signo) }\n    Process.kill(\"INT\", 0)\n\n <em>produces:</em>\n\n    INT","name":"signame","namespace":"Signal","path":"Signal#signame","type":"module_function","visibility":"private"},"Signal#trap":{"description":"Specifies the handling of signals. The first parameter is a signal\nname (a string such as ``SIGALRM'', ``SIGUSR1'', and so on) or a\nsignal number. The characters ``SIG'' may be omitted from the\nsignal name. The command or block specifies code to be run when the\nsignal is raised.\nIf the command is the string ``IGNORE'' or ``SIG_IGN'', the signal\nwill be ignored.\nIf the command is ``DEFAULT'' or ``SIG_DFL'', the Ruby's default handler\nwill be invoked.\nIf the command is ``EXIT'', the script will be terminated by the signal.\nIf the command is ``SYSTEM_DEFAULT'', the operating system's default\nhandler will be invoked.\nOtherwise, the given command or block will be run.\nThe special signal name ``EXIT'' or signal number zero will be\ninvoked just prior to program termination.\ntrap returns the previous handler for the given signal.\n\n    Signal.trap(0, proc { puts \"Terminating: #{$$}\" })\n    Signal.trap(\"CLD\")  { puts \"Child died\" }\n    fork && Process.wait\n\nproduces:\n    Terminating: 27461\n    Child died\n    Terminating: 27460","name":"trap","namespace":"Signal","path":"Signal#trap","type":"module_function","visibility":"private"},"Signal.list":{"description":"Returns a list of signal names mapped to the corresponding\nunderlying signal numbers.\n\n  Signal.list   #=> {\"EXIT\"=>0, \"HUP\"=>1, \"INT\"=>2, \"QUIT\"=>3, \"ILL\"=>4, \"TRAP\"=>5, \"IOT\"=>6, \"ABRT\"=>6, \"FPE\"=>8, \"KILL\"=>9, \"BUS\"=>7, \"SEGV\"=>11, \"SYS\"=>31, \"PIPE\"=>13, \"ALRM\"=>14, \"TERM\"=>15, \"URG\"=>23, \"STOP\"=>19, \"TSTP\"=>20, \"CONT\"=>18, \"CHLD\"=>17, \"CLD\"=>17, \"TTIN\"=>21, \"TTOU\"=>22, \"IO\"=>29, \"XCPU\"=>24, \"XFSZ\"=>25, \"VTALRM\"=>26, \"PROF\"=>27, \"WINCH\"=>28, \"USR1\"=>10, \"USR2\"=>12, \"PWR\"=>30, \"POLL\"=>29}","name":"list","namespace":"Signal","path":"Signal.list","type":"module_function","visibility":"public"},"Signal.signame":{"description":"Convert signal number to signal name.\n Returns +nil+ if the signo is an invalid signal number.\n\n    Signal.trap(\"INT\") { |signo| puts Signal.signame(signo) }\n    Process.kill(\"INT\", 0)\n\n <em>produces:</em>\n\n    INT","name":"signame","namespace":"Signal","path":"Signal.signame","type":"module_function","visibility":"public"},"Signal.trap":{"description":"Specifies the handling of signals. The first parameter is a signal\nname (a string such as ``SIGALRM'', ``SIGUSR1'', and so on) or a\nsignal number. The characters ``SIG'' may be omitted from the\nsignal name. The command or block specifies code to be run when the\nsignal is raised.\nIf the command is the string ``IGNORE'' or ``SIG_IGN'', the signal\nwill be ignored.\nIf the command is ``DEFAULT'' or ``SIG_DFL'', the Ruby's default handler\nwill be invoked.\nIf the command is ``EXIT'', the script will be terminated by the signal.\nIf the command is ``SYSTEM_DEFAULT'', the operating system's default\nhandler will be invoked.\nOtherwise, the given command or block will be run.\nThe special signal name ``EXIT'' or signal number zero will be\ninvoked just prior to program termination.\ntrap returns the previous handler for the given signal.\n\n    Signal.trap(0, proc { puts \"Terminating: #{$$}\" })\n    Signal.trap(\"CLD\")  { puts \"Child died\" }\n    fork && Process.wait\n\nproduces:\n    Terminating: 27461\n    Child died\n    Terminating: 27460","name":"trap","namespace":"Signal","path":"Signal.trap","type":"module_function","visibility":"public"},"Symbol":{"description":"********************************************************************\n\n  <code>Symbol</code> objects represent names and some strings\n  inside the Ruby\n  interpreter. They are generated using the <code>:name</code> and\n  <code>:\"string\"</code> literals\n  syntax, and by the various <code>to_sym</code> methods. The same\n  <code>Symbol</code> object will be created for a given name or string\n  for the duration of a program's execution, regardless of the context\n  or meaning of that name. Thus if <code>Fred</code> is a constant in\n  one context, a method in another, and a class in a third, the\n  <code>Symbol</code> <code>:Fred</code> will be the same object in\n  all three contexts.\n\n     module One\n       class Fred\n       end\n       $f1 = :Fred\n     end\n     module Two\n       Fred = 1\n       $f2 = :Fred\n     end\n     def Fred()\n     end\n     $f3 = :Fred\n     $f1.object_id   #=> 2514190\n     $f2.object_id   #=> 2514190\n     $f3.object_id   #=> 2514190","name":"Symbol","namespace":"","path":"Symbol","type":"class","visibility":"public"},"Symbol#<=>":{"description":"Compares +symbol+ with +other_symbol+ after calling #to_s on each of the\nsymbols. Returns -1, 0, +1, or +nil+ depending on whether +symbol+ is\nless than, equal to, or greater than +other_symbol+.\n\n+nil+ is returned if the two values are incomparable.\n\nSee String#<=> for more information.","name":"<=>","namespace":"Symbol","path":"Symbol#<=>","type":"instance_method","visibility":"public"},"Symbol#==":{"description":"","name":"==","namespace":"Symbol","path":"Symbol#==","type":"instance_method","visibility":"public"},"Symbol#===":{"description":"","name":"===","namespace":"Symbol","path":"Symbol#===","type":"instance_method","visibility":"public"},"Symbol#=~":{"description":"Returns <code>sym.to_s =~ obj</code>.","name":"=~","namespace":"Symbol","path":"Symbol#=~","type":"instance_method","visibility":"public"},"Symbol#[]":{"description":"Returns <code>sym.to_s[]</code>.","name":"[]","namespace":"Symbol","path":"Symbol#[]","type":"instance_method","visibility":"public"},"Symbol#capitalize":{"description":"Same as <code>sym.to_s.capitalize.intern</code>.","name":"capitalize","namespace":"Symbol","path":"Symbol#capitalize","type":"instance_method","visibility":"public"},"Symbol#casecmp":{"description":"Case-insensitive version of <code>Symbol#<=></code>.\nCurrently, case-insensitivity only works on characters A-Z/a-z,\nnot all of Unicode. This is different from Symbol#casecmp?.\n\n  :aBcDeF.casecmp(:abcde)     #=> 1\n  :aBcDeF.casecmp(:abcdef)    #=> 0\n  :aBcDeF.casecmp(:abcdefg)   #=> -1\n  :abcdef.casecmp(:ABCDEF)    #=> 0\n\n+nil+ is returned if the two symbols have incompatible encodings,\nor if +other_symbol+ is not a symbol.\n\n  :foo.casecmp(2)   #=> nil\n  \"\\u{e4 f6 fc}\".encode(\"ISO-8859-1\").to_sym.casecmp(:\"\\u{c4 d6 dc}\")   #=> nil","name":"casecmp","namespace":"Symbol","path":"Symbol#casecmp","type":"instance_method","visibility":"public"},"Symbol#casecmp?":{"description":"Returns +true+ if +sym+ and +other_symbol+ are equal after\nUnicode case folding, +false+ if they are not equal.\n\n  :aBcDeF.casecmp?(:abcde)     #=> false\n  :aBcDeF.casecmp?(:abcdef)    #=> true\n  :aBcDeF.casecmp?(:abcdefg)   #=> false\n  :abcdef.casecmp?(:ABCDEF)    #=> true\n  :\"\\u{e4 f6 fc}\".casecmp?(:\"\\u{c4 d6 dc}\")   #=> true\n\n+nil+ is returned if the two symbols have incompatible encodings,\nor if +other_symbol+ is not a symbol.\n\n  :foo.casecmp?(2)   #=> nil\n  \"\\u{e4 f6 fc}\".encode(\"ISO-8859-1\").to_sym.casecmp?(:\"\\u{c4 d6 dc}\")   #=> nil","name":"casecmp?","namespace":"Symbol","path":"Symbol#casecmp?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Symbol#downcase":{"description":"Same as <code>sym.to_s.downcase.intern</code>.","name":"downcase","namespace":"Symbol","path":"Symbol#downcase","type":"instance_method","visibility":"public"},"Symbol#empty?":{"description":"Returns whether _sym_ is :\"\" or not.","name":"empty?","namespace":"Symbol","path":"Symbol#empty?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Symbol#encoding":{"description":"Returns the Encoding object that represents the encoding of _sym_.","name":"encoding","namespace":"Symbol","path":"Symbol#encoding","type":"instance_method","visibility":"public"},"Symbol#id2name":{"description":"Returns the name or string corresponding to <i>sym</i>.\n\n   :fred.id2name   #=> \"fred\"\n   :ginger.to_s    #=> \"ginger\"","name":"id2name","namespace":"Symbol","path":"Symbol#id2name","type":"instance_method","visibility":"public"},"Symbol#inspect":{"description":"Returns the representation of <i>sym</i> as a symbol literal.\n\n   :fred.inspect   #=> \":fred\"","name":"inspect","namespace":"Symbol","path":"Symbol#inspect","type":"instance_method","visibility":"public"},"Symbol#intern":{"description":"In general, <code>to_sym</code> returns the <code>Symbol</code> corresponding\nto an object. As <i>sym</i> is already a symbol, <code>self</code> is returned\nin this case.","name":"intern","namespace":"Symbol","path":"Symbol#intern","type":"instance_method","visibility":"public"},"Symbol#length":{"description":"Same as <code>sym.to_s.length</code>.","name":"length","namespace":"Symbol","path":"Symbol#length","type":"instance_method","visibility":"public"},"Symbol#match":{"description":"Returns <code>sym.to_s.match</code>.","name":"match","namespace":"Symbol","path":"Symbol#match","type":"instance_method","visibility":"public"},"Symbol#match?":{"description":"Returns <code>sym.to_s.match?</code>.","name":"match?","namespace":"Symbol","path":"Symbol#match?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Symbol#next":{"description":"Same as <code>sym.to_s.succ.intern</code>.","name":"next","namespace":"Symbol","path":"Symbol#next","type":"instance_method","visibility":"public"},"Symbol#size":{"description":"Same as <code>sym.to_s.length</code>.","name":"size","namespace":"Symbol","path":"Symbol#size","type":"instance_method","visibility":"public"},"Symbol#slice":{"description":"Returns <code>sym.to_s[]</code>.","name":"slice","namespace":"Symbol","path":"Symbol#slice","type":"instance_method","visibility":"public"},"Symbol#succ":{"description":"Same as <code>sym.to_s.succ.intern</code>.","name":"succ","namespace":"Symbol","path":"Symbol#succ","type":"instance_method","visibility":"public"},"Symbol#swapcase":{"description":"Same as <code>sym.to_s.swapcase.intern</code>.","name":"swapcase","namespace":"Symbol","path":"Symbol#swapcase","type":"instance_method","visibility":"public"},"Symbol#to_proc":{"description":"Returns a _Proc_ object which respond to the given method by _sym_.\n\n  (1..3).collect(&:to_s)  #=> [\"1\", \"2\", \"3\"]","name":"to_proc","namespace":"Symbol","path":"Symbol#to_proc","type":"instance_method","visibility":"public"},"Symbol#to_s":{"description":"Returns the name or string corresponding to <i>sym</i>.\n\n   :fred.id2name   #=> \"fred\"\n   :ginger.to_s    #=> \"ginger\"","name":"to_s","namespace":"Symbol","path":"Symbol#to_s","type":"instance_method","visibility":"public"},"Symbol#to_sym":{"description":"In general, <code>to_sym</code> returns the <code>Symbol</code> corresponding\nto an object. As <i>sym</i> is already a symbol, <code>self</code> is returned\nin this case.","name":"to_sym","namespace":"Symbol","path":"Symbol#to_sym","type":"instance_method","visibility":"public"},"Symbol#upcase":{"description":"Same as <code>sym.to_s.upcase.intern</code>.","name":"upcase","namespace":"Symbol","path":"Symbol#upcase","type":"instance_method","visibility":"public"},"Symbol.all_symbols":{"description":"Returns an array of all the symbols currently in Ruby's symbol\ntable.\n\n   Symbol.all_symbols.size    #=> 903\n   Symbol.all_symbols[1,20]   #=> [:floor, :ARGV, :Binding, :symlink,\n                                   :chown, :EOFError, :$;, :String,\n                                   :LOCK_SH, :\"setuid?\", :$<,\n                                   :default_proc, :compact, :extend,\n                                   :Tms, :getwd, :$=, :ThreadGroup,\n                                   :wait2, :$>]","name":"all_symbols","namespace":"Symbol","path":"Symbol.all_symbols","type":"class_method","visibility":"public"},"UnicodeNormalize":{"description":"","name":"UnicodeNormalize","namespace":"","path":"UnicodeNormalize","type":"module","visibility":"public"},"Struct":{"description":"A Struct is a convenient way to bundle a number of attributes together,\nusing accessor methods, without having to write an explicit class.\n\nThe Struct class generates new subclasses that hold a set of members and\ntheir values.  For each member a reader and writer method is created\nsimilar to Module#attr_accessor.\n\n   Customer = Struct.new(:name, :address) do\n     def greeting\n       \"Hello #{name}!\"\n     end\n   end\n\n   dave = Customer.new(\"Dave\", \"123 Main\")\n   dave.name     #=> \"Dave\"\n   dave.greeting #=> \"Hello Dave!\"\n\nSee Struct::new for further examples of creating struct subclasses and\ninstances.\n\nIn the method descriptions that follow, a \"member\" parameter refers to a\nstruct member which is either a quoted string (<code>\"name\"</code>) or a\nSymbol (<code>:name</code>).","name":"Struct","namespace":"","path":"Struct","type":"class","visibility":"public"},"Struct#==":{"description":"Equality---Returns +true+ if +other+ has the same struct subclass and has\nequal member values (according to Object#==).\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe   = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joejr = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   jane  = Customer.new(\"Jane Doe\", \"456 Elm, Anytown NC\", 12345)\n   joe == joejr   #=> true\n   joe == jane    #=> false","name":"==","namespace":"Struct","path":"Struct#==","type":"instance_method","visibility":"public"},"Struct#[]":{"description":"Attribute Reference---Returns the value of the given struct +member+ or\nthe member at the given +index+.   Raises NameError if the +member+ does\nnot exist and IndexError if the +index+ is out of range.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n\n   joe[\"name\"]   #=> \"Joe Smith\"\n   joe[:name]    #=> \"Joe Smith\"\n   joe[0]        #=> \"Joe Smith\"","name":"[]","namespace":"Struct","path":"Struct#[]","type":"instance_method","visibility":"public"},"Struct#[]=":{"description":"Attribute Assignment---Sets the value of the given struct +member+ or\nthe member at the given +index+.  Raises NameError if the +member+ does not\nexist and IndexError if the +index+ is out of range.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n\n   joe[\"name\"] = \"Luke\"\n   joe[:zip]   = \"90210\"\n\n   joe.name   #=> \"Luke\"\n   joe.zip    #=> \"90210\"","name":"[]=","namespace":"Struct","path":"Struct#[]=","type":"instance_method","visibility":"public"},"Struct#dig":{"description":"Extracts the nested value specified by the sequence of +key+\nobjects by calling +dig+ at each step, returning +nil+ if any\nintermediate step is +nil+.\n\n  Foo = Struct.new(:a)\n  f = Foo.new(Foo.new({b: [1, 2, 3]}))\n\n  f.dig(:a, :a, :b, 0)    # => 1\n  f.dig(:b, 0)            # => nil\n  f.dig(:a, :a, :b, :c)   # TypeError: no implicit conversion of Symbol into Integer","name":"dig","namespace":"Struct","path":"Struct#dig","type":"instance_method","visibility":"public"},"Struct#each":{"description":"Yields the value of each struct member in order.  If no block is given an\nenumerator is returned.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.each {|x| puts(x) }\n\nProduces:\n\n   Joe Smith\n   123 Maple, Anytown NC\n   12345","name":"each","namespace":"Struct","path":"Struct#each","type":"instance_method","visibility":"public"},"Struct#each_pair":{"description":"Yields the name and value of each struct member in order.  If no block is\ngiven an enumerator is returned.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.each_pair {|name, value| puts(\"#{name} => #{value}\") }\n\nProduces:\n\n   name => Joe Smith\n   address => 123 Maple, Anytown NC\n   zip => 12345","name":"each_pair","namespace":"Struct","path":"Struct#each_pair","type":"instance_method","visibility":"public"},"Struct#eql?":{"description":"Hash equality---+other+ and +struct+ refer to the same hash key if they\nhave the same struct subclass and have equal member values (according to\nObject#eql?).","name":"eql?","namespace":"Struct","path":"Struct#eql?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Struct#hash":{"description":"Returns a hash value based on this struct's contents.\n\nSee also Object#hash.","name":"hash","namespace":"Struct","path":"Struct#hash","type":"instance_method","visibility":"public"},"Struct#initialize":{"description":"","name":"initialize","namespace":"Struct","path":"Struct#initialize","type":"instance_method","visibility":"public"},"Struct#initialize_copy":{"description":":nodoc:","name":"initialize_copy","namespace":"Struct","path":"Struct#initialize_copy","type":"instance_method","visibility":"public"},"Struct#inspect":{"description":"Returns a description of this struct as a string.","name":"to_s","namespace":"Struct","path":"Struct#to_s","type":"instance_method","visibility":"public"},"Struct#to_s":{"description":"Returns a description of this struct as a string.","name":"to_s","namespace":"Struct","path":"Struct#to_s","type":"instance_method","visibility":"public"},"Struct#length":{"description":"Returns the number of struct members.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.length   #=> 3","name":"length","namespace":"Struct","path":"Struct#length","type":"instance_method","visibility":"public"},"Struct#members":{"description":"Returns the struct members as an array of symbols:\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.members   #=> [:name, :address, :zip]","name":"members","namespace":"Struct","path":"Struct#members","type":"instance_method","visibility":"public"},"Struct#select":{"description":"Yields each member value from the struct to the block and returns an Array\ncontaining the member values from the +struct+ for which the given block\nreturns a true value (equivalent to Enumerable#select).\n\n   Lots = Struct.new(:a, :b, :c, :d, :e, :f)\n   l = Lots.new(11, 22, 33, 44, 55, 66)\n   l.select {|v| v.even? }   #=> [22, 44, 66]","name":"select","namespace":"Struct","path":"Struct#select","type":"instance_method","visibility":"public"},"Struct#size":{"description":"Returns the number of struct members.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.length   #=> 3","name":"size","namespace":"Struct","path":"Struct#size","type":"instance_method","visibility":"public"},"Struct#to_a":{"description":"Returns the values for this struct as an Array.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.to_a[1]   #=> \"123 Maple, Anytown NC\"","name":"to_a","namespace":"Struct","path":"Struct#to_a","type":"instance_method","visibility":"public"},"Struct#to_h":{"description":"Returns a Hash containing the names and values for the struct's members.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.to_h[:address]   #=> \"123 Maple, Anytown NC\"","name":"to_h","namespace":"Struct","path":"Struct#to_h","type":"instance_method","visibility":"public"},"Struct#values":{"description":"Returns the values for this struct as an Array.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.to_a[1]   #=> \"123 Maple, Anytown NC\"","name":"values","namespace":"Struct","path":"Struct#values","type":"instance_method","visibility":"public"},"Struct#values_at":{"description":"Returns the struct member values for each +selector+ as an Array.  A\n+selector+ may be either an Integer offset or a Range of offsets (as in\nArray#values_at).\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.values_at(0, 2)   #=> [\"Joe Smith\", 12345]","name":"values_at","namespace":"Struct","path":"Struct#values_at","type":"instance_method","visibility":"public"},"Struct.new":{"description":"The first two forms are used to create a new Struct subclass +class_name+\nthat can contain a value for each +member_name+.  This subclass can be\nused to create instances of the structure like any other Class.\n\nIf the +class_name+ is omitted an anonymous structure class will be\ncreated.  Otherwise, the name of this struct will appear as a constant in\nclass Struct, so it must be unique for all Structs in the system and\nmust start with a capital letter.  Assigning a structure class to a\nconstant also gives the class the name of the constant.\n\n   # Create a structure with a name under Struct\n   Struct.new(\"Customer\", :name, :address)\n   #=> Struct::Customer\n   Struct::Customer.new(\"Dave\", \"123 Main\")\n   #=> #<struct Struct::Customer name=\"Dave\", address=\"123 Main\">\n\n   # Create a structure named by its constant\n   Customer = Struct.new(:name, :address)\n   #=> Customer\n   Customer.new(\"Dave\", \"123 Main\")\n   #=> #<struct Customer name=\"Dave\", address=\"123 Main\">\n\nIf the optional +keyword_init+ keyword argument is set to +true+,\n.new takes keyword arguments instead of normal arguments.\n\n   Customer = Struct.new(:name, :address, keyword_init: true)\n   Customer.new(name: \"Dave\", address: \"123 Main\")\n   #=> #<struct Customer name=\"Dave\", address=\"123 Main\">\n\nIf a block is given it will be evaluated in the context of\n+StructClass+, passing the created class as a parameter:\n\n   Customer = Struct.new(:name, :address) do\n     def greeting\n       \"Hello #{name}!\"\n     end\n   end\n   Customer.new(\"Dave\", \"123 Main\").greeting  #=> \"Hello Dave!\"\n\nThis is the recommended way to customize a struct.  Subclassing an\nanonymous struct creates an extra anonymous class that will never be used.\n\nThe last two forms create a new instance of a struct subclass.  The number\nof +value+ parameters must be less than or equal to the number of\nattributes defined for the structure.  Unset parameters default to +nil+.\nPassing more parameters than number of attributes will raise\nan ArgumentError.\n\n   Customer = Struct.new(:name, :address)\n   Customer.new(\"Dave\", \"123 Main\")\n   #=> #<struct Customer name=\"Dave\", address=\"123 Main\">\n   Customer[\"Dave\"]\n   #=> #<struct Customer name=\"Dave\", address=nil>","name":"new","namespace":"Struct","path":"Struct.new","type":"class_method","visibility":"public"},"Struct::Tms":{"description":"for the backward compatibility","name":"Tms","namespace":"Struct","path":"Struct::Tms","type":"constant","return":["Class",""],"visibility":"public"},"ThreadGroup":{"description":"ThreadGroup provides a means of keeping track of a number of threads as a\n group.\n\n A given Thread object can only belong to one ThreadGroup at a time; adding\n a thread to a new group will remove it from any previous group.\n\n Newly created threads belong to the same group as the thread from which they\n were created.","name":"ThreadGroup","namespace":"","path":"ThreadGroup","type":"class","visibility":"public"},"ThreadGroup#add":{"description":"Adds the given +thread+ to this group, removing it from any other\ngroup to which it may have previously been a member.\n\n   puts \"Initial group is #{ThreadGroup::Default.list}\"\n   tg = ThreadGroup.new\n   t1 = Thread.new { sleep }\n   t2 = Thread.new { sleep }\n   puts \"t1 is #{t1}\"\n   puts \"t2 is #{t2}\"\n   tg.add(t1)\n   puts \"Initial group now #{ThreadGroup::Default.list}\"\n   puts \"tg group now #{tg.list}\"\n\nThis will produce:\n\n   Initial group is #<Thread:0x401bdf4c>\n   t1 is #<Thread:0x401b3c90>\n   t2 is #<Thread:0x401b3c18>\n   Initial group now #<Thread:0x401b3c18>#<Thread:0x401bdf4c>\n   tg group now #<Thread:0x401b3c90>","name":"add","namespace":"ThreadGroup","path":"ThreadGroup#add","type":"instance_method","visibility":"public"},"ThreadGroup#enclose":{"description":"Prevents threads from being added to or removed from the receiving\nThreadGroup.\n\nNew threads can still be started in an enclosed ThreadGroup.\n\n   ThreadGroup::Default.enclose        #=> #<ThreadGroup:0x4029d914>\n   thr = Thread.new { Thread.stop }    #=> #<Thread:0x402a7210 sleep>\n   tg = ThreadGroup.new                #=> #<ThreadGroup:0x402752d4>\n   tg.add thr\n   #=> ThreadError: can't move from the enclosed thread group","name":"enclose","namespace":"ThreadGroup","path":"ThreadGroup#enclose","type":"instance_method","visibility":"public"},"ThreadGroup#enclosed?":{"description":"Returns +true+ if the +thgrp+ is enclosed. See also ThreadGroup#enclose.","name":"enclosed?","namespace":"ThreadGroup","path":"ThreadGroup#enclosed?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"ThreadGroup#list":{"description":"Returns an array of all existing Thread objects that belong to this group.\n\n   ThreadGroup::Default.list   #=> [#<Thread:0x401bdf4c run>]","name":"list","namespace":"ThreadGroup","path":"ThreadGroup#list","type":"instance_method","visibility":"public"},"ThreadGroup::Default":{"description":"The default ThreadGroup created when Ruby starts; all Threads belong to it\n by default.","name":"Default","namespace":"ThreadGroup","path":"ThreadGroup::Default","type":"constant","return":["ThreadGroup",""],"visibility":"public"},"ThreadError":{"description":"Raised when an invalid operation is attempted on a thread.\n\nFor example, when no other thread has been started:\n\n   Thread.stop\n\nThis will raises the following exception:\n\n   ThreadError: stopping only thread\n   note: use sleep to stop forever","name":"ThreadError","namespace":"","path":"ThreadError","type":"class","visibility":"public"},"Thread":{"description":"Threads are the Ruby implementation for a concurrent programming model.\n\nPrograms that require multiple threads of execution are a perfect\ncandidate for Ruby's Thread class.\n\nFor example, we can create a new thread separate from the main thread's\nexecution using ::new.\n\n    thr = Thread.new { puts \"Whats the big deal\" }\n\nThen we are able to pause the execution of the main thread and allow\nour new thread to finish, using #join:\n\n    thr.join #=> \"Whats the big deal\"\n\nIf we don't call +thr.join+ before the main thread terminates, then all\nother threads including +thr+ will be killed.\n\nAlternatively, you can use an array for handling multiple threads at\nonce, like in the following example:\n\n    threads = []\n    threads << Thread.new { puts \"Whats the big deal\" }\n    threads << Thread.new { 3.times { puts \"Threads are fun!\" } }\n\nAfter creating a few threads we wait for them all to finish\nconsecutively.\n\n    threads.each { |thr| thr.join }\n\n=== Thread initialization\n\nIn order to create new threads, Ruby provides ::new, ::start, and\n::fork. A block must be provided with each of these methods, otherwise\na ThreadError will be raised.\n\nWhen subclassing the Thread class, the +initialize+ method of your\nsubclass will be ignored by ::start and ::fork. Otherwise, be sure to\ncall super in your +initialize+ method.\n\n\t=== Thread termination\n\n\tFor terminating threads, Ruby provides a variety of ways to do this.\n\nThe class method ::kill, is meant to exit a given thread:\n\n    thr = Thread.new { ... }\n    Thread.kill(thr) # sends exit() to thr\n\nAlternatively, you can use the instance method #exit, or any of its\naliases #kill or #terminate.\n\n    thr.exit\n\n\t=== Thread status\n\n\tRuby provides a few instance methods for querying the state of a given\n\tthread. To get a string with the current thread's state use #status\n\n    thr = Thread.new { sleep }\n    thr.status # => \"sleep\"\n    thr.exit\n    thr.status # => false\n\nYou can also use #alive? to tell if the thread is running or sleeping,\nand #stop? if the thread is dead or sleeping.\n\n\t=== Thread variables and scope\n\n\tSince threads are created with blocks, the same rules apply to other\n\tRuby blocks for variable scope. Any local variables created within this\n\tblock are accessible to only this thread.\n\n\t==== Fiber-local vs. Thread-local\n\nEach fiber has its own bucket for Thread#[] storage. When you set a\nnew fiber-local it is only accessible within this Fiber. To illustrate:\n\n    Thread.new {\n      Thread.current[:foo] = \"bar\"\n      Fiber.new {\n        p Thread.current[:foo] # => nil\n      }.resume\n    }.join\n\n\tThis example uses #[] for getting and #[]= for setting fiber-locals,\n\tyou can also use #keys to list the fiber-locals for a given\n\tthread and #key? to check if a fiber-local exists.\n\nWhen it comes to thread-locals, they are accessible within the entire\nscope of the thread. Given the following example:\n\n    Thread.new{\n      Thread.current.thread_variable_set(:foo, 1)\n      p Thread.current.thread_variable_get(:foo) # => 1\n      Fiber.new{\n\tThread.current.thread_variable_set(:foo, 2)\n\tp Thread.current.thread_variable_get(:foo) # => 2\n      }.resume\n      p Thread.current.thread_variable_get(:foo)   # => 2\n    }.join\n\n You can see that the thread-local +:foo+ carried over into the fiber\n and was changed to +2+ by the end of the thread.\n\n This example makes use of #thread_variable_set to create new\n thread-locals, and #thread_variable_get to reference them.\n\n There is also #thread_variables to list all thread-locals, and\n #thread_variable? to check if a given thread-local exists.\n\n\t=== Exception handling\n\nAny thread can raise an exception using the #raise instance method,\nwhich operates similarly to Kernel#raise.\n\nHowever, it's important to note that an exception that occurs in any\nthread except the main thread depends on #abort_on_exception. This\noption is +false+ by default, meaning that any unhandled exception will\ncause the thread to terminate silently when waited on by either #join\nor #value. You can change this default by either #abort_on_exception=\n+true+ or setting $DEBUG to +true+.\n\nWith the addition of the class method ::handle_interrupt, you can now\nhandle exceptions asynchronously with threads.\n\n\t=== Scheduling\n\n\tRuby provides a few ways to support scheduling threads in your program.\n\n\tThe first way is by using the class method ::stop, to put the current\n\trunning thread to sleep and schedule the execution of another thread.\n\n\tOnce a thread is asleep, you can use the instance method #wakeup to\n\tmark your thread as eligible for scheduling.\n\n\tYou can also try ::pass, which attempts to pass execution to another\n\tthread but is dependent on the OS whether a running thread will switch\n\tor not. The same goes for #priority, which lets you hint to the thread\n\tscheduler which threads you want to take precedence when passing\n\texecution. This method is also dependent on the OS and may be ignored\n\ton some platforms.","name":"Thread","namespace":"","path":"Thread","type":"class","visibility":"public"},"Thread#[]":{"description":"Attribute Reference---Returns the value of a fiber-local variable (current thread's root fiber\nif not explicitly inside a Fiber), using either a symbol or a string name.\nIf the specified variable does not exist, returns +nil+.\n\n   [\n     Thread.new { Thread.current[\"name\"] = \"A\" },\n     Thread.new { Thread.current[:name]  = \"B\" },\n     Thread.new { Thread.current[\"name\"] = \"C\" }\n   ].each do |th|\n     th.join\n     puts \"#{th.inspect}: #{th[:name]}\"\n   end\n\nThis will produce:\n\n   #<Thread:0x00000002a54220 dead>: A\n   #<Thread:0x00000002a541a8 dead>: B\n   #<Thread:0x00000002a54130 dead>: C\n\nThread#[] and Thread#[]= are not thread-local but fiber-local.\nThis confusion did not exist in Ruby 1.8 because\nfibers are only available since Ruby 1.9.\nRuby 1.9 chooses that the methods behaves fiber-local to save\nfollowing idiom for dynamic scope.\n\n  def meth(newvalue)\n    begin\n      oldvalue = Thread.current[:name]\n      Thread.current[:name] = newvalue\n      yield\n    ensure\n      Thread.current[:name] = oldvalue\n    end\n  end\n\nThe idiom may not work as dynamic scope if the methods are thread-local\nand a given block switches fiber.\n\n  f = Fiber.new {\n    meth(1) {\n      Fiber.yield\n    }\n  }\n  meth(2) {\n    f.resume\n  }\n  f.resume\n  p Thread.current[:name]\n  #=> nil if fiber-local\n  #=> 2 if thread-local (The value 2 is leaked to outside of meth method.)\n\nFor thread-local variables, please see #thread_variable_get and\n#thread_variable_set.","name":"[]","namespace":"Thread","path":"Thread#[]","type":"instance_method","visibility":"public"},"Thread#[]=":{"description":"Attribute Assignment---Sets or creates the value of a fiber-local variable,\nusing either a symbol or a string.\n\nSee also Thread#[].\n\nFor thread-local variables, please see #thread_variable_set and\n#thread_variable_get.","name":"[]=","namespace":"Thread","path":"Thread#[]=","type":"instance_method","visibility":"public"},"Thread#abort_on_exception":{"description":"Returns the status of the thread-local ``abort on exception'' condition for\nthis +thr+.\n\nThe default is +false+.\n\nSee also #abort_on_exception=.\n\nThere is also a class level method to set this for all threads, see\n::abort_on_exception.","name":"abort_on_exception","namespace":"Thread","path":"Thread#abort_on_exception","type":"instance_method","visibility":"public"},"Thread#abort_on_exception=":{"description":"When set to +true+, if this +thr+ is aborted by an exception, the\nraised exception will be re-raised in the main thread.\n\nSee also #abort_on_exception.\n\nThere is also a class level method to set this for all threads, see\n::abort_on_exception=.","name":"abort_on_exception=","namespace":"Thread","path":"Thread#abort_on_exception=","type":"instance_method","visibility":"public"},"Thread#add_trace_func":{"description":"Adds _proc_ as a handler for tracing.\n\nSee Thread#set_trace_func and Kernel#set_trace_func.","name":"add_trace_func","namespace":"Thread","path":"Thread#add_trace_func","type":"instance_method","visibility":"public"},"Thread#alive?":{"description":"Returns +true+ if +thr+ is running or sleeping.\n\n   thr = Thread.new { }\n   thr.join                #=> #<Thread:0x401b3fb0 dead>\n   Thread.current.alive?   #=> true\n   thr.alive?              #=> false\n\nSee also #stop? and #status.","name":"alive?","namespace":"Thread","path":"Thread#alive?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Thread#backtrace":{"description":"Returns the current backtrace of the target thread.","name":"backtrace","namespace":"Thread","path":"Thread#backtrace","type":"instance_method","visibility":"public"},"Thread#backtrace_locations":{"description":"Returns the execution stack for the target thread---an array containing\nbacktrace location objects.\n\nSee Thread::Backtrace::Location for more information.\n\nThis method behaves similarly to Kernel#caller_locations except it applies\nto a specific thread.","name":"backtrace_locations","namespace":"Thread","path":"Thread#backtrace_locations","type":"instance_method","visibility":"public"},"Thread#exit":{"description":"Terminates +thr+ and schedules another thread to be run.\n\nIf this thread is already marked to be killed, #exit returns the Thread.\n\nIf this is the main thread, or the last thread, exits the process.","name":"exit","namespace":"Thread","path":"Thread#exit","type":"instance_method","visibility":"public"},"Thread#fetch":{"description":"","name":"fetch","namespace":"Thread","path":"Thread#fetch","type":"instance_method","visibility":"public"},"Thread#group":{"description":"Returns the ThreadGroup which contains the given thread, or returns +nil+\nif +thr+ is not a member of any group.\n\n   Thread.main.group   #=> #<ThreadGroup:0x4029d914>","name":"group","namespace":"Thread","path":"Thread#group","type":"instance_method","visibility":"public"},"Thread#initialize":{"description":":nodoc:","name":"initialize","namespace":"Thread","path":"Thread#initialize","type":"instance_method","visibility":"public"},"Thread#inspect":{"description":"Dump the name, id, and status of _thr_ to a string.","name":"inspect","namespace":"Thread","path":"Thread#inspect","type":"instance_method","visibility":"public"},"Thread#join":{"description":"The calling thread will suspend execution and run this +thr+.\n\nDoes not return until +thr+ exits or until the given +limit+ seconds have\npassed.\n\nIf the time limit expires, +nil+ will be returned, otherwise +thr+ is\nreturned.\n\nAny threads not joined will be killed when the main program exits.\n\nIf +thr+ had previously raised an exception and the ::abort_on_exception or\n$DEBUG flags are not set, (so the exception has not yet been processed), it\nwill be processed at this time.\n\n   a = Thread.new { print \"a\"; sleep(10); print \"b\"; print \"c\" }\n   x = Thread.new { print \"x\"; Thread.pass; print \"y\"; print \"z\" }\n   x.join # Let thread x finish, thread a will be killed on exit.\n   #=> \"axyz\"\n\nThe following example illustrates the +limit+ parameter.\n\n   y = Thread.new { 4.times { sleep 0.1; puts 'tick... ' }}\n   puts \"Waiting\" until y.join(0.15)\n\nThis will produce:\n\n   tick...\n   Waiting\n   tick...\n   Waiting\n   tick...\n   tick...","name":"join","namespace":"Thread","path":"Thread#join","type":"instance_method","visibility":"public"},"Thread#key?":{"description":"Returns +true+ if the given string (or symbol) exists as a fiber-local\nvariable.\n\n   me = Thread.current\n   me[:oliver] = \"a\"\n   me.key?(:oliver)    #=> true\n   me.key?(:stanley)   #=> false","name":"key?","namespace":"Thread","path":"Thread#key?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Thread#keys":{"description":"Returns an array of the names of the fiber-local variables (as Symbols).\n\n   thr = Thread.new do\n     Thread.current[:cat] = 'meow'\n     Thread.current[\"dog\"] = 'woof'\n   end\n   thr.join   #=> #<Thread:0x401b3f10 dead>\n   thr.keys   #=> [:dog, :cat]","name":"keys","namespace":"Thread","path":"Thread#keys","type":"instance_method","visibility":"public"},"Thread#kill":{"description":"Terminates +thr+ and schedules another thread to be run.\n\nIf this thread is already marked to be killed, #exit returns the Thread.\n\nIf this is the main thread, or the last thread, exits the process.","name":"kill","namespace":"Thread","path":"Thread#kill","type":"instance_method","visibility":"public"},"Thread#name":{"description":"show the name of the thread.","name":"name","namespace":"Thread","path":"Thread#name","type":"instance_method","visibility":"public"},"Thread#name=":{"description":"set given name to the ruby thread.\nOn some platform, it may set the name to pthread and/or kernel.","name":"name=","namespace":"Thread","path":"Thread#name=","type":"instance_method","visibility":"public"},"Thread#pending_interrupt?":{"description":"Returns whether or not the asynchronous queue is empty for the target thread.\n\nIf +error+ is given, then check only for +error+ type deferred events.\n\nSee ::pending_interrupt? for more information.","name":"pending_interrupt?","namespace":"Thread","path":"Thread#pending_interrupt?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Thread#priority":{"description":"Returns the priority of <i>thr</i>. Default is inherited from the\ncurrent thread which creating the new thread, or zero for the\ninitial main thread; higher-priority thread will run more frequently\nthan lower-priority threads (but lower-priority threads can also run).\n\nThis is just hint for Ruby thread scheduler.  It may be ignored on some\nplatform.\n\n   Thread.current.priority   #=> 0","name":"priority","namespace":"Thread","path":"Thread#priority","type":"instance_method","visibility":"public"},"Thread#priority=":{"description":"Sets the priority of <i>thr</i> to <i>integer</i>. Higher-priority threads\nwill run more frequently than lower-priority threads (but lower-priority\nthreads can also run).\n\nThis is just hint for Ruby thread scheduler.  It may be ignored on some\nplatform.\n\n   count1 = count2 = 0\n   a = Thread.new do\n         loop { count1 += 1 }\n       end\n   a.priority = -1\n\n   b = Thread.new do\n         loop { count2 += 1 }\n       end\n   b.priority = -2\n   sleep 1   #=> 1\n   count1    #=> 622504\n   count2    #=> 5832","name":"priority=","namespace":"Thread","path":"Thread#priority=","type":"instance_method","visibility":"public"},"Thread#raise":{"description":"Raises an exception from the given thread. The caller does not have to be\n+thr+. See Kernel#raise for more information.\n\n   Thread.abort_on_exception = true\n   a = Thread.new { sleep(200) }\n   a.raise(\"Gotcha\")\n\nThis will produce:\n\n   prog.rb:3: Gotcha (RuntimeError)\n   \tfrom prog.rb:2:in `initialize'\n   \tfrom prog.rb:2:in `new'\n   \tfrom prog.rb:2","name":"raise","namespace":"Thread","path":"Thread#raise","type":"instance_method","visibility":"public"},"Thread#report_on_exception":{"description":"Returns the status of the thread-local ``report on exception'' condition for\nthis +thr+.\n\nThe default value when creating a Thread is the value of\nthe global flag Thread.report_on_exception.\n\nSee also #report_on_exception=.\n\nThere is also a class level method to set this for all new threads, see\n::report_on_exception=.","name":"report_on_exception","namespace":"Thread","path":"Thread#report_on_exception","type":"instance_method","visibility":"public"},"Thread#report_on_exception=":{"description":"When set to +true+, a message is printed on $stderr if an exception\nkills this +thr+.  See ::report_on_exception for details.\n\nSee also #report_on_exception.\n\nThere is also a class level method to set this for all new threads, see\n::report_on_exception=.","name":"report_on_exception=","namespace":"Thread","path":"Thread#report_on_exception=","type":"instance_method","visibility":"public"},"Thread#run":{"description":"Wakes up +thr+, making it eligible for scheduling.\n\n   a = Thread.new { puts \"a\"; Thread.stop; puts \"c\" }\n   sleep 0.1 while a.status!='sleep'\n   puts \"Got here\"\n   a.run\n   a.join\n\nThis will produce:\n\n   a\n   Got here\n   c\n\nSee also the instance method #wakeup.","name":"run","namespace":"Thread","path":"Thread#run","type":"instance_method","visibility":"public"},"Thread#safe_level":{"description":"Returns the safe level in effect for <i>thr</i>. Setting thread-local safe\nlevels can help when implementing sandboxes which run insecure code.\n\n   thr = Thread.new { $SAFE = 1; sleep }\n   Thread.current.safe_level   #=> 0\n   thr.safe_level              #=> 1","name":"safe_level","namespace":"Thread","path":"Thread#safe_level","type":"instance_method","visibility":"public"},"Thread#set_trace_func":{"description":"Establishes _proc_ on _thr_ as the handler for tracing, or\ndisables tracing if the parameter is +nil+.\n\nSee Kernel#set_trace_func.","name":"set_trace_func","namespace":"Thread","path":"Thread#set_trace_func","type":"instance_method","visibility":"public"},"Thread#status":{"description":"Returns the status of +thr+.\n\n[<tt>\"sleep\"</tt>]\nReturned if this thread is sleeping or waiting on I/O\n[<tt>\"run\"</tt>]\nWhen this thread is executing\n[<tt>\"aborting\"</tt>]\nIf this thread is aborting\n[+false+]\nWhen this thread is terminated normally\n[+nil+]\nIf terminated with an exception.\n\n   a = Thread.new { raise(\"die now\") }\n   b = Thread.new { Thread.stop }\n   c = Thread.new { Thread.exit }\n   d = Thread.new { sleep }\n   d.kill                  #=> #<Thread:0x401b3678 aborting>\n   a.status                #=> nil\n   b.status                #=> \"sleep\"\n   c.status                #=> false\n   d.status                #=> \"aborting\"\n   Thread.current.status   #=> \"run\"\n\nSee also the instance methods #alive? and #stop?","name":"status","namespace":"Thread","path":"Thread#status","type":"instance_method","visibility":"public"},"Thread#stop?":{"description":"Returns +true+ if +thr+ is dead or sleeping.\n\n   a = Thread.new { Thread.stop }\n   b = Thread.current\n   a.stop?   #=> true\n   b.stop?   #=> false\n\nSee also #alive? and #status.","name":"stop?","namespace":"Thread","path":"Thread#stop?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Thread#terminate":{"description":"Terminates +thr+ and schedules another thread to be run.\n\nIf this thread is already marked to be killed, #exit returns the Thread.\n\nIf this is the main thread, or the last thread, exits the process.","name":"terminate","namespace":"Thread","path":"Thread#terminate","type":"instance_method","visibility":"public"},"Thread#thread_variable?":{"description":"Returns +true+ if the given string (or symbol) exists as a thread-local\nvariable.\n\n   me = Thread.current\n   me.thread_variable_set(:oliver, \"a\")\n   me.thread_variable?(:oliver)    #=> true\n   me.thread_variable?(:stanley)   #=> false\n\nNote that these are not fiber local variables.  Please see Thread#[] and\nThread#thread_variable_get for more details.","name":"thread_variable?","namespace":"Thread","path":"Thread#thread_variable?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Thread#thread_variable_get":{"description":"Returns the value of a thread local variable that has been set.  Note that\nthese are different than fiber local values.  For fiber local values,\nplease see Thread#[] and Thread#[]=.\n\nThread local values are carried along with threads, and do not respect\nfibers.  For example:\n\n  Thread.new {\n    Thread.current.thread_variable_set(\"foo\", \"bar\") # set a thread local\n    Thread.current[\"foo\"] = \"bar\"                    # set a fiber local\n\n    Fiber.new {\n      Fiber.yield [\n        Thread.current.thread_variable_get(\"foo\"), # get the thread local\n        Thread.current[\"foo\"],                     # get the fiber local\n      ]\n    }.resume\n  }.join.value # => ['bar', nil]\n\nThe value \"bar\" is returned for the thread local, where nil is returned\nfor the fiber local.  The fiber is executed in the same thread, so the\nthread local values are available.","name":"thread_variable_get","namespace":"Thread","path":"Thread#thread_variable_get","type":"instance_method","visibility":"public"},"Thread#thread_variable_set":{"description":"Sets a thread local with +key+ to +value+.  Note that these are local to\nthreads, and not to fibers.  Please see Thread#thread_variable_get and\nThread#[] for more information.","name":"thread_variable_set","namespace":"Thread","path":"Thread#thread_variable_set","type":"instance_method","visibility":"public"},"Thread#thread_variables":{"description":"Returns an array of the names of the thread-local variables (as Symbols).\n\n   thr = Thread.new do\n     Thread.current.thread_variable_set(:cat, 'meow')\n     Thread.current.thread_variable_set(\"dog\", 'woof')\n   end\n   thr.join               #=> #<Thread:0x401b3f10 dead>\n   thr.thread_variables   #=> [:dog, :cat]\n\nNote that these are not fiber local variables.  Please see Thread#[] and\nThread#thread_variable_get for more details.","name":"thread_variables","namespace":"Thread","path":"Thread#thread_variables","type":"instance_method","visibility":"public"},"Thread#to_s":{"description":"Dump the name, id, and status of _thr_ to a string.","name":"inspect","namespace":"Thread","path":"Thread#inspect","type":"instance_method","visibility":"public"},"Thread#value":{"description":"Waits for +thr+ to complete, using #join, and returns its value or raises\nthe exception which terminated the thread.\n\n   a = Thread.new { 2 + 2 }\n   a.value   #=> 4\n\n   b = Thread.new { raise 'something went wrong' }\n   b.value   #=> RuntimeError: something went wrong","name":"value","namespace":"Thread","path":"Thread#value","type":"instance_method","visibility":"public"},"Thread#wakeup":{"description":"Marks a given thread as eligible for scheduling, however it may still\nremain blocked on I/O.\n\n*Note:* This does not invoke the scheduler, see #run for more information.\n\n   c = Thread.new { Thread.stop; puts \"hey!\" }\n   sleep 0.1 while c.status!='sleep'\n   c.wakeup\n   c.join\n   #=> \"hey!\"","name":"wakeup","namespace":"Thread","path":"Thread#wakeup","type":"instance_method","visibility":"public"},"Thread.DEBUG":{"description":"Returns the thread debug level.  Available only if compiled with\nTHREAD_DEBUG=-1.","name":"DEBUG","namespace":"Thread","path":"Thread.DEBUG","type":"class_method","visibility":"public"},"Thread.DEBUG=":{"description":"Sets the thread debug level.  Available only if compiled with\nTHREAD_DEBUG=-1.","name":"DEBUG=","namespace":"Thread","path":"Thread.DEBUG=","type":"class_method","visibility":"public"},"Thread.abort_on_exception":{"description":"Returns the status of the global ``abort on exception'' condition.\n\nThe default is +false+.\n\nWhen set to +true+, if any thread is aborted by an exception, the\nraised exception will be re-raised in the main thread.\n\nCan also be specified by the global $DEBUG flag or command line option\n+-d+.\n\nSee also ::abort_on_exception=.\n\nThere is also an instance level method to set this for a specific thread,\nsee #abort_on_exception.","name":"abort_on_exception","namespace":"Thread","path":"Thread.abort_on_exception","type":"class_method","visibility":"public"},"Thread.abort_on_exception=":{"description":"When set to +true+, if any thread is aborted by an exception, the\nraised exception will be re-raised in the main thread.\nReturns the new state.\n\n   Thread.abort_on_exception = true\n   t1 = Thread.new do\n     puts  \"In new thread\"\n     raise \"Exception from thread\"\n   end\n   sleep(1)\n   puts \"not reached\"\n\nThis will produce:\n\n   In new thread\n   prog.rb:4: Exception from thread (RuntimeError)\n   \tfrom prog.rb:2:in `initialize'\n   \tfrom prog.rb:2:in `new'\n   \tfrom prog.rb:2\n\nSee also ::abort_on_exception.\n\nThere is also an instance level method to set this for a specific thread,\nsee #abort_on_exception=.","name":"abort_on_exception=","namespace":"Thread","path":"Thread.abort_on_exception=","type":"class_method","visibility":"public"},"Thread.current":{"description":"Returns the currently executing thread.\n\n   Thread.current   #=> #<Thread:0x401bdf4c run>","name":"current","namespace":"Thread","path":"Thread.current","type":"class_method","visibility":"public"},"Thread.exit":{"description":"Terminates the currently running thread and schedules another thread to be\nrun.\n\nIf this thread is already marked to be killed, ::exit returns the Thread.\n\nIf this is the main thread, or the last  thread, exit the process.","name":"exit","namespace":"Thread","path":"Thread.exit","type":"class_method","visibility":"public"},"Thread.fork":{"description":"Basically the same as ::new. However, if class Thread is subclassed, then\ncalling +start+ in that subclass will not invoke the subclass's\n+initialize+ method.","name":"fork","namespace":"Thread","path":"Thread.fork","type":"class_method","visibility":"public"},"Thread.handle_interrupt":{"description":"Changes asynchronous interrupt timing.\n\n_interrupt_ means asynchronous event and corresponding procedure\nby Thread#raise, Thread#kill, signal trap (not supported yet)\nand main thread termination (if main thread terminates, then all\nother thread will be killed).\n\nThe given +hash+ has pairs like <code>ExceptionClass =>\n:TimingSymbol</code>. Where the ExceptionClass is the interrupt handled by\nthe given block. The TimingSymbol can be one of the following symbols:\n\n[+:immediate+]   Invoke interrupts immediately.\n[+:on_blocking+] Invoke interrupts while _BlockingOperation_.\n[+:never+]       Never invoke all interrupts.\n\n_BlockingOperation_ means that the operation will block the calling thread,\nsuch as read and write.  On CRuby implementation, _BlockingOperation_ is any\noperation executed without GVL.\n\nMasked asynchronous interrupts are delayed until they are enabled.\nThis method is similar to sigprocmask(3).\n\n=== NOTE\n\nAsynchronous interrupts are difficult to use.\n\nIf you need to communicate between threads, please consider to use another way such as Queue.\n\nOr use them with deep understanding about this method.\n\n=== Usage\n\nIn this example, we can guard from Thread#raise exceptions.\n\nUsing the +:never+ TimingSymbol the RuntimeError exception will always be\nignored in the first block of the main thread. In the second\n::handle_interrupt block we can purposefully handle RuntimeError exceptions.\n\n  th = Thread.new do\n    Thread.handle_interrupt(RuntimeError => :never) {\n      begin\n        # You can write resource allocation code safely.\n        Thread.handle_interrupt(RuntimeError => :immediate) {\n     # ...\n        }\n      ensure\n        # You can write resource deallocation code safely.\n      end\n    }\n  end\n  Thread.pass\n  # ...\n  th.raise \"stop\"\n\nWhile we are ignoring the RuntimeError exception, it's safe to write our\nresource allocation code. Then, the ensure block is where we can safely\ndeallocate your resources.\n\n==== Guarding from Timeout::Error\n\nIn the next example, we will guard from the Timeout::Error exception. This\nwill help prevent from leaking resources when Timeout::Error exceptions occur\nduring normal ensure clause. For this example we use the help of the\nstandard library Timeout, from lib/timeout.rb\n\n  require 'timeout'\n  Thread.handle_interrupt(Timeout::Error => :never) {\n    timeout(10){\n      # Timeout::Error doesn't occur here\n      Thread.handle_interrupt(Timeout::Error => :on_blocking) {\n        # possible to be killed by Timeout::Error\n        # while blocking operation\n      }\n      # Timeout::Error doesn't occur here\n    }\n  }\n\nIn the first part of the +timeout+ block, we can rely on Timeout::Error being\nignored. Then in the <code>Timeout::Error => :on_blocking</code> block, any\noperation that will block the calling thread is susceptible to a\nTimeout::Error exception being raised.\n\n==== Stack control settings\n\nIt's possible to stack multiple levels of ::handle_interrupt blocks in order\nto control more than one ExceptionClass and TimingSymbol at a time.\n\n  Thread.handle_interrupt(FooError => :never) {\n    Thread.handle_interrupt(BarError => :never) {\n       # FooError and BarError are prohibited.\n    }\n  }\n\n==== Inheritance with ExceptionClass\n\nAll exceptions inherited from the ExceptionClass parameter will be considered.\n\n  Thread.handle_interrupt(Exception => :never) {\n    # all exceptions inherited from Exception are prohibited.\n  }","name":"handle_interrupt","namespace":"Thread","path":"Thread.handle_interrupt","type":"class_method","visibility":"public"},"Thread.kill":{"description":"Causes the given +thread+ to exit, see also Thread::exit.\n\n   count = 0\n   a = Thread.new { loop { count += 1 } }\n   sleep(0.1)       #=> 0\n   Thread.kill(a)   #=> #<Thread:0x401b3d30 dead>\n   count            #=> 93947\n   a.alive?         #=> false","name":"kill","namespace":"Thread","path":"Thread.kill","type":"class_method","visibility":"public"},"Thread.list":{"description":"Returns an array of Thread objects for all threads that are either runnable\nor stopped.\n\n   Thread.new { sleep(200) }\n   Thread.new { 1000000.times {|i| i*i } }\n   Thread.new { Thread.stop }\n   Thread.list.each {|t| p t}\n\nThis will produce:\n\n   #<Thread:0x401b3e84 sleep>\n   #<Thread:0x401b3f38 run>\n   #<Thread:0x401b3fb0 sleep>\n   #<Thread:0x401bdf4c run>","name":"list","namespace":"Thread","path":"Thread.list","type":"class_method","visibility":"public"},"Thread.main":{"description":"Returns the main thread.","name":"main","namespace":"Thread","path":"Thread.main","type":"class_method","visibility":"public"},"Thread.new":{"description":"Thread.new(*args, &proc)\t\t-> thread\n Thread.new(*args) { |args| ... }\t-> thread\n\n Creates a new thread executing the given block.\n\n Any +args+ given to ::new will be passed to the block:\n\narr = []\na, b, c = 1, 2, 3\nThread.new(a,b,c) { |d,e,f| arr << d << e << f }.join\narr #=> [1, 2, 3]\n\n A ThreadError exception is raised if ::new is called without a block.\n\n If you're going to subclass Thread, be sure to call super in your\n +initialize+ method, otherwise a ThreadError will be raised.","name":"new","namespace":"Thread","path":"Thread.new","type":"class_method","visibility":"public"},"Thread.pass":{"description":"Give the thread scheduler a hint to pass execution to another thread.\nA running thread may or may not switch, it depends on OS and processor.","name":"pass","namespace":"Thread","path":"Thread.pass","type":"class_method","visibility":"public"},"Thread.pending_interrupt?":{"description":"Returns whether or not the asynchronous queue is empty.\n\nSince Thread::handle_interrupt can be used to defer asynchronous events,\nthis method can be used to determine if there are any deferred events.\n\nIf you find this method returns true, then you may finish +:never+ blocks.\n\nFor example, the following method processes deferred asynchronous events\nimmediately.\n\n  def Thread.kick_interrupt_immediately\n    Thread.handle_interrupt(Object => :immediate) {\n      Thread.pass\n    }\n  end\n\nIf +error+ is given, then check only for +error+ type deferred events.\n\n=== Usage\n\n  th = Thread.new{\n    Thread.handle_interrupt(RuntimeError => :on_blocking){\n      while true\n        ...\n        # reach safe point to invoke interrupt\n        if Thread.pending_interrupt?\n          Thread.handle_interrupt(Object => :immediate){}\n        end\n        ...\n      end\n    }\n  }\n  ...\n  th.raise # stop thread\n\nThis example can also be written as the following, which you should use to\navoid asynchronous interrupts.\n\n  flag = true\n  th = Thread.new{\n    Thread.handle_interrupt(RuntimeError => :on_blocking){\n      while true\n        ...\n        # reach safe point to invoke interrupt\n        break if flag == false\n        ...\n      end\n    }\n  }\n  ...\n  flag = false # stop thread","name":"pending_interrupt?","namespace":"Thread","path":"Thread.pending_interrupt?","type":"class_method","visibility":"public","return":[["Boolean"],""]},"Thread.report_on_exception":{"description":"Returns the status of the global ``report on exception'' condition.\n\nThe default is +true+ since Ruby 2.5.\n\nAll threads created when this flag is true will report\na message on $stderr if an exception kills the thread.\n\n   Thread.new { 1.times { raise } }\n\nwill produce this output on $stderr:\n\n   #<Thread:...> terminated with exception (report_on_exception is true):\n   Traceback (most recent call last):\n           2: from -e:1:in `block in <main>'\n           1: from -e:1:in `times'\n\nThis is done to catch errors in threads early.\nIn some cases, you might not want this output.\nThere are multiple ways to avoid the extra output:\n\n* If the exception is not intended, the best is to fix the cause of\n  the exception so it does not happen anymore.\n* If the exception is intended, it might be better to rescue it closer to\n  where it is raised rather then let it kill the Thread.\n* If it is guaranteed the Thread will be joined with Thread#join or\n  Thread#value, then it is safe to disable this report with\n  <code>Thread.current.report_on_exception = false</code>\n  when starting the Thread.\n  However, this might handle the exception much later, or not at all\n  if the Thread is never joined due to the parent thread being blocked, etc.\n\nSee also ::report_on_exception=.\n\nThere is also an instance level method to set this for a specific thread,\nsee #report_on_exception=.","name":"report_on_exception","namespace":"Thread","path":"Thread.report_on_exception","type":"class_method","visibility":"public"},"Thread.report_on_exception=":{"description":"Returns the new state.\nWhen set to +true+, all threads created afterwards will inherit the\ncondition and report a message on $stderr if an exception kills a thread:\n\n   Thread.report_on_exception = true\n   t1 = Thread.new do\n     puts  \"In new thread\"\n     raise \"Exception from thread\"\n   end\n   sleep(1)\n   puts \"In the main thread\"\n\nThis will produce:\n\n   In new thread\n   #<Thread:...prog.rb:2> terminated with exception (report_on_exception is true):\n   Traceback (most recent call last):\n   prog.rb:4:in `block in <main>': Exception from thread (RuntimeError)\n   In the main thread\n\nSee also ::report_on_exception.\n\nThere is also an instance level method to set this for a specific thread,\nsee #report_on_exception=.","name":"report_on_exception=","namespace":"Thread","path":"Thread.report_on_exception=","type":"class_method","visibility":"public"},"Thread.start":{"description":"Basically the same as ::new. However, if class Thread is subclassed, then\ncalling +start+ in that subclass will not invoke the subclass's\n+initialize+ method.","name":"start","namespace":"Thread","path":"Thread.start","type":"class_method","visibility":"public"},"Thread.stop":{"description":"Stops execution of the current thread, putting it into a ``sleep'' state,\nand schedules execution of another thread.\n\n   a = Thread.new { print \"a\"; Thread.stop; print \"c\" }\n   sleep 0.1 while a.status!='sleep'\n   print \"b\"\n   a.run\n   a.join\n   #=> \"abc\"","name":"stop","namespace":"Thread","path":"Thread.stop","type":"class_method","visibility":"public"},"Thread::Backtrace":{"description":"","name":"Backtrace","namespace":"Thread","path":"Thread::Backtrace","type":"class","visibility":"public"},"Thread::Backtrace::Location":{"description":"","name":"Location","namespace":"Thread::Backtrace","path":"Thread::Backtrace::Location","type":"class","visibility":"public"},"Thread::Backtrace::Location#absolute_path":{"description":"Returns the full file path of this frame.\n\nSame as #path, but includes the absolute path.","name":"absolute_path","namespace":"Thread::Backtrace::Location","path":"Thread::Backtrace::Location#absolute_path","type":"instance_method","visibility":"public"},"Thread::Backtrace::Location#base_label":{"description":"Returns the base label of this frame.\n\nUsually same as #label, without decoration.","name":"base_label","namespace":"Thread::Backtrace::Location","path":"Thread::Backtrace::Location#base_label","type":"instance_method","visibility":"public"},"Thread::Backtrace::Location#inspect":{"description":"Returns the same as calling +inspect+ on the string representation of\n#to_str","name":"inspect","namespace":"Thread::Backtrace::Location","path":"Thread::Backtrace::Location#inspect","type":"instance_method","visibility":"public"},"Thread::Backtrace::Location#label":{"description":"Returns the label of this frame.\n\nUsually consists of method, class, module, etc names with decoration.\n\nConsider the following example:\n\ndef foo\n  puts caller_locations(0).first.label\n\n  1.times do\n    puts caller_locations(0).first.label\n\n    1.times do\n      puts caller_locations(0).first.label\n    end\n\n  end\nend\n\nThe result of calling +foo+ is this:\n\nlabel: foo\nlabel: block in foo\nlabel: block (2 levels) in foo","name":"label","namespace":"Thread::Backtrace::Location","path":"Thread::Backtrace::Location#label","type":"instance_method","visibility":"public"},"Thread::Backtrace::Location#lineno":{"description":"Returns the line number of this frame.\n\nFor example, using +caller_locations.rb+ from Thread::Backtrace::Location\n\nloc = c(0..1).first\nloc.lineno #=> 2","name":"lineno","namespace":"Thread::Backtrace::Location","path":"Thread::Backtrace::Location#lineno","type":"instance_method","visibility":"public"},"Thread::Backtrace::Location#path":{"description":"Returns the file name of this frame.\n\nFor example, using +caller_locations.rb+ from Thread::Backtrace::Location\n\nloc = c(0..1).first\nloc.path #=> caller_locations.rb","name":"path","namespace":"Thread::Backtrace::Location","path":"Thread::Backtrace::Location#path","type":"instance_method","visibility":"public"},"Thread::Backtrace::Location#to_s":{"description":"Returns a Kernel#caller style string representing this frame.","name":"to_s","namespace":"Thread::Backtrace::Location","path":"Thread::Backtrace::Location#to_s","type":"instance_method","visibility":"public"},"Mutex":{"description":"Mutex implements a simple semaphore that can be used to coordinate access to\nshared data from multiple concurrent threads.\n\nExample:\n\n  semaphore = Mutex.new\n\n  a = Thread.new {\n    semaphore.synchronize {\n      # access shared resource\n    }\n  }\n\n  b = Thread.new {\n    semaphore.synchronize {\n      # access shared resource\n    }\n  }","name":"Mutex","namespace":"","path":"Mutex","type":"class","visibility":"public"},"Mutex#initialize":{"description":"Creates a new Mutex","name":"initialize","namespace":"Mutex","path":"Mutex#initialize","type":"instance_method","visibility":"public"},"Mutex#lock":{"description":"Attempts to grab the lock and waits if it isn't available.\nRaises +ThreadError+ if +mutex+ was locked by the current thread.","name":"lock","namespace":"Mutex","path":"Mutex#lock","type":"instance_method","visibility":"public"},"Mutex#locked?":{"description":"Returns +true+ if this lock is currently held by some thread.","name":"locked?","namespace":"Mutex","path":"Mutex#locked?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Mutex#owned?":{"description":"Returns +true+ if this lock is currently held by current thread.","name":"owned?","namespace":"Mutex","path":"Mutex#owned?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Mutex#sleep":{"description":"Releases the lock and sleeps +timeout+ seconds if it is given and\nnon-nil or forever.  Raises +ThreadError+ if +mutex+ wasn't locked by\nthe current thread.\n\nWhen the thread is next woken up, it will attempt to reacquire\nthe lock.\n\nNote that this method can wakeup without explicit Thread#wakeup call.\nFor example, receiving signal and so on.","name":"sleep","namespace":"Mutex","path":"Mutex#sleep","type":"instance_method","visibility":"public"},"Mutex#synchronize":{"description":"Obtains a lock, runs the block, and releases the lock when the block\ncompletes.  See the example under +Mutex+.","name":"synchronize","namespace":"Mutex","path":"Mutex#synchronize","type":"instance_method","visibility":"public"},"Mutex#try_lock":{"description":"Attempts to obtain the lock and returns immediately. Returns +true+ if the\nlock was granted.","name":"try_lock","namespace":"Mutex","path":"Mutex#try_lock","type":"instance_method","visibility":"public"},"Mutex#unlock":{"description":"Releases the lock.\nRaises +ThreadError+ if +mutex+ wasn't locked by the current thread.","name":"unlock","namespace":"Mutex","path":"Mutex#unlock","type":"instance_method","visibility":"public"},"Queue":{"description":"The Queue class implements multi-producer, multi-consumer queues.\nIt is especially useful in threaded programming when information\nmust be exchanged safely between multiple threads. The Queue class\nimplements all the required locking semantics.\n\nThe class implements FIFO type of queue. In a FIFO queue, the first\ntasks added are the first retrieved.\n\nExample:\n\nqueue = Queue.new\n\nproducer = Thread.new do\n 5.times do |i|\n    sleep rand(i) # simulate expense\n    queue << i\n    puts \"#{i} produced\"\n end\nend\n\nconsumer = Thread.new do\n 5.times do |i|\n    value = queue.pop\n    sleep rand(i/2) # simulate expense\n    puts \"consumed #{value}\"\n end\nend","name":"Queue","namespace":"","path":"Queue","type":"class","visibility":"public"},"Queue#<<":{"description":"Pushes the given +object+ to the queue.","name":"<<","namespace":"Queue","path":"Queue#<<","type":"instance_method","visibility":"public"},"Queue#clear":{"description":"Removes all objects from the queue.","name":"clear","namespace":"Queue","path":"Queue#clear","type":"instance_method","visibility":"public"},"Queue#close":{"description":"Closes the queue. A closed queue cannot be re-opened.\n\nAfter the call to close completes, the following are true:\n\n- +closed?+ will return true\n\n- +close+ will be ignored.\n\n- calling enq/push/<< will raise an exception.\n\n- when +empty?+ is false, calling deq/pop/shift will return an object\n  from the queue as usual.\n\nClosedQueueError is inherited from StopIteration, so that you can break loop block.\n\n Example:\n\n   \tq = Queue.new\n     Thread.new{\n       while e = q.deq # wait for nil to break loop\n         # ...\n       end\n     }\n     q.close","name":"close","namespace":"Queue","path":"Queue#close","type":"instance_method","visibility":"public"},"Queue#closed?":{"description":"Returns +true+ if the queue is closed.","name":"closed?","namespace":"Queue","path":"Queue#closed?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Queue#deq":{"description":"Retrieves data from the queue.\n\nIf the queue is empty, the calling thread is suspended until data is pushed\nonto the queue. If +non_block+ is true, the thread isn't suspended, and\n+ThreadError+ is raised.","name":"shift","namespace":"Queue","path":"Queue#shift","type":"instance_method","visibility":"public"},"Queue#empty?":{"description":"Returns +true+ if the queue is empty.","name":"empty?","namespace":"Queue","path":"Queue#empty?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Queue#enq":{"description":"Pushes the given +object+ to the queue.","name":"<<","namespace":"Queue","path":"Queue#<<","type":"instance_method","visibility":"public"},"Queue#initialize":{"description":"Creates a new queue instance.","name":"initialize","namespace":"Queue","path":"Queue#initialize","type":"instance_method","visibility":"public"},"Queue#length":{"description":"Returns the length of the queue.","name":"size","namespace":"Queue","path":"Queue#size","type":"instance_method","visibility":"public"},"Queue#size":{"description":"Returns the length of the queue.","name":"size","namespace":"Queue","path":"Queue#size","type":"instance_method","visibility":"public"},"Queue#marshal_dump":{"description":":nodoc:","name":"marshal_dump","namespace":"Queue","path":"Queue#marshal_dump","type":"instance_method","visibility":"public"},"Queue#num_waiting":{"description":"Returns the number of threads waiting on the queue.","name":"num_waiting","namespace":"Queue","path":"Queue#num_waiting","type":"instance_method","visibility":"public"},"Queue#pop":{"description":"Retrieves data from the queue.\n\nIf the queue is empty, the calling thread is suspended until data is pushed\nonto the queue. If +non_block+ is true, the thread isn't suspended, and\n+ThreadError+ is raised.","name":"shift","namespace":"Queue","path":"Queue#shift","type":"instance_method","visibility":"public"},"Queue#shift":{"description":"Retrieves data from the queue.\n\nIf the queue is empty, the calling thread is suspended until data is pushed\nonto the queue. If +non_block+ is true, the thread isn't suspended, and\n+ThreadError+ is raised.","name":"shift","namespace":"Queue","path":"Queue#shift","type":"instance_method","visibility":"public"},"Queue#push":{"description":"Pushes the given +object+ to the queue.","name":"<<","namespace":"Queue","path":"Queue#<<","type":"instance_method","visibility":"public"},"SizedQueue":{"description":"This class represents queues of specified size capacity.  The push operation\nmay be blocked if the capacity is full.\n\nSee Queue for an example of how a SizedQueue works.","name":"SizedQueue","namespace":"","path":"SizedQueue","type":"class","visibility":"public"},"SizedQueue#<<":{"description":"Pushes +object+ to the queue.\n\nIf there is no space left in the queue, waits until space becomes\navailable, unless +non_block+ is true.  If +non_block+ is true, the\nthread isn't suspended, and +ThreadError+ is raised.","name":"<<","namespace":"SizedQueue","path":"SizedQueue#<<","type":"instance_method","visibility":"public"},"SizedQueue#clear":{"description":"Removes all objects from the queue.","name":"clear","namespace":"SizedQueue","path":"SizedQueue#clear","type":"instance_method","visibility":"public"},"SizedQueue#close":{"description":"Similar to Queue#close.\n\nThe difference is behavior with waiting enqueuing threads.\n\nIf there are waiting enqueuing threads, they are interrupted by\nraising ClosedQueueError('queue closed').","name":"close","namespace":"SizedQueue","path":"SizedQueue#close","type":"instance_method","visibility":"public"},"SizedQueue#deq":{"description":"Retrieves data from the queue.\n\nIf the queue is empty, the calling thread is suspended until data is pushed\nonto the queue. If +non_block+ is true, the thread isn't suspended, and\n+ThreadError+ is raised.","name":"shift","namespace":"SizedQueue","path":"SizedQueue#shift","type":"instance_method","visibility":"public"},"SizedQueue#empty?":{"description":"Returns +true+ if the queue is empty.","name":"empty?","namespace":"SizedQueue","path":"SizedQueue#empty?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"SizedQueue#enq":{"description":"Pushes +object+ to the queue.\n\nIf there is no space left in the queue, waits until space becomes\navailable, unless +non_block+ is true.  If +non_block+ is true, the\nthread isn't suspended, and +ThreadError+ is raised.","name":"<<","namespace":"SizedQueue","path":"SizedQueue#<<","type":"instance_method","visibility":"public"},"SizedQueue#initialize":{"description":"Creates a fixed-length queue with a maximum size of +max+.","name":"initialize","namespace":"SizedQueue","path":"SizedQueue#initialize","type":"instance_method","visibility":"public"},"SizedQueue#length":{"description":"","name":"size","namespace":"SizedQueue","path":"SizedQueue#size","type":"instance_method","visibility":"public"},"SizedQueue#size":{"description":"","name":"size","namespace":"SizedQueue","path":"SizedQueue#size","type":"instance_method","visibility":"public"},"SizedQueue#max":{"description":"Returns the maximum size of the queue.","name":"max","namespace":"SizedQueue","path":"SizedQueue#max","type":"instance_method","visibility":"public"},"SizedQueue#max=":{"description":"Sets the maximum size of the queue to the given +number+.","name":"max=","namespace":"SizedQueue","path":"SizedQueue#max=","type":"instance_method","visibility":"public"},"SizedQueue#num_waiting":{"description":"Returns the number of threads waiting on the queue.","name":"num_waiting","namespace":"SizedQueue","path":"SizedQueue#num_waiting","type":"instance_method","visibility":"public"},"SizedQueue#pop":{"description":"Retrieves data from the queue.\n\nIf the queue is empty, the calling thread is suspended until data is pushed\nonto the queue. If +non_block+ is true, the thread isn't suspended, and\n+ThreadError+ is raised.","name":"shift","namespace":"SizedQueue","path":"SizedQueue#shift","type":"instance_method","visibility":"public"},"SizedQueue#shift":{"description":"Retrieves data from the queue.\n\nIf the queue is empty, the calling thread is suspended until data is pushed\nonto the queue. If +non_block+ is true, the thread isn't suspended, and\n+ThreadError+ is raised.","name":"shift","namespace":"SizedQueue","path":"SizedQueue#shift","type":"instance_method","visibility":"public"},"SizedQueue#push":{"description":"Pushes +object+ to the queue.\n\nIf there is no space left in the queue, waits until space becomes\navailable, unless +non_block+ is true.  If +non_block+ is true, the\nthread isn't suspended, and +ThreadError+ is raised.","name":"<<","namespace":"SizedQueue","path":"SizedQueue#<<","type":"instance_method","visibility":"public"},"ConditionVariable":{"description":"ConditionVariable objects augment class Mutex. Using condition variables,\nit is possible to suspend while in the middle of a critical section until a\nresource becomes available.\n\nExample:\n\n  mutex = Mutex.new\n  resource = ConditionVariable.new\n\n  a = Thread.new {\nmutex.synchronize {\n  # Thread 'a' now needs the resource\n  resource.wait(mutex)\n  # 'a' can now have the resource\n}\n  }\n\n  b = Thread.new {\nmutex.synchronize {\n  # Thread 'b' has finished using the resource\n  resource.signal\n}\n  }","name":"ConditionVariable","namespace":"","path":"ConditionVariable","type":"class","visibility":"public"},"ConditionVariable#broadcast":{"description":"Wakes up all threads waiting for this lock.","name":"broadcast","namespace":"ConditionVariable","path":"ConditionVariable#broadcast","type":"instance_method","visibility":"public"},"ConditionVariable#initialize":{"description":"Creates a new condition variable instance.","name":"initialize","namespace":"ConditionVariable","path":"ConditionVariable#initialize","type":"instance_method","visibility":"public"},"ConditionVariable#marshal_dump":{"description":":nodoc:","name":"marshal_dump","namespace":"ConditionVariable","path":"ConditionVariable#marshal_dump","type":"instance_method","visibility":"public"},"ConditionVariable#signal":{"description":"Wakes up the first thread in line waiting for this lock.","name":"signal","namespace":"ConditionVariable","path":"ConditionVariable#signal","type":"instance_method","visibility":"public"},"ConditionVariable#wait":{"description":"Releases the lock held in +mutex+ and waits; reacquires the lock on wakeup.\n\nIf +timeout+ is given, this method returns after +timeout+ seconds passed,\neven if no other thread doesn't signal.","name":"wait","namespace":"ConditionVariable","path":"ConditionVariable#wait","type":"instance_method","visibility":"public"},"ClosedQueueError":{"description":"","name":"ClosedQueueError","namespace":"","path":"ClosedQueueError","type":"class","visibility":"public"},"Time":{"description":"Time is an abstraction of dates and times. Time is stored internally as\nthe number of seconds with fraction since the _Epoch_, January 1, 1970\n00:00 UTC. Also see the library module Date. The Time class treats GMT\n(Greenwich Mean Time) and UTC (Coordinated Universal Time) as equivalent.\nGMT is the older way of referring to these baseline times but persists in\nthe names of calls on POSIX systems.\n\nAll times may have fraction. Be aware of this fact when comparing times\nwith each other -- times that are apparently equal when displayed may be\ndifferent when compared.\n\nSince Ruby 1.9.2, Time implementation uses a signed 63 bit integer,\nBignum or Rational.\nThe integer is a number of nanoseconds since the _Epoch_ which can\nrepresent 1823-11-12 to 2116-02-20.\nWhen Bignum or Rational is used (before 1823, after 2116, under\nnanosecond), Time works slower as when integer is used.\n\n= Examples\n\nAll of these examples were done using the EST timezone which is GMT-5.\n\n== Creating a new Time instance\n\nYou can create a new instance of Time with Time::new. This will use the\ncurrent system time. Time::now is an alias for this. You can also\npass parts of the time to Time::new such as year, month, minute, etc. When\nyou want to construct a time this way you must pass at least a year. If you\npass the year with nothing else time will default to January 1 of that year\nat 00:00:00 with the current system timezone. Here are some examples:\n\n  Time.new(2002)         #=> 2002-01-01 00:00:00 -0500\n  Time.new(2002, 10)     #=> 2002-10-01 00:00:00 -0500\n  Time.new(2002, 10, 31) #=> 2002-10-31 00:00:00 -0500\n  Time.new(2002, 10, 31, 2, 2, 2, \"+02:00\") #=> 2002-10-31 02:02:02 +0200\n\nYou can also use #gm, #local and\n#utc to infer GMT, local and UTC timezones instead of using\nthe current system setting.\n\nYou can also create a new time using Time::at which takes the number of\nseconds (or fraction of seconds) since the {Unix\nEpoch}[http://en.wikipedia.org/wiki/Unix_time].\n\n  Time.at(628232400) #=> 1989-11-28 00:00:00 -0500\n\n== Working with an instance of Time\n\nOnce you have an instance of Time there is a multitude of things you can\ndo with it. Below are some examples. For all of the following examples, we\nwill work on the assumption that you have done the following:\n\n  t = Time.new(1993, 02, 24, 12, 0, 0, \"+09:00\")\n\nWas that a monday?\n\n  t.monday? #=> false\n\nWhat year was that again?\n\n  t.year #=> 1993\n\nWas it daylight savings at the time?\n\n  t.dst? #=> false\n\nWhat's the day a year later?\n\n  t + (60*60*24*365) #=> 1994-02-24 12:00:00 +0900\n\nHow many seconds was that since the Unix Epoch?\n\n  t.to_i #=> 730522800\n\nYou can also do standard functions like compare two times.\n\n  t1 = Time.new(2010)\n  t2 = Time.new(2011)\n\n  t1 == t2 #=> false\n  t1 == t1 #=> true\n  t1 <  t2 #=> true\n  t1 >  t2 #=> false\n\n  Time.new(2010,10,31).between?(t1, t2) #=> true","name":"Time","namespace":"","path":"Time","type":"class","visibility":"public"},"Time#+":{"description":"Addition --- Adds some number of seconds (possibly fractional) to\n_time_ and returns that value as a new Time object.\n\n   t = Time.now         #=> 2007-11-19 08:22:21 -0600\n   t + (60 * 60 * 24)   #=> 2007-11-20 08:22:21 -0600","name":"+","namespace":"Time","path":"Time#+","type":"instance_method","visibility":"public"},"Time#-":{"description":"Difference --- Returns a difference in seconds as a Float\nbetween _time_ and +other_time+, or subtracts the given number\nof seconds in +numeric+ from _time_.\n\n   t = Time.now       #=> 2007-11-19 08:23:10 -0600\n   t2 = t + 2592000   #=> 2007-12-19 08:23:10 -0600\n   t2 - t             #=> 2592000.0\n   t2 - 2592000       #=> 2007-11-19 08:23:10 -0600","name":"-","namespace":"Time","path":"Time#-","type":"instance_method","visibility":"public"},"Time#<=>":{"description":"Comparison---Compares +time+ with +other_time+.\n\n-1, 0, +1 or nil depending on whether +time+ is less  than, equal to, or\ngreater than +other_time+.\n\n+nil+ is returned if the two values are incomparable.\n\n   t = Time.now       #=> 2007-11-19 08:12:12 -0600\n   t2 = t + 2592000   #=> 2007-12-19 08:12:12 -0600\n   t <=> t2           #=> -1\n   t2 <=> t           #=> 1\n\n   t = Time.now       #=> 2007-11-19 08:13:38 -0600\n   t2 = t + 0.1       #=> 2007-11-19 08:13:38 -0600\n   t.nsec             #=> 98222999\n   t2.nsec            #=> 198222999\n   t <=> t2           #=> -1\n   t2 <=> t           #=> 1\n   t <=> t            #=> 0","name":"<=>","namespace":"Time","path":"Time#<=>","type":"instance_method","visibility":"public"},"Time#_dump":{"description":":nodoc:","name":"_dump","namespace":"Time","path":"Time#_dump","type":"instance_method","visibility":"private"},"Time#asctime":{"description":"Returns a canonical string representation of _time_.\n\n   Time.now.asctime   #=> \"Wed Apr  9 08:56:03 2003\"\n   Time.now.ctime     #=> \"Wed Apr  9 08:56:03 2003\"","name":"asctime","namespace":"Time","path":"Time#asctime","type":"instance_method","visibility":"public"},"Time#ctime":{"description":"Returns a canonical string representation of _time_.\n\n   Time.now.asctime   #=> \"Wed Apr  9 08:56:03 2003\"\n   Time.now.ctime     #=> \"Wed Apr  9 08:56:03 2003\"","name":"ctime","namespace":"Time","path":"Time#ctime","type":"instance_method","visibility":"public"},"Time#day":{"description":"Returns the day of the month (1..n) for _time_.\n\n   t = Time.now   #=> 2007-11-19 08:27:03 -0600\n   t.day          #=> 19\n   t.mday         #=> 19","name":"day","namespace":"Time","path":"Time#day","type":"instance_method","visibility":"public"},"Time#dst?":{"description":"Returns +true+ if _time_ occurs during Daylight\nSaving Time in its time zone.\n\n # CST6CDT:\n   Time.local(2000, 1, 1).zone    #=> \"CST\"\n   Time.local(2000, 1, 1).isdst   #=> false\n   Time.local(2000, 1, 1).dst?    #=> false\n   Time.local(2000, 7, 1).zone    #=> \"CDT\"\n   Time.local(2000, 7, 1).isdst   #=> true\n   Time.local(2000, 7, 1).dst?    #=> true\n\n # Asia/Tokyo:\n   Time.local(2000, 1, 1).zone    #=> \"JST\"\n   Time.local(2000, 1, 1).isdst   #=> false\n   Time.local(2000, 1, 1).dst?    #=> false\n   Time.local(2000, 7, 1).zone    #=> \"JST\"\n   Time.local(2000, 7, 1).isdst   #=> false\n   Time.local(2000, 7, 1).dst?    #=> false","name":"dst?","namespace":"Time","path":"Time#dst?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Time#eql?":{"description":"Returns +true+ if _time_ and +other_time+ are\nboth Time objects with the same seconds and fractional seconds.","name":"eql?","namespace":"Time","path":"Time#eql?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Time#friday?":{"description":"Returns +true+ if _time_ represents Friday.\n\n   t = Time.local(1987, 12, 18)     #=> 1987-12-18 00:00:00 -0600\n   t.friday?                        #=> true","name":"friday?","namespace":"Time","path":"Time#friday?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Time#getgm":{"description":"Returns a new Time object representing _time_ in UTC.\n\n   t = Time.local(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 -0600\n   t.gmt?                             #=> false\n   y = t.getgm                        #=> 2000-01-02 02:15:01 UTC\n   y.gmt?                             #=> true\n   t == y                             #=> true","name":"getgm","namespace":"Time","path":"Time#getgm","type":"instance_method","visibility":"public"},"Time#getlocal":{"description":"Returns a new Time object representing _time_ in\nlocal time (using the local time zone in effect for this process).\n\nIf +utc_offset+ is given, it is used instead of the local time.\n+utc_offset+ can be given as a human-readable string (eg. <code>\"+09:00\"</code>)\nor as a number of seconds (eg. <code>32400</code>).\n\n   t = Time.utc(2000,1,1,20,15,1)  #=> 2000-01-01 20:15:01 UTC\n   t.utc?                          #=> true\n\n   l = t.getlocal                  #=> 2000-01-01 14:15:01 -0600\n   l.utc?                          #=> false\n   t == l                          #=> true\n\n   j = t.getlocal(\"+09:00\")        #=> 2000-01-02 05:15:01 +0900\n   j.utc?                          #=> false\n   t == j                          #=> true\n\n   k = t.getlocal(9*60*60)         #=> 2000-01-02 05:15:01 +0900\n   k.utc?                          #=> false\n   t == k                          #=> true","name":"getlocal","namespace":"Time","path":"Time#getlocal","type":"instance_method","visibility":"public"},"Time#getutc":{"description":"Returns a new Time object representing _time_ in UTC.\n\n   t = Time.local(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 -0600\n   t.gmt?                             #=> false\n   y = t.getgm                        #=> 2000-01-02 02:15:01 UTC\n   y.gmt?                             #=> true\n   t == y                             #=> true","name":"getutc","namespace":"Time","path":"Time#getutc","type":"instance_method","visibility":"public"},"Time#gmt?":{"description":"Returns +true+ if _time_ represents a time in UTC (GMT).\n\n   t = Time.now                        #=> 2007-11-19 08:15:23 -0600\n   t.utc?                              #=> false\n   t = Time.gm(2000,\"jan\",1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\n   t.utc?                              #=> true\n\n   t = Time.now                        #=> 2007-11-19 08:16:03 -0600\n   t.gmt?                              #=> false\n   t = Time.gm(2000,1,1,20,15,1)       #=> 2000-01-01 20:15:01 UTC\n   t.gmt?                              #=> true","name":"gmt?","namespace":"Time","path":"Time#gmt?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Time#gmt_offset":{"description":"Returns the offset in seconds between the timezone of _time_\nand UTC.\n\n   t = Time.gm(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\n   t.gmt_offset                    #=> 0\n   l = t.getlocal                  #=> 2000-01-01 14:15:01 -0600\n   l.gmt_offset                    #=> -21600","name":"gmt_offset","namespace":"Time","path":"Time#gmt_offset","type":"instance_method","visibility":"public"},"Time#gmtime":{"description":"Converts _time_ to UTC (GMT), modifying the receiver.\n\n   t = Time.now   #=> 2007-11-19 08:18:31 -0600\n   t.gmt?         #=> false\n   t.gmtime       #=> 2007-11-19 14:18:31 UTC\n   t.gmt?         #=> true\n\n   t = Time.now   #=> 2007-11-19 08:18:51 -0600\n   t.utc?         #=> false\n   t.utc          #=> 2007-11-19 14:18:51 UTC\n   t.utc?         #=> true","name":"gmtime","namespace":"Time","path":"Time#gmtime","type":"instance_method","visibility":"public"},"Time#gmtoff":{"description":"Returns the offset in seconds between the timezone of _time_\nand UTC.\n\n   t = Time.gm(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\n   t.gmt_offset                    #=> 0\n   l = t.getlocal                  #=> 2000-01-01 14:15:01 -0600\n   l.gmt_offset                    #=> -21600","name":"gmtoff","namespace":"Time","path":"Time#gmtoff","type":"instance_method","visibility":"public"},"Time#hash":{"description":"Returns a hash code for this Time object.\n\nSee also Object#hash.","name":"hash","namespace":"Time","path":"Time#hash","type":"instance_method","visibility":"public"},"Time#hour":{"description":"Returns the hour of the day (0..23) for _time_.\n\n   t = Time.now   #=> 2007-11-19 08:26:20 -0600\n   t.hour         #=> 8","name":"hour","namespace":"Time","path":"Time#hour","type":"instance_method","visibility":"public"},"Time#initialize":{"description":"Returns a Time object.\n\nIt is initialized to the current system time if no argument is given.\n\n*Note:* The new object will use the resolution available on your\nsystem clock, and may include fractional seconds.\n\nIf one or more arguments specified, the time is initialized to the specified\ntime.\n\n+sec+ may have fraction if it is a rational.\n\n+utc_offset+ is the offset from UTC.\nIt can be a string such as \"+09:00\" or a number of seconds such as 32400.\n\n   a = Time.new      #=> 2007-11-19 07:50:02 -0600\n   b = Time.new      #=> 2007-11-19 07:50:02 -0600\n   a == b            #=> false\n   \"%.6f\" % a.to_f   #=> \"1195480202.282373\"\n   \"%.6f\" % b.to_f   #=> \"1195480202.283415\"\n\n   Time.new(2008,6,21, 13,30,0, \"+09:00\") #=> 2008-06-21 13:30:00 +0900\n\n   # A trip for RubyConf 2007\n   t1 = Time.new(2007,11,1,15,25,0, \"+09:00\") # JST (Narita)\n   t2 = Time.new(2007,11,1,12, 5,0, \"-05:00\") # CDT (Minneapolis)\n   t3 = Time.new(2007,11,1,13,25,0, \"-05:00\") # CDT (Minneapolis)\n   t4 = Time.new(2007,11,1,16,53,0, \"-04:00\") # EDT (Charlotte)\n   t5 = Time.new(2007,11,5, 9,24,0, \"-05:00\") # EST (Charlotte)\n   t6 = Time.new(2007,11,5,11,21,0, \"-05:00\") # EST (Detroit)\n   t7 = Time.new(2007,11,5,13,45,0, \"-05:00\") # EST (Detroit)\n   t8 = Time.new(2007,11,6,17,10,0, \"+09:00\") # JST (Narita)\n   p((t2-t1)/3600.0)                          #=> 10.666666666666666\n   p((t4-t3)/3600.0)                          #=> 2.466666666666667\n   p((t6-t5)/3600.0)                          #=> 1.95\n   p((t8-t7)/3600.0)                          #=> 13.416666666666666","name":"initialize","namespace":"Time","path":"Time#initialize","type":"instance_method","visibility":"public"},"Time#initialize_copy":{"description":":nodoc:","name":"initialize_copy","namespace":"Time","path":"Time#initialize_copy","type":"instance_method","visibility":"public"},"Time#inspect":{"description":"Returns a string representing _time_. Equivalent to calling\n#strftime with the appropriate format string.\n\n   t = Time.now\n   t.to_s                              => \"2012-11-10 18:16:12 +0100\"\n   t.strftime \"%Y-%m-%d %H:%M:%S %z\"   => \"2012-11-10 18:16:12 +0100\"\n\n   t.utc.to_s                          => \"2012-11-10 17:16:12 UTC\"\n   t.strftime \"%Y-%m-%d %H:%M:%S UTC\"  => \"2012-11-10 17:16:12 UTC\"","name":"inspect","namespace":"Time","path":"Time#inspect","type":"instance_method","visibility":"public"},"Time#isdst":{"description":"Returns +true+ if _time_ occurs during Daylight\nSaving Time in its time zone.\n\n # CST6CDT:\n   Time.local(2000, 1, 1).zone    #=> \"CST\"\n   Time.local(2000, 1, 1).isdst   #=> false\n   Time.local(2000, 1, 1).dst?    #=> false\n   Time.local(2000, 7, 1).zone    #=> \"CDT\"\n   Time.local(2000, 7, 1).isdst   #=> true\n   Time.local(2000, 7, 1).dst?    #=> true\n\n # Asia/Tokyo:\n   Time.local(2000, 1, 1).zone    #=> \"JST\"\n   Time.local(2000, 1, 1).isdst   #=> false\n   Time.local(2000, 1, 1).dst?    #=> false\n   Time.local(2000, 7, 1).zone    #=> \"JST\"\n   Time.local(2000, 7, 1).isdst   #=> false\n   Time.local(2000, 7, 1).dst?    #=> false","name":"isdst","namespace":"Time","path":"Time#isdst","type":"instance_method","visibility":"public"},"Time#localtime":{"description":"Converts _time_ to local time (using the local time zone in\neffect for this process) modifying the receiver.\n\nIf +utc_offset+ is given, it is used instead of the local time.\n\n   t = Time.utc(2000, \"jan\", 1, 20, 15, 1) #=> 2000-01-01 20:15:01 UTC\n   t.utc?                                  #=> true\n\n   t.localtime                             #=> 2000-01-01 14:15:01 -0600\n   t.utc?                                  #=> false\n\n   t.localtime(\"+09:00\")                   #=> 2000-01-02 05:15:01 +0900\n   t.utc?                                  #=> false","name":"localtime","namespace":"Time","path":"Time#localtime","type":"instance_method","visibility":"public"},"Time#marshal_dump":{"description":":nodoc:","name":"marshal_dump","namespace":"Time","path":"Time#marshal_dump","type":"instance_method","visibility":"private"},"Time#marshal_load":{"description":":nodoc:","name":"marshal_load","namespace":"Time","path":"Time#marshal_load","type":"instance_method","visibility":"private"},"Time#mday":{"description":"Returns the day of the month (1..n) for _time_.\n\n   t = Time.now   #=> 2007-11-19 08:27:03 -0600\n   t.day          #=> 19\n   t.mday         #=> 19","name":"mday","namespace":"Time","path":"Time#mday","type":"instance_method","visibility":"public"},"Time#min":{"description":"Returns the minute of the hour (0..59) for _time_.\n\n   t = Time.now   #=> 2007-11-19 08:25:51 -0600\n   t.min          #=> 25","name":"min","namespace":"Time","path":"Time#min","type":"instance_method","visibility":"public"},"Time#mon":{"description":"Returns the month of the year (1..12) for _time_.\n\n   t = Time.now   #=> 2007-11-19 08:27:30 -0600\n   t.mon          #=> 11\n   t.month        #=> 11","name":"mon","namespace":"Time","path":"Time#mon","type":"instance_method","visibility":"public"},"Time#monday?":{"description":"Returns +true+ if _time_ represents Monday.\n\n   t = Time.local(2003, 8, 4)       #=> 2003-08-04 00:00:00 -0500\n   p t.monday?                      #=> true","name":"monday?","namespace":"Time","path":"Time#monday?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Time#month":{"description":"Returns the month of the year (1..12) for _time_.\n\n   t = Time.now   #=> 2007-11-19 08:27:30 -0600\n   t.mon          #=> 11\n   t.month        #=> 11","name":"month","namespace":"Time","path":"Time#month","type":"instance_method","visibility":"public"},"Time#nsec":{"description":"Returns the number of nanoseconds for _time_.\n\n   t = Time.now        #=> 2007-11-17 15:18:03 +0900\n   \"%10.9f\" % t.to_f   #=> \"1195280283.536151409\"\n   t.nsec              #=> 536151406\n\nThe lowest digits of #to_f and #nsec are different because\nIEEE 754 double is not accurate enough to represent\nthe exact number of nanoseconds since the Epoch.\n\nThe more accurate value is returned by #nsec.","name":"nsec","namespace":"Time","path":"Time#nsec","type":"instance_method","visibility":"public"},"Time#round":{"description":"Rounds sub seconds to a given precision in decimal digits (0 digits by default).\nIt returns a new Time object.\n+ndigits+ should be zero or positive integer.\n\n    require 'time'\n\n    t = Time.utc(2010,3,30, 5,43,\"25.123456789\".to_r)\n    p t.iso8601(10)           #=> \"2010-03-30T05:43:25.1234567890Z\"\n    p t.round.iso8601(10)     #=> \"2010-03-30T05:43:25.0000000000Z\"\n    p t.round(0).iso8601(10)  #=> \"2010-03-30T05:43:25.0000000000Z\"\n    p t.round(1).iso8601(10)  #=> \"2010-03-30T05:43:25.1000000000Z\"\n    p t.round(2).iso8601(10)  #=> \"2010-03-30T05:43:25.1200000000Z\"\n    p t.round(3).iso8601(10)  #=> \"2010-03-30T05:43:25.1230000000Z\"\n    p t.round(4).iso8601(10)  #=> \"2010-03-30T05:43:25.1235000000Z\"\n    p t.round(5).iso8601(10)  #=> \"2010-03-30T05:43:25.1234600000Z\"\n    p t.round(6).iso8601(10)  #=> \"2010-03-30T05:43:25.1234570000Z\"\n    p t.round(7).iso8601(10)  #=> \"2010-03-30T05:43:25.1234568000Z\"\n    p t.round(8).iso8601(10)  #=> \"2010-03-30T05:43:25.1234567900Z\"\n    p t.round(9).iso8601(10)  #=> \"2010-03-30T05:43:25.1234567890Z\"\n    p t.round(10).iso8601(10) #=> \"2010-03-30T05:43:25.1234567890Z\"\n\n    t = Time.utc(1999,12,31, 23,59,59)\n    p((t + 0.4).round.iso8601(3))    #=> \"1999-12-31T23:59:59.000Z\"\n    p((t + 0.49).round.iso8601(3))   #=> \"1999-12-31T23:59:59.000Z\"\n    p((t + 0.5).round.iso8601(3))    #=> \"2000-01-01T00:00:00.000Z\"\n    p((t + 1.4).round.iso8601(3))    #=> \"2000-01-01T00:00:00.000Z\"\n    p((t + 1.49).round.iso8601(3))   #=> \"2000-01-01T00:00:00.000Z\"\n    p((t + 1.5).round.iso8601(3))    #=> \"2000-01-01T00:00:01.000Z\"\n\n    t = Time.utc(1999,12,31, 23,59,59)\n    p (t + 0.123456789).round(4).iso8601(6)  #=> \"1999-12-31T23:59:59.123500Z\"","name":"round","namespace":"Time","path":"Time#round","type":"instance_method","visibility":"public"},"Time#saturday?":{"description":"Returns +true+ if _time_ represents Saturday.\n\n   t = Time.local(2006, 6, 10)      #=> 2006-06-10 00:00:00 -0500\n   t.saturday?                      #=> true","name":"saturday?","namespace":"Time","path":"Time#saturday?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Time#sec":{"description":"Returns the second of the minute (0..60) for _time_.\n\n*Note:* Seconds range from zero to 60 to allow the system to inject\nleap seconds. See http://en.wikipedia.org/wiki/Leap_second for further\ndetails.\n\n   t = Time.now   #=> 2007-11-19 08:25:02 -0600\n   t.sec          #=> 2","name":"sec","namespace":"Time","path":"Time#sec","type":"instance_method","visibility":"public"},"Time#strftime":{"description":"Formats _time_ according to the directives in the given format string.\n\nThe directives begin with a percent (%) character.\nAny text not listed as a directive will be passed through to the\noutput string.\n\nThe directive consists of a percent (%) character,\nzero or more flags, optional minimum field width,\noptional modifier and a conversion specifier\nas follows:\n\n  %<flags><width><modifier><conversion>\n\nFlags:\n  -  don't pad a numerical output\n  _  use spaces for padding\n  0  use zeros for padding\n  ^  upcase the result string\n  #  change case\n  :  use colons for %z\n\nThe minimum field width specifies the minimum width.\n\nThe modifiers are \"E\" and \"O\".\nThey are ignored.\n\nFormat directives:\n\n  Date (Year, Month, Day):\n    %Y - Year with century if provided, will pad result at least 4 digits.\n            -0001, 0000, 1995, 2009, 14292, etc.\n    %C - year / 100 (rounded down such as 20 in 2009)\n    %y - year % 100 (00..99)\n\n    %m - Month of the year, zero-padded (01..12)\n            %_m  blank-padded ( 1..12)\n            %-m  no-padded (1..12)\n    %B - The full month name (``January'')\n            %^B  uppercased (``JANUARY'')\n    %b - The abbreviated month name (``Jan'')\n            %^b  uppercased (``JAN'')\n    %h - Equivalent to %b\n\n    %d - Day of the month, zero-padded (01..31)\n            %-d  no-padded (1..31)\n    %e - Day of the month, blank-padded ( 1..31)\n\n    %j - Day of the year (001..366)\n\n  Time (Hour, Minute, Second, Subsecond):\n    %H - Hour of the day, 24-hour clock, zero-padded (00..23)\n    %k - Hour of the day, 24-hour clock, blank-padded ( 0..23)\n    %I - Hour of the day, 12-hour clock, zero-padded (01..12)\n    %l - Hour of the day, 12-hour clock, blank-padded ( 1..12)\n    %P - Meridian indicator, lowercase (``am'' or ``pm'')\n    %p - Meridian indicator, uppercase (``AM'' or ``PM'')\n\n    %M - Minute of the hour (00..59)\n\n    %S - Second of the minute (00..60)\n\n    %L - Millisecond of the second (000..999)\n         The digits under millisecond are truncated to not produce 1000.\n    %N - Fractional seconds digits, default is 9 digits (nanosecond)\n            %3N  millisecond (3 digits)\n            %6N  microsecond (6 digits)\n            %9N  nanosecond (9 digits)\n            %12N picosecond (12 digits)\n            %15N femtosecond (15 digits)\n            %18N attosecond (18 digits)\n            %21N zeptosecond (21 digits)\n            %24N yoctosecond (24 digits)\n         The digits under the specified length are truncated to avoid\n         carry up.\n\n  Time zone:\n    %z - Time zone as hour and minute offset from UTC (e.g. +0900)\n            %:z - hour and minute offset from UTC with a colon (e.g. +09:00)\n            %::z - hour, minute and second offset from UTC (e.g. +09:00:00)\n    %Z - Abbreviated time zone name or similar information.  (OS dependent)\n\n  Weekday:\n    %A - The full weekday name (``Sunday'')\n            %^A  uppercased (``SUNDAY'')\n    %a - The abbreviated name (``Sun'')\n            %^a  uppercased (``SUN'')\n    %u - Day of the week (Monday is 1, 1..7)\n    %w - Day of the week (Sunday is 0, 0..6)\n\n  ISO 8601 week-based year and week number:\n  The first week of YYYY starts with a Monday and includes YYYY-01-04.\n  The days in the year before the first week are in the last week of\n  the previous year.\n    %G - The week-based year\n    %g - The last 2 digits of the week-based year (00..99)\n    %V - Week number of the week-based year (01..53)\n\n  Week number:\n  The first week of YYYY that starts with a Sunday or Monday (according to %U\n  or %W). The days in the year before the first week are in week 0.\n    %U - Week number of the year. The week starts with Sunday. (00..53)\n    %W - Week number of the year. The week starts with Monday. (00..53)\n\n  Seconds since the Epoch:\n    %s - Number of seconds since 1970-01-01 00:00:00 UTC.\n\n  Literal string:\n    %n - Newline character (\\n)\n    %t - Tab character (\\t)\n    %% - Literal ``%'' character\n\n  Combination:\n    %c - date and time (%a %b %e %T %Y)\n    %D - Date (%m/%d/%y)\n    %F - The ISO 8601 date format (%Y-%m-%d)\n    %v - VMS date (%e-%^b-%4Y)\n    %x - Same as %D\n    %X - Same as %T\n    %r - 12-hour time (%I:%M:%S %p)\n    %R - 24-hour time (%H:%M)\n    %T - 24-hour time (%H:%M:%S)\n\nThis method is similar to strftime() function defined in ISO C and POSIX.\n\nWhile all directives are locale independent since Ruby 1.9, %Z is platform\ndependent.\nSo, the result may differ even if the same format string is used in other\nsystems such as C.\n\n%z is recommended over %Z.\n%Z doesn't identify the timezone.\nFor example, \"CST\" is used at America/Chicago (-06:00),\nAmerica/Havana (-05:00), Asia/Harbin (+08:00), Australia/Darwin (+09:30)\nand Australia/Adelaide (+10:30).\nAlso, %Z is highly dependent on the operating system.\nFor example, it may generate a non ASCII string on Japanese Windows.\ni.e. the result can be different to \"JST\".\nSo the numeric time zone offset, %z, is recommended.\n\nExamples:\n\n  t = Time.new(2007,11,19,8,37,48,\"-06:00\") #=> 2007-11-19 08:37:48 -0600\n  t.strftime(\"Printed on %m/%d/%Y\")   #=> \"Printed on 11/19/2007\"\n  t.strftime(\"at %I:%M%p\")            #=> \"at 08:37AM\"\n\nVarious ISO 8601 formats:\n  %Y%m%d           => 20071119                  Calendar date (basic)\n  %F               => 2007-11-19                Calendar date (extended)\n  %Y-%m            => 2007-11                   Calendar date, reduced accuracy, specific month\n  %Y               => 2007                      Calendar date, reduced accuracy, specific year\n  %C               => 20                        Calendar date, reduced accuracy, specific century\n  %Y%j             => 2007323                   Ordinal date (basic)\n  %Y-%j            => 2007-323                  Ordinal date (extended)\n  %GW%V%u          => 2007W471                  Week date (basic)\n  %G-W%V-%u        => 2007-W47-1                Week date (extended)\n  %GW%V            => 2007W47                   Week date, reduced accuracy, specific week (basic)\n  %G-W%V           => 2007-W47                  Week date, reduced accuracy, specific week (extended)\n  %H%M%S           => 083748                    Local time (basic)\n  %T               => 08:37:48                  Local time (extended)\n  %H%M             => 0837                      Local time, reduced accuracy, specific minute (basic)\n  %H:%M            => 08:37                     Local time, reduced accuracy, specific minute (extended)\n  %H               => 08                        Local time, reduced accuracy, specific hour\n  %H%M%S,%L        => 083748,000                Local time with decimal fraction, comma as decimal sign (basic)\n  %T,%L            => 08:37:48,000              Local time with decimal fraction, comma as decimal sign (extended)\n  %H%M%S.%L        => 083748.000                Local time with decimal fraction, full stop as decimal sign (basic)\n  %T.%L            => 08:37:48.000              Local time with decimal fraction, full stop as decimal sign (extended)\n  %H%M%S%z         => 083748-0600               Local time and the difference from UTC (basic)\n  %T%:z            => 08:37:48-06:00            Local time and the difference from UTC (extended)\n  %Y%m%dT%H%M%S%z  => 20071119T083748-0600      Date and time of day for calendar date (basic)\n  %FT%T%:z         => 2007-11-19T08:37:48-06:00 Date and time of day for calendar date (extended)\n  %Y%jT%H%M%S%z    => 2007323T083748-0600       Date and time of day for ordinal date (basic)\n  %Y-%jT%T%:z      => 2007-323T08:37:48-06:00   Date and time of day for ordinal date (extended)\n  %GW%V%uT%H%M%S%z => 2007W471T083748-0600      Date and time of day for week date (basic)\n  %G-W%V-%uT%T%:z  => 2007-W47-1T08:37:48-06:00 Date and time of day for week date (extended)\n  %Y%m%dT%H%M      => 20071119T0837             Calendar date and local time (basic)\n  %FT%R            => 2007-11-19T08:37          Calendar date and local time (extended)\n  %Y%jT%H%MZ       => 2007323T0837Z             Ordinal date and UTC of day (basic)\n  %Y-%jT%RZ        => 2007-323T08:37Z           Ordinal date and UTC of day (extended)\n  %GW%V%uT%H%M%z   => 2007W471T0837-0600        Week date and local time and difference from UTC (basic)\n  %G-W%V-%uT%R%:z  => 2007-W47-1T08:37-06:00    Week date and local time and difference from UTC (extended)","name":"strftime","namespace":"Time","path":"Time#strftime","type":"instance_method","visibility":"public"},"Time#subsec":{"description":"Returns the fraction for _time_.\n\nThe return value can be a rational number.\n\n   t = Time.now        #=> 2009-03-26 22:33:12 +0900\n   \"%10.9f\" % t.to_f   #=> \"1238074392.940563917\"\n   t.subsec            #=> (94056401/100000000)\n\nThe lowest digits of #to_f and #subsec are different because\nIEEE 754 double is not accurate enough to represent\nthe rational number.\n\nThe more accurate value is returned by #subsec.","name":"subsec","namespace":"Time","path":"Time#subsec","type":"instance_method","visibility":"public"},"Time#succ":{"description":"","name":"succ","namespace":"Time","path":"Time#succ","type":"instance_method","visibility":"public"},"Time#sunday?":{"description":"Returns +true+ if _time_ represents Sunday.\n\n   t = Time.local(1990, 4, 1)       #=> 1990-04-01 00:00:00 -0600\n   t.sunday?                        #=> true","name":"sunday?","namespace":"Time","path":"Time#sunday?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Time#thursday?":{"description":"Returns +true+ if _time_ represents Thursday.\n\n   t = Time.local(1995, 12, 21)     #=> 1995-12-21 00:00:00 -0600\n   p t.thursday?                    #=> true","name":"thursday?","namespace":"Time","path":"Time#thursday?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Time#to_a":{"description":"Returns a ten-element _array_ of values for _time_:\n\n   [sec, min, hour, day, month, year, wday, yday, isdst, zone]\n\nSee the individual methods for an explanation of the\nvalid ranges of each value. The ten elements can be passed directly\nto Time::utc or Time::local to create a\nnew Time object.\n\n   t = Time.now     #=> 2007-11-19 08:36:01 -0600\n   now = t.to_a     #=> [1, 36, 8, 19, 11, 2007, 1, 323, false, \"CST\"]","name":"to_a","namespace":"Time","path":"Time#to_a","type":"instance_method","visibility":"public"},"Time#to_f":{"description":"Returns the value of _time_ as a floating point number of\nseconds since the Epoch.\n\n   t = Time.now\n   \"%10.5f\" % t.to_f   #=> \"1270968744.77658\"\n   t.to_i              #=> 1270968744\n\nNote that IEEE 754 double is not accurate enough to represent\nthe number of nanoseconds since the Epoch.","name":"to_f","namespace":"Time","path":"Time#to_f","type":"instance_method","visibility":"public"},"Time#to_i":{"description":"Returns the value of _time_ as an integer number of seconds\nsince the Epoch.\n\n   t = Time.now\n   \"%10.5f\" % t.to_f   #=> \"1270968656.89607\"\n   t.to_i              #=> 1270968656","name":"to_i","namespace":"Time","path":"Time#to_i","type":"instance_method","visibility":"public"},"Time#to_r":{"description":"Returns the value of _time_ as a rational number of seconds\nsince the Epoch.\n\n   t = Time.now\n   p t.to_r            #=> (1270968792716287611/1000000000)\n\nThis methods is intended to be used to get an accurate value\nrepresenting the nanoseconds since the Epoch. You can use this method\nto convert _time_ to another Epoch.","name":"to_r","namespace":"Time","path":"Time#to_r","type":"instance_method","visibility":"public"},"Time#to_s":{"description":"Returns a string representing _time_. Equivalent to calling\n#strftime with the appropriate format string.\n\n   t = Time.now\n   t.to_s                              => \"2012-11-10 18:16:12 +0100\"\n   t.strftime \"%Y-%m-%d %H:%M:%S %z\"   => \"2012-11-10 18:16:12 +0100\"\n\n   t.utc.to_s                          => \"2012-11-10 17:16:12 UTC\"\n   t.strftime \"%Y-%m-%d %H:%M:%S UTC\"  => \"2012-11-10 17:16:12 UTC\"","name":"to_s","namespace":"Time","path":"Time#to_s","type":"instance_method","visibility":"public"},"Time#tuesday?":{"description":"Returns +true+ if _time_ represents Tuesday.\n\n   t = Time.local(1991, 2, 19)      #=> 1991-02-19 00:00:00 -0600\n   p t.tuesday?                     #=> true","name":"tuesday?","namespace":"Time","path":"Time#tuesday?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Time#tv_nsec":{"description":"Returns the number of nanoseconds for _time_.\n\n   t = Time.now        #=> 2007-11-17 15:18:03 +0900\n   \"%10.9f\" % t.to_f   #=> \"1195280283.536151409\"\n   t.nsec              #=> 536151406\n\nThe lowest digits of #to_f and #nsec are different because\nIEEE 754 double is not accurate enough to represent\nthe exact number of nanoseconds since the Epoch.\n\nThe more accurate value is returned by #nsec.","name":"tv_nsec","namespace":"Time","path":"Time#tv_nsec","type":"instance_method","visibility":"public"},"Time#tv_sec":{"description":"Returns the value of _time_ as an integer number of seconds\nsince the Epoch.\n\n   t = Time.now\n   \"%10.5f\" % t.to_f   #=> \"1270968656.89607\"\n   t.to_i              #=> 1270968656","name":"tv_sec","namespace":"Time","path":"Time#tv_sec","type":"instance_method","visibility":"public"},"Time#tv_usec":{"description":"Returns the number of microseconds for _time_.\n\n   t = Time.now        #=> 2007-11-19 08:03:26 -0600\n   \"%10.6f\" % t.to_f   #=> \"1195481006.775195\"\n   t.usec              #=> 775195","name":"tv_usec","namespace":"Time","path":"Time#tv_usec","type":"instance_method","visibility":"public"},"Time#usec":{"description":"Returns the number of microseconds for _time_.\n\n   t = Time.now        #=> 2007-11-19 08:03:26 -0600\n   \"%10.6f\" % t.to_f   #=> \"1195481006.775195\"\n   t.usec              #=> 775195","name":"usec","namespace":"Time","path":"Time#usec","type":"instance_method","visibility":"public"},"Time#utc":{"description":"Converts _time_ to UTC (GMT), modifying the receiver.\n\n   t = Time.now   #=> 2007-11-19 08:18:31 -0600\n   t.gmt?         #=> false\n   t.gmtime       #=> 2007-11-19 14:18:31 UTC\n   t.gmt?         #=> true\n\n   t = Time.now   #=> 2007-11-19 08:18:51 -0600\n   t.utc?         #=> false\n   t.utc          #=> 2007-11-19 14:18:51 UTC\n   t.utc?         #=> true","name":"utc","namespace":"Time","path":"Time#utc","type":"instance_method","visibility":"public"},"Time#utc?":{"description":"Returns +true+ if _time_ represents a time in UTC (GMT).\n\n   t = Time.now                        #=> 2007-11-19 08:15:23 -0600\n   t.utc?                              #=> false\n   t = Time.gm(2000,\"jan\",1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\n   t.utc?                              #=> true\n\n   t = Time.now                        #=> 2007-11-19 08:16:03 -0600\n   t.gmt?                              #=> false\n   t = Time.gm(2000,1,1,20,15,1)       #=> 2000-01-01 20:15:01 UTC\n   t.gmt?                              #=> true","name":"utc?","namespace":"Time","path":"Time#utc?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Time#utc_offset":{"description":"Returns the offset in seconds between the timezone of _time_\nand UTC.\n\n   t = Time.gm(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\n   t.gmt_offset                    #=> 0\n   l = t.getlocal                  #=> 2000-01-01 14:15:01 -0600\n   l.gmt_offset                    #=> -21600","name":"utc_offset","namespace":"Time","path":"Time#utc_offset","type":"instance_method","visibility":"public"},"Time#wday":{"description":"Returns an integer representing the day of the week, 0..6, with\nSunday == 0.\n\n   t = Time.now   #=> 2007-11-20 02:35:35 -0600\n   t.wday         #=> 2\n   t.sunday?      #=> false\n   t.monday?      #=> false\n   t.tuesday?     #=> true\n   t.wednesday?   #=> false\n   t.thursday?    #=> false\n   t.friday?      #=> false\n   t.saturday?    #=> false","name":"wday","namespace":"Time","path":"Time#wday","type":"instance_method","visibility":"public"},"Time#wednesday?":{"description":"Returns +true+ if _time_ represents Wednesday.\n\n   t = Time.local(1993, 2, 24)      #=> 1993-02-24 00:00:00 -0600\n   p t.wednesday?                   #=> true","name":"wednesday?","namespace":"Time","path":"Time#wednesday?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Time#yday":{"description":"Returns an integer representing the day of the year, 1..366.\n\n   t = Time.now   #=> 2007-11-19 08:32:31 -0600\n   t.yday         #=> 323","name":"yday","namespace":"Time","path":"Time#yday","type":"instance_method","visibility":"public"},"Time#year":{"description":"Returns the year for _time_ (including the century).\n\n   t = Time.now   #=> 2007-11-19 08:27:51 -0600\n   t.year         #=> 2007","name":"year","namespace":"Time","path":"Time#year","type":"instance_method","visibility":"public"},"Time#zone":{"description":"Returns the name of the time zone used for _time_. As of Ruby\n1.8, returns ``UTC'' rather than ``GMT'' for UTC times.\n\n   t = Time.gm(2000, \"jan\", 1, 20, 15, 1)\n   t.zone   #=> \"UTC\"\n   t = Time.local(2000, \"jan\", 1, 20, 15, 1)\n   t.zone   #=> \"CST\"","name":"zone","namespace":"Time","path":"Time#zone","type":"instance_method","visibility":"public"},"Time.at":{"description":"Creates a new Time object with the value given by +time+,\nthe given number of +seconds_with_frac+, or\n+seconds+ and +microseconds_with_frac+ since the Epoch.\n+seconds_with_frac+ and +microseconds_with_frac+\ncan be an Integer, Float, Rational, or other Numeric.\nnon-portable feature allows the offset to be negative on some systems.\n\nIf a numeric argument is given, the result is in local time.\n\n   Time.at(0)                                #=> 1969-12-31 18:00:00 -0600\n   Time.at(Time.at(0))                       #=> 1969-12-31 18:00:00 -0600\n   Time.at(946702800)                        #=> 1999-12-31 23:00:00 -0600\n   Time.at(-284061600)                       #=> 1960-12-31 00:00:00 -0600\n   Time.at(946684800.2).usec                 #=> 200000\n   Time.at(946684800, 123456.789).nsec       #=> 123456789\n   Time.at(946684800, 123456789, :nsec).nsec  #=> 123456789","name":"at","namespace":"Time","path":"Time.at","type":"class_method","visibility":"public"},"Time.gm":{"description":"Creates a Time object based on given values, interpreted as UTC (GMT). The\nyear must be specified. Other values default to the minimum value\nfor that field (and may be +nil+ or omitted). Months may\nbe specified by numbers from 1 to 12, or by the three-letter English\nmonth names. Hours are specified on a 24-hour clock (0..23). Raises\nan ArgumentError if any values are out of range. Will\nalso accept ten arguments in the order output by Time#to_a.\n\n+sec_with_frac+ and +usec_with_frac+ can have a fractional part.\n\n   Time.utc(2000,\"jan\",1,20,15,1)  #=> 2000-01-01 20:15:01 UTC\n   Time.gm(2000,\"jan\",1,20,15,1)   #=> 2000-01-01 20:15:01 UTC","name":"gm","namespace":"Time","path":"Time.gm","type":"class_method","visibility":"public"},"Time.local":{"description":"Same as Time::gm, but interprets the values in the\nlocal time zone.\n\n   Time.local(2000,\"jan\",1,20,15,1)   #=> 2000-01-01 20:15:01 -0600","name":"local","namespace":"Time","path":"Time.local","type":"class_method","visibility":"public"},"Time.mktime":{"description":"Same as Time::gm, but interprets the values in the\nlocal time zone.\n\n   Time.local(2000,\"jan\",1,20,15,1)   #=> 2000-01-01 20:15:01 -0600","name":"mktime","namespace":"Time","path":"Time.mktime","type":"class_method","visibility":"public"},"Time.now":{"description":"Creates a new Time object for the current time.\nThis is same as Time.new without arguments.\n\n   Time.now            #=> 2009-06-24 12:39:54 +0900","name":"now","namespace":"Time","path":"Time.now","type":"class_method","visibility":"public"},"Time.utc":{"description":"Creates a Time object based on given values, interpreted as UTC (GMT). The\nyear must be specified. Other values default to the minimum value\nfor that field (and may be +nil+ or omitted). Months may\nbe specified by numbers from 1 to 12, or by the three-letter English\nmonth names. Hours are specified on a 24-hour clock (0..23). Raises\nan ArgumentError if any values are out of range. Will\nalso accept ten arguments in the order output by Time#to_a.\n\n+sec_with_frac+ and +usec_with_frac+ can have a fractional part.\n\n   Time.utc(2000,\"jan\",1,20,15,1)  #=> 2000-01-01 20:15:01 UTC\n   Time.gm(2000,\"jan\",1,20,15,1)   #=> 2000-01-01 20:15:01 UTC","name":"utc","namespace":"Time","path":"Time.utc","type":"class_method","visibility":"public"},"RubyVM":{"description":"","name":"RubyVM","namespace":"","path":"RubyVM","type":"class","visibility":"public"},"RubyVM.NSDR":{"description":":nodoc:","name":"NSDR","namespace":"RubyVM","path":"RubyVM.NSDR","type":"class_method","visibility":"public"},"RubyVM.SDR":{"description":":nodoc:","name":"SDR","namespace":"RubyVM","path":"RubyVM.SDR","type":"class_method","visibility":"public"},"RubyVM.USAGE_ANALYSIS_INSN_STOP":{"description":"","name":"USAGE_ANALYSIS_INSN_STOP","namespace":"RubyVM","path":"RubyVM.USAGE_ANALYSIS_INSN_STOP","type":"class_method","visibility":"public"},"RubyVM.USAGE_ANALYSIS_OPERAND_STOP":{"description":"","name":"USAGE_ANALYSIS_OPERAND_STOP","namespace":"RubyVM","path":"RubyVM.USAGE_ANALYSIS_OPERAND_STOP","type":"class_method","visibility":"public"},"RubyVM.USAGE_ANALYSIS_REGISTER_STOP":{"description":"","name":"USAGE_ANALYSIS_REGISTER_STOP","namespace":"RubyVM","path":"RubyVM.USAGE_ANALYSIS_REGISTER_STOP","type":"class_method","visibility":"public"},"RubyVM.stat":{"description":"Returns a Hash containing implementation-dependent counters inside the VM.\n\nThis hash includes information about method/constant cache serials:\n\n  {\n    :global_method_state=>251,\n    :global_constant_state=>481,\n    :class_serial=>9029\n  }\n\nThe contents of the hash are implementation specific and may be changed in\nthe future.\n\nThis method is only expected to work on C Ruby.","name":"stat","namespace":"RubyVM","path":"RubyVM.stat","type":"class_method","visibility":"public"},"RubyVM::DEFAULT_PARAMS":{"description":"RubyVM::DEFAULT_PARAMS\nThis constant variable shows VM's default parameters.\nNote that changing these values does not affect VM execution.\nSpecification is not stable and you should not depend on this value.\nOf course, this constant is MRI specific.","name":"DEFAULT_PARAMS","namespace":"RubyVM","path":"RubyVM::DEFAULT_PARAMS","type":"constant","return":["Hash",""],"visibility":"public"},"RubyVM::INSTRUCTION_NAMES":{"description":"RubyVM::INSTRUCTION_NAMES","name":"INSTRUCTION_NAMES","namespace":"RubyVM","path":"RubyVM::INSTRUCTION_NAMES","type":"constant","return":["Array",""],"visibility":"public"},"RubyVM::InstructionSequence":{"description":"The InstructionSequence class represents a compiled sequence of\ninstructions for the Ruby Virtual Machine.\n\nWith it, you can get a handle to the instructions that make up a method or\na proc, compile strings of Ruby code down to VM instructions, and\ndisassemble instruction sequences to strings for easy inspection. It is\nmostly useful if you want to learn how the Ruby VM works, but it also lets\nyou control various settings for the Ruby iseq compiler.\n\nYou can find the source for the VM instructions in +insns.def+ in the Ruby\nsource.\n\nThe instruction sequence results will almost certainly change as Ruby\nchanges, so example output in this documentation may be different from what\nyou see.","name":"InstructionSequence","namespace":"RubyVM","path":"RubyVM::InstructionSequence","type":"class","visibility":"public"},"RubyVM::InstructionSequence#absolute_path":{"description":"Returns the absolute path of this instruction sequence.\n\n+nil+ if the iseq was evaluated from a string.\n\nFor example, using ::compile_file:\n\n# /tmp/method.rb\ndef hello\n puts \"hello, world\"\nend\n\n# in irb\n> iseq = RubyVM::InstructionSequence.compile_file('/tmp/method.rb')\n> iseq.absolute_path #=> /tmp/method.rb","name":"absolute_path","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence#absolute_path","type":"instance_method","visibility":"public"},"RubyVM::InstructionSequence#base_label":{"description":"Returns the base label of this instruction sequence.\n\nFor example, using irb:\n\niseq = RubyVM::InstructionSequence.compile('num = 1 + 2')\n#=> <RubyVM::InstructionSequence:<compiled>@<compiled>>\niseq.base_label\n#=> \"<compiled>\"\n\nUsing ::compile_file:\n\n# /tmp/method.rb\ndef hello\n puts \"hello, world\"\nend\n\n# in irb\n> iseq = RubyVM::InstructionSequence.compile_file('/tmp/method.rb')\n> iseq.base_label #=> <main>","name":"base_label","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence#base_label","type":"instance_method","visibility":"public"},"RubyVM::InstructionSequence#disasm":{"description":"Returns the instruction sequence as a +String+ in human readable form.\n\n  puts RubyVM::InstructionSequence.compile('1 + 2').disasm\n\nProduces:\n\n  == disasm: <RubyVM::InstructionSequence:<compiled>@<compiled>>==========\n  0000 trace            1                                               (   1)\n  0002 putobject        1\n  0004 putobject        2\n  0006 opt_plus         <ic:1>\n  0008 leave","name":"disasm","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence#disasm","type":"instance_method","visibility":"public"},"RubyVM::InstructionSequence#disassemble":{"description":"Returns the instruction sequence as a +String+ in human readable form.\n\n  puts RubyVM::InstructionSequence.compile('1 + 2').disasm\n\nProduces:\n\n  == disasm: <RubyVM::InstructionSequence:<compiled>@<compiled>>==========\n  0000 trace            1                                               (   1)\n  0002 putobject        1\n  0004 putobject        2\n  0006 opt_plus         <ic:1>\n  0008 leave","name":"disassemble","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence#disassemble","type":"instance_method","visibility":"public"},"RubyVM::InstructionSequence#each_child":{"description":"Iterate all direct child instruction sequences.\nIteration order is implementation/version defined\nso that people should not rely on the order.","name":"each_child","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence#each_child","type":"instance_method","visibility":"public"},"RubyVM::InstructionSequence#eval":{"description":"Evaluates the instruction sequence and returns the result.\n\n    RubyVM::InstructionSequence.compile(\"1 + 2\").eval #=> 3","name":"eval","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence#eval","type":"instance_method","visibility":"public"},"RubyVM::InstructionSequence#first_lineno":{"description":"Returns the number of the first source line where the instruction sequence\nwas loaded from.\n\nFor example, using irb:\n\niseq = RubyVM::InstructionSequence.compile('num = 1 + 2')\n#=> <RubyVM::InstructionSequence:<compiled>@<compiled>>\niseq.first_lineno\n#=> 1","name":"first_lineno","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence#first_lineno","type":"instance_method","visibility":"public"},"RubyVM::InstructionSequence#inspect":{"description":"Returns a human-readable string representation of this instruction\nsequence, including the #label and #path.","name":"inspect","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence#inspect","type":"instance_method","visibility":"public"},"RubyVM::InstructionSequence#label":{"description":"Returns the label of this instruction sequence.\n\n<code><main></code> if it's at the top level, <code><compiled></code> if it\nwas evaluated from a string.\n\nFor example, using irb:\n\niseq = RubyVM::InstructionSequence.compile('num = 1 + 2')\n#=> <RubyVM::InstructionSequence:<compiled>@<compiled>>\niseq.label\n#=> \"<compiled>\"\n\nUsing ::compile_file:\n\n# /tmp/method.rb\ndef hello\n puts \"hello, world\"\nend\n\n# in irb\n> iseq = RubyVM::InstructionSequence.compile_file('/tmp/method.rb')\n> iseq.label #=> <main>","name":"label","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence#label","type":"instance_method","visibility":"public"},"RubyVM::InstructionSequence#marshal_dump":{"description":"","name":"marshal_dump","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence#marshal_dump","type":"instance_method","visibility":"private"},"RubyVM::InstructionSequence#marshal_load":{"description":"","name":"marshal_load","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence#marshal_load","type":"instance_method","visibility":"private"},"RubyVM::InstructionSequence#path":{"description":"Returns the path of this instruction sequence.\n\n<code><compiled></code> if the iseq was evaluated from a string.\n\nFor example, using irb:\n\niseq = RubyVM::InstructionSequence.compile('num = 1 + 2')\n#=> <RubyVM::InstructionSequence:<compiled>@<compiled>>\niseq.path\n#=> \"<compiled>\"\n\nUsing ::compile_file:\n\n# /tmp/method.rb\ndef hello\n puts \"hello, world\"\nend\n\n# in irb\n> iseq = RubyVM::InstructionSequence.compile_file('/tmp/method.rb')\n> iseq.path #=> /tmp/method.rb","name":"path","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence#path","type":"instance_method","visibility":"public"},"RubyVM::InstructionSequence#to_a":{"description":"Returns an Array with 14 elements representing the instruction sequence\nwith the following data:\n\n[magic]\n  A string identifying the data format. <b>Always\n  +YARVInstructionSequence/SimpleDataFormat+.</b>\n\n[major_version]\n  The major version of the instruction sequence.\n\n[minor_version]\n  The minor version of the instruction sequence.\n\n[format_type]\n  A number identifying the data format. <b>Always 1</b>.\n\n[misc]\n  A hash containing:\n\n  [+:arg_size+]\nthe total number of arguments taken by the method or the block (0 if\n_iseq_ doesn't represent a method or block)\n  [+:local_size+]\nthe number of local variables + 1\n  [+:stack_max+]\nused in calculating the stack depth at which a SystemStackError is\nthrown.\n\n[#label]\n  The name of the context (block, method, class, module, etc.) that this\n  instruction sequence belongs to.\n\n  <code><main></code> if it's at the top level, <code><compiled></code> if\n  it was evaluated from a string.\n\n[#path]\n  The relative path to the Ruby file where the instruction sequence was\n  loaded from.\n\n  <code><compiled></code> if the iseq was evaluated from a string.\n\n[#absolute_path]\n  The absolute path to the Ruby file where the instruction sequence was\n  loaded from.\n\n  +nil+ if the iseq was evaluated from a string.\n\n[#first_lineno]\n  The number of the first source line where the instruction sequence was\n  loaded from.\n\n[type]\n  The type of the instruction sequence.\n\n  Valid values are +:top+, +:method+, +:block+, +:class+, +:rescue+,\n  +:ensure+, +:eval+, +:main+, and +:defined_guard+.\n\n[locals]\n  An array containing the names of all arguments and local variables as\n  symbols.\n\n[params]\n  An Hash object containing parameter information.\n\n  More info about these values can be found in +vm_core.h+.\n\n[catch_table]\n  A list of exceptions and control flow operators (rescue, next, redo,\n  break, etc.).\n\n[bytecode]\n  An array of arrays containing the instruction names and operands that\n  make up the body of the instruction sequence.\n\nNote that this format is MRI specific and version dependent.","name":"to_a","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence#to_a","type":"instance_method","visibility":"public"},"RubyVM::InstructionSequence#to_binary":{"description":"Returns serialized iseq binary format data as a String object.\nA corresponding iseq object is created by\nRubyVM::InstructionSequence.load_from_binary() method.\n\nString extra_data will be saved with binary data.\nYou can access this data with\nRubyVM::InstructionSequence.load_from_binary_extra_data(binary).\n\nNote that the translated binary data is not portable.\nYou can not move this binary data to another machine.\nYou can not use the binary data which is created by another\nversion/another architecture of Ruby.","name":"to_binary","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence#to_binary","type":"instance_method","visibility":"public"},"RubyVM::InstructionSequence#trace_points":{"description":"Return trace points in the instruction sequence.\nReturn an array of [line, event_symbol] pair.","name":"trace_points","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence#trace_points","type":"instance_method","visibility":"public"},"RubyVM::InstructionSequence.compile":{"description":"Takes +source+, a String of Ruby code and compiles it to an\nInstructionSequence.\n\nOptionally takes +file+, +path+, and +line+ which describe the filename,\nabsolute path and first line number of the ruby code in +source+ which are\nmetadata attached to the returned +iseq+.\n\n+options+, which can be +true+, +false+ or a +Hash+, is used to\nmodify the default behavior of the Ruby iseq compiler.\n\nFor details regarding valid compile options see ::compile_option=.\n\n   RubyVM::InstructionSequence.compile(\"a = 1 + 2\")\n   #=> <RubyVM::InstructionSequence:<compiled>@<compiled>>","name":"compile","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence.compile","type":"class_method","visibility":"public"},"RubyVM::InstructionSequence.compile_file":{"description":"Takes +file+, a String with the location of a Ruby source file, reads,\nparses and compiles the file, and returns +iseq+, the compiled\nInstructionSequence with source location metadata set.\n\nOptionally takes +options+, which can be +true+, +false+ or a +Hash+, to\nmodify the default behavior of the Ruby iseq compiler.\n\nFor details regarding valid compile options see ::compile_option=.\n\n    # /tmp/hello.rb\n    puts \"Hello, world!\"\n\n    # elsewhere\n    RubyVM::InstructionSequence.compile_file(\"/tmp/hello.rb\")\n    #=> <RubyVM::InstructionSequence:<main>@/tmp/hello.rb>","name":"compile_file","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence.compile_file","type":"class_method","visibility":"public"},"RubyVM::InstructionSequence.compile_option":{"description":"Returns a hash of default options used by the Ruby iseq compiler.\n\nFor details, see InstructionSequence.compile_option=.","name":"compile_option","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence.compile_option","type":"class_method","visibility":"public"},"RubyVM::InstructionSequence.compile_option=":{"description":"Sets the default values for various optimizations in the Ruby iseq\ncompiler.\n\nPossible values for +options+ include +true+, which enables all options,\n+false+ which disables all options, and +nil+ which leaves all options\nunchanged.\n\nYou can also pass a +Hash+ of +options+ that you want to change, any\noptions not present in the hash will be left unchanged.\n\nPossible option names (which are keys in +options+) which can be set to\n+true+ or +false+ include:\n\n* +:inline_const_cache+\n* +:instructions_unification+\n* +:operands_unification+\n* +:peephole_optimization+\n* +:specialized_instruction+\n* +:stack_caching+\n* +:tailcall_optimization+\n\nAdditionally, +:debug_level+ can be set to an integer.\n\nThese default options can be overwritten for a single run of the iseq\ncompiler by passing any of the above values as the +options+ parameter to\n::new, ::compile and ::compile_file.","name":"compile_option=","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence.compile_option=","type":"class_method","visibility":"public"},"RubyVM::InstructionSequence.disasm":{"description":"Takes +body+, a Method or Proc object, and returns a String with the\nhuman readable instructions for +body+.\n\nFor a Method object:\n\n  # /tmp/method.rb\n  def hello\n    puts \"hello, world\"\n  end\n\n  puts RubyVM::InstructionSequence.disasm(method(:hello))\n\nProduces:\n\n  == disasm: <RubyVM::InstructionSequence:hello@/tmp/method.rb>============\n  0000 trace            8                                               (   1)\n  0002 trace            1                                               (   2)\n  0004 putself\n  0005 putstring        \"hello, world\"\n  0007 send             :puts, 1, nil, 8, <ic:0>\n  0013 trace            16                                              (   3)\n  0015 leave                                                            (   2)\n\nFor a Proc:\n\n  # /tmp/proc.rb\n  p = proc { num = 1 + 2 }\n  puts RubyVM::InstructionSequence.disasm(p)\n\nProduces:\n\n  == disasm: <RubyVM::InstructionSequence:block in <main>@/tmp/proc.rb>===\n  == catch table\n  | catch type: redo   st: 0000 ed: 0012 sp: 0000 cont: 0000\n  | catch type: next   st: 0000 ed: 0012 sp: 0000 cont: 0012\n  |------------------------------------------------------------------------\n  local table (size: 2, argc: 0 [opts: 0, rest: -1, post: 0, block: -1] s1)\n  [ 2] num\n  0000 trace            1                                               (   1)\n  0002 putobject        1\n  0004 putobject        2\n  0006 opt_plus         <ic:1>\n  0008 dup\n  0009 setlocal         num, 0\n  0012 leave","name":"disasm","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence.disasm","type":"class_method","visibility":"public"},"RubyVM::InstructionSequence.disassemble":{"description":"Takes +body+, a Method or Proc object, and returns a String with the\nhuman readable instructions for +body+.\n\nFor a Method object:\n\n  # /tmp/method.rb\n  def hello\n    puts \"hello, world\"\n  end\n\n  puts RubyVM::InstructionSequence.disasm(method(:hello))\n\nProduces:\n\n  == disasm: <RubyVM::InstructionSequence:hello@/tmp/method.rb>============\n  0000 trace            8                                               (   1)\n  0002 trace            1                                               (   2)\n  0004 putself\n  0005 putstring        \"hello, world\"\n  0007 send             :puts, 1, nil, 8, <ic:0>\n  0013 trace            16                                              (   3)\n  0015 leave                                                            (   2)\n\nFor a Proc:\n\n  # /tmp/proc.rb\n  p = proc { num = 1 + 2 }\n  puts RubyVM::InstructionSequence.disasm(p)\n\nProduces:\n\n  == disasm: <RubyVM::InstructionSequence:block in <main>@/tmp/proc.rb>===\n  == catch table\n  | catch type: redo   st: 0000 ed: 0012 sp: 0000 cont: 0000\n  | catch type: next   st: 0000 ed: 0012 sp: 0000 cont: 0012\n  |------------------------------------------------------------------------\n  local table (size: 2, argc: 0 [opts: 0, rest: -1, post: 0, block: -1] s1)\n  [ 2] num\n  0000 trace            1                                               (   1)\n  0002 putobject        1\n  0004 putobject        2\n  0006 opt_plus         <ic:1>\n  0008 dup\n  0009 setlocal         num, 0\n  0012 leave","name":"disassemble","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence.disassemble","type":"class_method","visibility":"public"},"RubyVM::InstructionSequence.load":{"description":":nodoc:","name":"load","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence.load","type":"class_method","visibility":"public"},"RubyVM::InstructionSequence.load_from_binary":{"description":"Load an iseq object from binary format String object\ncreated by RubyVM::InstructionSequence.to_binary.\n\nThis loader does not have a verifier, so that loading broken/modified\nbinary causes critical problem.\n\nYou should not load binary data provided by others.\nYou should use binary data translated by yourself.","name":"load_from_binary","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence.load_from_binary","type":"class_method","visibility":"public"},"RubyVM::InstructionSequence.load_from_binary_extra_data":{"description":"Load extra data embed into binary format String object.","name":"load_from_binary_extra_data","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence.load_from_binary_extra_data","type":"class_method","visibility":"public"},"RubyVM::InstructionSequence.new":{"description":"Takes +source+, a String of Ruby code and compiles it to an\nInstructionSequence.\n\nOptionally takes +file+, +path+, and +line+ which describe the filename,\nabsolute path and first line number of the ruby code in +source+ which are\nmetadata attached to the returned +iseq+.\n\n+options+, which can be +true+, +false+ or a +Hash+, is used to\nmodify the default behavior of the Ruby iseq compiler.\n\nFor details regarding valid compile options see ::compile_option=.\n\n   RubyVM::InstructionSequence.compile(\"a = 1 + 2\")\n   #=> <RubyVM::InstructionSequence:<compiled>@<compiled>>","name":"new","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence.new","type":"class_method","visibility":"public"},"RubyVM::InstructionSequence.of":{"description":"Returns the instruction sequence containing the given proc or method.\n\nFor example, using irb:\n\n# a proc\n> p = proc { num = 1 + 2 }\n> RubyVM::InstructionSequence.of(p)\n> #=> <RubyVM::InstructionSequence:block in irb_binding@(irb)>\n\n# for a method\n> def foo(bar); puts bar; end\n> RubyVM::InstructionSequence.of(method(:foo))\n> #=> <RubyVM::InstructionSequence:foo@(irb)>\n\nUsing ::compile_file:\n\n# /tmp/iseq_of.rb\ndef hello\n puts \"hello, world\"\nend\n\n$a_global_proc = proc { str = 'a' + 'b' }\n\n# in irb\n> require '/tmp/iseq_of.rb'\n\n# first the method hello\n> RubyVM::InstructionSequence.of(method(:hello))\n> #=> #<RubyVM::InstructionSequence:0x007fb73d7cb1d0>\n\n# then the global proc\n> RubyVM::InstructionSequence.of($a_global_proc)\n> #=> #<RubyVM::InstructionSequence:0x007fb73d7caf78>","name":"of","namespace":"RubyVM::InstructionSequence","path":"RubyVM::InstructionSequence.of","type":"class_method","visibility":"public"},"RubyVM::OPTS":{"description":"RubyVM::OPTS, which shows vm build options","name":"OPTS","namespace":"RubyVM","path":"RubyVM::OPTS","type":"constant","return":["Array",""],"visibility":"public"},"UncaughtThrowError":{"description":"Raised when +throw+ is called with a _tag_ which does not have\ncorresponding +catch+ block.\n\n   throw \"foo\", \"bar\"\n\n<em>raises the exception:</em>\n\n   UncaughtThrowError: uncaught throw \"foo\"","name":"UncaughtThrowError","namespace":"","path":"UncaughtThrowError","type":"class","visibility":"public"},"UncaughtThrowError#initialize":{"description":"Raised when +throw+ is called with a _tag_ which does not have\ncorresponding +catch+ block.\n\n   throw \"foo\", \"bar\"\n\n<em>raises the exception:</em>\n\n   UncaughtThrowError: uncaught throw \"foo\"","name":"initialize","namespace":"UncaughtThrowError","path":"UncaughtThrowError#initialize","type":"instance_method","visibility":"public"},"UncaughtThrowError#tag":{"description":"Return the tag object which was called for.","name":"tag","namespace":"UncaughtThrowError","path":"UncaughtThrowError#tag","type":"instance_method","visibility":"public"},"UncaughtThrowError#to_s":{"description":"Returns formatted message with the inspected tag.","name":"to_s","namespace":"UncaughtThrowError","path":"UncaughtThrowError#to_s","type":"instance_method","visibility":"public"},"UncaughtThrowError#value":{"description":"Return the return value which was called for.","name":"value","namespace":"UncaughtThrowError","path":"UncaughtThrowError#value","type":"instance_method","visibility":"public"},"TracePoint":{"description":"A class that provides the functionality of Kernel#set_trace_func in a\nnice Object-Oriented API.\n\n== Example\n\nWe can use TracePoint to gather information specifically for exceptions:\n\n    trace = TracePoint.new(:raise) do |tp|\n\tp [tp.lineno, tp.event, tp.raised_exception]\n    end\n    #=> #<TracePoint:disabled>\n\n    trace.enable\n    #=> false\n\n    0 / 0\n    #=> [5, :raise, #<ZeroDivisionError: divided by 0>]\n\n== Events\n\nIf you don't specify the type of events you want to listen for,\nTracePoint will include all available events.\n\n*Note* do not depend on current event set, as this list is subject to\nchange. Instead, it is recommended you specify the type of events you\nwant to use.\n\nTo filter what is traced, you can pass any of the following as +events+:\n\n+:line+:: execute code on a new line\n+:class+:: start a class or module definition\n+:end+:: finish a class or module definition\n+:call+:: call a Ruby method\n+:return+:: return from a Ruby method\n+:c_call+:: call a C-language routine\n+:c_return+:: return from a C-language routine\n+:raise+:: raise an exception\n+:b_call+:: event hook at block entry\n+:b_return+:: event hook at block ending\n+:thread_begin+:: event hook at thread beginning\n+:thread_end+:: event hook at thread ending\n+:fiber_switch+:: event hook at fiber switch","name":"TracePoint","namespace":"","path":"TracePoint","type":"class","visibility":"public"},"TracePoint#binding":{"description":"Return the generated binding object from event","name":"binding","namespace":"TracePoint","path":"TracePoint#binding","type":"instance_method","visibility":"public"},"TracePoint#callee_id":{"description":"Return the called name of the method being called","name":"callee_id","namespace":"TracePoint","path":"TracePoint#callee_id","type":"instance_method","visibility":"public"},"TracePoint#defined_class":{"description":"Return class or module of the method being called.\n\nclass C; def foo; end; end\n\ttrace = TracePoint.new(:call) do |tp|\n\t  p tp.defined_class #=> C\n\tend.enable do\n\t  C.new.foo\n\tend\n\nIf method is defined by a module, then that module is returned.\n\nmodule M; def foo; end; end\n\tclass C; include M; end;\n\ttrace = TracePoint.new(:call) do |tp|\n\t  p tp.defined_class #=> M\n\tend.enable do\n\t  C.new.foo\n\tend\n\n<b>Note:</b> #defined_class returns singleton class.\n\n6th block parameter of Kernel#set_trace_func passes original class\nof attached by singleton class.\n\n<b>This is a difference between Kernel#set_trace_func and TracePoint.</b>\n\nclass C; def self.foo; end; end\n\ttrace = TracePoint.new(:call) do |tp|\n\t  p tp.defined_class #=> #<Class:C>\n\tend.enable do\n\t  C.foo\n\tend","name":"defined_class","namespace":"TracePoint","path":"TracePoint#defined_class","type":"instance_method","visibility":"public"},"TracePoint#disable":{"description":"trace.disable\t\t-> true or false\ntrace.disable { block } -> obj\n\nDeactivates the trace\n\nReturn true if trace was enabled.\nReturn false if trace was disabled.\n\ntrace.enabled?\t#=> true\ntrace.disable\t#=> true (previous status)\ntrace.enabled?\t#=> false\ntrace.disable\t#=> false\n\nIf a block is given, the trace will only be disable within the scope of the\nblock.\n\ntrace.enabled?\n#=> true\n\ntrace.disable do\n    trace.enabled?\n    # only disabled for this block\nend\n\ntrace.enabled?\n#=> true\n\nNote: You cannot access event hooks within the block.\n\ntrace.disable { p tp.lineno }\n#=> RuntimeError: access from outside","name":"disable","namespace":"TracePoint","path":"TracePoint#disable","type":"instance_method","visibility":"public"},"TracePoint#enable":{"description":"trace.enable\t\t-> true or false\ntrace.enable { block }\t-> obj\n\nActivates the trace\n\nReturn true if trace was enabled.\nReturn false if trace was disabled.\n\ntrace.enabled?  #=> false\ntrace.enable    #=> false (previous state)\n                     #   trace is enabled\ntrace.enabled?  #=> true\ntrace.enable    #=> true (previous state)\n                     #   trace is still enabled\n\nIf a block is given, the trace will only be enabled within the scope of the\nblock.\n\ntrace.enabled?\n#=> false\n\ntrace.enable do\n    trace.enabled?\n    # only enabled for this block\nend\n\ntrace.enabled?\n#=> false\n\nNote: You cannot access event hooks within the block.\n\ntrace.enable { p tp.lineno }\n#=> RuntimeError: access from outside","name":"enable","namespace":"TracePoint","path":"TracePoint#enable","type":"instance_method","visibility":"public"},"TracePoint#enabled?":{"description":"trace.enabled?\t    -> true or false\n\nThe current status of the trace","name":"enabled?","namespace":"TracePoint","path":"TracePoint#enabled?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"TracePoint#event":{"description":"Type of event\n\nSee TracePoint@Events for more information.","name":"event","namespace":"TracePoint","path":"TracePoint#event","type":"instance_method","visibility":"public"},"TracePoint#inspect":{"description":"Return a string containing a human-readable TracePoint\nstatus.","name":"inspect","namespace":"TracePoint","path":"TracePoint#inspect","type":"instance_method","visibility":"public"},"TracePoint#lineno":{"description":"Line number of the event","name":"lineno","namespace":"TracePoint","path":"TracePoint#lineno","type":"instance_method","visibility":"public"},"TracePoint#method_id":{"description":"Return the name at the definition of the method being called","name":"method_id","namespace":"TracePoint","path":"TracePoint#method_id","type":"instance_method","visibility":"public"},"TracePoint#path":{"description":"Path of the file being run","name":"path","namespace":"TracePoint","path":"TracePoint#path","type":"instance_method","visibility":"public"},"TracePoint#raised_exception":{"description":"Value from exception raised on the +:raise+ event","name":"raised_exception","namespace":"TracePoint","path":"TracePoint#raised_exception","type":"instance_method","visibility":"public"},"TracePoint#return_value":{"description":"Return value from +:return+, +c_return+, and +b_return+ event","name":"return_value","namespace":"TracePoint","path":"TracePoint#return_value","type":"instance_method","visibility":"public"},"TracePoint#self":{"description":"Return the trace object during event\n\nSame as TracePoint#binding:\ntrace.binding.eval('self')","name":"self","namespace":"TracePoint","path":"TracePoint#self","type":"instance_method","visibility":"public"},"TracePoint.new":{"description":"TracePoint.new(*events) { |obj| block }\t    -> obj\n\nReturns a new TracePoint object, not enabled by default.\n\nNext, in order to activate the trace, you must use TracePoint#enable\n\ntrace = TracePoint.new(:call) do |tp|\n    p [tp.lineno, tp.defined_class, tp.method_id, tp.event]\nend\n#=> #<TracePoint:disabled>\n\ntrace.enable\n#=> false\n\nputs \"Hello, TracePoint!\"\n# ...\n# [48, IRB::Notifier::AbstractNotifier, :printf, :call]\n# ...\n\nWhen you want to deactivate the trace, you must use TracePoint#disable\n\ntrace.disable\n\nSee TracePoint@Events for possible events and more information.\n\nA block must be given, otherwise an ArgumentError is raised.\n\nIf the trace method isn't included in the given events filter, a\nRuntimeError is raised.\n\nTracePoint.trace(:line) do |tp|\n    p tp.raised_exception\nend\n#=> RuntimeError: 'raised_exception' not supported by this event\n\nIf the trace method is called outside block, a RuntimeError is raised.\n\n     TracePoint.trace(:line) do |tp|\n       $tp = tp\n     end\n     $tp.lineno #=> access from outside (RuntimeError)\n\nAccess from other threads is also forbidden.","name":"new","namespace":"TracePoint","path":"TracePoint.new","type":"class_method","visibility":"public"},"TracePoint.stat":{"description":"TracePoint.stat -> obj\n\n Returns internal information of TracePoint.\n\n The contents of the returned value are implementation specific.\n It may be changed in future.\n\n This method is only for debugging TracePoint itself.","name":"stat","namespace":"TracePoint","path":"TracePoint.stat","type":"class_method","visibility":"public"},"TracePoint.trace":{"description":"call-seq:\nTracePoint.trace(*events) { |obj| block }\t-> obj\n\n A convenience method for TracePoint.new, that activates the trace\n automatically.\n\n    trace = TracePoint.trace(:call) { |tp| [tp.lineno, tp.event] }\n    #=> #<TracePoint:enabled>\n\n    trace.enabled? #=> true","name":"trace","namespace":"TracePoint","path":"TracePoint.trace","type":"class_method","visibility":"public"},"Math":{"description":"The Math module contains module functions for basic\ntrigonometric and transcendental functions. See class\nFloat for a list of constants that\ndefine Ruby's floating point accuracy.\n\nDomains and codomains are given only for real (not complex) numbers.","name":"Math","namespace":"","path":"Math","type":"class","visibility":"public"},"GC":{"description":"The GC module provides an interface to Ruby's mark and\nsweep garbage collection mechanism.\n\nSome of the underlying methods are also available via the ObjectSpace\nmodule.\n\nYou may obtain information about the operation of the GC through\nGC::Profiler.","name":"GC","namespace":"","path":"GC","type":"module","visibility":"public"},"GC#garbage_collect":{"description":"Initiates garbage collection, unless manually disabled.\n\nThis method is defined with keyword arguments that default to true:\n\n   def GC.start(full_mark: true, immediate_sweep: true); end\n\nUse full_mark: false to perform a minor GC.\nUse immediate_sweep: false to defer sweeping (use lazy sweep).\n\nNote: These keyword arguments are implementation and version dependent. They\nare not guaranteed to be future-compatible, and may be ignored if the\nunderlying implementation does not support them.","name":"garbage_collect","namespace":"GC","path":"GC#garbage_collect","type":"module_function","visibility":"public"},"GC.add_stress_to_class":{"description":"","name":"add_stress_to_class","namespace":"GC","path":"GC.add_stress_to_class","type":"module_function","visibility":"public"},"GC.count":{"description":"The number of times GC occurred.\n\nIt returns the number of times GC occurred since the process started.","name":"count","namespace":"GC","path":"GC.count","type":"module_function","visibility":"public"},"GC.disable":{"description":"Disables garbage collection, returning +true+ if garbage\ncollection was already disabled.\n\n   GC.disable   #=> false\n   GC.disable   #=> true","name":"disable","namespace":"GC","path":"GC.disable","type":"module_function","visibility":"public"},"GC.enable":{"description":"Enables garbage collection, returning +true+ if garbage\ncollection was previously disabled.\n\n   GC.disable   #=> false\n   GC.enable    #=> true\n   GC.enable    #=> false","name":"enable","namespace":"GC","path":"GC.enable","type":"module_function","visibility":"public"},"GC.latest_gc_info":{"description":"Returns information about the most recent garbage collection.","name":"latest_gc_info","namespace":"GC","path":"GC.latest_gc_info","type":"module_function","visibility":"public"},"GC.malloc_allocated_size":{"description":"Returns the size of memory allocated by malloc().\n\nOnly available if ruby was built with +CALC_EXACT_MALLOC_SIZE+.","name":"malloc_allocated_size","namespace":"GC","path":"GC.malloc_allocated_size","type":"module_function","visibility":"public"},"GC.malloc_allocations":{"description":"Returns the number of malloc() allocations.\n\nOnly available if ruby was built with +CALC_EXACT_MALLOC_SIZE+.","name":"malloc_allocations","namespace":"GC","path":"GC.malloc_allocations","type":"module_function","visibility":"public"},"GC.remove_stress_to_class":{"description":"","name":"remove_stress_to_class","namespace":"GC","path":"GC.remove_stress_to_class","type":"module_function","visibility":"public"},"GC.start":{"description":"Initiates garbage collection, unless manually disabled.\n\nThis method is defined with keyword arguments that default to true:\n\n   def GC.start(full_mark: true, immediate_sweep: true); end\n\nUse full_mark: false to perform a minor GC.\nUse immediate_sweep: false to defer sweeping (use lazy sweep).\n\nNote: These keyword arguments are implementation and version dependent. They\nare not guaranteed to be future-compatible, and may be ignored if the\nunderlying implementation does not support them.","name":"start","namespace":"GC","path":"GC.start","type":"module_function","visibility":"public"},"GC.stat":{"description":"Returns a Hash containing information about the GC.\n\nThe hash includes information about internal statistics about GC such as:\n\n    {\n        :count=>0,\n        :heap_allocated_pages=>24,\n        :heap_sorted_length=>24,\n        :heap_allocatable_pages=>0,\n        :heap_available_slots=>9783,\n        :heap_live_slots=>7713,\n        :heap_free_slots=>2070,\n        :heap_final_slots=>0,\n        :heap_marked_slots=>0,\n        :heap_eden_pages=>24,\n        :heap_tomb_pages=>0,\n        :total_allocated_pages=>24,\n        :total_freed_pages=>0,\n        :total_allocated_objects=>7796,\n        :total_freed_objects=>83,\n        :malloc_increase_bytes=>2389312,\n        :malloc_increase_bytes_limit=>16777216,\n        :minor_gc_count=>0,\n        :major_gc_count=>0,\n        :remembered_wb_unprotected_objects=>0,\n        :remembered_wb_unprotected_objects_limit=>0,\n        :old_objects=>0,\n        :old_objects_limit=>0,\n        :oldmalloc_increase_bytes=>2389760,\n        :oldmalloc_increase_bytes_limit=>16777216\n    }\n\nThe contents of the hash are implementation specific and may be changed in\nthe future.\n\nThis method is only expected to work on C Ruby.","name":"stat","namespace":"GC","path":"GC.stat","type":"module_function","visibility":"public"},"GC.stress":{"description":"Returns current status of GC stress mode.","name":"stress","namespace":"GC","path":"GC.stress","type":"module_function","visibility":"public"},"GC.stress=":{"description":"Updates the GC stress mode.\n\nWhen stress mode is enabled, the GC is invoked at every GC opportunity:\nall memory and object allocations.\n\nEnabling stress mode will degrade performance, it is only for debugging.\n\nflag can be true, false, or an integer bit-ORed following flags.\n  0x01:: no major GC\n  0x02:: no immediate sweep\n  0x04:: full mark after malloc/calloc/realloc","name":"stress=","namespace":"GC","path":"GC.stress=","type":"module_function","visibility":"public"},"GC.verify_internal_consistency":{"description":"Verify internal consistency.\n\nThis method is implementation specific.\nNow this method checks generational consistency\nif RGenGC is supported.","name":"verify_internal_consistency","namespace":"GC","path":"GC.verify_internal_consistency","type":"module_function","visibility":"public"},"GC::INTERNAL_CONSTANTS":{"description":"","name":"INTERNAL_CONSTANTS","namespace":"GC","path":"GC::INTERNAL_CONSTANTS","type":"constant","return":["Hash",""],"visibility":"public"},"GC::OPTS":{"description":"","name":"OPTS","namespace":"GC","path":"GC::OPTS","type":"constant","return":["Array",""],"visibility":"public"},"GC::Profiler":{"description":"","name":"Profiler","namespace":"GC","path":"GC::Profiler","type":"module","visibility":"public"},"GC::Profiler.clear":{"description":"Clears the GC profiler data.","name":"clear","namespace":"GC::Profiler","path":"GC::Profiler.clear","type":"module_function","visibility":"public"},"GC::Profiler.disable":{"description":"Stops the GC profiler.","name":"disable","namespace":"GC::Profiler","path":"GC::Profiler.disable","type":"module_function","visibility":"public"},"GC::Profiler.enable":{"description":"Starts the GC profiler.","name":"enable","namespace":"GC::Profiler","path":"GC::Profiler.enable","type":"module_function","visibility":"public"},"GC::Profiler.enabled?":{"description":"The current status of GC profile mode.","name":"enabled?","namespace":"GC::Profiler","path":"GC::Profiler.enabled?","type":"module_function","visibility":"public","return":[["Boolean"],""]},"GC::Profiler.raw_data":{"description":"Returns an Array of individual raw profile data Hashes ordered\nfrom earliest to latest by +:GC_INVOKE_TIME+.\n\nFor example:\n\n  [\n{\n  :GC_TIME=>1.3000000000000858e-05,\n  :GC_INVOKE_TIME=>0.010634999999999999,\n  :HEAP_USE_SIZE=>289640,\n  :HEAP_TOTAL_SIZE=>588960,\n  :HEAP_TOTAL_OBJECTS=>14724,\n  :GC_IS_MARKED=>false\n},\n    # ...\n  ]\n\nThe keys mean:\n\n+:GC_TIME+::\nTime elapsed in seconds for this GC run\n+:GC_INVOKE_TIME+::\nTime elapsed in seconds from startup to when the GC was invoked\n+:HEAP_USE_SIZE+::\nTotal bytes of heap used\n+:HEAP_TOTAL_SIZE+::\nTotal size of heap in bytes\n+:HEAP_TOTAL_OBJECTS+::\nTotal number of objects\n+:GC_IS_MARKED+::\nReturns +true+ if the GC is in mark phase\n\nIf ruby was built with +GC_PROFILE_MORE_DETAIL+, you will also have access\nto the following hash keys:\n\n+:GC_MARK_TIME+::\n+:GC_SWEEP_TIME+::\n+:ALLOCATE_INCREASE+::\n+:ALLOCATE_LIMIT+::\n+:HEAP_USE_PAGES+::\n+:HEAP_LIVE_OBJECTS+::\n+:HEAP_FREE_OBJECTS+::\n+:HAVE_FINALIZE+::","name":"raw_data","namespace":"GC::Profiler","path":"GC::Profiler.raw_data","type":"module_function","visibility":"public"},"GC::Profiler.report":{"description":"Writes the GC::Profiler.result to <tt>$stdout</tt> or the given IO object.","name":"report","namespace":"GC::Profiler","path":"GC::Profiler.report","type":"module_function","visibility":"public"},"GC::Profiler.result":{"description":"Returns a profile data report such as:\n\n  GC 1 invokes.\n  Index    Invoke Time(sec)       Use Size(byte)     Total Size(byte)         Total Object                    GC time(ms)\n      1               0.012               159240               212940                10647         0.00000000000001530000","name":"result","namespace":"GC::Profiler","path":"GC::Profiler.result","type":"module_function","visibility":"public"},"GC::Profiler.total_time":{"description":"The total time used for garbage collection in seconds","name":"total_time","namespace":"GC::Profiler","path":"GC::Profiler.total_time","type":"module_function","visibility":"public"}}
