{"UI":{"description":"The UI module contains a number of methods for creating simple UI elements\nfrom a SketchUp Ruby script.","name":"UI","namespace":"","path":"UI","type":"module","visibility":"public"},"UI.add_context_menu_handler":{"description":"The add_context_menu_handler method is used to register a block of code with\nSketchUp that will be called when a context menu is to be displayed. The\ncontext menu handler can then display the context menu with the items that\nyou have added.\n\nBe careful with what you do in a context menu handler. If you perform an\noperation takes take a long time, such as traversing the model or selection\nin a large model it will delay the menu.\n\nSee the contextmenu.rb script in the Plugins/examples directory for an\nexample.","name":"add_context_menu_handler","namespace":"UI","path":"UI.add_context_menu_handler","type":"module_function","visibility":"public","return":[["Integer"],"the number of context handlers that are\nregistered"]},"UI.beep":{"description":"The beep method plays a system beep sound.\n\nThe beep method does not accept any arguments nor return any values.","name":"beep","namespace":"UI","path":"UI.beep","type":"module_function","visibility":"public","return":[["nil"],""]},"UI.create_cursor":{"description":"The create_cursor method is used to create a cursor from an image file at\nthe specified location. This must be called from within a custom\nTool. See the Tool class for a complete example.\n\nSince SketchUp 2016 it is possible to provide vector images for the cursors.\nSVG format for Windows and PDF format for OS X.","name":"create_cursor","namespace":"UI","path":"UI.create_cursor","type":"module_function","visibility":"public","parameters":[["filename",["String"],"Filename for an image."],["hot_x",["Integer"],"An x coordinate that is the \"hotpoint\" for the cursor\ncomputed from the left edge of your cursor image."],["hot_y",["Integer"],"A y coordinate that is the \"hotpoint\" for the cursor\ncomputed from the top edge of the of your cursor image.\nFor example, a value of (hot_x, hot_y) = (5,10) would\nidentify the hotpoint of the cursor at 5 pixels from\nthe left edge of your cursor image and 10 pixels from\nthe top edge of your cursor image."]],"return":[["Integer"],"ID associated with the cursor"]},"UI.inputbox":{"description":"Creates a dialog box for inputting user information. The dialog box contains\ninput fields with static text prompts, optional default values, optional\ndrop down selections, and optional title.\n\nYou can also use this method to display drop down lists of options, by\npassing an optional param.","name":"inputbox","namespace":"UI","path":"UI.inputbox","type":"module_function","visibility":"public","parameters":[["prompts",["Array<String>"],"An array of prompt names appearing in the input box\nadjacent to input fields."],["defaults",["Array<String>"],"(optional)\nAn array of default values for the input\nfields."],["title",["String"],"(optional)\nThe title for the input box."],["title_or_list",["String","Array<String>"],"(optional)\nIf 3 params are passed, then this value is\na string containing the title of the input box. If\na total of 4 params are passed, then this is an array\ncontaining pipe-separated strings of options."]],"return":[["Array<String>","FalseClass"],"An array of returned values if the user did\nnot cancel the dialog.  If the user canceled the\ndialog, false is returned.  The returned values in the\narray will be in the same order as the input fields."]},"UI.inspector_names":{"description":"The inspector_names method is used to returns the names of all the\ninspectors. Inspectors are another name for the various floating dialog\nwindows that you can activate from withing SketchUp, such as the Materials\nwindow.","name":"inspector_names","namespace":"UI","path":"UI.inspector_names","type":"module_function","visibility":"public","return":[["Array<String>"],"an array of strings containing the names\nof inspectors."]},"UI.menu":{"description":"The menu method retrieves a SketchUp's menu object with a given name. This\nis the first step toward adding your own custom items to the bottom\nof SketchUp's menus.\n\nValid menu names are: \"File\", \"Edit\", \"View\", \"Camera\", \"Draw\", \"Tools\",\n\"Window\", \"Extensions\" and \"Help\".\n\nNote that the \"Extensions\" menu was named \"Plugins\" prior to SketchUp 2015.\nFor backward compatibility \"Plugins\" still works.","name":"menu","namespace":"UI","path":"UI.menu","type":"module_function","visibility":"public","parameters":[["menuname",["String"],"Optional. The name of an existing menu. Default menu\nis \"Extensions\""]],"return":[["Sketchup::Menu"],"a menu object."]},"UI.messagebox":{"description":"Creates a dialog box containing static text with a series of buttons for\nthe user to choose from.\n\nValid message box types are:\n- +MB_OK+ - Contains an OK button.\n- +MB_OKCANCEL+ - Contains OK and Cancel buttons.\n- +MB_ABORTRETRYIGNORE+ - Contains Abort, Retry, and Ignore buttons.\n- +MB_YESNOCANCEL+ - Contains Yes, No, and Cancel buttons.\n- +MB_YESNO+ - Contains Yes and No buttons.\n- +MB_RETRYCANCEL+ - Contains Retry and Cancel buttons.\n- +MB_MULTILINE+ - Contains and OK button.\n\nReturn values can be any of following:\n- +IDOK+\n- +IDCANCEL+\n- +IDABORT+\n- +IDRETRY+\n- +IDIGNORE+\n- +IDYES+\n- +IDNO+\n\nIn an +MB_MULTILINE+ message box, the message is displayed as a multi-line\nmessage with scrollbars (as needed). +MB_MULTILNE+ also allows a third string\nargument that will be used as the title for the messagebox.","name":"messagebox","namespace":"UI","path":"UI.messagebox","type":"module_function","visibility":"public","parameters":[["message",["String"],"The message that you want to display."],["type",["Integer"],"The message box type, which will be a constant from\nthe list in the method comments."]],"return":[["Integer"],"A number corresponding to what the user selected."]},"UI.model_info_pages":{"description":"The model_info_pages method is used to returns the names of all the\navailable model info pages. These include UI windows such as Components,\nCredits, and Units.","name":"model_info_pages","namespace":"UI","path":"UI.model_info_pages","type":"module_function","visibility":"public","return":[["Array<String>"],"an array of strings containing the names of\nmodel info pages."]},"UI.openURL":{"description":"The {.openURL} method is used to open the default Web browser to a URL.","name":"openURL","namespace":"UI","path":"UI.openURL","type":"module_function","visibility":"public","parameters":[["url",["String"],""]],"return":[["Boolean"],""]},"UI.openpanel":{"description":"The openpanel method is used to display the Open dialog box. The path that\nis returned can then be used inside code to open a text or image file.\nSee the standard Ruby class File for examples of reading and writing from\ndisk.\n\nBug Fixed in SketchUp 2014: Wildcards were not working properly from SU7 to\nSU2013. Wildcard filters did not populate the file type dropdown. The filter\nstring would be shown in the file name field with '*' characters converted to\n'_' characters. Note, the format of a wildcard filter string has been changed.\n See the description of the filename parameter below for details.","name":"openpanel","namespace":"UI","path":"UI.openpanel","type":"module_function","visibility":"public","parameters":[["title",["String"],"The title to apply to the open dialog box."],["directory",["String"],"The default directory for the open panel."],["filename",["String"],"The default filename for the open panel. On Windows, you\ncan alternatively pass a wildcard filter using this\nformat: UIname|wildcard||. Additional filter dropdown\nlist items can be added by adding additional pairs of\nfilter name and filter like this:\nUIname1|wildcard1|UIname2|wildcard2||.\nAlso multiple wildcard filters can be combined into a\nsingle line using a semicolon-separated list in the\nfilter field: ui_name|wildcard1;wildcard2||."]],"return":[["String"],"the full path and name of the file selected, or\nnil if the dialog was canceled."]},"UI.play_sound":{"description":"The play_sound method is used to play a sound file. Valid sound files include\n.wav and .mp3 files on the Mac and .wav files on the PC.","name":"play_sound","namespace":"UI","path":"UI.play_sound","type":"module_function","visibility":"public","parameters":[["filename",["String"],"the relative path to the filename from the SketchUp\ninstall directory, or an absolute path to the file. (See\nSketchup.find_support_file for a way to search for a\nspecific file.)"]],"return":[["nil"],""]},"UI.preferences_pages":{"description":"The preferences_pages method is used to returns the names of all the\npreferences pages. These include windows like Extensions.","name":"preferences_pages","namespace":"UI","path":"UI.preferences_pages","type":"module_function","visibility":"public","return":[["Array<String>"],"an array of strings containing the names\nof prefspages."]},"UI.refresh_inspectors":{"description":"Tells SketchUp to refresh all inspectors such as the Component Browser and\nthe Outliner. This is useful when you need to manually force a refresh after\nyou've made a change to the document via Ruby. Generally, SketchUp will keep\nthese in sync for you, but occasionally it does not, such as when\nmodel.start_operation has disabled UI updates.","name":"refresh_inspectors","namespace":"UI","path":"UI.refresh_inspectors","type":"module_function","visibility":"public","return":[["nil"],""]},"UI.savepanel":{"description":"The savepanel method is used to display the Save dialog box. The path that\nis returned can then be used inside code to save out a text or image file.\nSee the standard Ruby class File for examples of reading and writing from\ndisk.\n\nBug Fixed in SketchUp 2014: Wildcards were not working properly from SU7 to\nSU2013. Semicolon-separated lists of wildcards did not populate the file type\ndropdown. The filter string would be shown in the file name field with '*'\ncharacters converted to '_' characters.","name":"savepanel","namespace":"UI","path":"UI.savepanel","type":"module_function","visibility":"public","parameters":[["title",["String"],"The title to apply to the save dialog box."],["directory",["String"],"The default directory for the save panel."],["filename",["String"],"The default filename for the save panel. On Windows, you\ncan alternatively pass a mask, like \"*.txt\", to have all\nthe .txt files display. If you want multiple file types\nto display, you can supply multiple masks for the\nfilename and separate them with a semicolon, like this:\n\"*.txt;*.doc\"."]],"return":[["String"],"the full path and name of the file\nselected or nil if the dialog was canceled."]},"UI.scale_factor":{"description":"Returns the scaling factor SketchUp uses on high DPI monitors. Useful for\nthings like {Sketchup::View#draw2d}.","name":"scale_factor","namespace":"UI","path":"UI.scale_factor","type":"module_function","visibility":"public","return":[["Float"],""]},"UI.select_directory":{"description":"The select_directory method is used to display the OS dialog for selecting\none or several directories from the file system.\n\nOptions:\n- :title             string  The title for the dialog.\n- :directory         string  Force the starting directory for the dialog. If\n                             not specified the last chosen directory will be\n                             used\n- :select_multiple   boolean Set to true to allow multiple items to be\n                             selected.","name":"select_directory","namespace":"UI","path":"UI.select_directory","type":"module_function","visibility":"public","parameters":[["options",["Hash"],"hash (optional)   The dialog can be customized by\nproviding a hash or named arguments of\noptions."]],"return":[["String","Array<String>"],"A string with the full path of the\ndirectory selected when\n:select_multiple option is set to\nfalse otherwise an array of strings\nor nil if the user cancelled."]},"UI.set_cursor":{"description":"The set_cursor method is used to change the cursor to a new cursor with a\ngiven cursor id. See UI.create_cursor and the Tool class for details\non creating your own tools with arbitrary cursors.\n\nIf you call this while a standard SketchUp tool is active, you will not\nsee your custom cursor, as these tools are constantly setting their\nown cursors to indicate SketchUp's state.","name":"set_cursor","namespace":"UI","path":"UI.set_cursor","type":"module_function","visibility":"public","parameters":[["cursor_id",["Integer"],"The id of the cursor you want to display."]],"return":[["nil"],""]},"UI.set_toolbar_visible":{"description":"The set_toolbar_visible method is used to set whether a given toolbar is\nvisible.  Note that the toolbars and their names are different on the\nMac vs. PC, so be careful and be sure to test when using this method in a\ncross-platform script.","name":"set_toolbar_visible","namespace":"UI","path":"UI.set_toolbar_visible","type":"module_function","visibility":"public","parameters":[["name",["String"],"The name of a Ruby toolbar."],["visible",["Boolean"],"True to make the toolbar visible, false to hide it."]],"return":[["Boolean"],"true if successful, false if not."]},"UI.show_extension_manager":{"description":"The +show_extension_manager+ method is used to display the Extension Manager\ndialog.","name":"show_extension_manager","namespace":"UI","path":"UI.show_extension_manager","type":"module_function","visibility":"public","return":[["nil"],""]},"UI.show_inspector":{"description":"The show_inspector method is used to display the inspector with the given\nname. You can get the list of valid inspectors with UI.inspector_names.","name":"show_inspector","namespace":"UI","path":"UI.show_inspector","type":"module_function","visibility":"public","parameters":[["name",["String"],"The name of inspector that you want to display."]],"return":[["Boolean"],"true if successful, false if unsuccessful"]},"UI.show_model_info":{"description":"The show_model_info method is used to display the model info dialog for a\nspecific page. You can get the list of valid dialogs with\nUI.model_info_pages.","name":"show_model_info","namespace":"UI","path":"UI.show_model_info","type":"module_function","visibility":"public","parameters":[["page_name",["String"],"The name of the model info dialog you want to display."]],"return":[["Boolean"],"true"]},"UI.show_preferences":{"description":"The show_preferences method is used to display a SketchUp preferences dialog.\nYou can get the list of valid dialogs with UI.preferences_pages.\n\nNote that under OSX this method doesn't currently work.","name":"show_preferences","namespace":"UI","path":"UI.show_preferences","type":"module_function","visibility":"public","parameters":[["page_name",["String"],"The name of the preferences dialog you want to display."]],"return":[["Boolean"],"true"]},"UI.start_timer":{"description":"The start_timer method is used to start a timer. This is an effective method\nto create a repeating snippet of code for arbitrary animation.\n\nSee this blog post for an detailed example of custom animation using timers:\nhttp://sketchupapi.blogspot.com/2008/10/animate-yo-cheese.html\n\nNote that there is a bug that if you open a modal window in a non-repeating\ntimer the timer will repeat until the window is closed.","name":"start_timer","namespace":"UI","path":"UI.start_timer","type":"module_function","visibility":"public","parameters":[["repeat",["Boolean"],"(optional)\ntrue if you want the timer to repeat, false\n(or omit) if you do not want it to repeat."],["seconds",["Numeric"],"The time in seconds before your code should be called."]],"return":[["Integer"],"a timer ID"]},"UI.stop_timer":{"description":"The stop_timer method is used to stop a timer based on its id.","name":"stop_timer","namespace":"UI","path":"UI.stop_timer","type":"module_function","visibility":"public","parameters":[["id",["Integer"],"The timer id for the timer that you want to stop."]],"return":[["nil"],""]},"UI.toolbar":{"description":"The toolbar method is used to get a Ruby toolbar by name. If the toolbar\ndoesn't exist a new one will be created.","name":"toolbar","namespace":"UI","path":"UI.toolbar","type":"module_function","visibility":"public","parameters":[["name",["String"],"The name of the Ruby toolbar."]],"return":[["UI::Toolbar"],"a Toolbar object"]},"UI.toolbar_names":{"description":"The toolbar_names method is used to return the name of all the available\nnative toolbars (this differs between PC and Mac). These toolbar names\ndo not include Ruby toolbars.","name":"toolbar_names","namespace":"UI","path":"UI.toolbar_names","type":"module_function","visibility":"public","return":[["Array<String>"],"Array of strings representing toolbar names."]},"UI.toolbar_visible?":{"description":"The toolbar_visible? method is used to determine whether a given toolbar is\nvisible. Note that the toolbars and their names are different on the\nMac vs. PC, so be careful and be sure to test when using this method in a\ncross-platform script.","name":"toolbar_visible?","namespace":"UI","path":"UI.toolbar_visible?","type":"module_function","visibility":"public","parameters":[["name",["String"],"The name of a native toolbar."]],"return":[["Boolean"],"true if successful, false if unsuccessful"]},"UI::Command":{"description":"The Command class is the preferred class for adding tools to the menus and\nRuby toolbars. For example, you could add a menu item and pass it a code\nblock directly, or you could first create a Command.\n\nUsing Commands gives you greater control over how the item works in the UI,\nand it allows multiple spots in the UI to call the same code. For example,\nYou might want a toolbar button and a context-click menu item to both point\nto the same command, and to control the tooltip and its \"graying\" from\na single spot in your code.","name":"Command","namespace":"UI","path":"UI::Command","type":"class","visibility":"public"},"UI::Command#large_icon":{"description":"The large_icon method returns the icon file for the command's\nlarge icon.","name":"large_icon","namespace":"UI::Command","path":"UI::Command#large_icon","type":"instance_method","visibility":"public","return":[["String"],"the path to the large icon."]},"UI::Command#large_icon=":{"description":"The large_icon= method is used to identify the icon file for the command's\nlarge icon. large icons should be 24x24 pixel images for best display\nquality.\n\nSince SketchUp 2016 it is possible to provide vector images for the cursors.\nSVG format for Windows and PDF format for OS X. Since the vector images scale\nfor both small and large icon sizes, you may choose to use only one vector\nimage for both variants.","name":"large_icon=","namespace":"UI::Command","path":"UI::Command#large_icon=","type":"instance_method","visibility":"public","parameters":[["path",["String"],"The path to the large icon."]],"return":[["String"],""]},"UI::Command#menu_text":{"description":"The menu_text method returns the menu item name for the command.","name":"menu_text","namespace":"UI::Command","path":"UI::Command#menu_text","type":"instance_method","visibility":"public","return":[["String"],""]},"UI::Command#menu_text=":{"description":"The menu_text= method is used to set the menu item name for the command.","name":"menu_text=","namespace":"UI::Command","path":"UI::Command#menu_text=","type":"instance_method","visibility":"public","parameters":[["menuitem",["String"],"A string representing the menu item for the command."]],"return":[["String"],""]},"UI::Command#set_validation_proc":{"description":"The {#set_validation_proc} method allows you to change whether the command\nis enabled, checked, etc. based on the user state. For example, you might\nwant your command to be disabled unless the user has a current selection.","name":"set_validation_proc","namespace":"UI::Command","path":"UI::Command#set_validation_proc","type":"instance_method","visibility":"public","return":[["UI::Command"],""]},"UI::Command#small_icon":{"description":"The small_icon method returns the icon file for the command's\nsmall icon.","name":"small_icon","namespace":"UI::Command","path":"UI::Command#small_icon","type":"instance_method","visibility":"public","return":[["String"],"the path to the small_icon"]},"UI::Command#small_icon=":{"description":"The small_icon= method is used to identify the icon file for the command's\nsmall icon. Small icons should be 16x16 pixel images for best display\nquality.\n\nSince SketchUp 2016 it is possible to provide vector images for the cursors.\nSVG format for Windows and PDF format for OS X. Since the vector images scale\nfor both small and large icon sizes, you may choose to use only one vector\nimage for both variants.","name":"small_icon=","namespace":"UI::Command","path":"UI::Command#small_icon=","type":"instance_method","visibility":"public","parameters":[["path",["String"],"A path to the small icon."]],"return":[["String"],""]},"UI::Command#status_bar_text":{"description":"The status_bar_text method returns the status bar text for the\ncommand.","name":"status_bar_text","namespace":"UI::Command","path":"UI::Command#status_bar_text","type":"instance_method","visibility":"public","return":[["String"],"the status bar text."]},"UI::Command#status_bar_text=":{"description":"The status_bar_text= method is used to set the status bar text for the\ncommand.","name":"status_bar_text=","namespace":"UI::Command","path":"UI::Command#status_bar_text=","type":"instance_method","visibility":"public","parameters":[["text",["String"],"The text that will appear on the status bar when the\ncursor is over the command's menu item."]],"return":[["String"],""]},"UI::Command#tooltip":{"description":"The tooltip method returns command item's tooltip text.","name":"tooltip","namespace":"UI::Command","path":"UI::Command#tooltip","type":"instance_method","visibility":"public","return":[["String"],"the tooltip text"]},"UI::Command#tooltip=":{"description":"The tooltip= method is used to define a command item's tooltip text. Tooltips\nwill appear when the command is attached to a tool bar and the user hovers\ntheir cursor over the icon.","name":"tooltip=","namespace":"UI::Command","path":"UI::Command#tooltip=","type":"instance_method","visibility":"public","parameters":[["text",["String"],"The text of the tooltip."]],"return":[["String"],""]},"UI::Command.new":{"description":"The new method is used to create a new command.","name":"new","namespace":"UI::Command","path":"UI::Command.new","type":"class_method","visibility":"public","parameters":[["menutext",["String"],"The text that will appear for this command's menu item\nif it appears on a menu."]],"return":[["UI::Command"],"the new Command object"]},"UI::HtmlDialog":{"description":"The Ruby HtmlDialog class allows you to create and interact with HTML dialog\nboxes from Ruby. This is the best way to generate complex, embedded UIs\ninside SketchUp, but it does generally require HTML and JavaScript expertise.\n\nIf your goal is to simple display a website to your users, consider using\n{UI#openURL}, which will show them a web page in their default browser rather\nthan inside a dialog in SketchUp.","name":"HtmlDialog","namespace":"UI","path":"UI::HtmlDialog","type":"class","visibility":"public"},"UI::HtmlDialog#add_action_callback":{"description":"The {#add_action_callback} method establishes a Ruby callback method that your\nhtml dialog can call to perform some function.\n\nUse the +sketchup.callback_method_name+ to invoke the callback method from your\nhtml dialog. Your JavaScript in the html dialog will invoke the callback with\nthe same number of arguments.\n\nThe call is asynchronous. JavaScript call might return before Ruby callback\neven called. Use +onCompleted+ callback to get notified for completion.\n\nBasic types such as booleans, numbers, strings, arrays and hashes are\nautomatically converted between Ruby and JavaScript.","name":"add_action_callback","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#add_action_callback","type":"instance_method","visibility":"public","parameters":[["callback_name",["String"],"The name of the callback method to be\ninvoked from the html dialog."]],"return":[["Boolean"],"true if action added successfully, false\notherwise."]},"UI::HtmlDialog#bring_to_front":{"description":"The {#bring_to_front} method is used to bring the window to the front,\nputting it on top of other windows even if its minimized.","name":"bring_to_front","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#bring_to_front","type":"instance_method","visibility":"public","return":[["nil"],""]},"UI::HtmlDialog#center":{"description":"The {#center} method is used to center the HtmlDialog relative to the active\nmodel window. If there is no active model window, this function doesn't do\nanything.","name":"center","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#center","type":"instance_method","visibility":"public","return":[["true"],""]},"UI::HtmlDialog#close":{"description":"The {#close} method is used to close a dialog box.","name":"close","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#close","type":"instance_method","visibility":"public","return":[["nil"],""]},"UI::HtmlDialog#execute_script":{"description":"The {#execute_script} method is used to execute a JavaScript string on the\nhtml dialog asynchronously.","name":"execute_script","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#execute_script","type":"instance_method","visibility":"public","parameters":[["script",["String"],"The JavaScript script to execute on the HtmlDialog."]],"return":[["nil"],""]},"UI::HtmlDialog#initialize":{"description":"The new method is used to create a new HtmlDialog.\n\nThe +properties+ hash accepts an optional key +style+ where the value is\none of:\n\n[+UI::HtmlDialog::STYLE_DIALOG+]   HtmlDialog stays at the top of SketchUp.\n\n[+UI::HtmlDialog::STYLE_WINDOW+]   HtmlDialog can go behind SketchUp and\n                                   doesn't disappear when SketchUp looses\n                                   focus.\n\n[+UI::HtmlDialog::STYLE_UTILITY+]  HtmlDialog is shown with small titlebar\n                                   and stays on top of SketchUp.","name":"initialize","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#initialize","type":"instance_method","visibility":"public","parameters":[["properties",["Hash"],"A hash containing the initial properties of\nthe newly created dialog."]],"return":[["UI::HtmlDialog"],""]},"UI::HtmlDialog#set_can_close":{"description":"The {#set_can_close} method is used to attach a block that is executed just\nbefore closing, this block has to return a boolean, if the block returns\nfalse the close will be canceled.","name":"set_can_close","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#set_can_close","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"UI::HtmlDialog#set_file":{"description":"The {#set_file} method is used to identify a local HTML file to display in the\nHtmlDialog.","name":"set_file","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#set_file","type":"instance_method","visibility":"public","parameters":[["filename",["String"],"The filename for the HtmlDialog file (HTML file)"]],"return":[["nil"],""]},"UI::HtmlDialog#set_html":{"description":"The {#set_html} method is used to load a HtmlDialog with a string of provided\nHTML.","name":"set_html","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#set_html","type":"instance_method","visibility":"public","parameters":[["html_string",["String"],"A string of valid html to display in your\nHtmlDialog."]],"return":[["nil"],""]},"UI::HtmlDialog#set_on_closed":{"description":"The {#set_on_closed} method is used to attach a block that will be\nexecuted when a dialog is already in the process of closing, do any last\nminute operations within this block such as saving the current state.","name":"set_on_closed","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#set_on_closed","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"UI::HtmlDialog#set_position":{"description":"The {#set_position} method is used to set the position of the HtmlDialog\nrelative to the screen, in pixels.","name":"set_position","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#set_position","type":"instance_method","visibility":"public","parameters":[["left",["Integer"],"The number of pixels from the left."],["top",["Integer"],"The number of pixels from the top of the screen."]],"return":[["true"],""]},"UI::HtmlDialog#set_size":{"description":"The {#set_size} method is used to set the size of the HtmlDialog, in pixels.","name":"set_size","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#set_size","type":"instance_method","visibility":"public","parameters":[["width",["Integer"],"Width of the HtmlDialog."],["height",["Integer"],"Height of the HtmlDialog."]],"return":[["true"],""]},"UI::HtmlDialog#set_url":{"description":"The {#set_url} method is used to load a HtmlDialog with the content at a\nspecific URL. This method allows you to load web sites in a HtmlDialog.","name":"set_url","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#set_url","type":"instance_method","visibility":"public","parameters":[["url",["String"],"The URL for a specific web site."]],"return":[["nil"],""]},"UI::HtmlDialog#show":{"description":"The {#show} method is used to display a non-modal dialog box.","name":"show","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#show","type":"instance_method","visibility":"public","return":[["nil"],""]},"UI::HtmlDialog#show_modal":{"description":"The {#show_modal} method is used to display a modal dialog box.","name":"show_modal","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#show_modal","type":"instance_method","visibility":"public","return":[["nil"],""]},"UI::HtmlDialog#visible?":{"description":"The {#visible?} method is useful to tell if the dialog is shown and still\nalive, if the dialog is minimized or not visible on the screen this will\nstill return +true+.","name":"visible?","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog#visible?","type":"instance_method","visibility":"public","return":[["Boolean"],"Returns true if the dialog is open."]},"UI::HtmlDialog::STYLE_DIALOG":{"description":"Constants","name":"STYLE_DIALOG","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog::STYLE_DIALOG","type":"constant","return":null,"visibility":"public"},"UI::HtmlDialog::STYLE_UTILITY":{"description":"Stub value.","name":"STYLE_UTILITY","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog::STYLE_UTILITY","type":"constant","return":null,"visibility":"public"},"UI::HtmlDialog::STYLE_WINDOW":{"description":"Stub value.","name":"STYLE_WINDOW","namespace":"UI::HtmlDialog","path":"UI::HtmlDialog::STYLE_WINDOW","type":"constant","return":null,"visibility":"public"},"UI::Notification":{"description":"UI::Notification objects allows you to show native notifications in the\ndesktop, they are positioned in the top right of your screen, they can be\ncustomized to have a message, icon and accept and/or dismiss buttons with\ncallback blocks.","name":"Notification","namespace":"UI","path":"UI::Notification","type":"class","visibility":"public"},"UI::Notification#icon_name":{"description":"Gets the icon name, this is the path that will be used to get the icon from\nthe file system path.","name":"icon_name","namespace":"UI::Notification","path":"UI::Notification#icon_name","type":"instance_method","visibility":"public","return":[["String"],""]},"UI::Notification#icon_name=":{"description":"Sets the icon path, this icon will be loaded from the path give, the path\nhas to be a local filesystem path.","name":"icon_name=","namespace":"UI::Notification","path":"UI::Notification#icon_name=","type":"instance_method","visibility":"public","parameters":[["icon_name",["String"],"String providing the icon filesystem path."]],"return":[["Boolean"],""]},"UI::Notification#icon_tooltip":{"description":"Gets the icon Tooltip, this is the string that appear when the mouse is over\nthe icon.","name":"icon_tooltip","namespace":"UI::Notification","path":"UI::Notification#icon_tooltip","type":"instance_method","visibility":"public","return":[["String"],""]},"UI::Notification#icon_tooltip=":{"description":"Sets the icon Tooltip, this string will appear when the mouse is over the\nicon.","name":"icon_tooltip=","namespace":"UI::Notification","path":"UI::Notification#icon_tooltip=","type":"instance_method","visibility":"public","parameters":[["icon_tooltip",["String"],"String providing the new icon Tooltip."]],"return":[["Boolean"],""]},"UI::Notification#initialize":{"description":"The new method is used to create a new {UI::Notification}.\n\nIn order to insert line breaks into the message you need to use +\\\\r\\\\n+.","name":"initialize","namespace":"UI::Notification","path":"UI::Notification#initialize","type":"instance_method","visibility":"public","parameters":[["icon_tooltip",["String"],"Optionally set an image tooltip."],["icon_name",["String"],"Optionally set a path to an image."],["message",["String"],"Optionally assign the message."],["sketchup_extension",["SketchupExtension"],"Required sketchup_extension\nto identify the sender."]],"return":[["UI::Notification"],""]},"UI::Notification#message":{"description":"Gets the message as string.","name":"message","namespace":"UI::Notification","path":"UI::Notification#message","type":"instance_method","visibility":"public","return":[["String"],""]},"UI::Notification#message=":{"description":"Sets a new message, notifications are meant for quick & brief messages,\nremember that they are dismissed automatically.","name":"message=","namespace":"UI::Notification","path":"UI::Notification#message=","type":"instance_method","visibility":"public","parameters":[["message",["String"],"String providing the new message."]],"return":[["Boolean"],""]},"UI::Notification#on_accept":{"description":"Shows a button in the notification with the given title and callback block,\nboth arguments are required.","name":"on_accept","namespace":"UI::Notification","path":"UI::Notification#on_accept","type":"instance_method","visibility":"public","parameters":[["title",["String"],"Sets the title of the button."],["block",["Block"],"Sets the action callback, this will be called when\nthe user clicks on the dismiss button."]],"return":[["Boolean"],""]},"UI::Notification#on_accept_title":{"description":"Returns the accept's button title.","name":"on_accept_title","namespace":"UI::Notification","path":"UI::Notification#on_accept_title","type":"instance_method","visibility":"public","return":[["String"],""]},"UI::Notification#on_dismiss":{"description":"Shows a button in the notification with the given title and callback block,\nboth arguments are required.","name":"on_dismiss","namespace":"UI::Notification","path":"UI::Notification#on_dismiss","type":"instance_method","visibility":"public","parameters":[["title",["String"],"Sets the title of the button."],["block",["Block"],"Sets the action callback, this will be called when\nthe user clicks on the dismiss button."]],"return":[["Boolean"],""]},"UI::Notification#on_dismiss_title":{"description":"Returns the dismiss's button title.","name":"on_dismiss_title","namespace":"UI::Notification","path":"UI::Notification#on_dismiss_title","type":"instance_method","visibility":"public","return":[["String"],""]},"UI::Notification#show":{"description":"Shows the notification in the top right of the screen, the notifications will\nbe ordered from top to bottom if multiple notifications are shown, it will\nautomatically be dismissed if no action is taken.","name":"show","namespace":"UI::Notification","path":"UI::Notification#show","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"UI::Toolbar":{"description":"The Toolbar class contains methods to create and manipulate SketchUp\ntoolbars in Ruby. Toolbars are collections of buttons that you can use\nto activate custom Tools or ruby scripts.\n\nAlso see the Command object for details on creating \"commands\" which\ncan be called from your toolbars.","name":"Toolbar","namespace":"UI","path":"UI::Toolbar","type":"class","visibility":"public"},"UI::Toolbar#add_item":{"description":"The add_item method is used to add an item to the toolbar.","name":"add_item","namespace":"UI::Toolbar","path":"UI::Toolbar#add_item","type":"instance_method","visibility":"public","parameters":[["command",["UI::Command"],"A Command object representing the command to add to the\ntoolbar."]],"return":[["UI::Toolbar"],"the toolbar where the command was just added"]},"UI::Toolbar#add_separator":{"description":"The add_separator method is used to add a line separator to the toolbar.","name":"add_separator","namespace":"UI::Toolbar","path":"UI::Toolbar#add_separator","type":"instance_method","visibility":"public","return":[["UI::Toolbar"],"the toolbar where the line separator was just added"]},"UI::Toolbar#count":{"description":"The {#count} method is inherited from the +Enumerable+ mix-in module.","name":"count","namespace":"UI::Toolbar","path":"UI::Toolbar#count","type":"instance_method","visibility":"public","return":[["Integer"],""]},"UI::Toolbar#each":{"description":"The each method is used to iterate through all of the commands\nattached to a toolbar.","name":"each","namespace":"UI::Toolbar","path":"UI::Toolbar#each","type":"instance_method","visibility":"public","return":[["nil"],""]},"UI::Toolbar#get_last_state":{"description":"The get_last_state method is used to determine if the toolbar was hidden or\nvisible in the previous session of SketchUp.\n\nValid states are 1 for visible, 0 for hidden, -1 for before never shown.","name":"get_last_state","namespace":"UI::Toolbar","path":"UI::Toolbar#get_last_state","type":"instance_method","visibility":"public","return":[["Boolean"],"the last state of the toolbar (see comments)"]},"UI::Toolbar#hide":{"description":"The hide method is used to hide the toolbar on the user interface.","name":"hide","namespace":"UI::Toolbar","path":"UI::Toolbar#hide","type":"instance_method","visibility":"public","return":[["nil"],""]},"UI::Toolbar#length":{"description":"The {#length} method returns the number of items in the toolbar.","name":"length","namespace":"UI::Toolbar","path":"UI::Toolbar#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"UI::Toolbar#name":{"description":"The name method returns the name of the toolbar.","name":"name","namespace":"UI::Toolbar","path":"UI::Toolbar#name","type":"instance_method","visibility":"public","return":[["String"],"the name of the toolbar."]},"UI::Toolbar#restore":{"description":"The restore method is used to reposition the toolbar to its previous\nlocation and show if not hidden.","name":"restore","namespace":"UI::Toolbar","path":"UI::Toolbar#restore","type":"instance_method","visibility":"public","return":[["nil"],""]},"UI::Toolbar#show":{"description":"The show method is used to display the toolbar in the user interface.","name":"show","namespace":"UI::Toolbar","path":"UI::Toolbar#show","type":"instance_method","visibility":"public","return":[["nil"],""]},"UI::Toolbar#size":{"description":"The {#size} method is an alias of {#length}.","name":"size","namespace":"UI::Toolbar","path":"UI::Toolbar#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"UI::Toolbar#visible?":{"description":"The visible? method is used to find out if a toolbar is currently visible.","name":"visible?","namespace":"UI::Toolbar","path":"UI::Toolbar#visible?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if visible"]},"UI::Toolbar.new":{"description":"The new method creates a new Toolbar object.","name":"new","namespace":"UI::Toolbar","path":"UI::Toolbar.new","type":"class_method","visibility":"public","parameters":[["toolbarname",["String"],"The name for the new toolbar."]],"return":[["UI::Toolbar"],"the newly created toolbar object"]},"UI::WebDialog":{"description":"The Ruby WebDialog class allows you to create and interact with DHTML dialog\nboxes from Ruby.\n\nIf your goal is to simply display a website to your users, consider using\nUI.getURL, which will show them a web page in their default browser rather\nthan inside a dialog in SketchUp.\n\nSee this blog post for a detailed, step-by-step example:\nhttp://sketchupapi.blogspot.com/2008/02/sharing-data-between-sketchup-ruby-and.html\n\nUnder Windows the IE render mode is different in webdialogs than from what\nyou see in the normal browser. It will by default pick an older render mode\nand different versions of SketchUp will use different modes. In order to\nreliably control the render mode of your webdialogs under Windows you need to\ninsert a special META compatibility tag:\n\n  // To always force the latest version available:\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n\n  // To lock to a specific IE version:\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\"/>\n\nStarting with SketchUp 2013, you can embed a special HTML link in your dialog\nthat will launch Extension Warehouse and show a specified extension's page.\nThis can be useful if your extension has a dependency on another one and you\nwould like to direct the user to install that extension.\n\nFor example, to launch an extension's page whose URL is:\nhttp://extensions.sketchup.com/en/content/advanced-camera-tools\nThe link would be:","name":"WebDialog","namespace":"UI","path":"UI::WebDialog","type":"class","visibility":"public"},"UI::WebDialog#add_action_callback":{"description":"The add_action_callback method establishes a Ruby callback method that your\nweb dialog can call to perform some function.\n\nUse the skp:callback_method_name to invoke the callback method from your\nwebdialog. Your JavaScript in the webdialog will invoke the callback method\nwith a string representing arguments to the callback method.\n\nNote that you're sending data down to Ruby as a single string that's\npassed via the window.location bar. In Internet Explorer on PC, there is\na length limit of 2038 characters for this bar, so if you're\nneeding to pass large data down you might consider using get_element_value\nto pull in a longer string from a hidden input field in the HTML.","name":"add_action_callback","namespace":"UI::WebDialog","path":"UI::WebDialog#add_action_callback","type":"instance_method","visibility":"public","parameters":[["callback_name",["String"],"The name of the callback method to be invoked from the\nwebdialog."]],"return":[["Boolean"],""]},"UI::WebDialog#allow_actions_from_host":{"description":"By default, actions are only allowed on the host where the webdialog is\ndisplayed. The allow_actions_from_host method is used to selectively allow\nactions to take place on a host remote from the host where the webdialog\nexists. If the webdialog is local, no remote host is allowed unless you use\nthis method.","name":"allow_actions_from_host","namespace":"UI::WebDialog","path":"UI::WebDialog#allow_actions_from_host","type":"instance_method","visibility":"public","parameters":[["hostname",["String"],"The name (domain) of the host that your webdialog can\naccess safely."]],"return":[["Boolean"],""]},"UI::WebDialog#bring_to_front":{"description":"The bring_to_front method is used to bring the webdialog to the front of all\nthe windows on the desktop. See show_modal for how to ensure that your\nWedDialogs are on top.","name":"bring_to_front","namespace":"UI::WebDialog","path":"UI::WebDialog#bring_to_front","type":"instance_method","visibility":"public","return":[["UI::WebDialog"],""]},"UI::WebDialog#close":{"description":"The close method is used to close the webdialog.","name":"close","namespace":"UI::WebDialog","path":"UI::WebDialog#close","type":"instance_method","visibility":"public","return":[["nil"],""]},"UI::WebDialog#execute_script":{"description":"The execute_script method is used to execute a JavaScript string on the web\ndialog.","name":"execute_script","namespace":"UI::WebDialog","path":"UI::WebDialog#execute_script","type":"instance_method","visibility":"public","parameters":[["script",["String"],"The JavaScript script to execute on the webdialog."]],"return":[["Boolean"],""]},"UI::WebDialog#get_default_dialog_color":{"description":"The get_default_dialog_color method is used to get the default dialog color\nfor the web dialog.","name":"get_default_dialog_color","namespace":"UI::WebDialog","path":"UI::WebDialog#get_default_dialog_color","type":"instance_method","visibility":"public","return":[["String"],"a six digit hexidecimal number representing the color"]},"UI::WebDialog#get_element_value":{"description":"The get_element_value method is used to get a value, with a given\nelement_id, from the web dialog's DOM.","name":"get_element_value","namespace":"UI::WebDialog","path":"UI::WebDialog#get_element_value","type":"instance_method","visibility":"public","parameters":[["element_id",["String"],"The name of the element in your HTML code."]],"return":[["String"],"a string containing the retrieved value."]},"UI::WebDialog#initialize":{"description":"The +new+ method is used to create a new webdialog.\n\nSince SU2017 the position and size of the dialog is DPI aware - it will scale\nto the DPI of the monitor automatically. Specify units as they would be on a\ntraditional low-DPI monitor.\n\nNote that the browser which is embedded inside the dialog depends on the\nuser's OS. On Mac, Safari is embedded, while on the PC whatever version of\nInternet Explorer is installed will be embedded.","name":"initialize","namespace":"UI::WebDialog","path":"UI::WebDialog#initialize","type":"instance_method","visibility":"public","return":[["WebDialog"],"a new instance of WebDialog"]},"UI::WebDialog#max_height":{"description":"The max_height method is used to get the maximum height that the user is\nallowed to resize the dialog to.","name":"max_height","namespace":"UI::WebDialog","path":"UI::WebDialog#max_height","type":"instance_method","visibility":"public","return":[["Integer"],"the maximum height in pixels"]},"UI::WebDialog#max_height=":{"description":"The max_height= method is used to set the maximum height that the user is\nallowed to resize the dialog to.","name":"max_height=","namespace":"UI::WebDialog","path":"UI::WebDialog#max_height=","type":"instance_method","visibility":"public","parameters":[["height",["Integer"],"The maximum height in pixels"]],"return":[["Integer"],""]},"UI::WebDialog#max_width":{"description":"The max_width method is used to get the maximum width that the user is\nallowed to resize the dialog to.","name":"max_width","namespace":"UI::WebDialog","path":"UI::WebDialog#max_width","type":"instance_method","visibility":"public","return":[["Integer"],"the maximum width in pixels"]},"UI::WebDialog#max_width=":{"description":"The max_width= method is used to set the maximum width that the user is\nallowed to resize the dialog to.","name":"max_width=","namespace":"UI::WebDialog","path":"UI::WebDialog#max_width=","type":"instance_method","visibility":"public","parameters":[["width",["Integer"],"The maximum width in pixels"]],"return":[["Integer"],""]},"UI::WebDialog#min_height":{"description":"The min_width method is used to get the minimum height that the user is\nallowed to resize the dialog to.","name":"min_height","namespace":"UI::WebDialog","path":"UI::WebDialog#min_height","type":"instance_method","visibility":"public","return":[["Integer"],"the minimum height in pixels"]},"UI::WebDialog#min_height=":{"description":"The min_height= method is used to set the minimum height that the user is\nallowed to resize the dialog to.","name":"min_height=","namespace":"UI::WebDialog","path":"UI::WebDialog#min_height=","type":"instance_method","visibility":"public","parameters":[["height",["Integer"],"The minimum height in pixels"]],"return":[["Integer"],""]},"UI::WebDialog#min_width":{"description":"The min_width method is used to get the minimum width that the user is\nallowed to resize the dialog to.","name":"min_width","namespace":"UI::WebDialog","path":"UI::WebDialog#min_width","type":"instance_method","visibility":"public","return":[["Integer"],"the minimum width in pixels"]},"UI::WebDialog#min_width=":{"description":"The min_width= method is used to set the minimum width that the user is\nallowed to resize the dialog to.","name":"min_width=","namespace":"UI::WebDialog","path":"UI::WebDialog#min_width=","type":"instance_method","visibility":"public","parameters":[["width",["Integer"],"The minimum width in pixels"]],"return":[["Integer"],""]},"UI::WebDialog#navigation_buttons_enabled=":{"description":"The navigation_buttons_enabled= method is used to set whether the home, next,\nand back buttons are visible at the top of the WebDialog on the mac. This\nmethod has no use on the PC, as these buttons are never displayed.","name":"navigation_buttons_enabled=","namespace":"UI::WebDialog","path":"UI::WebDialog#navigation_buttons_enabled=","type":"instance_method","visibility":"public","parameters":[["nav_buttons",["Boolean"],"true to hide the buttons, false to show them"]],"return":[["Boolean"],""]},"UI::WebDialog#navigation_buttons_enabled?":{"description":"The navigation_buttons_enabled? method is used to get whether the home, next,\nand back buttons are visible at the top of the WebDialog on the mac. This\nmethod has no use on the PC, as these buttons are never displayed.\n\nOn the mac, this defaults to true for new WebDialogs.","name":"navigation_buttons_enabled?","namespace":"UI::WebDialog","path":"UI::WebDialog#navigation_buttons_enabled?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the buttons are visible."]},"UI::WebDialog#post_url":{"description":"The post_url method is used to send the data to a url using the HTTP POST\nmethod.","name":"post_url","namespace":"UI::WebDialog","path":"UI::WebDialog#post_url","type":"instance_method","visibility":"public","parameters":[["url",["String"],"The url to send the data."],["data",["String"],"The data to be sent."]],"return":[["nil"],""]},"UI::WebDialog#screen_scale_factor":{"description":"The screen_scale_factor method returns the ratio of screen pixels to logical\nwindow units (called 'points' on Mac) for the screen this WebDialog is\ncurrently in. On a retina screen Mac, this ratio will be greater than 1.0.\nOn Windows this always return 1.0.","name":"screen_scale_factor","namespace":"UI::WebDialog","path":"UI::WebDialog#screen_scale_factor","type":"instance_method","visibility":"public","return":[["Float"],"screen scale factor"]},"UI::WebDialog#set_background_color":{"description":"The set_background_color method is used to set the background color for the\nwebdialog.","name":"set_background_color","namespace":"UI::WebDialog","path":"UI::WebDialog#set_background_color","type":"instance_method","visibility":"public","parameters":[["color",["String"],"A six digit hexidecimal color."]],"return":[["nil"],""]},"UI::WebDialog#set_file":{"description":"The #{set_file} method is used to identify a local HTML file to display in\nthe webdialog.","name":"set_file","namespace":"UI::WebDialog","path":"UI::WebDialog#set_file","type":"instance_method","visibility":"public","parameters":[["filename",["String"],"The filename for the webdialog file (HTML file)."],["path",["String"],"A path that filename is relative to."]],"return":[["nil"],""]},"UI::WebDialog#set_full_security":{"description":"The set_full_security method is used to place the WebDialog into a higher\nsecurity mode where remote URLs and plugins (such as Flash) are not allowed\ninside the browser. This defaults to false when a new WebDialog is created.","name":"set_full_security","namespace":"UI::WebDialog","path":"UI::WebDialog#set_full_security","type":"instance_method","visibility":"public","return":[["UI::WebDialog"],"the updated WebDialog"]},"UI::WebDialog#set_html":{"description":"The set_html method is used to load a webdialog with a string of provided\nHTML.","name":"set_html","namespace":"UI::WebDialog","path":"UI::WebDialog#set_html","type":"instance_method","visibility":"public","parameters":[["html_string",["String"],"A string of valid html to display in your webdialog."]],"return":[["nil"],""]},"UI::WebDialog#set_on_close":{"description":"The set_on_close method is used to establish one or more activities to\nperform when the dialog closes (such as saving values stored in the dialog).","name":"set_on_close","namespace":"UI::WebDialog","path":"UI::WebDialog#set_on_close","type":"instance_method","visibility":"public","return":[["nil"],""]},"UI::WebDialog#set_position":{"description":"The set_position method is used to set the position of the webdialog\nrelative to the screen, in pixels.","name":"set_position","namespace":"UI::WebDialog","path":"UI::WebDialog#set_position","type":"instance_method","visibility":"public","parameters":[["left",["Integer"],"The number of pixels from the left."],["top",["Integer"],"The number of pixels from the top of the screen."]],"return":[["nil"],""]},"UI::WebDialog#set_size":{"description":"The set_size method is used to set the size of the webdialog, in pixels.","name":"set_size","namespace":"UI::WebDialog","path":"UI::WebDialog#set_size","type":"instance_method","visibility":"public","parameters":[["w",["Integer"],"Width of the webdialog."],["h",["Integer"],"Height of the webdialog."]],"return":[["nil"],""]},"UI::WebDialog#set_url":{"description":"The set_url method is used to load a webdialog with the content at a\nspecific URL. This method allows you to load web sites in a webdialog.","name":"set_url","namespace":"UI::WebDialog","path":"UI::WebDialog#set_url","type":"instance_method","visibility":"public","parameters":[["url",["String"],"The URL for a specific web site."]],"return":[["nil"],""]},"UI::WebDialog#show":{"description":"The show method is used to display a non-modal dialog box.","name":"show","namespace":"UI::WebDialog","path":"UI::WebDialog#show","type":"instance_method","visibility":"public","return":[["nil"],""]},"UI::WebDialog#show_modal":{"description":"The show_modal method is used to display a modal dialog box. In SketchUp 6\nand 7, this behaves differently on Mac vs. PC. On the PC, it shows a truly\nmodal dialog, meaning so long as the WebDialog is visible, no input can be\nperformed elsewhere inside SketchUp. On the Mac, \"modal\" WebDialogs do not\nbehave this way, but instead are \"always on top\" of other windows.","name":"show_modal","namespace":"UI::WebDialog","path":"UI::WebDialog#show_modal","type":"instance_method","visibility":"public","return":[["nil"],""]},"UI::WebDialog#visible?":{"description":"The visible? method is used to tell if the webdialog is currently shown.","name":"visible?","namespace":"UI::WebDialog","path":"UI::WebDialog#visible?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if visible."]},"UI::WebDialog#write_image":{"description":"The write_image method is used to grab a portion of the web dialog screen and\nsave the image to the given file path.","name":"write_image","namespace":"UI::WebDialog","path":"UI::WebDialog#write_image","type":"instance_method","visibility":"public","parameters":[["option",["Integer"],"Specifies what method to use when saving the image. For\nJPG/JPEG images, this specifies the image quality and\ncan range from 1 to 100. For PNG images this specifies\nthe compression algorithm: <4 (best speed), 4-8\n(default), or >=9 (best compression)."],["image_path",["String"],"The destination path of the saved image."],["bottom_right_y",["Integer"],"The x coordinate of the lower right corner of the\nregion to grab."],["bottom_right_x",["Integer"],"The x coordinate of the lower right corner of the\nregion to grab."],["top_left_y",["Integer"],"The x coordinate of the upper left corner of the\nregion to grab."],["top_left_x",["Integer"],"The x coordinate of the upper left corner of the\nregion to grab."]]},"Geom":{"description":"The Geom module defines a number of Module methods that let you perform\ndifferent geometric operations.\n\nThe methods in this module take lines\nand planes as arguments. There is no special class for representing lines or\nplanes. Arrays are used for both.\n\nA line can be represented as either an Array of a point and a\nvector, or as an Array of two points.\n  line1 = [Geom::Point3d.new(0, 0, 0), Geom::Vector3d.new(0, 0, 1)]\n  line2 = [Geom::Point3d.new(0, 0, 0), Geom::Point3d.new(0, 0, 100)]\n\nA plane can be represented as either an Array\nof a point and a vector, or as an Array of 4 numbers that give the\ncoefficients of a plane equation.\n  plane1 = [Geom::Point3d.new(0, 0, 0), Geom::Vector3d.new(0, 0, 1)]\n  plane2 = [0, 0, 1, 0]\n\nThere are several good books on 3D math if you are new to\nthe concepts of a line, plane, and vector.","name":"Geom","namespace":"","path":"Geom","type":"module","visibility":"public"},"Geom.closest_points":{"description":"The {.closest_points} method is used to compute the closest points on two\nlines.","name":"closest_points","namespace":"Geom","path":"Geom.closest_points","type":"module_function","visibility":"public","parameters":[["line1",["Array(Geom::Point3d, Geom::Vector3d)"],"The first line to\nintersect"],["line2",["Array(Geom::Point3d, Geom::Vector3d)"],"The second line to\nintersect"]],"return":[["Array(Geom::Point3d, Geom::Point3d)"],"An array of two points. The\nfirst point is on the first line and the second point is on the second line."]},"Geom.fit_plane_to_points":{"description":"The {.fit_plane_to_points} method is used to compute a plane that is a best\nfit to an array of points. If more than three points are given some of the\npoints may not be on the plane.\n\nThe plane is returned as an {Array} of 4 numbers which are the\ncoefficients of the plane equation <code>Ax + By + Cz + D = 0</code>.","name":"fit_plane_to_points","namespace":"Geom","path":"Geom.fit_plane_to_points","type":"module_function","visibility":"public"},"Geom.intersect_line_line":{"description":"The {.intersect_line_line} computes the intersection of two lines.","name":"intersect_line_line","namespace":"Geom","path":"Geom.intersect_line_line","type":"module_function","visibility":"public","parameters":[["line1",["Array(Geom::Point3d, Geom::Vector3d)"],"The first line to\nintersect."],["line2",["Array(Geom::Point3d, Geom::Vector3d)"],"The second line to\nintersect."]],"return":[["Geom::Point3d","nil"],"The intersection point. Returns +nil+ if they\ndo not intersect."]},"Geom.intersect_line_plane":{"description":"The {.intersect_line_plane} method is used to compute the intersection of a\nline and a plane.","name":"intersect_line_plane","namespace":"Geom","path":"Geom.intersect_line_plane","type":"module_function","visibility":"public","parameters":[["line",["Array(Geom::Point3d, Geom::Vector3d)"],null],["plane",["Array(Geom::Point3d, Geom::Point3d)"],null]],"return":[["Geom::Point3d","nil"],"A Point3d object. Returns +nil+ if they do not\nintersect."]},"Geom.intersect_plane_plane":{"description":"The {.intersect_plane_plane} method is used to compute the intersection of two\nplanes.","name":"intersect_plane_plane","namespace":"Geom","path":"Geom.intersect_plane_plane","type":"module_function","visibility":"public","parameters":[["plane1",["Array(Geom::Point3d, Geom::Point3d)"],"The first plane to intersect"],["plane2",["Array(Geom::Point3d, Geom::Point3d)"],"The second plane to intersect"]],"return":[["Array(Geom::Point3d, Geom::Vector3d)"],"A line where the planes\nintersect if successful. Returns +nil+ if the planes do not intersect."]},"Geom.linear_combination":{"description":"The {.linear_combination} method is used to compute the linear combination of\npoints or vectors.","name":"linear_combination","namespace":"Geom","path":"Geom.linear_combination","type":"module_function","visibility":"public"},"Geom.point_in_polygon_2D":{"description":"The {.point_in_polygon_2D} method is used to determine whether a point is\ninside a polygon. The z component of both the point you're checking and\nthe points in the polygon are ignored, effectively making it a 2-d check.","name":"point_in_polygon_2D","namespace":"Geom","path":"Geom.point_in_polygon_2D","type":"module_function","visibility":"public","parameters":[["point",["Geom::Point3d"],null],["polygon",["Array<Geom::Point3d>"],"An array of points that represent the\ncorners of the polygon you are checking against."],["check_border",["Boolean"],"Pass true if a point on the border should be\ncounted as inside the polygon."]],"return":[["Boolean"],"+true+ if the point is inside the polygon."]},"Geom::BoundingBox":{"description":"Bounding boxes are three-dimensional boxes (eight corners), aligned with the\nglobal axes, that surround entities within your model. There is a default\nbounding box for any new model that will surround all entities,\nincluding all groups and components. Additionally, there are\nbounding boxes for Drawingelement objects, including components and groups.\nBounding boxes are only large enough to exactly bound the entities within\nyour model, group, or component.\n\nYou can also create arbitrary BoundingBox objects by calling BoundingBox.new.","name":"BoundingBox","namespace":"Geom","path":"Geom::BoundingBox","type":"class","visibility":"public"},"Geom::BoundingBox#add":{"description":"The add method is used to add a point, vertex, or other bounding boxes to the\nbounding box. The size of the bounding box will increase as necessary to\naccommodate the new items.\n\nAdding one point to an empty bounding box does not increase the size of the\nbounding box. You must add at least two points before methods such as\nBoundingBox.diagonal will return a size greater than zero.","name":"add","namespace":"Geom::BoundingBox","path":"Geom::BoundingBox#add","type":"instance_method","visibility":"public","return":[["Geom::BoundingBox"],"the new, resized, BoundingBox object if successful"]},"Geom::BoundingBox#center":{"description":"The center method is used to retrieve the Point3d object at the center of\nthe bounding box.","name":"center","namespace":"Geom::BoundingBox","path":"Geom::BoundingBox#center","type":"instance_method","visibility":"public","return":[["Geom::Point3d"],"the Point3d at the center of the bounding box\nif successful"]},"Geom::BoundingBox#clear":{"description":"The clear method is used to clear a bounding box.\n\nA cleared BoundingBox does not have a size greater than zero until you add\nat least two points or another bounding box.","name":"clear","namespace":"Geom::BoundingBox","path":"Geom::BoundingBox#clear","type":"instance_method","visibility":"public","return":[["Geom::BoundingBox"],"the BoundingBox object which was cleared"]},"Geom::BoundingBox#contains?":{"description":"This method is used to determine if a bounding box contains a specific\nPoint3d or BoundingBox object.","name":"contains?","namespace":"Geom::BoundingBox","path":"Geom::BoundingBox#contains?","type":"instance_method","visibility":"public","parameters":[["point_or_bb",["Geom::Point3d","Geom::BoundingBox"],null]],"return":[["Boolean"],"true if successful (bounding box contains a\nPoint3d or BoundingBox object), or false if unsuccessful."]},"Geom::BoundingBox#corner":{"description":"The corner method is used to retrieve a point object at a specified corner\nof the bounding box.\n\nThere are 8 corners to a bounding box, identified by the numbers 0 through 7.\nPoints are returned in the currently set units (inches, by default). These\nare which index refers to which corner:\n\n  - 0 = [0, 0, 0] (left front bottom)\n  - 1 = [1, 0, 0] (right front bottom)\n  - 2 = [0, 1, 0] (left back bottom)\n  - 3 = [1, 1, 0] (right back bottom)\n  - 4 = [0, 0, 1] (left front top)\n  - 5 = [1, 0, 1] (right front top)\n  - 6 = [0, 1, 1] (left back top)\n  - 7 = [1, 1, 1] (right back top)","name":"corner","namespace":"Geom::BoundingBox","path":"Geom::BoundingBox#corner","type":"instance_method","visibility":"public","parameters":[["corner_index",["Integer"],"A number (from 0 to 7) representing point at the\ncorner you want to retrieve."]],"return":[["Geom::Point3d"],"a Point3d object if successful"]},"Geom::BoundingBox#depth":{"description":"The depth method is used to retrieve the depth of the bounding box.\n\nThe depth is returned in the currently set units (inches, by default).","name":"depth","namespace":"Geom::BoundingBox","path":"Geom::BoundingBox#depth","type":"instance_method","visibility":"public","return":[["Length"],"the depth of the bounding box if successful"]},"Geom::BoundingBox#diagonal":{"description":"The diagonal method is used to get the length of the diagonal of the\nbounding box.\n\nThe diagonal is returned in the currently set units (inches, by default).","name":"diagonal","namespace":"Geom::BoundingBox","path":"Geom::BoundingBox#diagonal","type":"instance_method","visibility":"public","return":[["Length"],"the size of the diagonal for the bounding\nbox if successful"]},"Geom::BoundingBox#empty?":{"description":"The empty? method is used to determine if a bounding box is empty (such as\nif the bounds have not been set.) This returns the opposite of the valid?\nmethod.","name":"empty?","namespace":"Geom::BoundingBox","path":"Geom::BoundingBox#empty?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the bounding box is empty, false if it\nis not empty"]},"Geom::BoundingBox#height":{"description":"The height method is used to retrieve the height of the bounding box.\n\nThe height is returned in the currently set units (inches, by default).","name":"height","namespace":"Geom::BoundingBox","path":"Geom::BoundingBox#height","type":"instance_method","visibility":"public","return":[["Length"],"the height of the bounding box"]},"Geom::BoundingBox#initialize":{"description":"The new method is used to create a new, empty, bounding box.","name":"initialize","namespace":"Geom::BoundingBox","path":"Geom::BoundingBox#initialize","type":"instance_method","visibility":"public","return":[["Geom::BoundingBox"],"a BoundingBox object if successful"]},"Geom::BoundingBox#intersect":{"description":"The intersect method is used to retrieve a bounding box that is the result\nof intersecting one bounding box with another.","name":"intersect","namespace":"Geom::BoundingBox","path":"Geom::BoundingBox#intersect","type":"instance_method","visibility":"public","parameters":[["boundingbox",["Geom::BoundingBox"],"A second boundbox which might intersect boundingbox1."]],"return":[["Geom::BoundingBox"],"the resulting BoundingBox object if\nsuccessful, an empty BoundingBox object if unsuccessful."]},"Geom::BoundingBox#max":{"description":"The max method is used to retrieve the Point3d object where x, y and z are\nmaximum in the bounding box.\n\nIf you attempt to call the max method on an empty bounding box, you will\nreceive a very large negative number.","name":"max","namespace":"Geom::BoundingBox","path":"Geom::BoundingBox#max","type":"instance_method","visibility":"public","return":[["Geom::Point3d"],"a Point3d object representing the point where\nx, y, and z are the maximum in the bounding box."]},"Geom::BoundingBox#min":{"description":"The min method is used to retrieve the Point3d where x, y and z are minimum\nin the bounding box.","name":"min","namespace":"Geom::BoundingBox","path":"Geom::BoundingBox#min","type":"instance_method","visibility":"public","return":[["Geom::Point3d"],"a Point3d object representing the point where\nx, y, and z are the maximum in the bounding box."]},"Geom::BoundingBox#valid?":{"description":"The valid method is used to determine if a bounding box is valid (contains\npoints).","name":"valid?","namespace":"Geom::BoundingBox","path":"Geom::BoundingBox#valid?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the bounding box is valid (not empty),\nfalse if it is not valid (empty)"]},"Geom::BoundingBox#width":{"description":"The width method is used to retrieve the width of the bounding box.\n\nThe width is returned in the currently set units (inches, by default).","name":"width","namespace":"Geom::BoundingBox","path":"Geom::BoundingBox#width","type":"instance_method","visibility":"public","return":[["Length"],"the width of the bounding box"]},"Geom::LatLong":{"description":"The LatLong class contains various methods for creating and manipulating\nlatitude and longitude coordinates.","name":"LatLong","namespace":"Geom","path":"Geom::LatLong","type":"class","visibility":"public"},"Geom::LatLong#initialize":{"description":"The new method creates a LatLong object.","name":"initialize","namespace":"Geom::LatLong","path":"Geom::LatLong#initialize","type":"instance_method","visibility":"public","return":[["LatLong"],"a new instance of LatLong"]},"Geom::LatLong#latitude":{"description":"The Latitude method retrieves the latitude coordinate from a LatLong object.","name":"latitude","namespace":"Geom::LatLong","path":"Geom::LatLong#latitude","type":"instance_method","visibility":"public","return":[["Float"],"a latitude coordinate value"]},"Geom::LatLong#longitude":{"description":"The Latitude method retrieves the longitude coordinate from a LatLong\nobject.","name":"longitude","namespace":"Geom::LatLong","path":"Geom::LatLong#longitude","type":"instance_method","visibility":"public","return":[["Float"],"a latitude coordinate value"]},"Geom::LatLong#to_a":{"description":"The {#to_a} method converts a LatLong object to an array of two values.","name":"to_a","namespace":"Geom::LatLong","path":"Geom::LatLong#to_a","type":"instance_method","visibility":"public","return":[["Array(Float, Float)"],"an array of latitude and longitude"]},"Geom::LatLong#to_s":{"description":"The {#to_s} method converts a LatLong object to a {String}.","name":"to_s","namespace":"Geom::LatLong","path":"Geom::LatLong#to_s","type":"instance_method","visibility":"public","return":[["String"],""]},"Geom::LatLong#to_utm":{"description":"The to_utm method converts a LatLong object to a UTM object.","name":"to_utm","namespace":"Geom::LatLong","path":"Geom::LatLong#to_utm","type":"instance_method","visibility":"public","return":[["Geom::UTM"],""]},"Geom::Point3d":{"description":"The Point3d class allows you to work with a point in 3D space.\nThe point is basically just a series of values representing x, y and z\ncoordinates.\n\nThe values are specified as [x,y,z]. For example [100,200,300].\nTo create a point call Geom::Point3d.new, where the creation method\ncan take a variety of arguments:\n\nIn addition to the methods below, there are a series of geometry\nrelated methods that are on the Array class, since Point3d objects\ncan also be represented as a 3-element Array. These Array-level methods are\nfor operations such as determining if a point is on a line, on a plane, etc.\nSee the Array class for details.","name":"Point3d","namespace":"Geom","path":"Geom::Point3d","type":"class","visibility":"public"},"Geom::Point3d#+":{"description":"The '+' operator is a fast way to add to the current x, y and z values of\na point, or to set the values of a point by adding to other points together.","name":"+","namespace":"Geom::Point3d","path":"Geom::Point3d#+","type":"instance_method","visibility":"public","parameters":[["point2",["Geom::Point3d"],"A Point3d object."]],"return":[["Geom::Point3d"],""]},"Geom::Point3d#-":{"description":"The '-' operator is a fast way to subtract from the current x, y and z values\nof a point.","name":"-","namespace":"Geom::Point3d","path":"Geom::Point3d#-","type":"instance_method","visibility":"public","parameters":[["point2",["Geom::Point3d"],"A Point3d object."]],"return":[["Geom::Vector3d"],""]},"Geom::Point3d#<":{"description":"The '<' operator is a fast way to determine if another point is closer to the\norigin.","name":"<","namespace":"Geom::Point3d","path":"Geom::Point3d#<","type":"instance_method","visibility":"public","parameters":[["point2",["Geom::Point3d"],"A Point3d object."]],"return":[["Boolean"],"true if the point2 is closer to the origin."]},"Geom::Point3d#==":{"description":"The == method is used to compare two points for equality.\n\nThis uses the standard SketchUp tolerance to determine if two points are the\nsame.\n\nPoints can be compared to one another or to an array representing\nx, y and z coordinates, as in the following examples:","name":"==","namespace":"Geom::Point3d","path":"Geom::Point3d#==","type":"instance_method","visibility":"public","parameters":[["point2",["Geom::Point3d"],"A Point3d object."]],"return":[["Boolean"],"true if both points are equal; false if points are not\nequal"]},"Geom::Point3d#[]":{"description":"The [] method is used to retrieve the value of the point at the specified\nindex.","name":"[]","namespace":"Geom::Point3d","path":"Geom::Point3d#[]","type":"instance_method","visibility":"public","parameters":[["index",["Integer"],"The index for a specific x, y, or z value within the\nPoint3d."]],"return":[["Length"],"an x, y, or z value if successful"]},"Geom::Point3d#[]=":{"description":"The []= method is used to set the x, y, or z value of the point based on the\nspecific index of the value.","name":"[]=","namespace":"Geom::Point3d","path":"Geom::Point3d#[]=","type":"instance_method","visibility":"public","parameters":[["index",["Integer"],"The index for a specific x, y, or z value within the\nPoint3d."],["new_value",["Numeric"],"New x, y, or z value."]],"return":[["Numeric"],"the newly set x, y, or z value if successful"]},"Geom::Point3d#clone":{"description":"The clone method is used to create another point identical to the point\nbeing cloned.","name":"clone","namespace":"Geom::Point3d","path":"Geom::Point3d#clone","type":"instance_method","visibility":"public","return":[["Geom::Point3d"],"the cloned Point3d object"]},"Geom::Point3d#distance":{"description":"The distance method is used to compute the distance from a point to another\npoint.","name":"distance","namespace":"Geom::Point3d","path":"Geom::Point3d#distance","type":"instance_method","visibility":"public","parameters":[["point2",["Geom::Point3d"],"The Point3d object to compute the distance to."]],"return":[["Length"],"the distance in current units"]},"Geom::Point3d#distance_to_line":{"description":"The distance_to_line method is used to compute the distance from a point to\na line.\n\nSee Geom module for how to specify a line.","name":"distance_to_line","namespace":"Geom::Point3d","path":"Geom::Point3d#distance_to_line","type":"instance_method","visibility":"public","parameters":[["line",null,"A line (see Geom for information on creating lines)."]],"return":[["Float"],"the distance between a point and line in\ninternal units if successful"]},"Geom::Point3d#distance_to_plane":{"description":"The distance_to_plane method is used to compute the distance from the point\nto a plane.\n\nSee module Geom for how to specify a plane.","name":"distance_to_plane","namespace":"Geom::Point3d","path":"Geom::Point3d#distance_to_plane","type":"instance_method","visibility":"public","parameters":[["plane",null,"A plane (see Geom for how to create a plane)."]],"return":[["Float"],"a distance between a point and a plane in\ninternal units if successful"]},"Geom::Point3d#initialize":{"description":"The new method is used to create a new 3D point.","name":"initialize","namespace":"Geom::Point3d","path":"Geom::Point3d#initialize","type":"instance_method","visibility":"public","return":[["Point3d"],"a new instance of Point3d"]},"Geom::Point3d#inspect":{"description":"The inspect method is used to format a 3D point as a string.\n\nYou will not often use these function directly. Instead, they are called\nautomatically when an object is output using a print command like 'puts',\nwhich writes to the Ruby console.","name":"inspect","namespace":"Geom::Point3d","path":"Geom::Point3d#inspect","type":"instance_method","visibility":"public","return":[["String"],"a string point representation"]},"Geom::Point3d#offset":{"description":"The offset method is used to offset a point by a vector and return a new\npoint. The length of the vector must not be zero.","name":"offset","namespace":"Geom::Point3d","path":"Geom::Point3d#offset","type":"instance_method","visibility":"public","parameters":[["vector",["Geom::Vector3d"],"A Vector3d object to offset the point by."],["length",["Numeric"],"the distance to offset. If not provided, the\noffset is my a distance equal to the vector length."]],"return":[["Geom::Point3d"],"- a new Point3d object"]},"Geom::Point3d#offset!":{"description":"The offset! method is used to offset a point by a vector. The point itself\nis modified.\n\nUnlike offset, the point itself is modified.","name":"offset!","namespace":"Geom::Point3d","path":"Geom::Point3d#offset!","type":"instance_method","visibility":"public","parameters":[["vector",["Geom::Vector3d"],"A Vector3d object to offset the point by."],["length",["Numeric"],"the distance to offset. If not provided, the\noffset is my a distance equal to the vector length."]],"return":[["Geom::Point3d"],"a new Point3d object"]},"Geom::Point3d#on_line?":{"description":"The on_line? method is used to determine if the point is on a line.\n\nSee module Geom for the various ways to specify a line.","name":"on_line?","namespace":"Geom::Point3d","path":"Geom::Point3d#on_line?","type":"instance_method","visibility":"public","parameters":[["line",null,"A line (see Geom for how to create a line)."]],"return":[["Boolean"],"true if the point is on the line; false if the\npoint is not on the line"]},"Geom::Point3d#on_plane?":{"description":"The on_plane? method is used to determine if the point is on a plane.\n\nSee module Geom for the various ways to specify a plane.","name":"on_plane?","namespace":"Geom::Point3d","path":"Geom::Point3d#on_plane?","type":"instance_method","visibility":"public","parameters":[["plane",null,null]],"return":[["Boolean"],"true if the point is on the plane; false if\nthe point is not on the plane"]},"Geom::Point3d#project_to_line":{"description":"The project_to_line method is used to retrieve the point on a line that is\nclosest to this point.\n\nThe line may be defined by either a point and a vector or by two points.","name":"project_to_line","namespace":"Geom::Point3d","path":"Geom::Point3d#project_to_line","type":"instance_method","visibility":"public","parameters":[["line",null,"- see Geom for how to specify a line"]],"return":[["Geom::Point3d"],"the Point3d that is on a line closest to the\npoint"]},"Geom::Point3d#project_to_plane":{"description":"The project_to_plane method is used to retrieve the point on a plane that is\nclosest to the point.\n\nThe plane may be defined by either a point on the plane and a vector\nperpendicular to the plane or by the coeficients to the plane equation AX +\nBY + CZ + D = 0. See Geom for details.","name":"project_to_plane","namespace":"Geom::Point3d","path":"Geom::Point3d#project_to_plane","type":"instance_method","visibility":"public","parameters":[["plane",null,"A plane (see Geom for how to create a plane)."]],"return":[["Geom::Point3d"],"the Point3d that is on a plane closest to the\npoint"]},"Geom::Point3d#set!":{"description":"The {#set!} method is used to set the values of the Point3d.","name":"set!","namespace":"Geom::Point3d","path":"Geom::Point3d#set!","type":"instance_method","visibility":"public"},"Geom::Point3d#to_a":{"description":"The to_a method is used to convert the point to an array of 3 numbers","name":"to_a","namespace":"Geom::Point3d","path":"Geom::Point3d#to_a","type":"instance_method","visibility":"public","return":[["Array(Length, Length, Length)"],"an array of three numbers representing x,y,z of\nthe Point3d"]},"Geom::Point3d#to_s":{"description":"The to_s method is used to retrieve a string representation of a point.","name":"to_s","namespace":"Geom::Point3d","path":"Geom::Point3d#to_s","type":"instance_method","visibility":"public","return":[["String"],"the string representation of the Point3d"]},"Geom::Point3d#transform":{"description":"Apply a Transformation to a point, returning a new point. The original\nvector is unchanged by this method.","name":"transform","namespace":"Geom::Point3d","path":"Geom::Point3d#transform","type":"instance_method","visibility":"public","parameters":[["transform",["Geom::Transformation"],"A Transformation object."]],"return":[["Geom::Point3d"],"the newly transformed point"]},"Geom::Point3d#transform!":{"description":"Apply a Transformation to a point. The point itself is modified.","name":"transform!","namespace":"Geom::Point3d","path":"Geom::Point3d#transform!","type":"instance_method","visibility":"public","parameters":[["transform",["Geom::Transformation"],"A Transformation object."]],"return":[["Geom::Point3d"],"the transformed point"]},"Geom::Point3d#vector_to":{"description":"The vector_to team method retrieves the vector between points.","name":"vector_to","namespace":"Geom::Point3d","path":"Geom::Point3d#vector_to","type":"instance_method","visibility":"public","parameters":[["point2",["Geom::Point3d"],"A Point3d object."]],"return":[["Geom::Vector3d"],"a Vector object"]},"Geom::Point3d#x":{"description":"The x method retrieves the x value of the 3D point.","name":"x","namespace":"Geom::Point3d","path":"Geom::Point3d#x","type":"instance_method","visibility":"public","return":[["Length"],"the x value"]},"Geom::Point3d#x=":{"description":"The x= method is used to set the x value of a 3D point.","name":"x=","namespace":"Geom::Point3d","path":"Geom::Point3d#x=","type":"instance_method","visibility":"public","parameters":[["value",["Numeric"],"The new x value."]],"return":[["Numeric"],"the newly set x value"]},"Geom::Point3d#y":{"description":"The y method retrieves the y value of the 3D point.","name":"y","namespace":"Geom::Point3d","path":"Geom::Point3d#y","type":"instance_method","visibility":"public","return":[["Length"],"the y value"]},"Geom::Point3d#y=":{"description":"The y= method is used to set the y value of a 3D point.","name":"y=","namespace":"Geom::Point3d","path":"Geom::Point3d#y=","type":"instance_method","visibility":"public","parameters":[["value",["Numeric"],"The new y value."]],"return":[["Numeric"],"the newly set y value"]},"Geom::Point3d#z":{"description":"The z method retrieves the z value of the 3D point.","name":"z","namespace":"Geom::Point3d","path":"Geom::Point3d#z","type":"instance_method","visibility":"public","return":[["Length"],"the z value"]},"Geom::Point3d#z=":{"description":"The z= method is used to set the z value of a 3D point.","name":"z=","namespace":"Geom::Point3d","path":"Geom::Point3d#z=","type":"instance_method","visibility":"public","parameters":[["value",["Numeric"],"The new z value."]],"return":[["Numeric"],"the newly set z value"]},"Geom::Point3d.linear_combination":{"description":"The linear_combination method is used to create a new point as a linear\ncombination of two points. This method is generally used to get a point at\nsome percentage along a line connecting the two points.\n\nA linear combination is a standard term for vector math. It is defined as\npoint = weight1 * point1 + weight2 * point2.","name":"linear_combination","namespace":"Geom::Point3d","path":"Geom::Point3d.linear_combination","type":"class_method","visibility":"public","parameters":[["weight1",["Float"],"A weight or percentage."],["point1",["Float"],"The start point on the line."],["point2",["Float"],"The end point of the line."],["weight2",["Float"],"A weight or percentage."]],"return":[["Geom::Point3d"],""]},"Geom::PolygonMesh":{"description":"The PolygonMesh class contains methods to create polygon mesh structures.\nThis is useful if you need to write a custom importer/exporter in Ruby that\nworks at the level of triangulated polygons. For example, you can determine\nthe triangles that make up a 15-sided SketchUp face by using this class, or\nwrite a SketchupImporter that reads a data file, creates a mesh from it,\nand draws faces based on the mesh.\n\nYou can construct a mesh manually using the methods of this class, or you\ncan get a mesh from a face by calling the Face.mesh method. See\nEntities.add_faces_from_mesh for an easy way to convert a mesh back into\nfaces.","name":"PolygonMesh","namespace":"Geom","path":"Geom::PolygonMesh","type":"class","visibility":"public"},"Geom::PolygonMesh#add_point":{"description":"The {#add_point} method is used to add a point to the mesh.\n\nThe index can be used for creating polygons.","name":"add_point","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#add_point","type":"instance_method","visibility":"public","parameters":[["point",["Geom::Point3d"],null]],"return":[["Integer"],"the index in the mesh for the point"]},"Geom::PolygonMesh#add_polygon":{"description":"The +add_polygon+ method is used for adding a polygon to a\nPolygonMesh. All variations of this method require at least 3 elements\nto define a polygon, although more may be given.","name":"add_polygon","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#add_polygon","type":"instance_method","visibility":"public","return":[["Integer"],"The index of the polygon in the mesh."]},"Geom::PolygonMesh#count_points":{"description":"The {#count_points} method is used to count the number of points in a mesh.","name":"count_points","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#count_points","type":"instance_method","visibility":"public","return":[["Integer"],"the number of points in a mesh"]},"Geom::PolygonMesh#count_polygons":{"description":"The {#count_polygons} count the number of polygons in the mesh.","name":"count_polygons","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#count_polygons","type":"instance_method","visibility":"public","return":[["Integer"],"the number of polygons in the mesh"]},"Geom::PolygonMesh#initialize":{"description":"Create a new empty polygon mesh. The number of points and polygons are\noptional and are just used as a hint to decide how much space to\npre-allocate to speed up adding points and polygons.","name":"initialize","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#initialize","type":"instance_method","visibility":"public","return":[["PolygonMesh"],"a new instance of PolygonMesh"]},"Geom::PolygonMesh#normal_at":{"description":"The {#normal_at} method is used to determine the vertex normal at a\nparticular index in the mesh. This only works for meshes retrieved from\n{Sketchup::Face#mesh} with the +PolygonMeshNormals+ flag.","name":"normal_at","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#normal_at","type":"instance_method","visibility":"public","parameters":[["index",["Integer"],"The index in the mesh for the vertex normal to be\nretrieved"]],"return":[["Geom::Vector3d","nil"],""]},"Geom::PolygonMesh#point_at":{"description":"The {#point_at} method is used to retrieve the point at a specific index in\nthe mesh.","name":"point_at","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#point_at","type":"instance_method","visibility":"public","parameters":[["index",["Integer"],"The index in the mesh for the point to be retrieved"]],"return":[["Geom::Point3d","nil"],""]},"Geom::PolygonMesh#point_index":{"description":"The {#point_index} method is used to retrieve the index of a point in the\nmesh.","name":"point_index","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#point_index","type":"instance_method","visibility":"public","parameters":[["point",["Geom::Point3d"],null]],"return":[["Integer"],"the index in the mesh for the {Geom::Point3d} object"]},"Geom::PolygonMesh#points":{"description":"The {#points} method is used to retrieve an array of points (vertices) in the\nmesh","name":"points","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#points","type":"instance_method","visibility":"public","return":[["Array<Geom::Point3d>"],""]},"Geom::PolygonMesh#polygon_at":{"description":"The {#polygon_at} method is used to retrieve an array of vertex index values\nfor a polygon at a specific index.\n\nIndex is 1 based (starts at 1).  The returned array can contain negative\nvalues with the sign indicating a hidden edge. For example, a return value\nof +[-1, 2, 3]+ indicates that the edge from +1+ to +2+ is hidden.\nThe negative values should not be used as an index for point_at, take the\npositive value of the index value in the polygon array.  So if you\nget +[-1, 2,3]+ use +1+ as the argument to {#point_at}.","name":"polygon_at","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#polygon_at","type":"instance_method","visibility":"public","parameters":[["index",["Integer"],"The index of the desired polygon."]],"return":[["Array<Geom::Point3d>","nil"],""]},"Geom::PolygonMesh#polygon_points_at":{"description":"The {#polygon_points_at} method is used to retrieve the points for a polygon\nthat is at a specific index in the mesh.","name":"polygon_points_at","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#polygon_points_at","type":"instance_method","visibility":"public","parameters":[["index",["Integer"],"An index for a polygon in the mesh."]],"return":[["Array<Geom::Point3d>","nil"],""]},"Geom::PolygonMesh#polygons":{"description":"The {#polygons} method is used to retrieve an array of all polygons in the\nmesh.\n\nThe returned array can contain negative values with the sign indicating a\nhidden edge. For example, a return value of +[-1, 2, 3]+ indicates that the\nedge from +1+ to +2+ is hidden.","name":"polygons","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#polygons","type":"instance_method","visibility":"public","return":[["Array<Integer>"],""]},"Geom::PolygonMesh#set_point":{"description":"The {#set_point} method is used to set the point at a specific index in the\nmesh.","name":"set_point","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#set_point","type":"instance_method","visibility":"public","parameters":[["index",["Integer"],"The index where the point will be set."],["point",["Geom::Point3d"],"A Point3d object to set at the index."]],"return":[["Geom::PolygonMesh"],""]},"Geom::PolygonMesh#set_uv":{"description":"The {#set_uv} method is used to define UV mapping coordinates to points in\nthe mesh.\n\nBeware that the polygons connected to the point will share UV coordiates so\nUV mapping coordinates needs to be continuous across the polygon mesh.\n\nWhen setting the UV for a point one need to make sure to have the correct\nindex for the point. It's therefore best to add the points using {#add_point}\nand use the index it returns for following calls to set_uv and\n{#add_polygon}.\n\nIf you are not able to calculate how many points there will be in your mesh\nmake sure to not specify an index in {#set_uv} higher than the number of\ntimes you have called {#set_uv}.","name":"set_uv","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#set_uv","type":"instance_method","visibility":"public","parameters":[["point",["Geom::Point3d"],"A Point3d object representing UV coordinates."],["index",["Integer"],"An Integer representing the UV index."]],"return":[["nil"],""]},"Geom::PolygonMesh#transform!":{"description":"The {#transform!} method is used to apply a transformation to a mesh.","name":"transform!","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#transform!","type":"instance_method","visibility":"public","parameters":[["transformation",["Geom::Transformation"],null]],"return":[["Geom::PolygonMesh"],""]},"Geom::PolygonMesh#uv_at":{"description":"The {#uv_at} method is used to access a uv (texture coordinates) at a\nspecific index.\n\n\"UVs\" is a way of referring to the u,v texture coordinates (as\nopposed to the X, Y, and Z axis that you construct your meshes on), which\nare points defining 1-by-1 positions within an image. These coordinates\nconnect to points in your 3D model, to position an image texture onto it's\nsurface (similar to virtual \"thumb tacks\")\n\nThese coordinates pin an exact spot on an image that you wish to use to\ntexture your model to a specific point on an object's surface. Between these\npoints, your software will stretch the image smoothly. This is what is\nreferred to as UV mapping.","name":"uv_at","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#uv_at","type":"instance_method","visibility":"public","parameters":[["index",["Integer"],"The index for the texture coordinate."],["front",["Boolean"],"Set to +true+ to get the UV for the front size,\n+false+ for the back side."]],"return":[["Geom::Point3d","nil"],"a Point3d object where the x equals the u\nvalue and the y equals the v value.\nReturns nil on failure."]},"Geom::PolygonMesh#uvs":{"description":"The {#uvs} method is used to retrieve an array of uv coordinates in the\nmesh.","name":"uvs","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh#uvs","type":"instance_method","visibility":"public","parameters":[["front",["Boolean"],null]],"return":[["Array<Geom::Point3d>"],""]},"Geom::PolygonMesh::AUTO_SOFTEN":{"description":"Constants","name":"AUTO_SOFTEN","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh::AUTO_SOFTEN","type":"constant","return":null,"visibility":"public"},"Geom::PolygonMesh::HIDE_BASED_ON_INDEX":{"description":"Stub value.","name":"HIDE_BASED_ON_INDEX","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh::HIDE_BASED_ON_INDEX","type":"constant","return":null,"visibility":"public"},"Geom::PolygonMesh::NO_SMOOTH_OR_HIDE":{"description":"Stub value.","name":"NO_SMOOTH_OR_HIDE","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh::NO_SMOOTH_OR_HIDE","type":"constant","return":null,"visibility":"public"},"Geom::PolygonMesh::SMOOTH_SOFT_EDGES":{"description":"Stub value.","name":"SMOOTH_SOFT_EDGES","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh::SMOOTH_SOFT_EDGES","type":"constant","return":null,"visibility":"public"},"Geom::PolygonMesh::SOFTEN_BASED_ON_INDEX":{"description":"Stub value.","name":"SOFTEN_BASED_ON_INDEX","namespace":"Geom::PolygonMesh","path":"Geom::PolygonMesh::SOFTEN_BASED_ON_INDEX","type":"constant","return":null,"visibility":"public"},"Geom::Transformation":{"description":"Transformations are a standard construct in the 3D world for representing\nthe position, rotation, and sizing of a given entity. In the SketchUp\nworld, {Sketchup::ComponentInstance} and {Sketchup::Group} have a\n+.transformation+ method that reports their current state and various methods\n(+.move!+, +transformation=+, etc.) that allow them to be manipulated.\n\nUse of the transformation class requires a knowledge of geometrical\ntransformations in 3 dimensions which is covered extensively on\nthe Internet.","name":"Transformation","namespace":"Geom","path":"Geom::Transformation","type":"class","visibility":"public"},"Geom::Transformation#*":{"description":"The {#*} method is used to do matrix multiplication using the transform.","name":"*","namespace":"Geom::Transformation","path":"Geom::Transformation#*","type":"instance_method","visibility":"public"},"Geom::Transformation#clone":{"description":"The {#clone} method is used to create a copy of a transformation.","name":"clone","namespace":"Geom::Transformation","path":"Geom::Transformation#clone","type":"instance_method","visibility":"public","return":[["Geom::Transformation"],""]},"Geom::Transformation#identity?":{"description":"The {#identity?} method is used to determine if a transformation is the\n{IDENTITY} transform.","name":"identity?","namespace":"Geom::Transformation","path":"Geom::Transformation#identity?","type":"instance_method","visibility":"public","return":[["Boolean"],"+true+ if the transformation is the identity"]},"Geom::Transformation#initialize":{"description":"The new method is used to create a new transformation.\n\nYou can use this method or one of the more specific methods for creating\nspecific kinds of Transformations.","name":"initialize","namespace":"Geom::Transformation","path":"Geom::Transformation#initialize","type":"instance_method","visibility":"public","return":[["Transformation"],"a new instance of Transformation"]},"Geom::Transformation#inverse":{"description":"The {#inverse} method is used to retrieve the inverse of a transformation.","name":"inverse","namespace":"Geom::Transformation","path":"Geom::Transformation#inverse","type":"instance_method","visibility":"public","return":[["Geom::Transformation"],""]},"Geom::Transformation#invert!":{"description":"The {#invert!} method sets the transformation to its inverse.","name":"invert!","namespace":"Geom::Transformation","path":"Geom::Transformation#invert!","type":"instance_method","visibility":"public","return":[["Geom::Transformation"],""]},"Geom::Transformation#origin":{"description":"The {#origin} method retrieves the origin of a rigid transformation.","name":"origin","namespace":"Geom::Transformation","path":"Geom::Transformation#origin","type":"instance_method","visibility":"public","return":[["Geom::Point3d"],"the origin of the transformation."]},"Geom::Transformation#set!":{"description":"The {#set!} method is used to set this transformation to match another one.\n\nThe argument is anything that can be converted into a transformation.","name":"set!","namespace":"Geom::Transformation","path":"Geom::Transformation#set!","type":"instance_method","visibility":"public"},"Geom::Transformation#to_a":{"description":"The {#to_a} method retrieves a 16 element array which contains the values that\ndefine the transformation.","name":"to_a","namespace":"Geom::Transformation","path":"Geom::Transformation#to_a","type":"instance_method","visibility":"public","return":[["Array<Float>"],""]},"Geom::Transformation#xaxis":{"description":"The {#xaxis} method retrieves the x axis of a rigid transformation.","name":"xaxis","namespace":"Geom::Transformation","path":"Geom::Transformation#xaxis","type":"instance_method","visibility":"public","return":[["Geom::Vector3d"],""]},"Geom::Transformation#yaxis":{"description":"The {#yaxis} method retrieves the y axis of a rigid transformation.","name":"yaxis","namespace":"Geom::Transformation","path":"Geom::Transformation#yaxis","type":"instance_method","visibility":"public","return":[["Geom::Vector3d"],""]},"Geom::Transformation#zaxis":{"description":"The {#zaxis} method retrieves the z axis of a rigid transformation.","name":"zaxis","namespace":"Geom::Transformation","path":"Geom::Transformation#zaxis","type":"instance_method","visibility":"public","return":[["Geom::Vector3d"],""]},"Geom::Transformation.axes":{"description":"The axes method creates a transformation that goes from world coordinates\nto an arbitrary coordinate system defined by an origin and three axis\nvectors.","name":"axes","namespace":"Geom::Transformation","path":"Geom::Transformation.axes","type":"class_method","visibility":"public"},"Geom::Transformation.interpolate":{"description":"The interpolate method is used to create a new transformation that is the\nresult of interpolating between two other transformations.\n\nParameter is a weight (between 0.0 and 1.0) that identifies whether to favor\ntransformation1 or transformation2.","name":"interpolate","namespace":"Geom::Transformation","path":"Geom::Transformation.interpolate","type":"class_method","visibility":"public","parameters":[["transform1",["Geom::Transformation"],""],["transform2",["Geom::Transformation"],""],["weight",["Float"],"A value between 0.0 and 1.0 (see comments)."]],"return":[["Geom::Transformation"],""]},"Geom::Transformation.rotation":{"description":"The rotation method is used to create a transformation that does rotation\nabout an axis.\n\nThe axis is defined by a point and a vector. The angle is given in radians.","name":"rotation","namespace":"Geom::Transformation","path":"Geom::Transformation.rotation","type":"class_method","visibility":"public","parameters":[["point",["Geom::Point3d"],""],["vector",["Geom::Vector3d"],""],["angle",["Float"],"The angle in radians."]],"return":[["Geom::Transformation"],""]},"Geom::Transformation.scaling":{"description":"The scaling method is used to create a transformation that does scaling.","name":"scaling","namespace":"Geom::Transformation","path":"Geom::Transformation.scaling","type":"class_method","visibility":"public"},"Geom::Transformation.translation":{"description":"The translation method is used to create a transformation that does\ntranslation.","name":"translation","namespace":"Geom::Transformation","path":"Geom::Transformation.translation","type":"class_method","visibility":"public"},"Geom::UTM":{"description":"The UTM class lets you work with UTM map coordinates.","name":"UTM","namespace":"Geom","path":"Geom::UTM","type":"class","visibility":"public"},"Geom::UTM#initialize":{"description":"The new method is used to create a new UTM coordinate. You will often create\nUTM objects by calling the method Model.point_to_utm instead of calling this\nmethod.","name":"initialize","namespace":"Geom::UTM","path":"Geom::UTM#initialize","type":"instance_method","visibility":"public","parameters":[["zone_number",["Integer"],"A zone number or a UTM object. If this first parameter\nis a UTM object, then the other parameters are ignored."],["zone_letter",["String"],"A zone letter."],["y",["Numeric"],"The y position."],["x",["Numeric"],"The x position."]],"return":[["Geom::UTM"],"a utm coordinate if successful"]},"Geom::UTM#to_a":{"description":"The to_a method returns a UTM coordinate as a 4 element array. The Array\nelements are the zone number, the zone letter, the x coordinate and the y\ncoordinate.","name":"to_a","namespace":"Geom::UTM","path":"Geom::UTM#to_a","type":"instance_method","visibility":"public","return":[["Array(Fixnum, String, Float, Float)"],"a utm array if successful"]},"Geom::UTM#to_latlong":{"description":"The to_latlong method is used to convert UTM coordinates to latitude\nand longitude. See the LatLong class for more information.","name":"to_latlong","namespace":"Geom::UTM","path":"Geom::UTM#to_latlong","type":"instance_method","visibility":"public","return":[["Geom::LatLong"],"a LatLong object if successful"]},"Geom::UTM#to_s":{"description":"The to_s method is used to retrieve a string representation of a UTM.","name":"to_s","namespace":"Geom::UTM","path":"Geom::UTM#to_s","type":"instance_method","visibility":"public","return":[["String"],"a utm string if successful"]},"Geom::UTM#x":{"description":"The x method returns the UTM x coordinate.","name":"x","namespace":"Geom::UTM","path":"Geom::UTM#x","type":"instance_method","visibility":"public","return":[["Float"],"the UTM x coordinate"]},"Geom::UTM#y":{"description":"The x method returns the UTM y coordinate.","name":"y","namespace":"Geom::UTM","path":"Geom::UTM#y","type":"instance_method","visibility":"public","return":[["Float"],"the UTM y coordinate"]},"Geom::UTM#zone_letter":{"description":"The zone_letter method returns the UTM zone letter.","name":"zone_letter","namespace":"Geom::UTM","path":"Geom::UTM#zone_letter","type":"instance_method","visibility":"public","return":[["String"],"the UTM zone letter"]},"Geom::UTM#zone_number":{"description":"The zone_number method returns the UTM zone number.","name":"zone_number","namespace":"Geom::UTM","path":"Geom::UTM#zone_number","type":"instance_method","visibility":"public","return":[["Fixnum"],"the UTM zone number"]},"Geom::Vector3d":{"description":"The Vector3d class is used to represent vectors in a 3 dimensional space.\nVectors in SketchUp have a direction and a length, but not a starting point.\n\nThere are numerous tutorials on 3D vectors available on the internet.","name":"Vector3d","namespace":"Geom","path":"Geom::Vector3d","type":"class","visibility":"public"},"Geom::Vector3d#%":{"description":"The {#%} method is used to compute the dot product between two vectors.\n\nThis is an alias of the {#dot} method.","name":"%","namespace":"Geom::Vector3d","path":"Geom::Vector3d#%","type":"instance_method","visibility":"public","parameters":[["vector",["Geom::Vector"],null]],"return":[["Float"],""]},"Geom::Vector3d#*":{"description":"The {#*} method is used to compute the cross product between two vectors.\n\nThe cross product, also called the vector product, is an operation on two\nvectors. The cross product of two vectors produces a third vector which is\nperpendicular to the plane in which the first two lie.\n\nThis is an alias of the {#cross} method.","name":"*","namespace":"Geom::Vector3d","path":"Geom::Vector3d#*","type":"instance_method","visibility":"public","parameters":[["vector",null,"A Vector3d object."]],"return":[["Geom::Vector3d"],"a Vector3d object if successful"]},"Geom::Vector3d#+":{"description":"The - method is used to add a vector to this one.","name":"+","namespace":"Geom::Vector3d","path":"Geom::Vector3d#+","type":"instance_method","visibility":"public","parameters":[["vector2",null,"A Vector3d object."]],"return":[["Geom::Vector3d"],"the new vector."]},"Geom::Vector3d#-":{"description":"The - method is used to subtract a vector from this one.","name":"-","namespace":"Geom::Vector3d","path":"Geom::Vector3d#-","type":"instance_method","visibility":"public","parameters":[["vector2",null,"A Vector3d object."]],"return":[["Geom::Vector3d"],"the new vector."]},"Geom::Vector3d#<":{"description":"The < method is used to determine if a vector's x, y or z value is less\nthan another vector's x, y or z value.","name":"<","namespace":"Geom::Vector3d","path":"Geom::Vector3d#<","type":"instance_method","visibility":"public","parameters":[["vector2",null,"A Vector3d object."]],"return":[["Boolean"],"true if the vector's x, y or z component is less"]},"Geom::Vector3d#==":{"description":"The == method is used to determine if two vectors are equal to within\ntolerance.","name":"==","namespace":"Geom::Vector3d","path":"Geom::Vector3d#==","type":"instance_method","visibility":"public","parameters":[["vector2",null,"A Vector3d object."]],"return":[["Boolean"],"true if vector1 is equal to vector 2. False if\nthey are not equal."]},"Geom::Vector3d#[]":{"description":"The [] method is used to access the coordinates of a vector as if it was an\nArray. The index must be 0, 1 or 2.\n\nThe following are equivalent:","name":"[]","namespace":"Geom::Vector3d","path":"Geom::Vector3d#[]","type":"instance_method","visibility":"public","parameters":[["i",["Integer"],"An index into an array of three coordinates."]],"return":[["Length"],"the value for the x, y, or z coordinate."]},"Geom::Vector3d#[]=":{"description":"The []= method is used to set the coordinates of a vector as if it was an\nArray. The value of i must be 0, 1 or 2.","name":"[]=","namespace":"Geom::Vector3d","path":"Geom::Vector3d#[]=","type":"instance_method","visibility":"public","parameters":[["index",["Integer"],"The index for the x, y, or z coordinate."],["value",["Numeric"],"The value for the x, y, or z coordinate."]],"return":[["Numeric"],"the newly set coordinate value"]},"Geom::Vector3d#angle_between":{"description":"The angle_between method is used to compute the angle (in radians) between\nthis vector and another vector.","name":"angle_between","namespace":"Geom::Vector3d","path":"Geom::Vector3d#angle_between","type":"instance_method","visibility":"public","parameters":[["vector2",["Geom::Vector3d"],"A Vector3d object."]],"return":[["Float"],"an angle (in radians)"]},"Geom::Vector3d#axes":{"description":"The axes method is used to compute an arbitrary set of axes with the given\nvector as the z-axis direction.\n\nReturns an Array of three vectors [xaxis, yaxis, zaxis]","name":"axes","namespace":"Geom::Vector3d","path":"Geom::Vector3d#axes","type":"instance_method","visibility":"public","return":[["Array(Geom::Vector3d, Geom::Vector3d, Geom::Vector3d)"],"an Array object containing three Vector3d objects"]},"Geom::Vector3d#clone":{"description":"The clone method is used to make a copy of a vector.\n\nThis method is equivalent to vec2 = Geom::Vector3d.new(vec)","name":"clone","namespace":"Geom::Vector3d","path":"Geom::Vector3d#clone","type":"instance_method","visibility":"public","return":[["Geom::Vector3d"],"a Vector3d object which is the clone of\nvector"]},"Geom::Vector3d#cross":{"description":"The {#cross} method is used to compute the cross product between two vectors.\n\nThe cross product, also called the vector product, is an operation on two\nvectors. The cross product of two vectors produces a third vector which is\nperpendicular to the plane in which the first two lie.","name":"cross","namespace":"Geom::Vector3d","path":"Geom::Vector3d#cross","type":"instance_method","visibility":"public","parameters":[["vector",["Geom::Vector3d"],"A Vector3d object."]],"return":[["Geom::Vector3d"],"the cross of vector1 and vector2"]},"Geom::Vector3d#dot":{"description":"The {#dot} method is used to compute the dot product between two vectors.","name":"dot","namespace":"Geom::Vector3d","path":"Geom::Vector3d#dot","type":"instance_method","visibility":"public","parameters":[["vector",["Geom::Vector"],""]],"return":[["Float"],""]},"Geom::Vector3d#initialize":{"description":"The new method is used to create a new vector.","name":"initialize","namespace":"Geom::Vector3d","path":"Geom::Vector3d#initialize","type":"instance_method","visibility":"public","return":[["Vector3d"],"a new instance of Vector3d"]},"Geom::Vector3d#inspect":{"description":"The inspect method is used to inspect the contents of a vector as a\nfriendly string.","name":"inspect","namespace":"Geom::Vector3d","path":"Geom::Vector3d#inspect","type":"instance_method","visibility":"public","return":[["Geom::Vector3d"],"the Vector3d object"]},"Geom::Vector3d#length":{"description":"The length method is used to retrieve the length of the vector.","name":"length","namespace":"Geom::Vector3d","path":"Geom::Vector3d#length","type":"instance_method","visibility":"public","return":[["Length"],"the length of the vector"]},"Geom::Vector3d#length=":{"description":"The length= method is used to set the length of the vector. The length must\nbe greater than 0.","name":"length=","namespace":"Geom::Vector3d","path":"Geom::Vector3d#length=","type":"instance_method","visibility":"public","parameters":[["length",["Numeric"],"A length for the vector."]],"return":[["Numeric"],"a newly set length"]},"Geom::Vector3d#normalize":{"description":"The normalize method is used to return a vector that is a unit vector\nof another.","name":"normalize","namespace":"Geom::Vector3d","path":"Geom::Vector3d#normalize","type":"instance_method","visibility":"public","return":[["Geom::Vector3d"],"a new normalized Vector3d object"]},"Geom::Vector3d#normalize!":{"description":"The normalize! method is used to convert a vector into a unit vector,\nin place.\n\nAnother way to do this is vec.length = 1","name":"normalize!","namespace":"Geom::Vector3d","path":"Geom::Vector3d#normalize!","type":"instance_method","visibility":"public","return":[["Geom::Vector3d"],"a normalized Vector3d object"]},"Geom::Vector3d#parallel?":{"description":"The parallel method is used to determine if this vector is parallel to\nanother vector to within tolerance.","name":"parallel?","namespace":"Geom::Vector3d","path":"Geom::Vector3d#parallel?","type":"instance_method","visibility":"public","parameters":[["vector2",["Geom::Vector3d"],"A Vector3d object."]],"return":[["Boolean"],"true if vector and vector2 are parallel. False\nif they are not parallel."]},"Geom::Vector3d#perpendicular?":{"description":"The perpendicular? method is used to determine if this vector is\nperpendicular to another vector to within tolerance.","name":"perpendicular?","namespace":"Geom::Vector3d","path":"Geom::Vector3d#perpendicular?","type":"instance_method","visibility":"public","parameters":[["vector2",["Geom::Vector3d"],"A Vector3d object."]],"return":[["Boolean"],"true if vector and vector2 are parallel. False\nif they are not parallel."]},"Geom::Vector3d#reverse":{"description":"The reverse method is used to return a new vector that is the reverse\nof this vector, while leaving the original unchanged.","name":"reverse","namespace":"Geom::Vector3d","path":"Geom::Vector3d#reverse","type":"instance_method","visibility":"public","return":[["Geom::Vector3d"],"a Vector3d object that is the reverse of\nvector"]},"Geom::Vector3d#reverse!":{"description":"The reverse! method is used to reverse the vector in place.","name":"reverse!","namespace":"Geom::Vector3d","path":"Geom::Vector3d#reverse!","type":"instance_method","visibility":"public","return":[["Geom::Vector3d"],"a Vector3d object that is the reverse of\nvector"]},"Geom::Vector3d#samedirection?":{"description":"The samedirection? method is used to determine if this vector is parallel to\nand in the same direction as another vector to within tolerance.","name":"samedirection?","namespace":"Geom::Vector3d","path":"Geom::Vector3d#samedirection?","type":"instance_method","visibility":"public","parameters":[["vector2",["Geom::Vector3d"],"A Vector3d object."]],"return":[["Boolean"],"true if vector and vector2 are in the same\ndirection. False if they are not in the same direction."]},"Geom::Vector3d#set!":{"description":"The set! method is used to set the coordinates of the vector.","name":"set!","namespace":"Geom::Vector3d","path":"Geom::Vector3d#set!","type":"instance_method","visibility":"public"},"Geom::Vector3d#to_a":{"description":"The to_a method retrieves the coordinates of the vector in an Array\n[x, y, z].","name":"to_a","namespace":"Geom::Vector3d","path":"Geom::Vector3d#to_a","type":"instance_method","visibility":"public","return":[["Array(Length, Length, Length)"],"the coordinates of the vector in an array"]},"Geom::Vector3d#to_s":{"description":"The to_s method is used to format the vector as a String.","name":"to_s","namespace":"Geom::Vector3d","path":"Geom::Vector3d#to_s","type":"instance_method","visibility":"public","return":[["String"],"a string representation of vector"]},"Geom::Vector3d#transform":{"description":"Apply a Transformation to a vector, returning a new vector. The original\nvector is unchanged by this method.","name":"transform","namespace":"Geom::Vector3d","path":"Geom::Vector3d#transform","type":"instance_method","visibility":"public","parameters":[["transform",["Geom::Transformation"],"A Transformation object to apply to the vector."]],"return":[["Geom::Vector3d"],"the newly transformed vector"]},"Geom::Vector3d#transform!":{"description":"Apply a Transformation to a vector. The vector itself is modified.","name":"transform!","namespace":"Geom::Vector3d","path":"Geom::Vector3d#transform!","type":"instance_method","visibility":"public","parameters":[["transform",["Geom::Transformation"],"A Transformation object to apply to the vector."]],"return":[["Geom::Vector3d"],"the transformed vector"]},"Geom::Vector3d#unitvector?":{"description":"The unitvector? method is used to see if the vector is a unit vector.\n\nThis is equivalent to vec.length == 1.0","name":"unitvector?","namespace":"Geom::Vector3d","path":"Geom::Vector3d#unitvector?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the vector is a unit vector. False if\nthe vector is not a unit vector."]},"Geom::Vector3d#valid?":{"description":"The valid? method is used to verify if a vector is valid. A vector is valid\nif its length is not zero.","name":"valid?","namespace":"Geom::Vector3d","path":"Geom::Vector3d#valid?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the vector is valid. false if the\nvector is not valid."]},"Geom::Vector3d#x":{"description":"The x method is used to retrieve the x coordinate of the vector.","name":"x","namespace":"Geom::Vector3d","path":"Geom::Vector3d#x","type":"instance_method","visibility":"public","return":[["Length"],"the x coordinate of the vector"]},"Geom::Vector3d#x=":{"description":"The x= method is used to set the x coordinate of the vector.","name":"x=","namespace":"Geom::Vector3d","path":"Geom::Vector3d#x=","type":"instance_method","visibility":"public","parameters":[["x",["Numeric"],"The x coordinate for the vector."]],"return":[["Numeric"],"the newly set x coordinate for the vector"]},"Geom::Vector3d#y":{"description":"The y method is used to retrieve the y coordinate of the vector.","name":"y","namespace":"Geom::Vector3d","path":"Geom::Vector3d#y","type":"instance_method","visibility":"public","return":[["Length"],"the y coordinate of the vector"]},"Geom::Vector3d#y=":{"description":"Set the y coordinate of the vector.","name":"y=","namespace":"Geom::Vector3d","path":"Geom::Vector3d#y=","type":"instance_method","visibility":"public","parameters":[["y",["Numeric"],"The y coordinate for the vector."]],"return":[["Numeric"],"the newly set y coordinate for the vector"]},"Geom::Vector3d#z":{"description":"Get the z coordinate of the vector.","name":"z","namespace":"Geom::Vector3d","path":"Geom::Vector3d#z","type":"instance_method","visibility":"public","return":[["Length"],"the z coordinate of the vector"]},"Geom::Vector3d#z=":{"description":"Set the z coordinate of the vector.","name":"z=","namespace":"Geom::Vector3d","path":"Geom::Vector3d#z=","type":"instance_method","visibility":"public","parameters":[["z",["Numeric"],"The z coordinate for the vector."]],"return":[["Numeric"],"the newly set z coordinate for the vector"]},"Geom::Vector3d.linear_combination":{"description":"The linear_combination method is used to create a new vector as a linear\ncombination of other vectors. This method is generally used to get a vector\nat some percentage between two vectors.\n\nA linear combination is a standard term for vector math. It is defined as\npoint = weight1 * point1 + weight2 * point2.\n\nIn addition to the 4-argument form detailed here, you may also call this\nmethod with 6 parameters in the form of:\n  vec = Geom::Vector3d.linear_combination(x, xaxis, y, yaxis, z, zaxis)","name":"linear_combination","namespace":"Geom::Vector3d","path":"Geom::Vector3d.linear_combination","type":"class_method","visibility":"public","parameters":[["weight1",null,"A weight or percentage."],["vector1",null,"The first vector."],["vector2",null,"The end point of the line."],["weight2",null,"A weight or percentage."]],"return":[["Geom::Vector3d"],"a Vector3d object"]},"Array":{"description":"The SketchUp Array class adds additional methods to the standard Ruby Array\nclass. Specifically, it contains methods allowing an\narray to behave just as a {Geom::Vector3d} or {Geom::Point3d} object\n(which can be thought of as arrays of 3 coordinate values). Therefore, you\ncan use the Array class in place of a {Geom::Point3d} or {Geom::Vector3d} as\na way to pass coordinate values.","name":"Array","namespace":"","path":"Array","type":"class","visibility":"public"},"Array#cross":{"description":"The {#cross} method is used to compute the cross product between two vectors.","name":"cross","namespace":"Array","path":"Array#cross","type":"instance_method","visibility":"public","parameters":[["vector",["Geom::Vector3d"],null]],"return":[["Geom::Vector3d"],""]},"Array#distance":{"description":"The {#distance} method is used to compute the distance between two points.","name":"distance","namespace":"Array","path":"Array#distance","type":"instance_method","visibility":"public","parameters":[["point",["Geom::Point3d"],null]],"return":[["Length"],""]},"Array#distance_to_line":{"description":"The {#distance_to_line} method is used to compute the distance from a\n{Geom::Point3d} object to a line.","name":"distance_to_line","namespace":"Array","path":"Array#distance_to_line","type":"instance_method","visibility":"public"},"Array#distance_to_plane":{"description":"The {#distance_to_plane} method is used to compute the distance from a\n{Geom::Point3d} object to a plane.","name":"distance_to_plane","namespace":"Array","path":"Array#distance_to_plane","type":"instance_method","visibility":"public"},"Array#dot":{"description":"The {#dot} method is used to compute the dot product between two vectors.","name":"dot","namespace":"Array","path":"Array#dot","type":"instance_method","visibility":"public","parameters":[["vector",["Geom::Vector3d"],null]],"return":[["Float"],""]},"Array#normalize":{"description":"The {#normalize} method is used to normalize a vector (setting its\nlength to 1). It returns a new array rather than changing the original in\nplace.","name":"normalize","namespace":"Array","path":"Array#normalize","type":"instance_method","visibility":"public","return":[["Array(Float, Float, Float)"],"An array object representing a vector"]},"Array#normalize!":{"description":"The {#normalize!} method is used to normalize a vector in place (setting its\nlength to 1).","name":"normalize!","namespace":"Array","path":"Array#normalize!","type":"instance_method","visibility":"public","return":[["Array"],""]},"Array#offset":{"description":"The {#offset} method is used to offset a point by a vector. it returns a new\narray rather than modifying the original in place.","name":"offset","namespace":"Array","path":"Array#offset","type":"instance_method","visibility":"public"},"Array#offset!":{"description":"The {#offset!} method is used to offset a point by a vector. The array is\nmodified in place.","name":"offset!","namespace":"Array","path":"Array#offset!","type":"instance_method","visibility":"public"},"Array#on_line?":{"description":"The {#on_line?} method is used to determine if a {Geom::Point3d} object is on\na line.","name":"on_line?","namespace":"Array","path":"Array#on_line?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Array#on_plane?":{"description":"The {#on_plane?} method is used to determine if a {Geom::Point3d} object is\non a plane (to within SketchUp's standard floating point tolerance).","name":"on_plane?","namespace":"Array","path":"Array#on_plane?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Array#project_to_line":{"description":"The {#project_to_line} method is used to retrieve the projection of a\n{Geom::Point3d} object onto a line.","name":"project_to_line","namespace":"Array","path":"Array#project_to_line","type":"instance_method","visibility":"public"},"Array#project_to_plane":{"description":"The {#project_to_plane} method retrieves the projection of a {Geom::Point3d}\nonto a plane.","name":"project_to_plane","namespace":"Array","path":"Array#project_to_plane","type":"instance_method","visibility":"public"},"Array#transform":{"description":"The {#transform} method is used to apply a {Geom::Transformation} object to a\n{Geom::Point3d} object defined by an {Array} object.\n\nThis method returns a new {Array} object instead of modifying the original.","name":"transform","namespace":"Array","path":"Array#transform","type":"instance_method","visibility":"public","parameters":[["transform",["Geom::Transformation"],null]],"return":[["Array(Length, Length, Length)"],"The newly transformed point."]},"Array#transform!":{"description":"The {#transform!} method is used to apply a {Geom::Transformation} object to\na {Geom::Point3d} object defined by an {Array} object.","name":"transform!","namespace":"Array","path":"Array#transform!","type":"instance_method","visibility":"public","parameters":[["transform",["Geom::Transformation"],null]],"return":[["Array"],"The newly transformed point."]},"Array#vector_to":{"description":"The {#vector_to} method is used to create an array as a vector from one point\nto a second point.","name":"vector_to","namespace":"Array","path":"Array#vector_to","type":"instance_method","visibility":"public","parameters":[["point",["Geom::Point3d"],null]],"return":[["Geom::Vector3d"],""]},"Array#x":{"description":"The {#x} method retrieves the x coordinate.","name":"x","namespace":"Array","path":"Array#x","type":"instance_method","visibility":"public","return":[["Object","nil"],"The x coordinate if successful"]},"Array#x=":{"description":"The {#x=} method sets the x coordinate.","name":"x=","namespace":"Array","path":"Array#x=","type":"instance_method","visibility":"public","parameters":[["x",["Object"],"The new x position."]],"return":[["Object"],"The new x coordinate if successful"]},"Array#y":{"description":"The {#y} method retrieves the y coordinate.","name":"y","namespace":"Array","path":"Array#y","type":"instance_method","visibility":"public","return":[["Object","nil"],"The y coordinate if successful"]},"Array#y=":{"description":"The {#y=} method sets the y coordinate.","name":"y=","namespace":"Array","path":"Array#y=","type":"instance_method","visibility":"public","parameters":[["y",["Object"],"The new y position."]],"return":[["Object"],"The new y coordinate if successful"]},"Array#z":{"description":"The {#z} method retrieves the z coordinate.","name":"z","namespace":"Array","path":"Array#z","type":"instance_method","visibility":"public","return":[["Object","nil"],"The z coordinate if successful"]},"Array#z=":{"description":"The {#z=} method sets the z coordinate.","name":"z=","namespace":"Array","path":"Array#z=","type":"instance_method","visibility":"public","parameters":[["z",["Object"],"The new z position."]],"return":[["Object"],"The new z coordinate if successful"]},"Length":{"description":"Because length units are used so often in SketchUp, a special class has been\nadded to make it easier to work with length values. You can use a Length\nobject any place that you would use a Float.\n\nInternally, all lengths in SketchUp are stored in inches. The Length class\nstores values in inches as well. A number of methods have been added to the\nRuby Numeric class to do units conversions.\n\nConstants:\nLength Format:\n- Length::Decimal\n- Length::Architectural\n- Length::Engineering\n- Length::Fractional\nLength Unit:\n- Length::Inches\n- Length::Feet\n- Length::Millimeter\n- Length::Centimeter\n- Length::Meter\nThe setting for the Length format and Length unit can be retrieved from the\nmodel options by querying the \"UnitsOptions\" OptionsProvider for\n\"LengthFormat\" and \"LengthUnit\" respectively.","name":"Length","namespace":"","path":"Length","type":"class","visibility":"public"},"Length#<":{"description":"The < method is used to see if one length is less than another length.\n\nFor example, if l1 = 1.0.inch and l2 = 1.000001.inch then l1 == l2 so l1\n< l2 should return false.","name":"<","namespace":"Length","path":"Length#<","type":"instance_method","visibility":"public","parameters":[["length2",["Length"],"A length value."]],"return":[["Boolean"],"true if length1 is < length2; false if\nlength1 is not < length2"]},"Length#<=":{"description":"The <= method is used to see if one length is less than or equal to\nanother length.","name":"<=","namespace":"Length","path":"Length#<=","type":"instance_method","visibility":"public","parameters":[["length2",["Length"],"A length value."]],"return":[["Boolean"],"true if length1 is <= length2; false if\nlength1 is not <= length2"]},"Length#<=>":{"description":"The <=> method is used to see if one length is less than equal or greater\nthan another length. Because we change == for Length to do a test based on\na tolerance, we also need to change <=> to also take tolerance into account.","name":"<=>","namespace":"Length","path":"Length#<=>","type":"instance_method","visibility":"public","parameters":[["length2",["Length"],"A length value."]],"return":[["Integer"],"the result of the comparison"]},"Length#==":{"description":"The == method is used to see if one length is equal to another length.\n\nThe equality comparison on Length values uses the default tolerance that\nSketchUp uses for comparing lengths.","name":"==","namespace":"Length","path":"Length#==","type":"instance_method","visibility":"public","parameters":[["length2",["Length"],"A length value."]],"return":[["Boolean"],"true if length1 is == length2; false if\nlength1 is not == length2"]},"Length#>":{"description":"The > method is used to see if one length is greater than another length.\n\nFor example, if l1 = 1.0.inch and l2 = 1.000001.inch then l1 == l2 so l1 >\nl2 should return false.","name":">","namespace":"Length","path":"Length#>","type":"instance_method","visibility":"public","parameters":[["length2",["Length"],"A length value."]],"return":[["Boolean"],"true if length1 is > length2; false if length1\nis not > length2"]},"Length#>=":{"description":"The >= method is used to see if one length is greater than or equal to\nanother length.\n\nFor example, if l1 = 1.0.inch and l2 = 1.000001.inch then l1 == l2 so l1 >=\nl2 should return true. Also L1 <= l2 would return true.","name":">=","namespace":"Length","path":"Length#>=","type":"instance_method","visibility":"public","parameters":[["length2",["Length"],"A length value."]],"return":[["Boolean"],"true if length1 is >= length2; false if\nlength1 is not >= length2"]},"Length#inspect":{"description":"The inspect method is used to retrieve an unformatted string for the length,\nwhich is the length in inches, regardless of the user's model unit settings.\nSee Length.to_s for a way automatically format your Length to the user's\nmodel units.","name":"inspect","namespace":"Length","path":"Length#inspect","type":"instance_method","visibility":"public","return":[["String"],"an unformatted length string"]},"Length#to_f":{"description":"The to_f method is used to convert a length to a normal float.","name":"to_f","namespace":"Length","path":"Length#to_f","type":"instance_method","visibility":"public","return":[["Float"],"the float length value"]},"Length#to_s":{"description":"Format a length as a String using the current units formatting settings\nfor the model. (So if the user's model is set to feet, this method will\nreturn a nicely formatted length in feet.)","name":"to_s","namespace":"Length","path":"Length#to_s","type":"instance_method","visibility":"public","return":[["String"],"the float length value"]},"String":{"description":"The String class contains a method used to parse a string as a length value.\nAll string arguments in Ruby API expect utf-8 strings.","name":"String","namespace":"","path":"String","type":"class","visibility":"public"},"String#to_l":{"description":"The to_l method is used to convert a string to a length. The returned length\nis expressed in the Model units.","name":"to_l","namespace":"String","path":"String#to_l","type":"instance_method","visibility":"public","return":[["Length"],"the length value"]},"Numeric":{"description":"A number of methods have been added to the Ruby Numeric class to do units\nconversions.","name":"Numeric","namespace":"","path":"Numeric","type":"class","visibility":"public"},"Numeric#cm":{"description":"The cm method is used to convert from centimeters to inches.","name":"cm","namespace":"Numeric","path":"Numeric#cm","type":"instance_method","visibility":"public","return":[["Length"],"a value in inches if successful"]},"Numeric#degrees":{"description":"The degrees method is used to convert from degrees to radians.\n\nFor example 90.degrees would return 1.5707963267949","name":"degrees","namespace":"Numeric","path":"Numeric#degrees","type":"instance_method","visibility":"public","return":[["Float"],"a value in radians if successful"]},"Numeric#feet":{"description":"The feet method is used to convert from feet to inches.","name":"feet","namespace":"Numeric","path":"Numeric#feet","type":"instance_method","visibility":"public","return":[["Length"],"a value in inches if successful"]},"Numeric#inch":{"description":"The to_l is used to convert from a number to a length.","name":"inch","namespace":"Numeric","path":"Numeric#inch","type":"instance_method","visibility":"public","return":[["Length"],"a Length object if successful"]},"Numeric#km":{"description":"The km method is used to convert from kilometers to inches.","name":"km","namespace":"Numeric","path":"Numeric#km","type":"instance_method","visibility":"public","return":[["Length"],"a value in inches if successful"]},"Numeric#m":{"description":"The m method is used to convert meters to inches.","name":"m","namespace":"Numeric","path":"Numeric#m","type":"instance_method","visibility":"public","return":[["Length"],"a value in inches if successful"]},"Numeric#mile":{"description":"The mile method is used to convert from miles to inches.","name":"mile","namespace":"Numeric","path":"Numeric#mile","type":"instance_method","visibility":"public","return":[["Length"],"a value in inches if successful"]},"Numeric#mm":{"description":"The mm method is used to convert a number to millimeters.\n\nIt returns a Length value which is the same length as the given value. For\nexample len = 25.4.mm returns 1 inch.","name":"mm","namespace":"Numeric","path":"Numeric#mm","type":"instance_method","visibility":"public","return":[["Length"],"a value in millimeters if successful"]},"Numeric#radians":{"description":"The radians method is used to convert from radians to degrees.\n\nFor example, 1.5707963267949.radians would return 90.0","name":"radians","namespace":"Numeric","path":"Numeric#radians","type":"instance_method","visibility":"public","return":[["Float"],"a value in degrees if successful"]},"Numeric#to_cm":{"description":"The to_cm method is used to convert from inches to centimeters.","name":"to_cm","namespace":"Numeric","path":"Numeric#to_cm","type":"instance_method","visibility":"public","return":[["Float"],"a value in centimeters if successful"]},"Numeric#to_feet":{"description":"The to_feet method is used to convert from inches to feet.","name":"to_feet","namespace":"Numeric","path":"Numeric#to_feet","type":"instance_method","visibility":"public","return":[["Float"],"a value in feet if successful"]},"Numeric#to_inch":{"description":"The to_inch method converts from inches to inches.\n\nThis does not change the value.","name":"to_inch","namespace":"Numeric","path":"Numeric#to_inch","type":"instance_method","visibility":"public","return":[["Float"],"a value in inches if successful"]},"Numeric#to_km":{"description":"The to_km method is used to convert from inches to kilometers.","name":"to_km","namespace":"Numeric","path":"Numeric#to_km","type":"instance_method","visibility":"public","return":[["Float"],"a value in kilometers if successful"]},"Numeric#to_l":{"description":"The to_l is used to convert from a number to a length.","name":"to_l","namespace":"Numeric","path":"Numeric#to_l","type":"instance_method","visibility":"public","return":[["Length"],"a Length object if successful"]},"Numeric#to_m":{"description":"The to_m method is used to convert from inches to meters.","name":"to_m","namespace":"Numeric","path":"Numeric#to_m","type":"instance_method","visibility":"public","return":[["Float"],"a value in meters if successful"]},"Numeric#to_mile":{"description":"The to_mile method is used to convert from inches to miles.","name":"to_mile","namespace":"Numeric","path":"Numeric#to_mile","type":"instance_method","visibility":"public","return":[["Float"],"a value in miles if successful"]},"Numeric#to_mm":{"description":"The to_mm method is used to convert from inches to millimeters.","name":"to_mm","namespace":"Numeric","path":"Numeric#to_mm","type":"instance_method","visibility":"public","return":[["Float"],"a value in millimeters if successful"]},"Numeric#to_yard":{"description":"The to_yard method is used to convert from inches to yards.","name":"to_yard","namespace":"Numeric","path":"Numeric#to_yard","type":"instance_method","visibility":"public","return":[["Float"],"a value in yards if successful"]},"Numeric#yard":{"description":"The yard method is used to convert from yards to inches.","name":"yard","namespace":"Numeric","path":"Numeric#yard","type":"instance_method","visibility":"public","return":[["Length"],"a value in inches if successful"]},"Sketchup":{"description":"The Sketchup module contains a number of important utility methods for use in\nyour Ruby scripts. Many of the classes in the API are implemented beneath\nthis module. You can think of the Sketchup module as the \"root\" of the\napplication tree. Most ruby calls start from the currently active model, and\nthis is accessed via the Sketchup.active_model method.","name":"Sketchup","namespace":"","path":"Sketchup","type":"module","visibility":"public"},"Sketchup.active_model":{"description":"The active_model method returns the currently active SketchUp model. On the\nPC, this is the only model that one can have access to via the API, but\nMacintosh versions of SketchUp can have multiple models open at once, in\nwhich case the method will return the model that the user currently has\nfocused.","name":"active_model","namespace":"Sketchup","path":"Sketchup.active_model","type":"module_function","visibility":"public","return":[["Sketchup::Model"],"active model object if successful, false if\nunsuccessful"]},"Sketchup.add_observer":{"description":"The add_observer method is used to add an observer to the current object.","name":"add_observer","namespace":"Sketchup","path":"Sketchup.add_observer","type":"module_function","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup.app_name":{"description":"The app_name method is used to retrieve the current application name.","name":"app_name","namespace":"Sketchup","path":"Sketchup.app_name","type":"module_function","visibility":"public","return":[["String"],"the name of the application, either\n\"SketchUp Pro\" or \"SketchUp\".\nNote: For versions earlier than SketchUp8 M4\n(Mac 8.0.15157 and Windows 8.0.15158) this function will\nreturn \"Google SketchUp Pro\" or \"Google SketchUp\"."]},"Sketchup.break_edges=":{"description":"The break_edges= method can be used to disable or enable the break edges\nfeature. Break edges is the SketchUp 7 feature that automatically splits\nedges that the user draws which cross over one another.\n\nThis feature is always on by default and cannot be disabled by the user\nvia the user interface, but you can call this method to disable it. Be\ncautious in doing so, however, as the resulting model could then be altered\nwhen the user later draws lines into it with the break edges feature\nreactivated.","name":"break_edges=","namespace":"Sketchup","path":"Sketchup.break_edges=","type":"module_function","visibility":"public","parameters":[["enabled",["Boolean"],"If true, break edges will be turned on. If false, it\nwill be deactivated."]],"return":[["Boolean"],"true if break edges was turned on."]},"Sketchup.break_edges?":{"description":"The break_edges? method indicates whether the break edges feature is\ncurrently turned on. Break edges is the SketchUp 7 feature that\nautomatically splits edges that the user draws which cross over one another.\nThis feature is always on by default and cannot be disabled by the user\nvia the user interface.","name":"break_edges?","namespace":"Sketchup","path":"Sketchup.break_edges?","type":"module_function","visibility":"public","return":[["Boolean"],"true if the feature is on."]},"Sketchup.create_texture_writer":{"description":"The create_texture_writer method is used to create a TextureWriter object.","name":"create_texture_writer","namespace":"Sketchup","path":"Sketchup.create_texture_writer","type":"module_function","visibility":"public","return":[["Sketchup::TextureWriter"],"a texturewriter object if successful."]},"Sketchup.debug_mode=":{"description":"The debug_mode= method lets you controls whether SketchUp will output\nwarnings to the console when it detects incorrect usage of the API.\nThe setting takes effect right away, no need to restart SketchUp.","name":"debug_mode=","namespace":"Sketchup","path":"Sketchup.debug_mode=","type":"module_function","visibility":"public","parameters":[["enabled",["Boolean"],"If true, SketchUp will produce debug warnings."]],"return":[["Boolean"],"true if debug mode is enabled."]},"Sketchup.debug_mode?":{"description":"The debug_mode? controls whether SketchUp will output warnings to the console\nwhen it detects incorrect usage of the API.","name":"debug_mode?","namespace":"Sketchup","path":"Sketchup.debug_mode?","type":"module_function","visibility":"public","return":[["Boolean"],"true if debug mode is enabled"]},"Sketchup.display_name_from_action":{"description":"The display_name_from_action method is used to gets a user-friendly name\nfrom an action string. See Sketchup.send_action for a list of valid\naction strings.","name":"display_name_from_action","namespace":"Sketchup","path":"Sketchup.display_name_from_action","type":"module_function","visibility":"public","parameters":[["action_name",["String"],"An action string."]],"return":[["String"],"a friendly name."]},"Sketchup.extensions":{"description":"Returns the ExtensionsManager where you can find all registered\nSketchupExtension objects.","name":"extensions","namespace":"Sketchup","path":"Sketchup.extensions","type":"module_function","visibility":"public","return":[["Sketchup::ExtensionsManager"],"an ExtensionsManager object."]},"Sketchup.file_new":{"description":"The file_new method is used to create a new file.","name":"file_new","namespace":"Sketchup","path":"Sketchup.file_new","type":"module_function","visibility":"public","return":[["Module"],"The Sketchup module."]},"Sketchup.find_support_file":{"description":"The find_support_files method is used to retrieve the relative path and name\nof a file within the SketchUp installation directory.\n\nForward slashes must be used to delimit between directory names.","name":"find_support_file","namespace":"Sketchup","path":"Sketchup.find_support_file","type":"module_function","visibility":"public","parameters":[["filename",["String"],"Name of the filename you want to find."],["directory",["String"],"directory relative to the SketchUp\ninstallation directory."]],"return":[["String"],"the entire path if successful. If unsuccessful,\nthe method returns false."]},"Sketchup.find_support_files":{"description":"The find_support_files method is used to retrieve the path and name of all\nmatching files within the SketchUp installation directory.\n\nForward slashes must be used to delimit between directory names.","name":"find_support_files","namespace":"Sketchup","path":"Sketchup.find_support_files","type":"module_function","visibility":"public","parameters":[["filename",["String"],"Extension of the files to be found."],["directory",["String"],"directory relative to the SketchUp installation\ndirectory. Without this the result will\nbe empty."]],"return":[["Array<String>"],"an array of files. If unsuccessful, the method\nreturns false."]},"Sketchup.fix_shadow_strings=":{"description":"The fix_shadow_strings= method lets you control whether shadow rendering\nattempts to fix an artifact commonly referred to as \"strings\".  The fix\nis actually very model dependent and not controllable from the UI, so this\nmethod can be used to control it.","name":"fix_shadow_strings=","namespace":"Sketchup","path":"Sketchup.fix_shadow_strings=","type":"module_function","visibility":"public","parameters":[["enabled",["Boolean"],"If true, shadow strings fix will be turned on. If\nfalse, it will be deactivated."]],"return":[["Boolean"],"true if shadow strings fix was turned on."]},"Sketchup.fix_shadow_strings?":{"description":"The fix_shadow_strings? method indicates whether the a fix for a shadow\nrendering artifact commonly referred to as \"strings\" is enabled.  The fix\nis actually very model dependent and not controllable from the UI, so this\nmethod can be used to test it.","name":"fix_shadow_strings?","namespace":"Sketchup","path":"Sketchup.fix_shadow_strings?","type":"module_function","visibility":"public","return":[["Boolean"],"true if the feature is on."]},"Sketchup.format_angle":{"description":"The format_angle method takes a number as an angle in radians and formats it\ninto degrees. For example, format_angle(Math::PI) will return 180.0.","name":"format_angle","namespace":"Sketchup","path":"Sketchup.format_angle","type":"module_function","visibility":"public","parameters":[["number",["Numeri"],"A number to be formatted."]],"return":[["String"],"an angle in degrees if successful, false if unsuccessful"]},"Sketchup.format_area":{"description":"The format_area method formats a number as an area using the current units\nsettings.\n\nThe default unit setting is inches. For example, 10 becomes 10 inches\nsquared.","name":"format_area","namespace":"Sketchup","path":"Sketchup.format_area","type":"module_function","visibility":"public","parameters":[["number",["Numeric"],"A number to be formatted."]],"return":[["String"],"an area if successful, false if unsuccessful."]},"Sketchup.format_degrees":{"description":"The format_degrees method formats a number as an angle given in degrees. For\nexample, 10 becomes 10.0. This is the equivalent to a to_f call.","name":"format_degrees","namespace":"Sketchup","path":"Sketchup.format_degrees","type":"module_function","visibility":"public","parameters":[["number",["Numeric"],"A number to be formatted."]],"return":[["String"],"degrees if successful, false if unsuccessful."]},"Sketchup.format_length":{"description":"The format_length method formats a number as a length using the current\nunits settings.\n\nThe default unit setting is inches. For example, 10 becomes 10\".","name":"format_length","namespace":"Sketchup","path":"Sketchup.format_length","type":"module_function","visibility":"public","parameters":[["number",["Numeric"],"A number to be formatted."]],"return":[["String"],"length if successful, false if unsuccessful"]},"Sketchup.get_datfile_info":{"description":"The get_datfile_info method is used to retrieve the value for the given key\nfrom Sketchup.dat.\n\nIf the key is not found, default_value is returned.","name":"get_datfile_info","namespace":"Sketchup","path":"Sketchup.get_datfile_info","type":"module_function","visibility":"public","parameters":[["key",["String"],"The key whose value you want to retrieve."],["default_value",["String"],"The default value you want returned if key is not\navailable."]],"return":[["String"],"a string value if successful."]},"Sketchup.get_i18n_datfile_info":{"description":"The get_i18ndatfile_info method is used to retrieve the value for the\ngiven key from the internationalization file that SketchUp uses to work\nin multiple languages.\n\nIf the key is not found, default_value is returned.","name":"get_i18n_datfile_info","namespace":"Sketchup","path":"Sketchup.get_i18n_datfile_info","type":"module_function","visibility":"public","parameters":[["key",["String"],"The key whose value you want to retrieve."],["default_value",["String"],"The default value you want returned if key is not\navailable."]],"return":[["String"],"a string value if successful."]},"Sketchup.get_locale":{"description":"The os_language method returns the language code for the language SketchUp\nis running in. This is an alias for the get_locale method.\n\nValid return values are: en-US, fr, it, de, es, ja, ko, zh-CN, zh-TW,\npt-BR, nl, ru.\nIf the OS language does not have corresponding folder and files in the\nSketchUp Resources folder, the returned language is, by default, en-US.","name":"get_locale","namespace":"Sketchup","path":"Sketchup.get_locale","type":"module_function","visibility":"public","return":[["String"],"a code representing the language SketchUp is displaying."]},"Sketchup.get_resource_path":{"description":"The get_resource_path is used to retrieve the directory where \"resource\"\nfiles are stored by SketchUp. Resource files include things like language\nlocalization files.","name":"get_resource_path","namespace":"Sketchup","path":"Sketchup.get_resource_path","type":"module_function","visibility":"public","parameters":[["filename",["String"],"The filename of a resource file in the resource directory hierarchy."]],"return":[["String"],"the directory path to the resources folder."]},"Sketchup.get_shortcuts":{"description":"The get_shortcuts method retrieves an array of all keyboard shortcuts\ncurrently registered with SketchUp. Each shortcut is returned as a\nstring with the shortcut and the command separated by a tab, similar\nto \"Ctrl+A\\tEdit/Select All\"","name":"get_shortcuts","namespace":"Sketchup","path":"Sketchup.get_shortcuts","type":"module_function","visibility":"public","return":[["Array<String>"],"an array of shortcut strings."]},"Sketchup.install_from_archive":{"description":"Installs the contents of a ZIP archive file into SketchUp's Plugins folder.\nIf the ZIP contains subfolders, these will be preserved. This allows for a\nRuby API plugin or Extension developer to distribute their plugin as a single\nfile regardless of how many asset files must be included.\n\nThe user will be shown a warning message that they must agree to before the\ninstall proceeds. If they do not agree, an Interrupt error will be raised.\nIf the user does agree but there is a problem with the unzip process, an\nException will be raised. You can capture these states via a begin/rescue.\nSee the example below.\n\nIf the install is successful, any Ruby files that have been added to\nthe Plugins folder will immediately be executed, saving the user a restart.\n\nTo create an archive file, use your favorite tool (7zip, Winzip, etc.) to zip\nup any files and folders in your plugins directory. If the archive contains a\nSketchupExtension that you would like users to be able to install from the\nPreferences > Extensions panel, rename your file to have a .rbz file\nextension.","name":"install_from_archive","namespace":"Sketchup","path":"Sketchup.install_from_archive","type":"module_function","visibility":"public","parameters":[["filename",["String"],"The path to the RBZ or ZIP file to install."]],"return":[["Boolean"],""]},"Sketchup.is_64bit?":{"description":"This methods indicates whether the host SketchUp application is 64bit.\nUseful for extensions that ship with binaries and need to determine\nwhich versions to load.","name":"is_64bit?","namespace":"Sketchup","path":"Sketchup.is_64bit?","type":"module_function","visibility":"public","return":[["Boolean"],"True if SketchUp is 64bit."]},"Sketchup.is_online":{"description":"The is_online method is used to verify a connection to the Internet. This\nmethod can take some time to execute, so be careful not to call it more often\nthan you need.","name":"is_online","namespace":"Sketchup","path":"Sketchup.is_online","type":"module_function","visibility":"public","return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup.is_pro?":{"description":"Returns a boolean flag indicating whether the application is SketchUp Pro.\nNote that after the free trial period, SketchUp Pro will revert to regular\nSketchUp and this method will return false until the user registers\nthe product.","name":"is_pro?","namespace":"Sketchup","path":"Sketchup.is_pro?","type":"module_function","visibility":"public","return":[["Boolean"],"true if the user is using SketchUp Pro"]},"Sketchup.is_valid_filename?":{"description":"The is_valid_filename? method is used to determine whether a filename\ncontains illegal characters.","name":"is_valid_filename?","namespace":"Sketchup","path":"Sketchup.is_valid_filename?","type":"module_function","visibility":"public","parameters":[["filename",["String"],"A filename string."]],"return":[["Boolean"],"true if filename is valid, false if filename\nis invalid (contains illegal characters)."]},"Sketchup.load":{"description":"The load method is used to include encrypted and nonencrypted ruby files.\n\nYou do not need to include the file extension on the path. This method will\nlook for .rb first (unencrypted) and then .rbe (encrypted) and finally .rbs\n(the deprecated scrambled format) files.\nSee the \"Distributing your Plugin\" article for details.","name":"load","namespace":"Sketchup","path":"Sketchup.load","type":"module_function","visibility":"public","parameters":[["path",["String"],"The path, including the filename, to the file you want\nto require."]],"return":[["Boolean"],"True if the file is included. False if the\nfile is not included."]},"Sketchup.open_file":{"description":"The open_file method is used to open a file.","name":"open_file","namespace":"Sketchup","path":"Sketchup.open_file","type":"module_function","visibility":"public","parameters":[["filename",["String"],"The path and filename to open."]],"return":[["Boolean"],"true if opening the file succeeded,\nfalse otherwise."]},"Sketchup.os_language":{"description":"The os_language method returns the language code for the language SketchUp\nis running in. This is an alias for the get_locale method.\n\nValid return values are: en-US, fr, it, de, es, ja, ko, zh-CN, zh-TW,\npt-BR, nl, ru.\nIf the OS language does not have corresponding folder and files in the\nSketchUp Resources folder, the returned language is, by default, en-US.","name":"os_language","namespace":"Sketchup","path":"Sketchup.os_language","type":"module_function","visibility":"public","return":[["String"],"a code representing the language SketchUp\nis displaying."]},"Sketchup.parse_length":{"description":"The parse_length method parses a string as a length.\n\nFor example, \"200\" becomes 200.0.","name":"parse_length","namespace":"Sketchup","path":"Sketchup.parse_length","type":"module_function","visibility":"public","parameters":[["string",["String"],"The string to be parsed as a number."]],"return":[["Float"],"the numerical representation of the string if\nsuccessful, or nil if unsuccessful."]},"Sketchup.platform":{"description":"This methods returns a symbol indicating the current platform.\n\nIt should be used over RUBY_PLATFORM as this returns a different value for\nWindows since SketchUp 2014.\n\nOlder SketchUp versions still need to check\n<code>RUBY_PLATFORM.include?('mswin')</code> or\n<code>RUBY_PLATFORM.include?('darwin')</code>.\n\nPossible return values:\n- :platform_win\n- :platform_osx","name":"platform","namespace":"Sketchup","path":"Sketchup.platform","type":"module_function","visibility":"public","return":[["Symbol"],"Current OS platform."]},"Sketchup.plugins_disabled=":{"description":"The plugins_disabled= method lets you control whether SketchUp will load\nRuby scripts from the plugins directory at startup time. This is primarily\na trouble-shooting method. If you are having strange behavior in SketchUp\nthat you suspect is from a bad script, you can type\nSketchup.plugins_disabled=true into the Ruby console and restart SketchUp\nto see if the problem is fixed.","name":"plugins_disabled=","namespace":"Sketchup","path":"Sketchup.plugins_disabled=","type":"module_function","visibility":"public","parameters":[["enabled",["Boolean"],"If true, the plugins directory will not load."]],"return":[["Boolean"],"true if plugins were disabled."]},"Sketchup.plugins_disabled?":{"description":"The plugins_disabled? method indicates whether Ruby scripts in the plugins\ndirectory will be loaded at startup time.","name":"plugins_disabled?","namespace":"Sketchup","path":"Sketchup.plugins_disabled?","type":"module_function","visibility":"public","return":[["Boolean"],"true if the plugins are disabled."]},"Sketchup.quit":{"description":"The quit method is used to terminate the application. This will pop-up the\nusual model save prompts if there are unsaved models open. User can cancel\nthe model save, in which case the application will not terminate.","name":"quit","namespace":"Sketchup","path":"Sketchup.quit","type":"module_function","visibility":"public","return":[null,"self"]},"Sketchup.read_default":{"description":"The read_default method is used to retrieve the string associated with a\nvalue within the specified sub-section section of a .INI file or registry\n(within the Software > SketchUp > SketchUp [Version] section).","name":"read_default","namespace":"Sketchup","path":"Sketchup.read_default","type":"module_function","visibility":"public","parameters":[["section",["String"],"A section in an .INI or registry."],["variable",["String"],"A variable within the section."],["default",["Object"],"A default value if the value is not found."]],"return":[["Object","nil"],"if unsuccessful, the value of the default\nif successful."]},"Sketchup.register_extension":{"description":"The register_extension method is used to register an extension with\nSketchUp's extension manager (in SketchUp preferences).","name":"register_extension","namespace":"Sketchup","path":"Sketchup.register_extension","type":"module_function","visibility":"public","parameters":[["load_on_start",["Boolean"],"Passing true into this will load the\nextension immediately and set it so\nthat it will load automatically\nwhenever SketchUp restarts."],["extension",["SketchupExtension"],"A SketchupExtension object."]],"return":[["Boolean"],"+true+ if extension registered properly"]},"Sketchup.register_importer":{"description":"The register_importer method is used to register an importer with SketchUp.","name":"register_importer","namespace":"Sketchup","path":"Sketchup.register_importer","type":"module_function","visibility":"public","parameters":[["importer",["Sketchup::Importer"],"An Importer object representing the importer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup.remove_observer":{"description":"The remove_observer method is used to remove an observer from the current\nobject.","name":"remove_observer","namespace":"Sketchup","path":"Sketchup.remove_observer","type":"module_function","visibility":"public","parameters":[["observer",["Sketchup::AppObserver"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup.require":{"description":"The require method is used to include encrypted and nonencrypted ruby files.\nThis is an alias of the Sketchup.load method.\n\nYou do not need to include the file extension on the path. This method will\nlook for .rbe first (encrypted) and then .rbs (the deprecated scrambled\nformat) and finally .rb (unencrypted) files. The loading order was changed\nin SketchUp 2016 when the new .rbe encryption was introduced. Prior to\nSketchUp 2016 the loading order was first .rb then .rbs.","name":"require","namespace":"Sketchup","path":"Sketchup.require","type":"module_function","visibility":"public","parameters":[["path",["String"],"The path, including the filename, to the file you want\nto require."]],"return":[["Boolean"],"True if the file is included. False if the\nfile is not included."]},"Sketchup.save_thumbnail":{"description":"The save_thumbnail method is used to generate a thumbnail for any SKP file -\nnot necessarily the loaded model.","name":"save_thumbnail","namespace":"Sketchup","path":"Sketchup.save_thumbnail","type":"module_function","visibility":"public","parameters":[["skp_filename",["String"],"The name of the SketchUp file whose model you want\nrepresented in the thumbnail."],["img_filename",["String"],"The name of the file where the thumbnail will be saved."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup.send_action":{"description":"The send_action method sends a message to the message queue to perform some\naction asynchronously.\n\nValid actions are:\n- showRubyPanel:\n- viewBack:\n- viewBottom:\n- viewFront:\n- viewIso:\n- viewLeft:\n- viewRight:\n- viewTop:\n- viewPerspective:\n- viewShowAxes:\n- viewShowHidden:\n- viewZoomExtents:\n- viewZoomToSelection:\n- viewUndo:\n- selectOrbitTool:\n- selectPositionCameraTool:\n- selectDollyTool:\n- selectTurnTool:\n- selectWalkTool:\n- selectZoomTool:\n- selectFieldOfViewTool:\n- selectZoomWindowTool:\n- pageAdd:\n- pageDelete:\n- pageUpdate:\n- pageNext:\n- pagePrevious:\n- renderWireframe:\n- renderHiddenLine:\n- renderMonochrome:\n- renderShaded:\n- renderTextures:\n- selectArcTool:\n- selectArc3PointTool:\n- selectArc3PointPieTool:\n- selectAxisTool:\n- selectCircleTool:\n- selectEraseTool:\n- selectFreehandTool:\n- selectLineTool:\n- selectMeasureTool:\n- selectMoveTool:\n- selectOffsetTool:\n- selectPaintTool:\n- selectPolygonTool:\n- selectProtractorTool:\n- selectPushPullTool:\n- selectRectangleTool:\n- selectRectangle3PointTool:\n- selectRotateTool:\n- selectScaleTool:\n- selectSectionPlaneTool:\n- selectTextTool:\n- selectDimensionTool:\n- selectExtrudeTool:\n- selectSelectionTool:\n- editUndo:\n- editRedo:\n- editHide:\n- editUnhide:\n- fixNonPlanarFaces:\n\nAdded in SketchUp 8.0+:\n- addBuilding:\n- getPhotoTexture:\n- selectImageIglooTool:\n- selectNorthTool:\n\nAdded in SketchUp 2013+:\n- showExtensionStore:\n\nRemoved in SketchUp 2013+:\n- addBuilding:\n\nOn the PC only, you can also send these numeric values. (Note that these are\nofficially \"unsupported\" and are not guaranteed to work in current or\nfuture versions of the API.)\n\n- 10501: set view to Top\n- 10502: set view to Front\n- 10503: set view to Rear\n- 10504: set view to Left\n- 10505: set view to Right\n- 10506: set view to Bottom\n- 10507: set view to Axonometric\n- 10510: set render mode to Wire\n- 10511: set render mode to Hidden lines removal\n- 10512: set render mode to Surfaces Shading\n- 10513: set render mode to Transparency\n- 10519: set camera to ortho (removes perspective)\n- 10520: walk tool\n- 10521: display the System Preferences dialog box (Files tab)\n- 10522: removes axes display\n- 10523: pan tool\n- 10525: set the interactive eye height feature\n- 10526: zoom window\n- 10527: zoom extents\n- 10529: zoom out 2\n- 10531: toggle the Standard toolbar\n- 10532: toggle the Camera toolbar\n- 10533: display the Shadows Settings dialog box\n- 10537: toggle the Views toolbar\n- 10538: display the System Preferences dialog box (Display tab)\n- 10545: toggle Color ByLayer\n- 10546: toggle Shadows toolbar\n- 10551: toogle Large icons\n- 10576: toggle Render Mode toolbar\n- 10596: set Render Mode to No Transparency (Preferences)\n- 10597: set Render Mode to Wire (Preferences)\n- 10598: set Render Mode to Transparency (Preferences)\n- 10599: set Render Mode to Surfaces Shading (Preferences)\n- 10600: set Render Mode to Texture (Preferences)\n- 10601: set Render Mode to No Texture (Preferences)\n- 10602: toggle Shadows\n- 10603: toggle Profiles\n- 10604: toggle Extension Lines\n- 10605: toggle Jitter edges\n- 21019: hide Status bar and VCB\n- 21020: show Status bar and VCB\n- 21022: hide Status bar and VCB\n- 21023: place 3d text box\n- 21024: select the Measure tool\n- 21031: select the Freehand Draw tool\n- 21041: select the PushPull tool\n- 21048: select the Move tool\n- 21052: hide selected objects\n- 21056: create face with selected edges closed loop\n- 21057: select the Protractor tool\n- 21060: display Components Window\n- 21061: toggle Draw toolbar\n- 21063: toggle Model Bounding Box display\n- 21065: select the Arc tool\n- 21067: creat a new Page\n- 21069: select the Arc 3 Point tool\n- 21070: select the Arc 3 Point Pie tool\n- 21074: show the Materials Browser Window\n- 21076: display the Preferences dialog box (Text activated)\n- 21077: display the Tip of the day Window\n- 21078: select the Paint Bucket tool\n- 21080: display the Page Manager Window\n- 21082: display the Macros Dialog Box\n- 21086: display the Components Browser Window\n- 21094: select the Rectangle tool\n- 21095: select the Polygon tool\n- 21096: select the Circle tool\n- 21098: open the Open Window\n- 21100: select the Offset tool\n- 21101: slect all objects\n- 21112: open the Import Window\n- 21124: launch the validity check tool\n- 21126: select the Axes tool\n- 21029: select the Rotate tool\n- 21032: toggle Layer toolbar\n- 21036: display the Save as Window\n- 21046: spin the model a full 360&deg; and display report\n- 21047: fast Pick Time report\n- 21049: open the Export model Window\n- 21169: select the Position Camera tool\n- 21170: display the Preferences, Tour Guide activated\n- 21180: create a new Page just right of selected page\n- 21200: display the Insert Image Window\n- 21233: display Area of selected face\n- 21234: display Area of all faces with selected material\n- 21236: select the Scale tool\n- 21237: display the Export 2D Graphics Window\n- 21245: display a Polygon Offset Factors dialog box\n- 21276: reverse selected face(s)\n- 21287: select the Divide feature\n- 21337: select the Section Plane Placement tool\n- 21354: open the Layer Window\n- 21386: open the Export Animation Window\n- 21405: select the Text tool\n- 21406: display Fog dialog box\n- 21410: select the Dim tool\n- 21433: toggle Edit toolbar\n- 21442: select the FollowMe tool\n- 21448: select the Axes tool\n- 21453: select all objects\n- 21460: display Licence\n- 21462: display Authorization dialog box\n- 21463: display un-authorizing message\n- 21464: display Open Licence files (Network) Window\n- 21466: display Quick reference Card in Adobe Reader\n- 21467: display Licences in use dialog box\n- 21469: zoom extents to selected objects\n- 21476: perform a non-planar check on selected objects\n- 21477: list accelerators in window\n- 21485: erase selected objects\n- 21487: display Edit current material dialog box\n- 21485: erase all new created pages\n- 21488: display Entity Info Window\n- 21490: display Soften Edges Window\n- 21491: display Profiles\n- 21492: display Extended Edges\n- 21493: display Jitter Lines\n- 21494: select Field of view tool\n- 21513: display the outliner\n- 21520: override Tile Rendering Size dialog box\n- 21525: select the FollowMe tool\n- 21542: display the Insert Image Window\n- 21560 and up: causes a runtime Error","name":"send_action","namespace":"Sketchup","path":"Sketchup.send_action","type":"module_function","visibility":"public","parameters":[["action",["String","Integer"],"The action to be performed."]],"return":[["Boolean"],"+true+ if successful, +false+ if unsuccessful"]},"Sketchup.set_status_text":{"description":"The set_status_text method is used to\nset the text appearing on the status bar within the drawing window.\n\nIf no arguments are passed, the status bar content is cleared. Valid\npositions are:\n\n- +SB_PROMPT+ - the text will appear at the left-side of the status bar\n- +SB_VCB_LABEL+ - the text will appear in place of the VCB label\n- +SB_VCB_VALUE+ - the text will appear in the VCB","name":"set_status_text","namespace":"Sketchup","path":"Sketchup.set_status_text","type":"module_function","visibility":"public"},"Sketchup.status_text=":{"description":"The status_text= method is used to set the text appearing on the status\nbar within the drawing window.\n\nThis is the same as calling set_status_text with a 2nd parameter of\nSB_PROMPT.","name":"status_text=","namespace":"Sketchup","path":"Sketchup.status_text=","type":"module_function","visibility":"public","parameters":[["status_text",["String"],"The status text that will appear."]],"return":[["String"],""]},"Sketchup.temp_dir":{"description":"The temp_dir method is used to retrieve the OS temporary directory for the\ncurrent user. You can use this directory to write temporary files that are\nnot required to persist between SketchUp sessions.","name":"temp_dir","namespace":"Sketchup","path":"Sketchup.temp_dir","type":"module_function","visibility":"public","return":[["String"],"a string containing the full temporary directory path"]},"Sketchup.template":{"description":"The template method is used to get the file name of the current template.\nTemplates are the .skp files that are loaded when the user select File > New.","name":"template","namespace":"Sketchup","path":"Sketchup.template","type":"module_function","visibility":"public","return":[["String"],"the current template"]},"Sketchup.template=":{"description":"The template= method is used to set the file name of the current template.\nTemplates are the .skp files that are loaded when the user select File > New.","name":"template=","namespace":"Sketchup","path":"Sketchup.template=","type":"module_function","visibility":"public","parameters":[["filename",["String"],"The name of the template to set."]],"return":[["String"],"true if successful, false if unsuccessful."]},"Sketchup.template_dir":{"description":"The template_dir is used to retrieve the directory where templates are\nstored by the SketchUp install. Templates are the .skp files that are loaded\nwhen the user select File > New.","name":"template_dir","namespace":"Sketchup","path":"Sketchup.template_dir","type":"module_function","visibility":"public","return":[["String"],"containing the full template directory path"]},"Sketchup.undo":{"description":"The undo method is used undo the last transaction on the undo stack.","name":"undo","namespace":"Sketchup","path":"Sketchup.undo","type":"module_function","visibility":"public","return":[["nil"],""]},"Sketchup.vcb_label=":{"description":"The vcb_label= method is used to set the label that appears on the vcb,\nor the \"value control box\", which is another word for the \"measurements\"\ntext entry box that appears at the bottom on the SketchUp window.\n\nThis is the same as calling set_status_text with a 2nd parameter of\nSB_VCB_LABEL.","name":"vcb_label=","namespace":"Sketchup","path":"Sketchup.vcb_label=","type":"module_function","visibility":"public","parameters":[["label_text",["String"],"The label text that will appear."]],"return":[["String"],""]},"Sketchup.vcb_value=":{"description":"The vcb_value= method is used to set the value that appears on the vcb,\nor the \"value control box\", which is another word for the \"measurements\"\ntext entry box that appears at the bottom on the SketchUp window.\n\nThis is the same as calling set_status_text with a 2nd parameter of\nSB_VCB_VALUE.","name":"vcb_value=","namespace":"Sketchup","path":"Sketchup.vcb_value=","type":"module_function","visibility":"public","parameters":[["value",["String"],"The text that will appear as the vcb's value."]],"return":[["String"],""]},"Sketchup.version":{"description":"Gets the current version of sketchup in decimal form.","name":"version","namespace":"Sketchup","path":"Sketchup.version","type":"module_function","visibility":"public","return":[["String"],"the decimal form of the version"]},"Sketchup.version_number":{"description":"Get the current version of sketchup as a whole number for comparisons. The\nnumber returned has the major, minor, and build values packed into an integer\nvalue as follows:\n- Major version = X\n- Minor version = Y\n- Build number = Z\n\nSketchUp 6.0 - SketchUp 2015\n- XXYYYZZZ\n\nSketchUp 2016+\n- XXYZZZZZZZ","name":"version_number","namespace":"Sketchup","path":"Sketchup.version_number","type":"module_function","visibility":"public","return":[["Integer"],"the whole number form of the version"]},"Sketchup.write_default":{"description":"The write_default method is used to set the string associated with a\nvariable within the specified sub-section of a .plist file on the Mac\nor the registry on Windows\n(within the Software > SketchUp > SketchUp [Version] section).","name":"write_default","namespace":"Sketchup","path":"Sketchup.write_default","type":"module_function","visibility":"public","parameters":[["section",["String"],"A section in a .plist file (Mac) or the registry\n(Windows)."],["key",["String"],"A key within the section."],["value",["Object"],"The value to store."]],"return":[["Boolean"],"True if successful, false if unsuccessful."]},"Sketchup::Animation":{"description":"The {Sketchup::Animation} interface is implemented to create animations\ninside SketchUp. At any given time, a single animation can be active on a\n{Sketchup::View}. To make your own, build a Ruby class that contains the\nmethods described below:\n\n  # This is an example of a simple animation that floats the camera up to\n  # a z position of 200\". The only required method for an animation is\n  # nextFrame. It is called whenever you need to show the next frame of\n  # the animation. If nextFrame returns false, the animation will stop.\n  class FloatUpAnimation\n    def nextFrame(view)\n      new_eye = view.camera.eye\n      new_eye.z = new_eye.z + 1.0\n      view.camera.set(new_eye, view.camera.target, view.camera.up)\n      view.show_frame\n      return new_eye.z < 500.0\n    end\n  end\n\n  # This adds an item to the Camera menu to activate our custom animation.\n  UI.menu(\"Camera\").add_item(\"Run Float Up Animation\") {\n    Sketchup.active_model.active_view.animation = FloatUpAnimation.new\n  }\n\n{Sketchup::Animation} objects are activated by using the\n{Sketchup::View#animation=} method on a {Sketchup::View}\nobject. To stop an animation set the view's animation object to +nil+, like\nso:\n\n  Sketchup.active_model.active_view.animation = nil","name":"Animation","namespace":"Sketchup","path":"Sketchup::Animation","type":"class","visibility":"public"},"Sketchup::Animation#nextFrame":{"description":"The {#nextFrame} method is invoked by SketchUp to tell the animation to\ndisplay its next frame. This method should set up the camera and then call\n{Sketchup::View#show_frame}.\n\nThe {#nextFrame} method is the only required method of the\n{Sketchup::Animation} interface that you must implement.","name":"nextFrame","namespace":"Sketchup::Animation","path":"Sketchup::Animation#nextFrame","type":"instance_method","visibility":"public","parameters":[["view",["Sketchup::View"],"The view for the animation."]],"return":[["Boolean"],"continue - +true+ if you want the animation to continue\non to the next frame, +false+ if you want the animation\nto stop after this frame."]},"Sketchup::Animation#pause":{"description":"The {#pause} method is invoked by SketchUp when the animation is paused.\n\nThis method is optional (you do not need to implement this method unless you\nwant to perform some specialized function when the animation is paused). You\ncannot call this method in your code explicitly and expect an animation to\npause, only certain SketchUp events cause the method to be called.","name":"pause","namespace":"Sketchup::Animation","path":"Sketchup::Animation#pause","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::Animation#resume":{"description":"The {#resume} method is invoked by SketchUp when the animation is resumed\nafter being paused.\n\nThis method is optional (you do not need to implement this method unless you\nwant to perform some specialized function when the animation is resumed).\nYou cannot call this method in your code explicitly and expect an animation\nto stop, only certain SketchUp events cause the method to be called.","name":"resume","namespace":"Sketchup::Animation","path":"Sketchup::Animation#resume","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::Animation#stop":{"description":"The {#stop} method is invoked by SketchUp when the animation is stopped.\n\nThis method is optional (you do not need to implement this method unless you\nwant to perform some specialized function when the animation is stopped). You\ncannot call this method in your code explicitly and expect an animation to\nstop, only certain SketchUp events cause the method to be called.\n\nPerhaps the most common way for this method to be called is when your Ruby\ncode sets {Sketchup::View#animation=} to +nil+. See the class comments for\nan example of this.","name":"stop","namespace":"Sketchup::Animation","path":"Sketchup::Animation#stop","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::AppObserver":{"description":"This observer interface is implemented to react to application events.\nThis interface is often used to attach other observers to models as they\nare opened or started.\nThis ensures that your observers are watching all open models.\n\nFor example, when one attaches a {Sketchup::SelectionObserver}, it is only\nattached to the {Sketchup::Selection} collection of a given model. If a 2nd\nmodel is opened, the new model's selection changes will not fire selection\ncallbacks unless you've attached a {Sketchup::SelectionObserver} to the new\nmodel as well. By watching for {#onNewModel}, you can be sure to do so.\n\nTo implement this observer, create a Ruby class of this type, override the\ndesired methods, and add an instance of the observer to the\napplication class.","name":"AppObserver","namespace":"Sketchup","path":"Sketchup::AppObserver","type":"class","visibility":"public"},"Sketchup::AppObserver#expectsStartupModelNotifications":{"description":"The {#expectsStartupModelNotifications} method is called to determine if the\nobserver expects to receive {#onNewModel} and {#onOpenModel} calls for the\nmodels that are created or opened at SketchUp startup. This includes the\nempty initial model, a model opened via command line arguments, or\nauto-restored models on Mac OS X.","name":"expectsStartupModelNotifications","namespace":"Sketchup::AppObserver","path":"Sketchup::AppObserver#expectsStartupModelNotifications","type":"instance_method","visibility":"public","return":[["Boolean"],"+true+ to receive {#onNewModel} and {#onOpenModel} calls\nfor startup models. Return +false+ or simply not\nimplement the method in order to not receive these calls\n(which was the behavior prior to SketchUp 2014)."]},"Sketchup::AppObserver#onActivateModel":{"description":"The {#onActivateModel} method is called when an open model is activated. This\nis relevant on Mac only which supports multiple documents to be opened\nsimultaneously.","name":"onActivateModel","namespace":"Sketchup::AppObserver","path":"Sketchup::AppObserver#onActivateModel","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],"The newly-activated model object."]],"return":[["nil"],""]},"Sketchup::AppObserver#onNewModel":{"description":"The {#onNewModel} method is called when the application creates a new, empty\nmodel.","name":"onNewModel","namespace":"Sketchup::AppObserver","path":"Sketchup::AppObserver#onNewModel","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],"The active model object."]],"return":[["nil"],""]},"Sketchup::AppObserver#onOpenModel":{"description":"The {#onOpenModel} method is called when the application opens an existing\nmodel.","name":"onOpenModel","namespace":"Sketchup::AppObserver","path":"Sketchup::AppObserver#onOpenModel","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],"The active model object."]],"return":[["nil"],""]},"Sketchup::AppObserver#onQuit":{"description":"The {#onQuit} method is called when SketchUp closes. This is useful if you\nneed to clean up anything or store your application state upon close.","name":"onQuit","namespace":"Sketchup::AppObserver","path":"Sketchup::AppObserver#onQuit","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::AppObserver#onUnloadExtension":{"description":"The {#onUnloadExtension} method is called when the user turns off a Ruby\nextension. This is useful for detecting if the user is deactivating\nsome critical set of observers, for example, so you can warn them\nor cache your extension state.","name":"onUnloadExtension","namespace":"Sketchup::AppObserver","path":"Sketchup::AppObserver#onUnloadExtension","type":"instance_method","visibility":"public","parameters":[["extension_name",["String"],"The name of the extension just unloaded."]],"return":[["nil"],""]},"Sketchup::ArcCurve":{"description":"An ArcCurve is a Curve that makes up part of a circle. This is the\nunderlying class for circles as well.\n\nYou can think of ArcCurves as entities that were created with SketchUp's\nArc or Circle drawing tools and Curves as entities that were created with\nthe Freehand drawing tool.\n\nHowever, keep in mind that all Curves in SketchUp are really edges with\nsome extra data attached to them. When you use the API to draw a Curve or\nArcCurve, you are really drawing edges.\n\nArcCurve is a subclass of Curve, so all of the methods that are available\nto Curves are also available to ArcCurves.","name":"ArcCurve","namespace":"Sketchup","path":"Sketchup::ArcCurve","type":"class","visibility":"public"},"Sketchup::ArcCurve#center":{"description":"The center method is used to retrieve the Point3d that is at the center of\nthe circular arc.","name":"center","namespace":"Sketchup::ArcCurve","path":"Sketchup::ArcCurve#center","type":"instance_method","visibility":"public","return":[null,"point - a Point3d at the center of the arc if\nsuccessful"]},"Sketchup::ArcCurve#end_angle":{"description":"The end_angle method is used to retrieve the angle of the end of the arc\nmeasured from the X axis in radians.","name":"end_angle","namespace":"Sketchup::ArcCurve","path":"Sketchup::ArcCurve#end_angle","type":"instance_method","visibility":"public","return":[null,"angle - the angle of the end of the arc if successful"]},"Sketchup::ArcCurve#normal":{"description":"The normal method retrieves a Vector3d that is perpendicular to the plane of\nthe arc.","name":"normal","namespace":"Sketchup::ArcCurve","path":"Sketchup::ArcCurve#normal","type":"instance_method","visibility":"public","return":[null,"vector - a Vector3d object if successful"]},"Sketchup::ArcCurve#plane":{"description":"The plane method is used to retrieve the plane of the arc.\n\nRefer to the Geom module for instructions to create a plane.","name":"plane","namespace":"Sketchup::ArcCurve","path":"Sketchup::ArcCurve#plane","type":"instance_method","visibility":"public","return":[null,"plane - the plane of the arc if successful"]},"Sketchup::ArcCurve#radius":{"description":"The radius method is used to retrieve the radius of the arc.","name":"radius","namespace":"Sketchup::ArcCurve","path":"Sketchup::ArcCurve#radius","type":"instance_method","visibility":"public","return":[null,"radius - the radius of the arc if successful"]},"Sketchup::ArcCurve#start_angle":{"description":"The start_angle method is used to retrieve the angle of the start of the\narc, measured from the X axis in radians.","name":"start_angle","namespace":"Sketchup::ArcCurve","path":"Sketchup::ArcCurve#start_angle","type":"instance_method","visibility":"public","return":[null,"angle - the angle of the start of the arc if successful"]},"Sketchup::ArcCurve#xaxis":{"description":"The xaxis method is used to retrieve the X axis of the coordinate system for\nthe curve. Note that the length of the returned vector is equal to the radius\nof the underlying curve.","name":"xaxis","namespace":"Sketchup::ArcCurve","path":"Sketchup::ArcCurve#xaxis","type":"instance_method","visibility":"public","return":[null,"vector - a Vector3d object if successful"]},"Sketchup::ArcCurve#yaxis":{"description":"The yaxis method is used to retrieve the Y axis of the coordinate system for\nthe curve. Note that the length of the returned vector is equal to the radius\nof the underlying curve.","name":"yaxis","namespace":"Sketchup::ArcCurve","path":"Sketchup::ArcCurve#yaxis","type":"instance_method","visibility":"public","return":[null,"vector - a Vector3d object if successful"]},"Sketchup::AttributeDictionaries":{"description":"The AttributeDictionaries class is a collection of all of the\nAttributeDictionary objects that are attached to a given Entity object.\n\nThe Entity class is a popular parent class in SketchUp, meaning you can\nattach AttributeDictionaries to almost anything, from geometric items\nlike edges and faces and components to more conceptual things like pages\nor materials.\n\nYou access this class not by performing an AttributeDictionaries.new but\nby grabbing a handle from an existing entity.","name":"AttributeDictionaries","namespace":"Sketchup","path":"Sketchup::AttributeDictionaries","type":"class","visibility":"public"},"Sketchup::AttributeDictionaries#[]":{"description":"Get an AttributeDictionary by name. Returns nil if there is none with the\ngiven name.","name":"[]","namespace":"Sketchup::AttributeDictionaries","path":"Sketchup::AttributeDictionaries#[]","type":"instance_method","visibility":"public","parameters":[["key",["String"],"The name of the attribute dictionary."]],"return":[["Sketchup::AttributeDictionary"],"the dictionary"]},"Sketchup::AttributeDictionaries#count":{"description":"The count method is inherited from the Enumerable mix-in module.","name":"count","namespace":"Sketchup::AttributeDictionaries","path":"Sketchup::AttributeDictionaries#count","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::AttributeDictionaries#delete":{"description":"The delete method destroys a given AttributeDictionary. This\nAttributeDictionary can be passed directly or identified by its\nstring name.","name":"delete","namespace":"Sketchup::AttributeDictionaries","path":"Sketchup::AttributeDictionaries#delete","type":"instance_method","visibility":"public","parameters":[["key_or_dict",["String","Sketchup::AttributeDictionary"],"The name of the attribute dictionary to delete, or\nthe dictionary object itself."]],"return":[["Sketchup::AttributeDictionaries"],"the modified AttributeDictionaries object"]},"Sketchup::AttributeDictionaries#each":{"description":"The each method is used to iterate through all of the attributes\ndictionaries.\n\nThrows an exception if there are no keys.","name":"each","namespace":"Sketchup::AttributeDictionaries","path":"Sketchup::AttributeDictionaries#each","type":"instance_method","visibility":"public","return":[null,"nil"]},"Sketchup::AttributeDictionaries#length":{"description":"The {#length} method returns the number of attribute dictionary objects in\nthe collection.","name":"length","namespace":"Sketchup::AttributeDictionaries","path":"Sketchup::AttributeDictionaries#length","type":"instance_method","visibility":"public","return":[["Integer"],"the number of attribute dictionary objects in the\ncollection."]},"Sketchup::AttributeDictionaries#size":{"description":"The {#size} method is an alias of {#length}.","name":"size","namespace":"Sketchup::AttributeDictionaries","path":"Sketchup::AttributeDictionaries#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::AttributeDictionary":{"description":"The AttributeDictionary class allows you to attach arbitrary collections of\nattributes to a SketchUp entity. The attributes are defined by key/value\npairs where the keys are strings.  An Entity or Model object can have any\nnumber of AttributeDictionary objects (see the AttributeDictionaries class).\n\nThe Entity class is a popular parent class in SketchUp, meaning you can\nattach attribute dictionaries to almost anything, from geometric items\nlike edges and faces and components to more conceptual things like pages\nor materials.","name":"AttributeDictionary","namespace":"Sketchup","path":"Sketchup::AttributeDictionary","type":"class","visibility":"public"},"Sketchup::AttributeDictionary#[]":{"description":"The [] method is used to retrieve the attribute with a given key.","name":"[]","namespace":"Sketchup::AttributeDictionary","path":"Sketchup::AttributeDictionary#[]","type":"instance_method","visibility":"public","parameters":[["key",["String"],"The name of the attribute."]],"return":[["Object","nil"],"the attribute stored under your key, or\nnil if not found"]},"Sketchup::AttributeDictionary#[]=":{"description":"The set value ([]=) method is used to set the value of an attribute with a\ngiven key.\n\nCreates a new attribute for the given key if needed.","name":"[]=","namespace":"Sketchup::AttributeDictionary","path":"Sketchup::AttributeDictionary#[]=","type":"instance_method","visibility":"public","parameters":[["key",["String"],"The valid key."],["value",["Boolean","Fixnum","Float","Length","NilClass","String","Time","Array","Geom::Point3d","Geom::Vector3d"],"The value to be set."]],"return":[["Object","nil"],"the value that was set if successful, or false\nif unsuccessful."]},"Sketchup::AttributeDictionary#count":{"description":"The count method is inherited from the Enumerable mix-in module.","name":"count","namespace":"Sketchup::AttributeDictionary","path":"Sketchup::AttributeDictionary#count","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::AttributeDictionary#delete_key":{"description":"The delete_key method is used to delete an attribute with a given key.","name":"delete_key","namespace":"Sketchup::AttributeDictionary","path":"Sketchup::AttributeDictionary#delete_key","type":"instance_method","visibility":"public","parameters":[["key",["String"],"The key to be deleted."]],"return":[["Object","nil"],"the value of the key"]},"Sketchup::AttributeDictionary#each":{"description":"The {#each} method iterate through all of the attributes.","name":"each","namespace":"Sketchup::AttributeDictionary","path":"Sketchup::AttributeDictionary#each","type":"instance_method","visibility":"public"},"Sketchup::AttributeDictionary#each_key":{"description":"The {#each_key} method is used to iterate through all of the attribute keys.","name":"each_key","namespace":"Sketchup::AttributeDictionary","path":"Sketchup::AttributeDictionary#each_key","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::AttributeDictionary#each_pair":{"description":"The {#each_pair} method is an alias for {#each}.","name":"each_pair","namespace":"Sketchup::AttributeDictionary","path":"Sketchup::AttributeDictionary#each_pair","type":"instance_method","visibility":"public"},"Sketchup::AttributeDictionary#keys":{"description":"The keys method is used to retrieve an array with all of the attribute keys.","name":"keys","namespace":"Sketchup::AttributeDictionary","path":"Sketchup::AttributeDictionary#keys","type":"instance_method","visibility":"public","return":[["Array<String>"],"an array of keys within the attribute dictionary\nif successful"]},"Sketchup::AttributeDictionary#length":{"description":"The {#length} method is used to retrieve the size (number of elements) of an\nattribute dictionary.","name":"length","namespace":"Sketchup::AttributeDictionary","path":"Sketchup::AttributeDictionary#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::AttributeDictionary#name":{"description":"The name method is used to retrieve the name of an attribute dictionary.","name":"name","namespace":"Sketchup::AttributeDictionary","path":"Sketchup::AttributeDictionary#name","type":"instance_method","visibility":"public","return":[["String"],"the name of the attribute dictionary if\nsuccessful"]},"Sketchup::AttributeDictionary#size":{"description":"The {#size} method is an alias of {#length}.","name":"size","namespace":"Sketchup::AttributeDictionary","path":"Sketchup::AttributeDictionary#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::AttributeDictionary#values":{"description":"The values method is used to retrieve an array with all of the attribute\nvalues.","name":"values","namespace":"Sketchup::AttributeDictionary","path":"Sketchup::AttributeDictionary#values","type":"instance_method","visibility":"public","return":[["Array<Object, nil>"],"an array of values within the attribute dictionary\nif successful"]},"Sketchup::Axes":{"description":"SketchUp's drawing axes consist of three colored lines (red, green, blue),\nusually perpendicular to each other, displayed in the drawing area. The\nexception is when the user open an instance with a non-orthogonal\ntransformation. The root model transformation is always orthogonal.\n\nThe drawing axes are used by drawing tools to align the geometry it creates\nas well as affecting the inference engine.\n\nThe plane where the red and green axes lines lie is called the ground plane.\nThe term origin, is used to define the place where all of axes lines start or\noriginate.","name":"Axes","namespace":"Sketchup","path":"Sketchup::Axes","type":"class","visibility":"public"},"Sketchup::Axes#axes":{"description":"The axes method returns the vectors representing the directions of the axes.","name":"axes","namespace":"Sketchup::Axes","path":"Sketchup::Axes#axes","type":"instance_method","visibility":"public","return":[null,"Array - an array of three vectors."]},"Sketchup::Axes#origin":{"description":"The origin method returns the origin of the axes.","name":"origin","namespace":"Sketchup::Axes","path":"Sketchup::Axes#origin","type":"instance_method","visibility":"public","return":[null,"Point3d - the origin for the axes."]},"Sketchup::Axes#set":{"description":"The set method allows the axes to be manipulated. The axes must always be\northogonal, otherwise an error is thrown.","name":"set","namespace":"Sketchup::Axes","path":"Sketchup::Axes#set","type":"instance_method","visibility":"public","parameters":[["origin",null,"Point3d - The origin to set."],["xaxis",null,"Vector3d - The x axis to set."],["zaxis",null,"Vector3d - The z axis to set."],["yaxis",null,"Vector3d - The y axis to set."]],"return":[null,"Axes - the axes object being set."]},"Sketchup::Axes#sketch_plane":{"description":"The sketch_plane method returns a plane representing the ground plane of the\naxes.","name":"sketch_plane","namespace":"Sketchup::Axes","path":"Sketchup::Axes#sketch_plane","type":"instance_method","visibility":"public","return":[null,"Array - of 4 numbers that give the coefficients of a\nplane equation."]},"Sketchup::Axes#to_a":{"description":"The axes method returns the origin and vectors representing the axes.","name":"to_a","namespace":"Sketchup::Axes","path":"Sketchup::Axes#to_a","type":"instance_method","visibility":"public","return":[null,"Array - an array of a point and three vectors."]},"Sketchup::Axes#transformation":{"description":"The transformation method returns the transformation of the axes. This is\nuseful when creating tools that respect the model's drawing axes.","name":"transformation","namespace":"Sketchup::Axes","path":"Sketchup::Axes#transformation","type":"instance_method","visibility":"public","return":[null,"Transformation - the transformation for the axes."]},"Sketchup::Axes#xaxis":{"description":"The xaxis method returns the x axis of the axes.","name":"xaxis","namespace":"Sketchup::Axes","path":"Sketchup::Axes#xaxis","type":"instance_method","visibility":"public","return":[null,"Vector3d - the x axis for the axes."]},"Sketchup::Axes#yaxis":{"description":"The yaxis method returns the y axis of the axes.","name":"yaxis","namespace":"Sketchup::Axes","path":"Sketchup::Axes#yaxis","type":"instance_method","visibility":"public","return":[null,"Vector3d - the y axis for the axes."]},"Sketchup::Axes#zaxis":{"description":"The zaxis method returns the z axis of the axes.","name":"zaxis","namespace":"Sketchup::Axes","path":"Sketchup::Axes#zaxis","type":"instance_method","visibility":"public","return":[null,"Vector3d - the z axis for the axes."]},"Sketchup::Behavior":{"description":"The Behavior class is used to control the \"behavior\" of components, which\nroughly correlates to the series of options that you see in the\nComponents dialog under the \"edit\" tab, such as whether it casts shadows,\nglues to walls, etc.\n\nA Behavior object is accessed from a ComponentDefinition object, not created\nwith a Behavior.new call.","name":"Behavior","namespace":"Sketchup","path":"Sketchup::Behavior","type":"class","visibility":"public"},"Sketchup::Behavior#always_face_camera=":{"description":"The always_face_camera= method is used to set the always_face_camera\nbehavior for a component.\n\nIf the always_face_camera behavior is true, a component will always try to\norient itself so that the Y axis of the component is facing the camera.","name":"always_face_camera=","namespace":"Sketchup::Behavior","path":"Sketchup::Behavior#always_face_camera=","type":"instance_method","visibility":"public","parameters":[["setting",null,"Sets the always_face_camera behavior to true or false."]],"return":[null,"status - the status of the always_face_camera behavior."]},"Sketchup::Behavior#always_face_camera?":{"description":"The always_face_camera? method is used to retrieve the  always_face_camera\nbehavior for a component.\n\nIf the always_face_camera behavior is true, then a component will always try\nto orient itself so that the -Y axis of the component is facing the camera.","name":"always_face_camera?","namespace":"Sketchup::Behavior","path":"Sketchup::Behavior#always_face_camera?","type":"instance_method","visibility":"public","return":[["Boolean"],"behavior - true if the component is set to always face\nthe camera, false if the component is not set to always\nface camera."]},"Sketchup::Behavior#cuts_opening=":{"description":"The cuts_opening= method is used to set the cut opening behavior for a\ncomponent.","name":"cuts_opening=","namespace":"Sketchup::Behavior","path":"Sketchup::Behavior#cuts_opening=","type":"instance_method","visibility":"public","parameters":[["setting",null,"Sets the cuts_opening behavior to true or false."]],"return":[null,"status - the status of the cuts_opening behavior\n(either true or false)"]},"Sketchup::Behavior#cuts_opening?":{"description":"The cuts_opening? method is used to get the status of a component's cut\nopening behavior.","name":"cuts_opening?","namespace":"Sketchup::Behavior","path":"Sketchup::Behavior#cuts_opening?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - the status of the cuts_opening behavior\n(either true or false)"]},"Sketchup::Behavior#is2d=":{"description":"The is2d= method is used to set the 2D behavior for a component: whether it\ncan be glued or aligned to a face.","name":"is2d=","namespace":"Sketchup::Behavior","path":"Sketchup::Behavior#is2d=","type":"instance_method","visibility":"public","parameters":[["setting",null,"Sets the 2D behavior to true or false."]],"return":[null,"status - the new setting"]},"Sketchup::Behavior#is2d?":{"description":"The is2d? method is used to get the 2D behavior for a component: whether it\ncan be glued or aligned to a face.","name":"is2d?","namespace":"Sketchup::Behavior","path":"Sketchup::Behavior#is2d?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - the status of the 2D behavior (either true or\nfalse)"]},"Sketchup::Behavior#no_scale_mask=":{"description":"Sets an integer that is really a bit-by-bit description of which scale\ntool handles are hidden on a given component. This is useful for creating\ndefinitions that can only be scaled in particular ways. If a bit contains a\na 1, then a certain handle set will be hidden when the user selects the\ncomponent and activates the Scale tool. Here is the map of which bits\ncontrol which handles.\n\n- Bit0: disable scale along red (X),\n- Bit1: disable scale along green (Y),\n- Bit2: disable scale along blue (Z),\n- Bit3: disable scale in red/blue plane (X+Z),\n- Bit4: disable scale in green/blue plane (Y+Z),\n- Bit5: disable scale in red/green plane (X+Y),\n- Bit6: disable scale uniform (from corners) (XYZ).\n\nNote that for 2-dimensional components (such as face-me components), not all\nof the handles in the list above are even used. Also, if the component you\nare modifying is already selected with the scale tool, then you or your user\nmust deactivate and reactivate the scale tool for your new behavior to take\neffect.","name":"no_scale_mask=","namespace":"Sketchup::Behavior","path":"Sketchup::Behavior#no_scale_mask=","type":"instance_method","visibility":"public","parameters":[["scale_mask",null,"An integer describing which scale tool\nhandles are hidden."]],"return":[null,"behavior - the Behavior object"]},"Sketchup::Behavior#no_scale_mask?":{"description":"The no_scale_mask? method returns an integer that is a bit-by-bit\ndescription of which scale tool handles are hidden when the user selects\nthis single component with the scale tool. See the no_scale_mask=\nmethod for details on the bit encodings used.","name":"no_scale_mask?","namespace":"Sketchup::Behavior","path":"Sketchup::Behavior#no_scale_mask?","type":"instance_method","visibility":"public","return":[["Boolean"],"scale_mask - an integer describing which scale tool\nhandles are hidden."]},"Sketchup::Behavior#shadows_face_sun=":{"description":"The shadows_face_sun= method is used to identify whether the component's\nshadow will be cast from the component's current position as though the\ncomponent were facing the sun. See the Component entity within the SketchUp\nUser's guide for more information on this feature.","name":"shadows_face_sun=","namespace":"Sketchup::Behavior","path":"Sketchup::Behavior#shadows_face_sun=","type":"instance_method","visibility":"public","parameters":[["status",null,"true if the component's is to be cast from the\ncomponent's current position as though the component\nwere facing the sun. False to cause the shadow to be\ncast from the component's current position."]],"return":[null,"behavior - the Behavior object"]},"Sketchup::Behavior#shadows_face_sun?":{"description":"The shadows_face_sun? method is used to determine whether the component's\nshadow is being cast from the component's current position (as though the\ncomponent were facing the sun). See the Component entity within the SketchUp\nUser's guide for more information on this feature.","name":"shadows_face_sun?","namespace":"Sketchup::Behavior","path":"Sketchup::Behavior#shadows_face_sun?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if the component's is to be cast from the\ncomponent's current position as though the component\nwere facing the sun. False to cause the shadow to be\ncast from the component's current position."]},"Sketchup::Behavior#snapto":{"description":"The snapto method is used to verify the status of a component's \"snap to\"\nbehavior.\n\nReturns a constant indicating the snapping behavior of the component\ndescribed by behavior. Snapping behavior is how the x-y plane of a component\ninstance will be snapped against a face. Possible values are:\n\n- +SnapTo_Arbitrary+ => Snap to any aribrary face,\n- +SnapTo_Horizontal+ => Snap to horizontal face like floors,\n- +SnapTo_Vertical+ => Snap to vertical face like walls,\n- +SnapTo_Sloped+ => Snap to sloped face like sloping roofs.","name":"snapto","namespace":"Sketchup::Behavior","path":"Sketchup::Behavior#snapto","type":"instance_method","visibility":"public","return":[null,"status - the status of the snapto behavior (either true\nor false)"]},"Sketchup::Behavior#snapto=":{"description":"The snapto= method sets a component's \"snap to\" behavior.\n\nSnapping behavior is how the x-y plane of a component instance will be\nsnapped against a face. Possible constant values are:\n\n- +SnapTo_Arbitrary+ => Snap to any aribrary face,\n- +SnapTo_Horizontal+ => Snap to horizontal face like floors,\n- +SnapTo_Vertical+ => Snap to vertical face like walls,\n- +SnapTo_Sloped+ => Snap to sloped face like sloping roofs.","name":"snapto=","namespace":"Sketchup::Behavior","path":"Sketchup::Behavior#snapto=","type":"instance_method","visibility":"public","parameters":[["snapto",null,"A numeric constant identifying one of the snapto\ntypes."]],"return":[null,"behavior - the Behavior object"]},"Sketchup::Camera":{"description":"The Camera class contains methods for creating and manipulating a camera.\nThe camera in SketchUp is the \"point of view\" from which you look at the\nmodel.","name":"Camera","namespace":"Sketchup","path":"Sketchup::Camera","type":"class","visibility":"public"},"Sketchup::Camera#aspect_ratio":{"description":"The aspect_ratio method is used to retrieve the aspect ratio of the Camera.","name":"aspect_ratio","namespace":"Sketchup::Camera","path":"Sketchup::Camera#aspect_ratio","type":"instance_method","visibility":"public","return":[null,"aspectratio - an aspect ratio, such as 1.85, if\nsuccessful"]},"Sketchup::Camera#aspect_ratio=":{"description":"The aspect_ratio= method is used to set the aspect ratio for a Camera.\nChanging this value will cause SketchUp to show gray bars over the screen\nto show the resulting view.\n\nIf you set the value to 0.0, then the aspect ratio of the Camera will match\nthe aspect ratio of its View.","name":"aspect_ratio=","namespace":"Sketchup::Camera","path":"Sketchup::Camera#aspect_ratio=","type":"instance_method","visibility":"public","parameters":[["ratio",["Float"],null]],"return":[null,"aspectratio - an aspect ratio, such as 1.85, if\nsuccessful"]},"Sketchup::Camera#center_2d":{"description":"The center_2d method returns a point with the x and y offset of the camera\nwhen it's in 2d mode. When the camera is in two-point perspective and the\nuser pans around, the x and y values will change. These values are in\nnormalized device coordinates, so for instance, the range [-1.0, 1.0] spans\nthe full width or height of the screen.\n\nThe z value is unused and it is always zero.","name":"center_2d","namespace":"Sketchup::Camera","path":"Sketchup::Camera#center_2d","type":"instance_method","visibility":"public","return":[null,"Point3d"]},"Sketchup::Camera#description":{"description":"The description method is used to retrieve the description for a Camera\nobject.","name":"description","namespace":"Sketchup::Camera","path":"Sketchup::Camera#description","type":"instance_method","visibility":"public","return":[null,"description - a string description for the camera if\nsuccessful"]},"Sketchup::Camera#description=":{"description":"The description= method is used to set the description for the Camera.","name":"description=","namespace":"Sketchup::Camera","path":"Sketchup::Camera#description=","type":"instance_method","visibility":"public","parameters":[["description",["String"],null]],"return":[null,"description - a string description for the camera if\nsuccessful"]},"Sketchup::Camera#direction":{"description":"The direction method is used to retrieve a Vector3d object in the direction\nthat the Camera is pointing.","name":"direction","namespace":"Sketchup::Camera","path":"Sketchup::Camera#direction","type":"instance_method","visibility":"public","return":[null,"direction - a Vector3d object pointing in the direction\nthat the Camera is pointing if successful"]},"Sketchup::Camera#eye":{"description":"The eye method is used to retrieve the eye Point3d object for the Camera.","name":"eye","namespace":"Sketchup::Camera","path":"Sketchup::Camera#eye","type":"instance_method","visibility":"public","return":[null,"eye - a Point3d object if successful"]},"Sketchup::Camera#focal_length":{"description":"The focal_length method is used to get the focal length in millimeters of\nperspective Camera.\n\nThis value is computed based on the field of view (see the fov method) and\nthe image width (see image_width).","name":"focal_length","namespace":"Sketchup::Camera","path":"Sketchup::Camera#focal_length","type":"instance_method","visibility":"public","parameters":[["length",null,"The focal length for the camera if successful."]],"return":[null,"nil"]},"Sketchup::Camera#focal_length=":{"description":"The focal_length= method allows you to sent the focal length (in\nmillimeters) of a perspective camera. It must be between 1 and 3000,\ninclusive. This is an alternate way of setting the field of view.","name":"focal_length=","namespace":"Sketchup::Camera","path":"Sketchup::Camera#focal_length=","type":"instance_method","visibility":"public","parameters":[["value",["Float"],null]],"return":[null,"length - the new focal length for the camera if\nsuccessful"]},"Sketchup::Camera#fov":{"description":"The fov method retrieves the field of view of the camera (in degrees).\n\nThis is only applicable to perspective cameras.","name":"fov","namespace":"Sketchup::Camera","path":"Sketchup::Camera#fov","type":"instance_method","visibility":"public","return":[null,"fov - field of view, in degrees, if successful"]},"Sketchup::Camera#fov=":{"description":"The fov= method sets the field of view, in millimeters, for a Camera. It\nmust be between 1 and 120, inclusive.\n\nThis is only valid on a perspective camera.","name":"fov=","namespace":"Sketchup::Camera","path":"Sketchup::Camera#fov=","type":"instance_method","visibility":"public","parameters":[["fov",null,"A field of view in millimeters."]],"return":[null,"fov - the new field of view if successful"]},"Sketchup::Camera#fov_is_height?":{"description":"The fov_is_height? method indicates whether the field of view is horizontal\nor vertical.","name":"fov_is_height?","namespace":"Sketchup::Camera","path":"Sketchup::Camera#fov_is_height?","type":"instance_method","visibility":"public","return":[["Boolean"],"bool - true if vertical, false otherwise"]},"Sketchup::Camera#height":{"description":"The height method retrieves the height of a Camera in inches.\n\nThis is only valid if it is not a perspective camera.","name":"height","namespace":"Sketchup::Camera","path":"Sketchup::Camera#height","type":"instance_method","visibility":"public","return":[null,"height - height in current units if successful"]},"Sketchup::Camera#height=":{"description":"The height= method is used to set the height for the Camera in inches.\n\nThis is only valid if it is not a perspective camera.","name":"height=","namespace":"Sketchup::Camera","path":"Sketchup::Camera#height=","type":"instance_method","visibility":"public","parameters":[["value",["Float"],null]],"return":[null,"height - height in current units if successful"]},"Sketchup::Camera#image_width":{"description":"The image_width method retrieves the size of the image on the image plane of\nthe Camera.\n\nBy default, this value is not set. If it is set, it is used in the\ncalculation of the focal length from the field of view. Unlike most length\nvalues in SketchUp, the image_width and focal_length values are specified in\nmillimeters rather than in inches.","name":"image_width","namespace":"Sketchup::Camera","path":"Sketchup::Camera#image_width","type":"instance_method","visibility":"public","return":[null,"width - the width of the camera if successful"]},"Sketchup::Camera#image_width=":{"description":"The image_width= method is used to set the size of the image on the \"film\"\nfor a perspective camera.\n\nThe value is given in millimeters. It is used in the conversions between\nfield of view and focal length.","name":"image_width=","namespace":"Sketchup::Camera","path":"Sketchup::Camera#image_width=","type":"instance_method","visibility":"public","parameters":[["value",["Float"],null]],"return":[null,"width - the width of the camera if successful"]},"Sketchup::Camera#initialize":{"description":"Returns a new camera with eye (where the camera is) and targets (where the\ncamera is looking) of type Point3d, up direction of type Vector3d, optional\nperspective flag of value true or false, and optional field-of-view value in\ndegrees of type Float.","name":"initialize","namespace":"Sketchup::Camera","path":"Sketchup::Camera#initialize","type":"instance_method","visibility":"public","parameters":[["target",null,"See {#target}."],["eye",null,"See {#eye}."],["up",null,"See {#up}."],["fov",null,"see {#fov}."],["perspective",null,"see {#perspective?}."]],"return":[null,"camera - a new Camera object if successful"]},"Sketchup::Camera#is_2d?":{"description":"The is_2d? method indicates if the camera is in 2d mode. 2 point\nperspective mode and PhotoMatch mode are 2d cameras.","name":"is_2d?","namespace":"Sketchup::Camera","path":"Sketchup::Camera#is_2d?","type":"instance_method","visibility":"public","return":[["Boolean"],"Boolean - true if camera is in 2d mode, false otherwise"]},"Sketchup::Camera#perspective=":{"description":"The perspective= method is used to set whether or not this is a perspective\ncamera or an orthographic camera.","name":"perspective=","namespace":"Sketchup::Camera","path":"Sketchup::Camera#perspective=","type":"instance_method","visibility":"public","parameters":[["perspective",null,"true for perspective, false for orthographic"]],"return":[null,"status - true if perspective, false if orthographic"]},"Sketchup::Camera#perspective?":{"description":"The perspective? method is used to determine whether a camera is a\nperspective or orthographic camera.","name":"perspective?","namespace":"Sketchup::Camera","path":"Sketchup::Camera#perspective?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if perspective, false if orthographic"]},"Sketchup::Camera#scale_2d":{"description":"The scale_2d method returns a float indicating the scaling factor of 2d\ncameras.\n\nWhen the camera is in two-point perspective and the user uses the zoom tools,\nthis value will change. Zooming out will produce a value greater than 1.0.","name":"scale_2d","namespace":"Sketchup::Camera","path":"Sketchup::Camera#scale_2d","type":"instance_method","visibility":"public","return":[null,"float"]},"Sketchup::Camera#set":{"description":"The set method sets the camera orientation. You have to set the camera eye,\ntarget and up parameters at the same time to make sure that you have a valid\ncamera definition.","name":"set","namespace":"Sketchup::Camera","path":"Sketchup::Camera#set","type":"instance_method","visibility":"public","parameters":[["eye",null,"See Camera.eye."],["target",null,"See Camera.target."],["up",null,"See Camera.up."]],"return":[null,"camera - the modified camera"]},"Sketchup::Camera#target":{"description":"The target method retrieves Point3d that the camera is pointing at.","name":"target","namespace":"Sketchup::Camera","path":"Sketchup::Camera#target","type":"instance_method","visibility":"public","return":[null,"target - a Point3d object if successful"]},"Sketchup::Camera#up":{"description":"The up method is used to retrieve the up vector for the camera. This is the\ndirection that the top of the camera is facing.","name":"up","namespace":"Sketchup::Camera","path":"Sketchup::Camera#up","type":"instance_method","visibility":"public","return":[null,"up - a Vector3d object if successful"]},"Sketchup::Camera#xaxis":{"description":"The xaxis method is used to retrieve the x axis of the camera coordinate\nsystem defined by the camera's direction and up vector.\n\nThis value is computed from the cross product between the camera direction\nand the up vector.","name":"xaxis","namespace":"Sketchup::Camera","path":"Sketchup::Camera#xaxis","type":"instance_method","visibility":"public","return":[null,"vector - a Vector3d object if successful"]},"Sketchup::Camera#yaxis":{"description":"The yaxis method retrieves the y axis of the camera coordinate system\ndefined by the camera's direction and up vector.\n\nThis value is computed to be perpendicular the camera x and z axes. It is\nequivalent to the up direction, but is computed to make sure that it is\nperpendicular to the direction.","name":"yaxis","namespace":"Sketchup::Camera","path":"Sketchup::Camera#yaxis","type":"instance_method","visibility":"public","return":[null,"vector - a Vector3d object if successful"]},"Sketchup::Camera#zaxis":{"description":"The zaxis method retrieves the z axis of the camera coordinate system\ndefined by the camera's direction and up vector.\n\nThis value is computed. It is the same as Camera.direction","name":"zaxis","namespace":"Sketchup::Camera","path":"Sketchup::Camera#zaxis","type":"instance_method","visibility":"public","return":[null,"vector - a Vector3d object if successful"]},"Sketchup::ClassificationSchema":{"description":"The ClassificationSchema class represent schemas loaded in the model.","name":"ClassificationSchema","namespace":"Sketchup","path":"Sketchup::ClassificationSchema","type":"class","visibility":"public"},"Sketchup::ClassificationSchema#<=>":{"description":"The <=> method is used to compare two ClassificationSchema objects for\nsorting. The comparison is done based on the schema name.","name":"<=>","namespace":"Sketchup::ClassificationSchema","path":"Sketchup::ClassificationSchema#<=>","type":"instance_method","visibility":"public","parameters":[["schema2",null,"The second schema in the comparison."]],"return":[null,"Integer - -1 if schema1 is less then schema2. 1 if\nschema1 is greater than schema2, 0 if the schemas\nare equal."]},"Sketchup::ClassificationSchema#name":{"description":"The name method returns the name of the schema.","name":"name","namespace":"Sketchup::ClassificationSchema","path":"Sketchup::ClassificationSchema#name","type":"instance_method","visibility":"public","return":[null,"String - containing the schema name."]},"Sketchup::ClassificationSchema#namespace":{"description":"The namespace method returns the namespace of the schema.","name":"namespace","namespace":"Sketchup::ClassificationSchema","path":"Sketchup::ClassificationSchema#namespace","type":"instance_method","visibility":"public","return":[null,"String - containing the schema namespace."]},"Sketchup::Classifications":{"description":"The Classifications class is a container/manager for all classifications in\na model.","name":"Classifications","namespace":"Sketchup","path":"Sketchup::Classifications","type":"class","visibility":"public"},"Sketchup::Classifications#[]":{"description":"The [] method is used to get a classification schema by name or index.","name":"[]","namespace":"Sketchup::Classifications","path":"Sketchup::Classifications#[]","type":"instance_method","visibility":"public","parameters":[["index_or_name",null,"The index or name of the ClassificationSchema object."]],"return":[null,"schema - a ClassificationSchema object if\nsuccessful, otherwise nil."]},"Sketchup::Classifications#each":{"description":"The each method is used to iterate through loaded classification schemas.","name":"each","namespace":"Sketchup::Classifications","path":"Sketchup::Classifications#each","type":"instance_method","visibility":"public","return":[null,"nil"]},"Sketchup::Classifications#keys":{"description":"The keys method is used to get a list of keys in the Classifications class,\nwhich are the same as the names of the schemas.","name":"keys","namespace":"Sketchup::Classifications","path":"Sketchup::Classifications#keys","type":"instance_method","visibility":"public","return":[null,"keys - Array of string keys"]},"Sketchup::Classifications#length":{"description":"The {#length} method returns the number of loaded classification schemas.","name":"length","namespace":"Sketchup::Classifications","path":"Sketchup::Classifications#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Classifications#load_schema":{"description":"The load_schema method is used to load a classification schema into a\nmodel.","name":"load_schema","namespace":"Sketchup::Classifications","path":"Sketchup::Classifications#load_schema","type":"instance_method","visibility":"public","parameters":[["file",null,"Full path to the schema file"]],"return":[null,"True if successful."]},"Sketchup::Classifications#size":{"description":"The {#size} method returns the number of loaded classification schemas.","name":"size","namespace":"Sketchup::Classifications","path":"Sketchup::Classifications#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Classifications#unload_schema":{"description":"The unload_schema method is used to unload a classification schema that was\npreviously loaded into a model.","name":"unload_schema","namespace":"Sketchup::Classifications","path":"Sketchup::Classifications#unload_schema","type":"instance_method","visibility":"public","parameters":[["schema_name",null,"Name of the schema to unload"]],"return":[null,"True if successful."]},"Sketchup::Color":{"description":"The Color class is used to create and manipulate colors within SketchUp\nmodels.\n\nFor methods that accept a Color object, such as the\nface.material method, you can pass in an actual Color object, or an object\nthat can be converted to a Color. For example:\n\nSketchUp ships with several built in colors in the Materials Browser.\nThese colors are listed in the following table.\n\n{include:file:assets/colors.html}","name":"Color","namespace":"Sketchup","path":"Sketchup::Color","type":"class","visibility":"public"},"Sketchup::Color#alpha":{"description":"The alpha method is used to retrieve the opacity of the color. A value of 0\nis transparent, 255 is opaque.","name":"alpha","namespace":"Sketchup::Color","path":"Sketchup::Color#alpha","type":"instance_method","visibility":"public","return":[null,"alpha - the opacity of the color if successful"]},"Sketchup::Color#alpha=":{"description":"The alpha= method is used to set the opacity of the color. A value of 0 is\ntransparent, 255 is opaque.","name":"alpha=","namespace":"Sketchup::Color","path":"Sketchup::Color#alpha=","type":"instance_method","visibility":"public","parameters":[["alpha",null,"The new opacity value."]],"return":[null,"alpha - the newly set opacity value if successful"]},"Sketchup::Color#blend":{"description":"The blend method is used to blend two colors.\n\nThe blended color will be the result of taking (1 - weight) * color1 +\nweight * color2. If weight = 0, you will get color2. If weight = 1 you will\nget color1.","name":"blend","namespace":"Sketchup::Color","path":"Sketchup::Color#blend","type":"instance_method","visibility":"public","parameters":[["color2",null,"The second color to be blended (with this color)."],["weight",null,"A Float between 0.0 and 1.0"]],"return":[null,"color3 - the newly blended Color object if successful"]},"Sketchup::Color#blue":{"description":"The blue method is used to retrieve the blue value of a color. Colors are\ncomprised of red, green, and blue values.\n\nValue range is 0 to 255.","name":"blue","namespace":"Sketchup::Color","path":"Sketchup::Color#blue","type":"instance_method","visibility":"public","return":[null,"blue - the blue value for the color if successful"]},"Sketchup::Color#blue=":{"description":"The blue= method is used to set the blue value of a color. Colors are\ncomprised of red, green, and blue values.\n\nValue range is 0 to 255.","name":"blue=","namespace":"Sketchup::Color","path":"Sketchup::Color#blue=","type":"instance_method","visibility":"public","parameters":[["blue",null,"The blue value for the color."]],"return":[null,"blue - the new blue value for the color if successful"]},"Sketchup::Color#green":{"description":"The green method is used to retrieve the green value of a color. Colors are\ncomprised of red, green, and blue values.\n\nValue range is 0 to 255.","name":"green","namespace":"Sketchup::Color","path":"Sketchup::Color#green","type":"instance_method","visibility":"public","return":[null,"green - the green value for the color if successful"]},"Sketchup::Color#green=":{"description":"The green= method is used to set the green component of a RGB Color.\n\nValue range is 0 to 255.","name":"green=","namespace":"Sketchup::Color","path":"Sketchup::Color#green=","type":"instance_method","visibility":"public","parameters":[["green",null,"The green value for the color."]],"return":[null,"green - the new green value for the color if successful"]},"Sketchup::Color#initialize":{"description":"The new method is used to create a new Color object.","name":"initialize","namespace":"Sketchup::Color","path":"Sketchup::Color#initialize","type":"instance_method","visibility":"public","return":[["Color"],"a new instance of Color"]},"Sketchup::Color#red":{"description":"The red method is used to retrieve the red component of a RGB Color.\n\nValue range is 0 to 255.","name":"red","namespace":"Sketchup::Color","path":"Sketchup::Color#red","type":"instance_method","visibility":"public","return":[null,"red - the red value for the color if successful"]},"Sketchup::Color#red=":{"description":"The red= method is used to set the red component of a RGB Color.\n\nValue range is 0 to 255.","name":"red=","namespace":"Sketchup::Color","path":"Sketchup::Color#red=","type":"instance_method","visibility":"public","parameters":[["red",null,"The red value for the color."]],"return":[null,"red - the new red value for the color if successful"]},"Sketchup::Color#to_a":{"description":"The to_a method is used to convert a Color object to an Array object. The\nreturned array will contain 4 integer values (RGBA) between 0 and 255.","name":"to_a","namespace":"Sketchup::Color","path":"Sketchup::Color#to_a","type":"instance_method","visibility":"public","return":[null,"array - an Array object if successful"]},"Sketchup::Color#to_i":{"description":"The to_i method is used to convert a Color object to an 32 bit integer.","name":"to_i","namespace":"Sketchup::Color","path":"Sketchup::Color#to_i","type":"instance_method","visibility":"public","return":[null,"integer - a 32 bit integer if successful"]},"Sketchup::Color#to_s":{"description":"Returns a string representation of a Color object, in the form\nof \"Color(255, 255, 255, 255)\".","name":"to_s","namespace":"Sketchup::Color","path":"Sketchup::Color#to_s","type":"instance_method","visibility":"public","return":[null,"string - a String name for the Color."]},"Sketchup::Color.names":{"description":"The names method is used to retrieve an array of all color names recognized\nby SketchUp.\n\nIn general, whenever a method wants a color, you can pass in a String with\none of these names.","name":"names","namespace":"Sketchup::Color","path":"Sketchup::Color.names","type":"class_method","visibility":"public","return":[null,"names - an array of all SketchUp color names if\nsuccessful"]},"Sketchup::ComponentDefinition":{"description":"The ComponentDefinition class is used to define the contents for a SketchUp\ncomponent. Components are a collection of entities that can be instanced\nand reused multiple times throughout a model. For example, you could\ndraw a chair once, turn it into a component, and then use 6 instances of\nit to surround a table. Edits to the original \"definition\" will then\npropagate across all of its instances.\n\nThe ComponentDefinition class contains the global entities and settings\nfor each definition. See the ComponentInstance class for how each copy\nis defined.","name":"ComponentDefinition","namespace":"Sketchup","path":"Sketchup::ComponentDefinition","type":"class","visibility":"public"},"Sketchup::ComponentDefinition#<=>":{"description":"The <=> method is used to compare two ComponentDefinition objects for\nsorting. The comparison is done based on the component name.","name":"<=>","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#<=>","type":"instance_method","visibility":"public","parameters":[["compdef2",["Sketchup::ComponentDefinition"],"The second component definition in the comparison."]],"return":[["Integer"],"a -1 if component1 is less then component2. A 1\nif component1 greater than component2"]},"Sketchup::ComponentDefinition#==":{"description":"The == method is used to test if two ComponentDefinition objects are the\nsame (based on their address in memory).","name":"==","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#==","type":"instance_method","visibility":"public","parameters":[["compdef2",["Sketchup::ComponentDefinition"],"The second component definition in the comparison."]],"return":[["Boolean"],"true if the ComponentDefinition objects are\nthe same object. False if the objects are not the same."]},"Sketchup::ComponentDefinition#add_classification":{"description":"The add_classification method is used to add a given classification to\nthe component.\n\nNote that you cannot classify image definitions.","name":"add_classification","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#add_classification","type":"instance_method","visibility":"public","parameters":[["schema_name",["String"],"a String - Schema name to add"],["schema_type",["String"],"a String - Schema type to add"]],"return":[["Boolean"],"true if the classification succeeds. Otherwise false."]},"Sketchup::ComponentDefinition#add_observer":{"description":"The add_observer method is used to add an observer to the current object.","name":"add_observer","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::ComponentDefinition#behavior":{"description":"The behavior method is used to retrieve the Behavior object associated with\na component definition.","name":"behavior","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#behavior","type":"instance_method","visibility":"public","return":[["Sketchup::Behavior"],"a Behavior object if successful"]},"Sketchup::ComponentDefinition#count_instances":{"description":"The count_instances method is used to count the number of unique component\ninstances in a model using this component definition. This does not represent\nthe total number of instances placed in the model as it doesn't take into\naccount instances inside unused definitions.","name":"count_instances","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#count_instances","type":"instance_method","visibility":"public","return":[["Integer"],"the number of component instances of this\ncomponent definition (if successful)"]},"Sketchup::ComponentDefinition#count_used_instances":{"description":"The count_used_instances method is used to count the total number of\ncomponent instances in a model using this component definition. This method\ntakes into account the full hierarchy of the model.","name":"count_used_instances","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#count_used_instances","type":"instance_method","visibility":"public","return":[["Integer"],"the number of component instances of this\ncomponent definition (if successful)"]},"Sketchup::ComponentDefinition#description":{"description":"The description method is used to retrieve the description of the component\ndefinition.\n\nComponent definitions do not have a description, by default.","name":"description","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#description","type":"instance_method","visibility":"public","return":[["String"],"the description of the component definition if successful"]},"Sketchup::ComponentDefinition#description=":{"description":"The description= method is used to set the description for the component\ndefinition.","name":"description=","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#description=","type":"instance_method","visibility":"public","parameters":[["description",["String"],null]],"return":[["String"],"the description if successful, false if\nunsuccessful"]},"Sketchup::ComponentDefinition#entities":{"description":"The entities method retrieves a collection of all the entities in the\ncomponent definition","name":"entities","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#entities","type":"instance_method","visibility":"public","return":[["Sketchup::Entities"],"an Entities object if successful"]},"Sketchup::ComponentDefinition#get_classification_value":{"description":"The get_classification_value method is used to retrieve the value from\na classification attribute given a key path.","name":"get_classification_value","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#get_classification_value","type":"instance_method","visibility":"public","parameters":[["path",["Array<String>"],"An array composed of the key path to the value."]],"return":[["Object","nil"],"a Ruby object if successful, nil otherwise."]},"Sketchup::ComponentDefinition#group?":{"description":"The group? method is used to determine if this component definition is used\nto hold the elements of a group.","name":"group?","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#group?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the definition is used to hold a\ngroup, false if the definition does not hold a group."]},"Sketchup::ComponentDefinition#guid":{"description":"The guid method is used to retrieve the unique identifier of this component\ndefinition. The guid changes after the component definition is modified and\nthe component edit is exited.","name":"guid","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#guid","type":"instance_method","visibility":"public","return":[["String"],"a string guid if successful"]},"Sketchup::ComponentDefinition#hidden?":{"description":"The hidden method is used to determine if this component definition should\nbe hidden on the component browser.","name":"hidden?","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#hidden?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the definition should be hidden, false\nif the definition should not be hidden"]},"Sketchup::ComponentDefinition#image?":{"description":"The image? method is used to determine if this component definition is used\nto define an image.","name":"image?","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#image?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the component definition defines an\nimage, false if the component definition does not\ndefine an image."]},"Sketchup::ComponentDefinition#insertion_point":{"description":"The insertion_point method is used to retrieve the Point3d object where the\ncomponent was inserted.","name":"insertion_point","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#insertion_point","type":"instance_method","visibility":"public","return":[["Geom::Point3d"],"the Point3d where the component was inserted if\nsuccessful. False if unsuccessful."]},"Sketchup::ComponentDefinition#insertion_point=":{"description":"Sets the insertion point of your definition.","name":"insertion_point=","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#insertion_point=","type":"instance_method","visibility":"public","parameters":[["point",["Geom::Point3d"],"The Point3d object to use as the\ninsertion point."]],"return":[["Geom::Point3d"],"The Point3d object used as the insertion point."]},"Sketchup::ComponentDefinition#instances":{"description":"The instances method is used to return any array of ComponentInstancesfor\nthis ComponentDefinition.","name":"instances","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#instances","type":"instance_method","visibility":"public","return":[["Array<Sketchup::ComponentInstance>"],"an array of ComponentInstances \n(if successful)"]},"Sketchup::ComponentDefinition#internal?":{"description":"The internal? method is used to determine if the component definition is\ninternal to the Component Browser","name":"internal?","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#internal?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the component definition is internal\nto SketchUp's Component Browser.  False if the\ncomponent definition is not internal to SketchUp."]},"Sketchup::ComponentDefinition#invalidate_bounds":{"description":"Invalidates the bounding box of your definition. This command forces the\nupdate of the bounding box of definition while inside an operation.\nSee Model.start_operation for how to start an operation.\n\nThis method is useful if you make changes to your geometry using the Ruby\nAPI and then need to know your bounding box size. This method forces\nSketchUp to recalculate the definition's bounding box when you choose.","name":"invalidate_bounds","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#invalidate_bounds","type":"instance_method","visibility":"public","return":[["Boolean"],"true if successful"]},"Sketchup::ComponentDefinition#name":{"description":"The name method retrieves the name of the component definition.","name":"name","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#name","type":"instance_method","visibility":"public","return":[["String"],"the component definition's name if successful"]},"Sketchup::ComponentDefinition#name=":{"description":"The name= method is used to set the name of the component definition.","name":"name=","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#name=","type":"instance_method","visibility":"public","parameters":[["name",["String"],null]],"return":[["String"],"the name assigned to the component definition if\nsuccessful"]},"Sketchup::ComponentDefinition#path":{"description":"The path method is used to retrieve the path where the component was loaded.\n\nReturns nil if it is an internal component.","name":"path","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#path","type":"instance_method","visibility":"public","return":[["String","FalseClass"],"a valid path if successful, false if\nunsuccessful"]},"Sketchup::ComponentDefinition#refresh_thumbnail":{"description":"The refresh_thumbnail method is used to force SketchUp to regenerate the\nthumbnail image that appears in the component browser. This is useful if\nyou've used the API to change the geometry of your component and would\nlike the thumbnail to match.","name":"refresh_thumbnail","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#refresh_thumbnail","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::ComponentDefinition#remove_classification":{"description":"The remove_classification method is used to remove a given classification\nfrom the component.\n\nNote that you cannot classify image definitions.","name":"remove_classification","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#remove_classification","type":"instance_method","visibility":"public","parameters":[["schema_name",["String"],"a String - Schema name to remove"],["schema_type",["String"],"a String - Schema type to remove. If not provided or an\nempty string, the currently applied schema type for the\ngiven schema name will be removed."]],"return":[["Boolean"],"true if the removal succeeds. Otherwise false."]},"Sketchup::ComponentDefinition#remove_observer":{"description":"The remove_observer method is used to remove an observer from the current\nobject.","name":"remove_observer","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::ComponentDefinition#save_as":{"description":"The save_as method is used to save your definition as a SketchUp file at the\nspecified file destination.","name":"save_as","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#save_as","type":"instance_method","visibility":"public","parameters":[["file_path",["String"],"Local file path to save the .skp file to."]],"return":[["Boolean"],"true if successful"]},"Sketchup::ComponentDefinition#save_thumbnail":{"description":"Saves a component thumbnail image. The image format is specified by the\nfile extension of filePath. Supported image formats are bmp, jpg, png,\ntif, pct, and gif.","name":"save_thumbnail","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#save_thumbnail","type":"instance_method","visibility":"public","parameters":[["filename",["String"],""]],"return":[["Boolean"],"true if successful, false otherwise."]},"Sketchup::ComponentDefinition#set_classification_value":{"description":"The set_classification_value method is used to set the value of a\nclassification attribute given a key path.","name":"set_classification_value","namespace":"Sketchup::ComponentDefinition","path":"Sketchup::ComponentDefinition#set_classification_value","type":"instance_method","visibility":"public","parameters":[["value",["Object"],"A value valid for that specific attribute."],["path",["Array<String>"],"An array composed of the key path to the value."]],"return":[["Boolean"],"true if the path was valid, false otherwise."]},"Sketchup::ComponentInstance":{"description":"The ComponentInstance class is used to represent component instances of a\ncomponent definition or components that have been dragged from the Component\nBrowser and placed (thus, instanced) within the Model. Therefore, the\nComponentInstance class contains a reference to a corresponding\nComponentDefinition object and a Transformation object (which contains the\nlocation of the component in the Drawing Window).","name":"ComponentInstance","namespace":"Sketchup","path":"Sketchup::ComponentInstance","type":"class","visibility":"public"},"Sketchup::ComponentInstance#add_observer":{"description":"The add_observer method is used to add an observer to the current object.","name":"add_observer","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::ComponentInstance#definition":{"description":"The definition method is used to retrieve the component definition for this\ncomponent instance.","name":"definition","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#definition","type":"instance_method","visibility":"public","return":[["Sketchup::ComponentDefinition"],"a ComponentDefinition object if\nsuccessful"]},"Sketchup::ComponentInstance#definition=":{"description":"The definition= method is used to set the component definition for this\ncomponent.\n\nThis method causes the instance to use a different definition, but it will\nuse the same transformation to position it in the Model.","name":"definition=","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#definition=","type":"instance_method","visibility":"public","parameters":[["definition",["Sketchup::ComponentDefinition"],"A ComponentDefinition object to set."]],"return":[["Sketchup::ComponentDefinition"],"the ComponentDefinition object\nthat was set if successful, false if unsuccessful"]},"Sketchup::ComponentInstance#equals?":{"description":"The equals? method is used to determine if a component instance is\ngeometrically equivalent to another instance.","name":"equals?","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#equals?","type":"instance_method","visibility":"public","parameters":[["instance",["Sketchup::ComponentInstance"],"The instance to compare this instance with."]],"return":[["Boolean"],"true if the instances are geometrically\nequivalent.\nOtherwise false."]},"Sketchup::ComponentInstance#explode":{"description":"The explode method is used to explode the component instance into separate\nentities.","name":"explode","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#explode","type":"instance_method","visibility":"public","return":[["Array<Sketchup:Entity>"],"An array of entity objects if successful, false if\nunsuccessful"]},"Sketchup::ComponentInstance#glued_to":{"description":"The glued_to method is used to retrieve the entity that this instance is\nglued to.\n\nReturns nil if it is not glued to anything.","name":"glued_to","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#glued_to","type":"instance_method","visibility":"public","return":[["Sketchup::Face","nil"],"the Entity object that the instance is glued\nto (if successful)"]},"Sketchup::ComponentInstance#glued_to=":{"description":"The glued_to= method glues this instance to a face.\n\nThis method will raise an exception if the instance cannot be glued to the\ngiven face. Instances cannot be glued if the definition of the instance\ndoesn't support gluing or if the alignment is wrong.","name":"glued_to=","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#glued_to=","type":"instance_method","visibility":"public","parameters":[["face",["Sketchup::Face","nil"],null]],"return":[["Sketchup::Face","nil"],"- the Face object where the component is glued if\nsuccessful"]},"Sketchup::ComponentInstance#guid":{"description":"The guid method is used to get the base 64 encoded unique id\nfor this SketchUp object.","name":"guid","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#guid","type":"instance_method","visibility":"public","return":[["String"],"a unique 22 character string"]},"Sketchup::ComponentInstance#intersect":{"description":"The intersect method is used to compute the boolean intersection of two\ninstances representing manifold solid volumes (this - arg).  If the specified\nobjects (this and arg) do not represent manifold volumes, this method fails.","name":"intersect","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#intersect","type":"instance_method","visibility":"public","parameters":[["instance",["Sketchup::ComponentInstance"],"The instance to intersect this instance with."]],"return":[["Sketchup::Group","nil"],"The resultant group if the two objects\n(this and arg) represent manifold solids and the\noperation succeeds otherwise nil is returned."]},"Sketchup::ComponentInstance#locked=":{"description":"The locked= method is used to lock a component instance.","name":"locked=","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#locked=","type":"instance_method","visibility":"public","parameters":[["lock",["Boolean"],null]],"return":[["Boolean"],"true if the component instance is locked.\nFalse if the instance is not locked."]},"Sketchup::ComponentInstance#locked?":{"description":"The locked? method is used to determine if a component instance is locked.","name":"locked?","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#locked?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the component instance is locked.\nFalse if the instance is not locked."]},"Sketchup::ComponentInstance#make_unique":{"description":"The make_unique method is used to create a component definition for this\ninstance that is not used by any other instances.","name":"make_unique","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#make_unique","type":"instance_method","visibility":"public","return":[["Boolean"],"true if successful, false if unsuccessful"]},"Sketchup::ComponentInstance#manifold?":{"description":"The manifold? method is used to determine if an instance is manifold.","name":"manifold?","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#manifold?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the instance is manifold.\nfalse if the instance is not manifold."]},"Sketchup::ComponentInstance#move!":{"description":"The move! method is the same as the transform! method, except that it does\nnot record the move as an undo operation.\n\nThis method is useful for moving entities inside of an animation or page\ntransition.","name":"move!","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#move!","type":"instance_method","visibility":"public","parameters":[["transform",["Geom::Transformation"],"The transform object to apply to the component instance."]],"return":[["Boolean"],"true if successful, false if unsuccessful"]},"Sketchup::ComponentInstance#name":{"description":"The name method is used to get the name of this instance.","name":"name","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#name","type":"instance_method","visibility":"public","return":[["String"],"the string name of the ComponentInstance"]},"Sketchup::ComponentInstance#name=":{"description":"The name method is used to set the name of this instance.","name":"name=","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#name=","type":"instance_method","visibility":"public","parameters":[["name",["String"],"the string name to set"]],"return":[["Sketchup::ComponentInstance"],"the newly named ComponentInstance"]},"Sketchup::ComponentInstance#outer_shell":{"description":"The outer_shell method is used to compute the outer shell of the two\ninstances representing manifold solid volumes (this || arg). If the specified\nobjects (this and arg) do not represent manifold volumes, this method fails.","name":"outer_shell","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#outer_shell","type":"instance_method","visibility":"public","parameters":[["instance",["Sketchup::ComponentInstance"],"The instance to outer shell this instance with."]],"return":[["Sketchup::Group","nil"],"The resultant group if the two objects\n(this and arg) represent manifold solids and the\noperation succeeds otherwise nil is returned."]},"Sketchup::ComponentInstance#remove_observer":{"description":"The remove_observer method is used to remove an observer from the current\nobject.","name":"remove_observer","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::ComponentInstance#show_differences":{"description":"The show_differences method is used to determine if a component instance is\ngeometrically equivalent to another instance and in addition move the non-\nmatching and matching geometry to new layers.\n\nThis method will move both instances to Layer0.  Geometry that is the same\nin both components will be moved to a new layer named def_name + \"_same\".\nGeometry that is not the same will be moved to a layer named def_name +\n\"_diff\".\n\nIf verbose is true, a list of all the geometry that is different\nfrom one component to the other is displayed texturally in the Ruby Console.","name":"show_differences","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#show_differences","type":"instance_method","visibility":"public","parameters":[["instance",["Sketchup::ComponentInstance"],"The instance to be compared with."],["verbose",["Boolean"],"A boolean flag indicating whether to display a textural\nreport of the found differences to the Ruby console."]],"return":[["Boolean"],"true if the instances are geometrically\nequivalent, otherwise false."]},"Sketchup::ComponentInstance#split":{"description":"The split method is used to compute the boolean split (map overlay)of the two\ninstances representing manifold solid volumes (this - arg).  If the specified\nobjects (this and arg) do not represent manifold volumes, this method fails.","name":"split","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#split","type":"instance_method","visibility":"public","parameters":[["instance",["Sketchup::ComponentInstance","nil"],"The instance to split this instance with."]],"return":[["Array(Sketchup::Group, Sketchup::Group, Sketchup::Group)"],"A vector (array) of the three resultant groups\nif the two objects (this and arg) represent manifold\nsolids and the operation succeeds otherwise nil is\nreturned. The 3 groups are as follows: The intersection\nof volume 1 & volume 2, the difference of\nvolume 1 minus volume 2, and the reverse difference of\nvolume 2 minus volume 1."]},"Sketchup::ComponentInstance#subtract":{"description":"The subtract method is used to compute the boolean difference of the two\ninstances representing manifold solid volumes (this - arg).  If the specified\nobjects (this and arg) do not represent manifold volumes, this method fails.","name":"subtract","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#subtract","type":"instance_method","visibility":"public","parameters":[["instance",["Sketchup::ComponentInstance"],"The instance to subtract this instance from."]],"return":[["Sketchup::Group","nil"],"The resultant group if the two objects\n(this and arg) represent manifold solids and the\noperation succeeds otherwise nil is returned."]},"Sketchup::ComponentInstance#transform!":{"description":"Apply a {Geom::Transformation} to a component instance.","name":"transform!","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#transform!","type":"instance_method","visibility":"public","parameters":[["transform",["Geom::Transformation"],"The transformation object to apply to the component instance."]],"return":[["Boolean"],""]},"Sketchup::ComponentInstance#transformation":{"description":"The transformation method is used to retrieve the transformation of this\ninstance.","name":"transformation","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#transformation","type":"instance_method","visibility":"public","return":[["Geom::Transformation"],"the Transformation object if successful"]},"Sketchup::ComponentInstance#transformation=":{"description":"The transformation= method is used to set the transformation on this\ninstance.","name":"transformation=","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#transformation=","type":"instance_method","visibility":"public","parameters":[["transformation",["Geom::Transformation"],"A Transformation object to apply."]],"return":[["Sketchup::ComponentInstance"],"the transformed ComponentInstance"]},"Sketchup::ComponentInstance#trim":{"description":"The trim method is used to compute the (non-destructive) boolean difference\nof the two instances representing manifold solid volumes (this - arg).  If\nthe specified objects (this and arg) do not represent manifold volumes, this\nmethod fails.","name":"trim","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#trim","type":"instance_method","visibility":"public","parameters":[["instance",["Sketchup::ComponentInstance"],"The instance to trim this instance against."]],"return":[["Sketchup::Group","nil"],"The resultant group if the two objects\n(this and arg) represent manifold solids and the\noperation succeeds otherwise nil is returned."]},"Sketchup::ComponentInstance#union":{"description":"The union method is used to compute the boolean union of the two instances\nrepresenting manifold solid volumes (this | arg).  If the specified\nobjects (this and arg) do not represent manifold volumes, this method fails.","name":"union","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#union","type":"instance_method","visibility":"public","parameters":[["instance",["Sketchup::ComponentInstance"],"The instance to union this instance with."]],"return":[["Sketchup::Group","nil"],"The resultant group if the two objects\n(this and arg) represent manifold solids and the\noperation succeeds otherwise nil is returned."]},"Sketchup::ComponentInstance#volume":{"description":"The volume method is used to compute the volume of this instance if and only\nif this instance is manifold.","name":"volume","namespace":"Sketchup::ComponentInstance","path":"Sketchup::ComponentInstance#volume","type":"instance_method","visibility":"public","return":[["Float"],"If the instance represents a manifold volume,\nvolume will be a positive value.  If volume is negative,\nthe instance is not manifold."]},"Sketchup::Console":{"description":"The Console class is used by SketchUp to direct $stdout and $stderr to the\nRuby Console. It is a singleton class that only has one instance available.\nThis instance is accessible via the SKETCHUP_CONSOLE constant.\n\nIn SketchUp 2014 methods were added to allow developers to control the\nvisibility of the Ruby Console.\n\nAlso note that in SketchUp 2014, writing to the console does not work from\nwithin Ruby threads other than the main thread. So the following code will\nnot produce any output.","name":"Console","namespace":"Sketchup","path":"Sketchup::Console","type":"class","visibility":"public"},"Sketchup::Console#clear":{"description":"Clears the contents of SketchUp's Ruby Console.","name":"clear","namespace":"Sketchup::Console","path":"Sketchup::Console#clear","type":"instance_method","visibility":"public","return":[null,"true."]},"Sketchup::Console#hide":{"description":"Hides the SketchUp Ruby Console.","name":"hide","namespace":"Sketchup::Console","path":"Sketchup::Console#hide","type":"instance_method","visibility":"public","return":[null,"true."]},"Sketchup::Console#show":{"description":"Displays the SketchUp Ruby Console.","name":"show","namespace":"Sketchup::Console","path":"Sketchup::Console#show","type":"instance_method","visibility":"public","return":[null,"true."]},"Sketchup::Console#visible?":{"description":"Returns the visibility state of the SketchUp Ruby Console.","name":"visible?","namespace":"Sketchup::Console","path":"Sketchup::Console#visible?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if visible, false if not."]},"Sketchup::ConstructionLine":{"description":"The ConstructionLine class contains methods for modifying construction\nlines.  Construction lines can be infinite in length, semi-infinite (i.e.\ninfinite in one direction) or finite.","name":"ConstructionLine","namespace":"Sketchup","path":"Sketchup::ConstructionLine","type":"class","visibility":"public"},"Sketchup::ConstructionLine#direction":{"description":"The direction method retrieves a 3D vector in the direction of the\nconstruction line.","name":"direction","namespace":"Sketchup::ConstructionLine","path":"Sketchup::ConstructionLine#direction","type":"instance_method","visibility":"public","return":[null,"vector - a Vector3d object if successful"]},"Sketchup::ConstructionLine#direction=":{"description":"The direction= method is used to set the direction of the construction line\nto a 3D vector.","name":"direction=","namespace":"Sketchup::ConstructionLine","path":"Sketchup::ConstructionLine#direction=","type":"instance_method","visibility":"public","parameters":[["vector",null,"The Vector3d whose direction will be used to set the\ndirection of the construction line."]],"return":[null,"vector - the new Vector3d object if successful"]},"Sketchup::ConstructionLine#end":{"description":"The end method retrieves the end point of a construction line in the form of\na 3D point.\n\nIf the construction line is infinite at the end, this returns nil.","name":"end","namespace":"Sketchup::ConstructionLine","path":"Sketchup::ConstructionLine#end","type":"instance_method","visibility":"public","return":[null,"point - a Point3d object representing the end of the\nconstruction line"]},"Sketchup::ConstructionLine#end=":{"description":"The end= method is used to set the end point of the construction line. This\nmethod will make the length finite at the end.\n\nSet the end to nil to make the construction line infinite at the end.","name":"end=","namespace":"Sketchup::ConstructionLine","path":"Sketchup::ConstructionLine#end=","type":"instance_method","visibility":"public"},"Sketchup::ConstructionLine#position":{"description":"The position method is used to retrieve a 3D point used to create a\nconstruction line on an infinite construction line.","name":"position","namespace":"Sketchup::ConstructionLine","path":"Sketchup::ConstructionLine#position","type":"instance_method","visibility":"public","return":[null,"point - the Point3d object used to create the line (if\nsuccessful)"]},"Sketchup::ConstructionLine#position=":{"description":"The position= method is used to set a 3D point that the construction passes\nthrough","name":"position=","namespace":"Sketchup::ConstructionLine","path":"Sketchup::ConstructionLine#position=","type":"instance_method","visibility":"public","parameters":[["point",null,"The Point3d object for the construction line to pass\nthrough."]],"return":[null,"point - the new Point3d object that the construction\nline will pass through (if successful)"]},"Sketchup::ConstructionLine#reverse!":{"description":"The reverse! method is used to reverse the direction of the construction\nline.","name":"reverse!","namespace":"Sketchup::ConstructionLine","path":"Sketchup::ConstructionLine#reverse!","type":"instance_method","visibility":"public","return":[null,"status"]},"Sketchup::ConstructionLine#start":{"description":"The start method is used to retrieve the starting point of a construction\nline.\n\nIf the construction line is infinite at the start, this returns nil.","name":"start","namespace":"Sketchup::ConstructionLine","path":"Sketchup::ConstructionLine#start","type":"instance_method","visibility":"public","return":[null,"point - the Poin3d object representing the starting\npoint of the construction line (if successful)"]},"Sketchup::ConstructionLine#start=":{"description":"The start= method is used to set the start point of a construction line\nmaking the line's length finite at the start.\n\nSetting the start to nil will make the construction line infinite at the\nstart.","name":"start=","namespace":"Sketchup::ConstructionLine","path":"Sketchup::ConstructionLine#start=","type":"instance_method","visibility":"public"},"Sketchup::ConstructionLine#stipple":{"description":"The stipple method is used to retrieve the stipple pattern used to display\nthe construction line.","name":"stipple","namespace":"Sketchup::ConstructionLine","path":"Sketchup::ConstructionLine#stipple","type":"instance_method","visibility":"public","return":[null,"pattern - the stipple pattern being used"]},"Sketchup::ConstructionLine#stipple=":{"description":"The stipple= method is used to set the stipple pattern used to display\nthe construction line. The stipple pattern is given as a string.\nValid strings are:\n- <code>\".\"</code> (Dotted Line),\n- <code>\"-\"</code> (Short Dashes Line),\n- <code>\"_\"</code> (Long Dashes Line),\n- <code>\"-.-\"</code> (Dash Dot Dash Line).","name":"stipple=","namespace":"Sketchup::ConstructionLine","path":"Sketchup::ConstructionLine#stipple=","type":"instance_method","visibility":"public","parameters":[["pattern",null,"- the stipple pattern to use"]]},"Sketchup::ConstructionPoint":{"description":"A construction point represents a point in the model that can be used to aid\nin other modeling operations. For example, you may put a construction point\nat the center of a circle to make it easier to locate that point for\nperforming other operations.","name":"ConstructionPoint","namespace":"Sketchup","path":"Sketchup::ConstructionPoint","type":"class","visibility":"public"},"Sketchup::ConstructionPoint#position":{"description":"The position method is used to retrieve a Point3d used to create a\nconstruction point.","name":"position","namespace":"Sketchup::ConstructionPoint","path":"Sketchup::ConstructionPoint#position","type":"instance_method","visibility":"public","return":[null,"point - the Point3d object used to create the\nConstructionPoint"]},"Sketchup::Curve":{"description":"The Curve class is used by SketchUp to unite a series of Edge objects into\none conceptual entity. Since SketchUp is a surface modeler, all circles,\narcs, and arbitrary curves are really just edges that are bound together in\nsequence.\n\nThere is a subclass of Curve called ArcCurve, which is any curve that makes\nup part of a circle. You can think of ArcCurves as entities that were created\nwith SketchUp's Arc or Circle drawing tools and Curves as entities that were\ncreated with the Freehand drawing tool.","name":"Curve","namespace":"Sketchup","path":"Sketchup::Curve","type":"class","visibility":"public"},"Sketchup::Curve#count_edges":{"description":"The count_edges method is used to retrieve the number of Edge objects that\nmake up the Curve.","name":"count_edges","namespace":"Sketchup::Curve","path":"Sketchup::Curve#count_edges","type":"instance_method","visibility":"public","return":[null,"num_edges - the number of edges in the curve"]},"Sketchup::Curve#each_edge":{"description":"The each_edge method is used to iterate through all of the Edge objects in\nthe curve.","name":"each_edge","namespace":"Sketchup::Curve","path":"Sketchup::Curve#each_edge","type":"instance_method","visibility":"public","return":[null,"edge - a variable that will hold each Edge object as\nthey are found."]},"Sketchup::Curve#edges":{"description":"The edges method is used to retrieve an array of Edge objects that make up\nthe Curve.","name":"edges","namespace":"Sketchup::Curve","path":"Sketchup::Curve#edges","type":"instance_method","visibility":"public","return":[null,"edges - an array of Edge objects if successful"]},"Sketchup::Curve#first_edge":{"description":"The first_edge method is used to retrieve the first edge of the curve.","name":"first_edge","namespace":"Sketchup::Curve","path":"Sketchup::Curve#first_edge","type":"instance_method","visibility":"public","return":[null,"edge - the first Edge object in the curve if successful"]},"Sketchup::Curve#is_polygon?":{"description":"","name":"is_polygon?","namespace":"Sketchup::Curve","path":"Sketchup::Curve#is_polygon?","type":"instance_method","visibility":"public","return":[["Boolean"],"True if this edge was originally created by the polygon\ntool, otherwise false."]},"Sketchup::Curve#last_edge":{"description":"The last_edge method is used to retrieve the last edge of the curve.","name":"last_edge","namespace":"Sketchup::Curve","path":"Sketchup::Curve#last_edge","type":"instance_method","visibility":"public","return":[null,"edge - the last Edge object in the curve if successful"]},"Sketchup::Curve#length":{"description":"The length method retrieves the length of the curve.","name":"length","namespace":"Sketchup::Curve","path":"Sketchup::Curve#length","type":"instance_method","visibility":"public","return":[null,"length - the length of the curve in current units if\nsuccessful"]},"Sketchup::Curve#move_vertices":{"description":"The vertices method retrieves a collection of all vertices in a curve.","name":"move_vertices","namespace":"Sketchup::Curve","path":"Sketchup::Curve#move_vertices","type":"instance_method","visibility":"public","parameters":[["point_array",null,"Array of Point3d objects to move each vertex to match."]],"return":[null,"success - true or false"]},"Sketchup::Curve#vertices":{"description":"The vertices method retrieves a collection of all vertices in a curve.","name":"vertices","namespace":"Sketchup::Curve","path":"Sketchup::Curve#vertices","type":"instance_method","visibility":"public","return":[null,"vertices - a collection of the vertices"]},"Sketchup::DefinitionList":{"description":"A DefinitionList object holds a list of all of the ComponentDefinition\nobjects in a model. This class contains methods for  adding and retrieving\ndefinitions from the list.","name":"DefinitionList","namespace":"Sketchup","path":"Sketchup::DefinitionList","type":"class","visibility":"public"},"Sketchup::DefinitionList#[]":{"description":"The [] method is used to retrieve a component definition from the list. You\ncan give an integer index in the range 0 to length, a string which\nrepresents the GUID (a unique internal identifier), or a string that is\nthe name of the definition.","name":"[]","namespace":"Sketchup::DefinitionList","path":"Sketchup::DefinitionList#[]","type":"instance_method","visibility":"public"},"Sketchup::DefinitionList#add":{"description":"The add method is used to add a new component definition to the definition\nlist with the given name.","name":"add","namespace":"Sketchup::DefinitionList","path":"Sketchup::DefinitionList#add","type":"instance_method","visibility":"public","parameters":[["def_name",["String"],"The new component definition to add to the definition\nlist."]],"return":[["Sketchup::ComponentDefinition"],"the ComponentDefinition object\nthat was added (if successful)"]},"Sketchup::DefinitionList#add_observer":{"description":"The add_observer method is used to add an observer to the current object.","name":"add_observer","namespace":"Sketchup::DefinitionList","path":"Sketchup::DefinitionList#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::DefinitionList#at":{"description":"The [] method is used to retrieve a component definition from the list. You\ncan give an integer index in the range 0 to length, a string which\nrepresents the GUID (a unique internal identifier), or a string that is\nthe name of the definition.","name":"at","namespace":"Sketchup::DefinitionList","path":"Sketchup::DefinitionList#at","type":"instance_method","visibility":"public"},"Sketchup::DefinitionList#count":{"description":"","name":"count","namespace":"Sketchup::DefinitionList","path":"Sketchup::DefinitionList#count","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::DefinitionList#each":{"description":"The each method is used to iterate through all of the component definitions\nin the definition list.\n\nThrows an exception if there are no component definitions.","name":"each","namespace":"Sketchup::DefinitionList","path":"Sketchup::DefinitionList#each","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::DefinitionList#length":{"description":"The {#length} method is used to retrieve number of component definitions in\nthe list.","name":"length","namespace":"Sketchup::DefinitionList","path":"Sketchup::DefinitionList#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::DefinitionList#load":{"description":"The load method is used to load a component from a file.","name":"load","namespace":"Sketchup::DefinitionList","path":"Sketchup::DefinitionList#load","type":"instance_method","visibility":"public","parameters":[["path",["String"],"The path where the component definition file is located."]],"return":[["Sketchup::ComponentDefinition"],"the loaded ComponentDefinition\nobject if successful"]},"Sketchup::DefinitionList#load_from_url":{"description":"The load_from_url method loads a component from a location specified by\nstring url. This method throws an exception if an url string is not\ngiven, or an error occurs during retrieval from url and a\nload_handler was not given. Optional second parameter load_handler can be\nused to pass in a ruby object that responds to the following methods:\n\n  - cancelled?(a_boolean)\n  - onPercentChange(a_float)\n  - onSuccess()\n  - onFailure(message_string)","name":"load_from_url","namespace":"Sketchup::DefinitionList","path":"Sketchup::DefinitionList#load_from_url","type":"instance_method","visibility":"public","parameters":[["url",["String"],"URL to load a .skp file from."],["load_handler",["Object"],"(optional)\nRuby object that has methods defined\nas described in the load_from_url details."]],"return":[["Sketchup::ComponentDefinition"],"the loaded ComponentDefinition\nobject if successful"]},"Sketchup::DefinitionList#purge_unused":{"description":"The purge_unused method is used to remove the unused component definitions.","name":"purge_unused","namespace":"Sketchup::DefinitionList","path":"Sketchup::DefinitionList#purge_unused","type":"instance_method","visibility":"public","return":[["Sketchup::DefinitionList"],""]},"Sketchup::DefinitionList#remove_observer":{"description":"The remove_observer method is used to remove an observer from the current\nobject.","name":"remove_observer","namespace":"Sketchup::DefinitionList","path":"Sketchup::DefinitionList#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::DefinitionList#size":{"description":"The {#size} method is an alias for {#length}.","name":"size","namespace":"Sketchup::DefinitionList","path":"Sketchup::DefinitionList#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::DefinitionList#unique_name":{"description":"The unique_name is used to generate a unique name for a definition based on\na base_name string. For example, a base_name of \"Joe\" might return \"Joe #2\"","name":"unique_name","namespace":"Sketchup::DefinitionList","path":"Sketchup::DefinitionList#unique_name","type":"instance_method","visibility":"public","parameters":[["base_name",["String"],""]],"return":[["String"],"the unique name."]},"Sketchup::DefinitionObserver":{"description":"This observer interface is implemented to react to component definition\nevents. To implement this observer, create a Ruby class of this type,\noverride the desired methods, and add an instance of the observer to the\ndefinitions of interests.","name":"DefinitionObserver","namespace":"Sketchup","path":"Sketchup::DefinitionObserver","type":"class","visibility":"public"},"Sketchup::DefinitionObserver#onComponentInstanceAdded":{"description":"The {#onComponentInstanceAdded} method is called when a new component\ninstance is added to a model.","name":"onComponentInstanceAdded","namespace":"Sketchup::DefinitionObserver","path":"Sketchup::DefinitionObserver#onComponentInstanceAdded","type":"instance_method","visibility":"public","parameters":[["definition",["Sketchup::ComponentDefinition"],"The definition of the\nadded instance"],["instance",["Sketchup::ComponentInstance"],"The added instance"]],"return":[["nil"],""]},"Sketchup::DefinitionObserver#onComponentInstanceRemoved":{"description":"The {#onComponentInstanceRemoved} method is called when a component\ninstance is removed from a model.\n\nimplemented, this method is fired on a Move + Copy operation even\nthough no {Sketchup::ComponentInstance} is apparently removed.","name":"onComponentInstanceRemoved","namespace":"Sketchup::DefinitionObserver","path":"Sketchup::DefinitionObserver#onComponentInstanceRemoved","type":"instance_method","visibility":"public","parameters":[["instance",["Sketchup::ComponentInstance"],"The removed instance"],["definition",["Sketchup::ComponentDefinition"],"The definition of the\ninstance removed"]],"return":[["nil"],""]},"Sketchup::DefinitionsObserver":{"description":"This observer interface is implemented to react to events on a definitions\ncollection. To implement this observer, create a Ruby class of this type,\noverride the desired methods, and add an instance of the observer to the\ncollection of interest.","name":"DefinitionsObserver","namespace":"Sketchup","path":"Sketchup::DefinitionsObserver","type":"class","visibility":"public"},"Sketchup::DefinitionsObserver#onComponentAdded":{"description":"The {#onComponentAdded} method is called whenever a definition is added to\nthe definitions collection.","name":"onComponentAdded","namespace":"Sketchup::DefinitionsObserver","path":"Sketchup::DefinitionsObserver#onComponentAdded","type":"instance_method","visibility":"public","parameters":[["definitions",["Sketchup::DefinitionList"],null],["definition",["Sketchup::ComponentDefinition"],null]],"return":[["nil"],""]},"Sketchup::DefinitionsObserver#onComponentPropertiesChanged":{"description":"The {#onComponentPropertiesChanged} method is called whenever a definition's\nname or description are changed.\n\nThis does not fire when \"Glue To\", \"Cuts Opening\", or \"Face Camera\" settings\nare changed.","name":"onComponentPropertiesChanged","namespace":"Sketchup::DefinitionsObserver","path":"Sketchup::DefinitionsObserver#onComponentPropertiesChanged","type":"instance_method","visibility":"public","parameters":[["definitions",["Sketchup::DefinitionList"],null],["definition",["Sketchup::ComponentDefinition"],null]],"return":[["nil"],""]},"Sketchup::DefinitionsObserver#onComponentRemoved":{"description":"The {#onComponentAdded} method is called whenever a definition is removed\nfrom the definitions collection.","name":"onComponentRemoved","namespace":"Sketchup::DefinitionsObserver","path":"Sketchup::DefinitionsObserver#onComponentRemoved","type":"instance_method","visibility":"public","parameters":[["definition",["Sketchup::ComponentDefinition"],null],["definitions",["Sketchup::DefinitionList"],null]],"return":[["nil"],""]},"Sketchup::DefinitionsObserver#onComponentTypeChanged":{"description":"The {#onComponentTypeChanged} event is fired when a component is converted to\na group or vice versa. (In the underlying implementation, {Sketchup::Group}s\nare just a special kind of definition that is allowed to only have a single\ninstance.)","name":"onComponentTypeChanged","namespace":"Sketchup::DefinitionsObserver","path":"Sketchup::DefinitionsObserver#onComponentTypeChanged","type":"instance_method","visibility":"public","parameters":[["definitions",["Sketchup::DefinitionList"],null],["definition",["Sketchup::ComponentDefinition"],null]],"return":[["nil"],""]},"Sketchup::Dimension":{"description":"The Dimension class provides base functionality for classes DimensionLinear\nand DimensionRadial. It's not instantiable.","name":"Dimension","namespace":"Sketchup","path":"Sketchup::Dimension","type":"class","visibility":"public"},"Sketchup::Dimension#add_observer":{"description":"The add_observer method is used to add a DimensionObserver to the dimension.","name":"add_observer","namespace":"Sketchup::Dimension","path":"Sketchup::Dimension#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",null,"A DimensionObserver."]],"return":[null,"true if successful, false if unsuccessful."]},"Sketchup::Dimension#arrow_type":{"description":"The arrow_type method retrieves the current arrow type of the dimension.\nValid arrow types are class constants:\n- +Dimension::ARROW_NONE,+\n- +Dimension::ARROW_SLASH+\n- +Dimension::ARROW_DOT+\n- +Dimension::ARROW_CLOSED+\n- +Dimension::ARROW_OPEN+","name":"arrow_type","namespace":"Sketchup::Dimension","path":"Sketchup::Dimension#arrow_type","type":"instance_method","visibility":"public","return":[null,"a numerical representation of the arrow type"]},"Sketchup::Dimension#arrow_type=":{"description":"The arrow_type= method sets the arrow type of the dimension.\nValid arrow types are class constants:\n- +Dimension::ARROW_NONE,+\n- +Dimension::ARROW_SLASH+\n- +Dimension::ARROW_DOT+\n- +Dimension::ARROW_CLOSED+\n- +Dimension::ARROW_OPEN+","name":"arrow_type=","namespace":"Sketchup::Dimension","path":"Sketchup::Dimension#arrow_type=","type":"instance_method","visibility":"public","parameters":[["type",null,"a numerical representation of the arrow type."]],"return":[null,"the arrow type that was set."]},"Sketchup::Dimension#has_aligned_text=":{"description":"The has_aligned_text= method accepts true or false indicating whether the\ndimension's text is aligned to the dimension or to the screen.","name":"has_aligned_text=","namespace":"Sketchup::Dimension","path":"Sketchup::Dimension#has_aligned_text=","type":"instance_method","visibility":"public","parameters":[["value",["Boolean"],null]],"return":[null,"the alignment flag that was set"]},"Sketchup::Dimension#has_aligned_text?":{"description":"The has_aligned_text method is used to determine whether the dimension's text\nis aligned to the dimension or to the screen.","name":"has_aligned_text?","namespace":"Sketchup::Dimension","path":"Sketchup::Dimension#has_aligned_text?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if text is aligned to the dimension.\nFalse if dimension text is aligned to the screen."]},"Sketchup::Dimension#plane":{"description":"The plane method is used to retrieve the plane of the dimension. Refer to the\nGeom module for information on how planes are represented.","name":"plane","namespace":"Sketchup::Dimension","path":"Sketchup::Dimension#plane","type":"instance_method","visibility":"public","return":[null,"the plane of the dimension"]},"Sketchup::Dimension#remove_observer":{"description":"The remove_observer method is used to remove a DimensionObserver from the\ndimension. Note that, if the given observer responds to 'onTextChanged', it\nwill be removed as a DimensionObserver. If not, the base\nEntity.remove_observer will be called.","name":"remove_observer","namespace":"Sketchup::Dimension","path":"Sketchup::Dimension#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",null,"A DimensionObserver."]],"return":[null,"true if successful, false if unsuccessful."]},"Sketchup::Dimension#text":{"description":"The text method is used to retrieve the dimension text.","name":"text","namespace":"Sketchup::Dimension","path":"Sketchup::Dimension#text","type":"instance_method","visibility":"public","return":[null,"the dimension text"]},"Sketchup::Dimension#text=":{"description":"The text= method is used to set an override on the dimension text.","name":"text=","namespace":"Sketchup::Dimension","path":"Sketchup::Dimension#text=","type":"instance_method","visibility":"public","parameters":[["text",["String"],null]],"return":[null,"the newly set text override"]},"Sketchup::Dimension::ARROW_CLOSED":{"description":"Constants","name":"ARROW_CLOSED","namespace":"Sketchup::Dimension","path":"Sketchup::Dimension::ARROW_CLOSED","type":"constant","return":null,"visibility":"public"},"Sketchup::Dimension::ARROW_DOT":{"description":"Stub value.","name":"ARROW_DOT","namespace":"Sketchup::Dimension","path":"Sketchup::Dimension::ARROW_DOT","type":"constant","return":null,"visibility":"public"},"Sketchup::Dimension::ARROW_NONE":{"description":"Stub value.","name":"ARROW_NONE","namespace":"Sketchup::Dimension","path":"Sketchup::Dimension::ARROW_NONE","type":"constant","return":null,"visibility":"public"},"Sketchup::Dimension::ARROW_OPEN":{"description":"Stub value.","name":"ARROW_OPEN","namespace":"Sketchup::Dimension","path":"Sketchup::Dimension::ARROW_OPEN","type":"constant","return":null,"visibility":"public"},"Sketchup::Dimension::ARROW_SLASH":{"description":"Stub value.","name":"ARROW_SLASH","namespace":"Sketchup::Dimension","path":"Sketchup::Dimension::ARROW_SLASH","type":"constant","return":null,"visibility":"public"},"Sketchup::DimensionLinear":{"description":"The DimensionLinear class represents linear dimensions.","name":"DimensionLinear","namespace":"Sketchup","path":"Sketchup::DimensionLinear","type":"class","visibility":"public"},"Sketchup::DimensionLinear#aligned_text_position":{"description":"The aligned_text_position method returns the text position for dimensions\nwith aligned text (i.e. has_aligned_text? returns true).\nValid values are class constants:\n- DimensionLinear::ALIGNED_TEXT_ABOVE\n- DimensionLinear::ALIGNED_TEXT_CENTER\n- DimensionLinear::ALIGNED_TEXT_OUTSIDE","name":"aligned_text_position","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear#aligned_text_position","type":"instance_method","visibility":"public","return":[null,"an integer specifying the text position"]},"Sketchup::DimensionLinear#aligned_text_position=":{"description":"The aligned_text_position= method is used to set the text position for\ndimensions with aligned text (i.e. has_aligned_text? returns true).\nValid values are class constants:\n- DimensionLinear::ALIGNED_TEXT_ABOVE\n- DimensionLinear::ALIGNED_TEXT_CENTER\n- DimensionLinear::ALIGNED_TEXT_OUTSIDE","name":"aligned_text_position=","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear#aligned_text_position=","type":"instance_method","visibility":"public","parameters":[["pos",null,"an integer specifying the text position"]],"return":[null,"the text position that was set."]},"Sketchup::DimensionLinear#end":{"description":"The end method returns the point or entity the dimension is referencing at\nits end.","name":"end","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear#end","type":"instance_method","visibility":"public","return":[null,"Array - An array of size 2:\n- Entity being referenced or nil if not associated.\n- Point3d that contains the referenced location."]},"Sketchup::DimensionLinear#end=":{"description":"The end= method is used to set the end point of the dimension and/or the\nentity it is referencing.","name":"end=","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear#end=","type":"instance_method","visibility":"public","parameters":[["pt_or_entity",null,"This parameter can take several forms:\n- an InputPoint\n- a Point3d\n- a Vertex\n- a ConstructionPoint\n- an array of size 2: [Edge, Point3d along the edge]\n- an array of size 2: [ConstructionLine, Point3d along the line]"]],"return":[null,"self"]},"Sketchup::DimensionLinear#offset_vector":{"description":"The offset_vector method returns the parallel offset vector from the\nreference line to the dimension line measured from the 'start' reference\npoint.","name":"offset_vector","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear#offset_vector","type":"instance_method","visibility":"public","return":[null,"offset vector as a Vector3d"]},"Sketchup::DimensionLinear#offset_vector=":{"description":"The offset_vector= method is used to set the parallel offset vector from the\nreference line to the dimension line measured from the 'start' reference\npoint.","name":"offset_vector=","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear#offset_vector=","type":"instance_method","visibility":"public","parameters":[["vec",null,"the offset vector to be set, either a Vector3d or in\narray form."]],"return":[null,"the offset vector that was set"]},"Sketchup::DimensionLinear#start":{"description":"The start method returns the point or entity the dimension is referencing at\nits start.","name":"start","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear#start","type":"instance_method","visibility":"public","return":[null,"Array - An array of size 2:\n- Entity being referenced or nil if not associated.\n- Point3d that contains the referenced location."]},"Sketchup::DimensionLinear#start=":{"description":"The start= method is used to set the start point of the dimension and/or\nthe entity it is referencing.","name":"start=","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear#start=","type":"instance_method","visibility":"public","parameters":[["pt_or_entity",null,"This parameter can take several forms:\n- an InputPoint\n- a Point3d\n- a Vertex\n- a ConstructionPoint\n- an array of size 2: [Edge, Point3d along the edge]\n- an array of size 2: [ConstructionLine, Point3d along the line]"]],"return":[null,"self"]},"Sketchup::DimensionLinear#text_position":{"description":"The text_position method returns the position of the text along the dimension\nline. Valid values are class constants:\n- DimensionLinear::TEXT_OUTSIDE_START\n- DimensionLinear::TEXT_CENTERED\n- DimensionLinear::TEXT_OUTSIDE_END","name":"text_position","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear#text_position","type":"instance_method","visibility":"public","return":[null,"an integer specifying the text position"]},"Sketchup::DimensionLinear#text_position=":{"description":"The text_position= method is used to set the position of the text along the\ndimension line. Valid values are class constants:\n- DimensionLinear::TEXT_OUTSIDE_START\n- DimensionLinear::TEXT_CENTERED\n- DimensionLinear::TEXT_OUTSIDE_END","name":"text_position=","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear#text_position=","type":"instance_method","visibility":"public","parameters":[["pos",null,"an integer specifying the text position"]],"return":[null,"the text position that was set."]},"Sketchup::DimensionLinear::ALIGNED_TEXT_ABOVE":{"description":"Constants","name":"ALIGNED_TEXT_ABOVE","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear::ALIGNED_TEXT_ABOVE","type":"constant","return":null,"visibility":"public"},"Sketchup::DimensionLinear::ALIGNED_TEXT_CENTER":{"description":"Stub value.","name":"ALIGNED_TEXT_CENTER","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear::ALIGNED_TEXT_CENTER","type":"constant","return":null,"visibility":"public"},"Sketchup::DimensionLinear::ALIGNED_TEXT_OUTSIDE":{"description":"Stub value.","name":"ALIGNED_TEXT_OUTSIDE","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear::ALIGNED_TEXT_OUTSIDE","type":"constant","return":null,"visibility":"public"},"Sketchup::DimensionLinear::TEXT_CENTERED":{"description":"Stub value.","name":"TEXT_CENTERED","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear::TEXT_CENTERED","type":"constant","return":null,"visibility":"public"},"Sketchup::DimensionLinear::TEXT_OUTSIDE_END":{"description":"Stub value.","name":"TEXT_OUTSIDE_END","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear::TEXT_OUTSIDE_END","type":"constant","return":null,"visibility":"public"},"Sketchup::DimensionLinear::TEXT_OUTSIDE_START":{"description":"Stub value.","name":"TEXT_OUTSIDE_START","namespace":"Sketchup::DimensionLinear","path":"Sketchup::DimensionLinear::TEXT_OUTSIDE_START","type":"constant","return":null,"visibility":"public"},"Sketchup::DimensionObserver":{"description":"This observer interface is implemented to react to changes in dimension text.","name":"DimensionObserver","namespace":"Sketchup","path":"Sketchup::DimensionObserver","type":"class","visibility":"public"},"Sketchup::DimensionObserver#onTextChanged":{"description":"The {#onTextChanged} method is invoked when your entity is erased.","name":"onTextChanged","namespace":"Sketchup::DimensionObserver","path":"Sketchup::DimensionObserver#onTextChanged","type":"instance_method","visibility":"public","parameters":[["dimension",["Sketchup::Dimension"],"The dimension object whose text has\nbeen changed."]]},"Sketchup::DimensionRadial":{"description":"The DimensionRadial class represents radius and diameter dimensions on\narcs and circles.","name":"DimensionRadial","namespace":"Sketchup","path":"Sketchup::DimensionRadial","type":"class","visibility":"public"},"Sketchup::DimensionRadial#arc_curve":{"description":"The arc_curve method returns the ArcCurve object to which this dimension is\nattached.","name":"arc_curve","namespace":"Sketchup::DimensionRadial","path":"Sketchup::DimensionRadial#arc_curve","type":"instance_method","visibility":"public","return":[null,"The ArcCurve object to which the dimension is attached."]},"Sketchup::DimensionRadial#arc_curve=":{"description":"The arc_curve= method is used to set the ArcCurve object to which this\ndimension is attached.","name":"arc_curve=","namespace":"Sketchup::DimensionRadial","path":"Sketchup::DimensionRadial#arc_curve=","type":"instance_method","visibility":"public","parameters":[["arc_curve",null,"The ArcCurve object to which the dimension is to be\nattached."]],"return":[null,"The ArcCurve object to which the dimension was attached."]},"Sketchup::DimensionRadial#leader_break_point":{"description":"The leader_break_point method returns the break point on the leader where the\ndimension text is attached.","name":"leader_break_point","namespace":"Sketchup::DimensionRadial","path":"Sketchup::DimensionRadial#leader_break_point","type":"instance_method","visibility":"public","return":[null,"the leader break point"]},"Sketchup::DimensionRadial#leader_break_point=":{"description":"The leader_break_point= method is used to set the break point on the leader\nwhere the dimension text is attached.","name":"leader_break_point=","namespace":"Sketchup::DimensionRadial","path":"Sketchup::DimensionRadial#leader_break_point=","type":"instance_method","visibility":"public","parameters":[["point",null,"the point to be set"]],"return":[null,"the point that was set"]},"Sketchup::DimensionRadial#leader_points":{"description":"The leader_points method returns the 3 significant points along the dimension\nline in world coordinates.","name":"leader_points","namespace":"Sketchup::DimensionRadial","path":"Sketchup::DimensionRadial#leader_points","type":"instance_method","visibility":"public","return":[null,"Array of 3 Point3d objects. Point 0: leader break point,\nwhere the text extension attaches. Point 1: attach point,\nwhere leader touches the arc/circle. Point 2: opposite\npoint, where the diameter leader touches the circle on\nthe opposite side."]},"Sketchup::Drawingelement":{"description":"Drawingelement is a base class for an item in the model that can be\ndisplayed. These items include edges, construction points, construction\nlines, and images. Arc curves and arcs are not included because they are not\ndrawing elements by themselves, but are a composition of edges.","name":"Drawingelement","namespace":"Sketchup","path":"Sketchup::Drawingelement","type":"class","visibility":"public"},"Sketchup::Drawingelement#bounds":{"description":"The bounds method is used to retrieve the BoundingBox for an drawing\nelement.","name":"bounds","namespace":"Sketchup::Drawingelement","path":"Sketchup::Drawingelement#bounds","type":"instance_method","visibility":"public","return":[["Geom::BoundingBox"],"A BoundingBox object if successful"]},"Sketchup::Drawingelement#casts_shadows=":{"description":"The casts_shadows= method is used to set the Drawingelement to cast shadows.","name":"casts_shadows=","namespace":"Sketchup::Drawingelement","path":"Sketchup::Drawingelement#casts_shadows=","type":"instance_method","visibility":"public","parameters":[["casts",["Boolean"],"true if you want the Drawingelement object to cast\nshadows, false if you do not want the Drawingelement\nobject to cast shadows."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Drawingelement#casts_shadows?":{"description":"The casts_shadows? method is used to determine if the Drawingelement is\ncasting shadows.","name":"casts_shadows?","namespace":"Sketchup::Drawingelement","path":"Sketchup::Drawingelement#casts_shadows?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the Drawingelement is casting shadows,\nfalse if unsuccessful."]},"Sketchup::Drawingelement#erase!":{"description":"The erase! method is used to erase an element from the model.\n\nErasing an Edge also erases all of the Face objects that use the Edge.","name":"erase!","namespace":"Sketchup::Drawingelement","path":"Sketchup::Drawingelement#erase!","type":"instance_method","visibility":"public","return":[["Boolean"],"true if successful, false if unsuccessful"]},"Sketchup::Drawingelement#hidden=":{"description":"The hidden= method is used to set the hidden status for an element.","name":"hidden=","namespace":"Sketchup::Drawingelement","path":"Sketchup::Drawingelement#hidden=","type":"instance_method","visibility":"public","parameters":[["hidden",["Boolean"],"true if you want to hide the element, false if you do\nnot want to hide the element."]],"return":[["Boolean"],"true if the element has been hidden, false if\nthe element has not been hidden."]},"Sketchup::Drawingelement#hidden?":{"description":"The hidden? method is used to determine if the element is hidden.\n\nHidden elements are still in the model, but they are not displayed.","name":"hidden?","namespace":"Sketchup::Drawingelement","path":"Sketchup::Drawingelement#hidden?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if hidden, false if not hidden"]},"Sketchup::Drawingelement#layer":{"description":"The layer method is used to retrieve the Layer object of the drawing\nelement.","name":"layer","namespace":"Sketchup::Drawingelement","path":"Sketchup::Drawingelement#layer","type":"instance_method","visibility":"public","return":[["Sketchup::Layer"],"a layer object if successful"]},"Sketchup::Drawingelement#layer=":{"description":"The layer= method is used to set the layer for the drawing element.\n\nAn exception is raised if you give a string that doesn't match any layer\nname.","name":"layer=","namespace":"Sketchup::Drawingelement","path":"Sketchup::Drawingelement#layer=","type":"instance_method","visibility":"public","parameters":[["layer",["Sketchup::Layer","String"],"A layer or layer name."]],"return":[["Sketchup::Layer","String"],"the new Layer object if successful"]},"Sketchup::Drawingelement#material":{"description":"The material method is used to retrieve the material for the drawing\nelement.","name":"material","namespace":"Sketchup::Drawingelement","path":"Sketchup::Drawingelement#material","type":"instance_method","visibility":"public","return":[["Sketchup::Material"],"the Material object if successful"]},"Sketchup::Drawingelement#material=":{"description":"The material= method is used to set the material for the drawing\nelement.","name":"material=","namespace":"Sketchup::Drawingelement","path":"Sketchup::Drawingelement#material=","type":"instance_method","visibility":"public","parameters":[["material",["Sketchup::Material","String","Sketchup::Color"],"A Material, name of a material, Color, or name of a\ncolor."]],"return":[["Sketchup::Material","String","Sketchup::Color"],"the new Material object if successful"]},"Sketchup::Drawingelement#receives_shadows=":{"description":"The receive_shadows= method is used to set the Drawingelement to receive\nshadows.","name":"receives_shadows=","namespace":"Sketchup::Drawingelement","path":"Sketchup::Drawingelement#receives_shadows=","type":"instance_method","visibility":"public","parameters":[["receive",["Boolean"],"true if you want the Drawingelement object to\nreceive shadows, false if not."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Drawingelement#receives_shadows?":{"description":"The receive_shadows? method is used to determine if the Drawingelement is\nreceiving shadows.","name":"receives_shadows?","namespace":"Sketchup::Drawingelement","path":"Sketchup::Drawingelement#receives_shadows?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the Drawingelement is receiving\nshadows, false if unsuccessful."]},"Sketchup::Drawingelement#visible=":{"description":"The visible= method is used to set the visible status for an element. This\nmethod performs an opposite function to the hidden= method.","name":"visible=","namespace":"Sketchup::Drawingelement","path":"Sketchup::Drawingelement#visible=","type":"instance_method","visibility":"public","parameters":[["visibility",["Boolean"],"true if you want to hide the element, false if not"]],"return":[["Boolean"],"true if the element has been hidden, false if\nthe element has not been hidden."]},"Sketchup::Drawingelement#visible?":{"description":"The visible? method is used to get the visible status for an element.","name":"visible?","namespace":"Sketchup::Drawingelement","path":"Sketchup::Drawingelement#visible?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if visible, false if not"]},"Sketchup::Edge":{"description":"The Edge class contains methods modifying and extracting information for\nedges.","name":"Edge","namespace":"Sketchup","path":"Sketchup::Edge","type":"class","visibility":"public"},"Sketchup::Edge#all_connected":{"description":"The all_connected method retrieves all of the entities connected to an edge,\nincluding the edge itself.","name":"all_connected","namespace":"Sketchup::Edge","path":"Sketchup::Edge#all_connected","type":"instance_method","visibility":"public","return":[["Array<Sketchup::Edge, Sketchup::Face>"],"the edge and entities connected to that edge"]},"Sketchup::Edge#common_face":{"description":"The common_face method is used to identify a face that is common to two\nedges.","name":"common_face","namespace":"Sketchup::Edge","path":"Sketchup::Edge#common_face","type":"instance_method","visibility":"public","parameters":[["edge2",["Sketchup::Edge"],"The face whose edge you are checking for commonality."]],"return":[["Sketchup::Face","nil"],"the Face object that is common to the two edges\nif successful"]},"Sketchup::Edge#curve":{"description":"The curve method is used to get the Curve object that this edge belongs\nto, if any. Note that if the edge is part of an arc instead of a random\ncurve, then this method will return an ArcCurve object.","name":"curve","namespace":"Sketchup::Edge","path":"Sketchup::Edge#curve","type":"instance_method","visibility":"public","return":[["Sketchup::ArcCurve","nil"],"returns a Curve or ArcCurve object if it is a\ncurve, nil if it is not a curve"]},"Sketchup::Edge#end":{"description":"The end method is used to retrieve the Vertex object at the end of the edge.","name":"end","namespace":"Sketchup::Edge","path":"Sketchup::Edge#end","type":"instance_method","visibility":"public","return":[["Sketchup::Vertex"],"a Vertex object if successful"]},"Sketchup::Edge#explode_curve":{"description":"The explode_curve method is used to explode an edge as though it were an\nArcCurve.","name":"explode_curve","namespace":"Sketchup::Edge","path":"Sketchup::Edge#explode_curve","type":"instance_method","visibility":"public","return":[["Sketchup::Edge"],"an exploded edge object if successful"]},"Sketchup::Edge#faces":{"description":"The faces method is used to retrieve all of the faces common to the edge.","name":"faces","namespace":"Sketchup::Edge","path":"Sketchup::Edge#faces","type":"instance_method","visibility":"public","return":[["Array<Sketchup::Faces>"],"an array of Face objects if successful, false\nif unsuccessful"]},"Sketchup::Edge#find_faces":{"description":"The find_faces method is used to create all of the Faces that can be created\nwith this edge. For example, if you use the API to draw three edges that form\na triangle, the face between them will not show up because you've only drawn\nthe edges, but if you call find_faces on one of the edges, the triangle will\nbe filled in.","name":"find_faces","namespace":"Sketchup::Edge","path":"Sketchup::Edge#find_faces","type":"instance_method","visibility":"public","return":[["Integer"],"the number of faces found"]},"Sketchup::Edge#length":{"description":"The length method is used to retrieve the length of an edge in current\nunits.\n\nYou can pass in an optional Transformation (or an array that can represent a\ntransformation), to correct for a parent group's transformation. For example,\nif an edge is inside of a group that is scaled to 200%, the length method\nwill return the unscaled length of the edge. So by passing a 200%\ntransformation object to this method, you can account for that to get the\n\"visual\" length of the edge.","name":"length","namespace":"Sketchup::Edge","path":"Sketchup::Edge#length","type":"instance_method","visibility":"public"},"Sketchup::Edge#line":{"description":"The line method is used to retrieve the line defined by the edge. Lines in\nSketchUp aren't visible entities but geometric constructs represented by\nan Array with a Point3d and a Vector3d. See the Geom module and the Array\nclass for more information on lines.","name":"line","namespace":"Sketchup::Edge","path":"Sketchup::Edge#line","type":"instance_method","visibility":"public","return":[["Array(Geom::Point3d, Geom::Vector3d)"],"an array with a Point3d object\nand a Vector3d object."]},"Sketchup::Edge#other_vertex":{"description":"The other_vertex method is used to find the opposite vertex given one vertex\nof the edge.","name":"other_vertex","namespace":"Sketchup::Edge","path":"Sketchup::Edge#other_vertex","type":"instance_method","visibility":"public","parameters":[["vertex1",["Sketchup::Vertex"],"One of the Vertex objects associated with the edge."]],"return":[["Sketchup::Vertex"],"the other Vertex object associated with the edge"]},"Sketchup::Edge#reversed_in?":{"description":"The {#reversed_in?} method is used to determine if the edge is reversed in\na face's bounding loop.","name":"reversed_in?","namespace":"Sketchup::Edge","path":"Sketchup::Edge#reversed_in?","type":"instance_method","visibility":"public","parameters":[["face",["Sketchup::Face"],"The face that is bounded by the edge."]],"return":[["Boolean"],"+true+ if the edge is reversed, +false+ if it is not\nreversed. +nil+ if the edge and face is not connected."]},"Sketchup::Edge#smooth=":{"description":"The {#smooth=} method is used to set the edge to be smooth.\n\nA smooth edge will cause the shading between connected faces to blend to a\nsmooth transition. The edge will still be visible.","name":"smooth=","namespace":"Sketchup::Edge","path":"Sketchup::Edge#smooth=","type":"instance_method","visibility":"public","parameters":[["value",["Boolean"],null]],"return":[["Boolean"],""]},"Sketchup::Edge#smooth?":{"description":"The {#smooth?} method is used to retrieve the current smooth setting for an\nedge.\n\nA smooth edge will cause the shading between connected faces to blend to a\nsmooth transition. The edge will still be visible.","name":"smooth?","namespace":"Sketchup::Edge","path":"Sketchup::Edge#smooth?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Sketchup::Edge#soft=":{"description":"The {#soft=} method is used to set the edge to be soft.\n\nA soft edge will cause the connected faces to be treated as a surface. This\nmeans that if you have Hidden Geometry off and select one face it will also\nselect all faces connected with soft edges. A soft edge will also appear\nhidden.","name":"soft=","namespace":"Sketchup::Edge","path":"Sketchup::Edge#soft=","type":"instance_method","visibility":"public","parameters":[["value",["Boolean"],null]],"return":[["Boolean"],""]},"Sketchup::Edge#soft?":{"description":"The {#soft?} method is used to retrieve the current smooth setting for an\nedge.\n\nA soft edge will cause the connected faces to be treated as a surface. This\nmeans that if you have Hidden Geometry off and select one face it will also\nselect all faces connected with soft edges. A soft edge will also appear\nhidden.","name":"soft?","namespace":"Sketchup::Edge","path":"Sketchup::Edge#soft?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Sketchup::Edge#split":{"description":"The split method is used to  to split an edge into to or more distinct\nedges. If a Point3d is given, it must be a point that is on the Edge.\n\nIf a Float is given, it is a number between 0 and 1 that gives the\nrelative position along the edge at which to split it.  For example,\nedge.split(0.5) will split the Edge at its midpoint. This split position\nis measured from the Edge.start.\n\nReturns the new Edge that was created as a result of splitting this one.","name":"split","namespace":"Sketchup::Edge","path":"Sketchup::Edge#split","type":"instance_method","visibility":"public","parameters":[["position",["Geom::Point3d"],"A Point3d object whose location is along the edge, or\na Float between 0.0 and 1.0 defining how far along the\nedge to split."]],"return":[["Sketchup::Edge"],"the new Edge object that was split off\nthe old one if successful"]},"Sketchup::Edge#start":{"description":"The end method is used to retrieve the Vertex object at the start of the\nedge.","name":"start","namespace":"Sketchup::Edge","path":"Sketchup::Edge#start","type":"instance_method","visibility":"public","return":[["Sketchup::Vertex"],"a Vertex object if successful"]},"Sketchup::Edge#used_by?":{"description":"The used_by? method is used to see if an edge is used by a given Face or\nVertex.","name":"used_by?","namespace":"Sketchup::Edge","path":"Sketchup::Edge#used_by?","type":"instance_method","visibility":"public","parameters":[["element",["Sketchup::Vertex","Sketchup::Face"],"A Vertex or Face object."]],"return":[["Boolean"],"true if the face belongs to the element,\nfalse if not."]},"Sketchup::Edge#vertices":{"description":"The vertices method is used to retrieve the vertices on the edge.","name":"vertices","namespace":"Sketchup::Edge","path":"Sketchup::Edge#vertices","type":"instance_method","visibility":"public","return":[["Array<Sketchup::Vertex>"],"an array of Vertex objects"]},"Sketchup::EdgeUse":{"description":"The EdgeUse class defines how an Edge is used in the definition of a Face.","name":"EdgeUse","namespace":"Sketchup","path":"Sketchup::EdgeUse","type":"class","visibility":"public"},"Sketchup::EdgeUse#edge":{"description":"The edge method is used to retrieve the edge for the edge use.","name":"edge","namespace":"Sketchup::EdgeUse","path":"Sketchup::EdgeUse#edge","type":"instance_method","visibility":"public","return":[null,"edge - an Edge object used by this edge use"]},"Sketchup::EdgeUse#end_vertex_normal":{"description":"The end_vertex_normal method is used to retrieve the vertex normal for the\nend point of this edgeuse.","name":"end_vertex_normal","namespace":"Sketchup::EdgeUse","path":"Sketchup::EdgeUse#end_vertex_normal","type":"instance_method","visibility":"public","return":[null,"vector3d - a vector3d object if successful."]},"Sketchup::EdgeUse#face":{"description":"The face method is used to retrieve the face used by this edge use.","name":"face","namespace":"Sketchup::EdgeUse","path":"Sketchup::EdgeUse#face","type":"instance_method","visibility":"public","return":[null,"face - a Face object used by this edge use"]},"Sketchup::EdgeUse#loop":{"description":"The loop method is used to retrieve the loop for this edge use.","name":"loop","namespace":"Sketchup::EdgeUse","path":"Sketchup::EdgeUse#loop","type":"instance_method","visibility":"public","return":[null,"loop - a Loop object that contains this edge use."]},"Sketchup::EdgeUse#next":{"description":"The next method is used to retrieve the next edge use in a loop.","name":"next","namespace":"Sketchup::EdgeUse","path":"Sketchup::EdgeUse#next","type":"instance_method","visibility":"public","return":[null,"edgeuse - the next EdgeUse object in a loop"]},"Sketchup::EdgeUse#partners":{"description":"The partners method is used to retrieve all of the partner edge uses that\nuses the same edge.","name":"partners","namespace":"Sketchup::EdgeUse","path":"Sketchup::EdgeUse#partners","type":"instance_method","visibility":"public","return":[null,"array - an array of partner Edge Use objects."]},"Sketchup::EdgeUse#previous":{"description":"The previous method is used to retrieve the previous edge use in a loop.","name":"previous","namespace":"Sketchup::EdgeUse","path":"Sketchup::EdgeUse#previous","type":"instance_method","visibility":"public","return":[null,"edgeuse - the previous Edge Use object in the loop"]},"Sketchup::EdgeUse#reversed?":{"description":"The reversed? method is used to determine if the edge direction is opposite\nof the edge use direction. The edge use direction is the same as the loop\nit belongs to.","name":"reversed?","namespace":"Sketchup::EdgeUse","path":"Sketchup::EdgeUse#reversed?","type":"instance_method","visibility":"public","return":[["Boolean"],"boolean - true if reversed, false if not reversed."]},"Sketchup::EdgeUse#start_vertex_normal":{"description":"The start_vertex_normal method is used to retrieve the vertex normal for\nthe start point of this edgeuse.","name":"start_vertex_normal","namespace":"Sketchup::EdgeUse","path":"Sketchup::EdgeUse#start_vertex_normal","type":"instance_method","visibility":"public","return":[null,"vector3d - a vector3d object if successful."]},"Sketchup::Entities":{"description":"The Entities class is a container class for all entities in a model (it is a\ncollection of Entity objects).","name":"Entities","namespace":"Sketchup","path":"Sketchup::Entities","type":"class","visibility":"public"},"Sketchup::Entities#[]":{"description":"The {#[]} method is used to retrieve an entity by its index in an array of\nentities. The index is a number between +0+ and entities.length - 1. In\ngeneral, it is preferable to use the {#each} method to iterate though all\nof the entities in the collection as it will be much more efficient.","name":"[]","namespace":"Sketchup::Entities","path":"Sketchup::Entities#[]","type":"instance_method","visibility":"public","parameters":[["entity_index",["Integer"],"The index for a specific entity."]],"return":[["Sketchup::Entity","nil"],"an {Sketchup::Entity} object if successful,\n+nil+ if not found"]},"Sketchup::Entities#active_section_plane":{"description":"The active_section_plane method is used to access the currently active\nsection plane in the Entities object.","name":"active_section_plane","namespace":"Sketchup::Entities","path":"Sketchup::Entities#active_section_plane","type":"instance_method","visibility":"public","return":[["Sketchup::SectionPlane","nil"],"the active SectionPlane or nil if none is active."]},"Sketchup::Entities#active_section_plane=":{"description":"The active_section_plane= method is used to set the active section plane in\nthe Entities object.","name":"active_section_plane=","namespace":"Sketchup::Entities","path":"Sketchup::Entities#active_section_plane=","type":"instance_method","visibility":"public","parameters":[["sec_plane",["Sketchup::SectionPlane","nil"],"the SectionPlane object to be set active. Pass nil to\ndeactivate any active section plane."]],"return":[["Sketchup::SectionPlane","nil"],"the SectionPlane object that was set active."]},"Sketchup::Entities#add_3d_text":{"description":"The add_3d_text is used to create 3D text. It will be added as edges and\nfaces drawn at the origin.","name":"add_3d_text","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_3d_text","type":"instance_method","visibility":"public","parameters":[["string",["String"],"The text to create."],["alignment",["Integer"],"Number that defines the alignment. There are constants\ncalled TextAlignLeft, TextAlignRight, and\nTextAlignCenter that can be passed."],["font",["String"],"font name."],["is_bold",["Boolean"],"(optional) true for bold."],["is_italic",["Boolean"],"(optional) true for italic."],["letter_height",["Numeric"],"(optional)\nHeight of the text in inches."],["tolerance",["Numeric"],"(optional)\nTolerance of the curve creation. Defaults to\n0.0, which creates the highest possible curve quality."],["z",["Numeric"],"(optional)\nz position in inches."],["is_filled",["Boolean"],"(optional)\ntrue for filled, which will put a face between the edges of the letters."],["extrusion",["Numeric"],"(optional)\nExtrusion depth in inches. Defaults to 0.0."]],"return":[["Boolean"],"true if successful"]},"Sketchup::Entities#add_arc":{"description":"The add_arc method is used to create an arc curve segment.","name":"add_arc","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_arc","type":"instance_method","visibility":"public"},"Sketchup::Entities#add_circle":{"description":"The add_circle method is used to create a circle.","name":"add_circle","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_circle","type":"instance_method","visibility":"public","parameters":[["center",["Geom::Point3d"],"A Point3d object representing the center ."],["normal",["Geom::Vector3d"],"A Vector3d object representing normal for the arc."],["numsegs",["Integer"],"The number of segments."],["radius",["Numeric"],"The radius of the arc."]],"return":[["Array<Sketchup::Edge>"],"an Array object containing edges if successful"]},"Sketchup::Entities#add_cline":{"description":"The add_cline method is used to create a construction line.","name":"add_cline","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_cline","type":"instance_method","visibility":"public","parameters":[["start_point",["Geom::Point3d"],"A Point3d object where the line will start."],["end_point",["Geom::Point3d"],"If a Vector3d, then an infinite line passing through\nthe start_point will be created in that direction. If a\nPoint3d, then a finite line will be created between the\ntwo points."],["stipple",["String"],"Stipple pattern. See ConstructionLine.stipple\nfor acceptable patterns."]],"return":[["Sketchup::ConstructionLine"],"a ConstructionLine object if\nsuccessful"]},"Sketchup::Entities#add_cpoint":{"description":"The add_cpoint method is used to create a construction point.","name":"add_cpoint","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_cpoint","type":"instance_method","visibility":"public","parameters":[["point",["Geom::Point3d"],"A Point3d object."]],"return":[["Sketchup::ConstructionPoint"],"a ConstructionPoint object if\nsuccessful"]},"Sketchup::Entities#add_curve":{"description":"The add_curve method is used to create a curve from a collection of edges.\n\nThe arguments are either Points or an Array of Points. At least 2 points are\nrequired.","name":"add_curve","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_curve","type":"instance_method","visibility":"public","parameters":[["pts_or_array",["Array<Geom::Point3d>"],"You can pass either a series of Point3d objects or a\nsingle array containing Point3d objects."]],"return":[["Array<Sketchup::Edge>"],"an array of Edges that make up the curve if\nsuccessful"]},"Sketchup::Entities#add_dimension_linear":{"description":"The add_dimension_linear method adds a linear dimension to the entities.","name":"add_dimension_linear","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_dimension_linear","type":"instance_method","visibility":"public","parameters":[["start_pt_or_entity",["Geom::Point3d","Sketchup::Entity"],"the reference point and/or entity at the start of\nthe dimension. This parameter can take several\nforms:"],["end_pt_or_entity",["Geom::Point3d","Sketchup::Entity"],"the reference point and/or entity at the end\nof the dimension. This parameter takes the exact\nsame forms as 'start_pt_or_entity'."],["offset_vector",["Geom::Vector3d"],"the parallel offset vector from the reference line\nto the dimension line measured from the 'start'\nreference point."]],"return":[["Sketchup::DimensionLinear"],"the created dimension"]},"Sketchup::Entities#add_dimension_radial":{"description":"The add_dimension_radial method adds a radial dimension (i.e arc/circle\nradius/diameter dimension) to the entities.","name":"add_dimension_radial","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_dimension_radial","type":"instance_method","visibility":"public","parameters":[["arc_curve",["Sketchup::ArcCurve"],"an ArcCurve object to which the dimension is to be\nattached."],["leader_break_pt",["Geom::Point3d"],"a Point3d for the break point on the leader where the\ndimension text is attached."]],"return":[["Sketchup::DimensionRadial"],"the created dimension"]},"Sketchup::Entities#add_edges":{"description":"The add_edges method is used to add a set of connected edges to the entities\narray.","name":"add_edges","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_edges","type":"instance_method","visibility":"public","parameters":[["pts_or_array",["Array<Geom::Point3d>"],"You can pass either a series of Point3d objects or a\nsingle array containing Point3d objects."]],"return":[["Array<Sketchup::Edge>"],"an array of Edge objects if successful"]},"Sketchup::Entities#add_face":{"description":"The add_face method is used to create a face. You can call this method a\nnumber of ways:\n\n  - entities.add_face(edge1, edge2, edge3, ...)\n  - entities.add_face(edgearray)\n  - entities.add_face(pt1, pt2, pt3, ...)\n  - entities.add_face([pt1, pt2, pt3,...])\n  - entities.add_face(curve)\n\nFor the last form that takes a Curve, the curve must be closed - like a\ncircle.\n\nNote that a special case exists for any face created on the ground plane, in\nwhich case the vertex order is ignored and the face is always facing down.","name":"add_face","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_face","type":"instance_method","visibility":"public","parameters":[["some_entities",["Array<Sketchup::Edge>","Array<Geom::Point3d>","Sketchup::ArcCurve"],"Either a series of Edge or Point3d objects, an array of\nPoint3d objects, or a closed Curve."]],"return":[["Sketchup::Face"],"a Face object if successful"]},"Sketchup::Entities#add_faces_from_mesh":{"description":"The {#add_faces_from_mesh} method is used to add Face objects to the\ncollection of entities from a PolygonMesh.\n\nThe +smooth_flags+ parameter can contain any of the following values if\npassed. The constants were added in SketchUp 2014. For previous versions,\nnumeric values have to be specified instead of the Ruby constants.\n\n- 0: {Geom::PolygonMesh::NO_SMOOTH_OR_HIDE}\n- 1: {Geom::PolygonMesh::HIDE_BASED_ON_INDEX} (Negative point index will hide the edge.)\n- 2: {Geom::PolygonMesh::SOFTEN_BASED_ON_INDEX} (Negative point index will soften the edge.)\n- 4: {Geom::PolygonMesh::AUTO_SOFTEN} (Interior edges are softened.)\n- 8: {Geom::PolygonMesh::SMOOTH_SOFT_EDGES} (All soft edges will also be smooth.)\n\nThe 3rd and 4th parameters will accept a {sketchup::Material} object or a\nstring name of a material currently in the model.","name":"add_faces_from_mesh","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_faces_from_mesh","type":"instance_method","visibility":"public","parameters":[["polygon_mesh",["Geom::PolygonMesh"],null],["smooth_flags",["Integer"],"flags for softening and smoothing of edges."],["b_material",["Sketchup::Material","String"],"material to paint back faces with."],["f_material",["Sketchup::Material","String"],"material to paint front faces with."]],"return":[["Integer"],"Number of faces created"]},"Sketchup::Entities#add_group":{"description":"The add_group method is used to create an empty group or a group with\nentities.\n\nNOTE: calling add_group with entities in its parameters has been known to\ncrash SketchUp before version 8.0. It is preferable to create an empty\ngroup and then add things to its Entities collection.","name":"add_group","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_group","type":"instance_method","visibility":"public","parameters":[["entities",["Array<Sketchup::Entity>"],"an entities collection to add to the group."]],"return":[["Sketchup::Group"],"the new group"]},"Sketchup::Entities#add_image":{"description":"The add_image method is used to add an image to the collection of entities.\n\nThe width and height are measured in model units (i.e. inches). If the\nheight is not given, then it is computed from the width to preserve the\naspect ratio of the image.","name":"add_image","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_image","type":"instance_method","visibility":"public","parameters":[["filename",["String"],"A filename for the image file."],["point",["Geom::Point3d"],"A Point3d object representing the insertion point of\nthe image."],["height",["Numeric"],"(optional)\nheight for the image if you want to control\nwidth and height independently."],["width",["Numeric"],"Width for the image."]],"return":[["Sketchup::Image"],"an Image object if successful."]},"Sketchup::Entities#add_instance":{"description":"The add_instance method adds a component instance to the collection of\nentities.","name":"add_instance","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_instance","type":"instance_method","visibility":"public","parameters":[["definition",["Sketchup::ComponentDefinition"],"A ComponentDefinition object."],["transform",["Geom::Transformation"],"A Transformation object."]],"return":[["Sketchup::ComponentInstance"],"a ComponentInstance object if successful"]},"Sketchup::Entities#add_line":{"description":"The add_line method is used to add an edge to the collection of entities.\nThis is not to be confused with the concept of a \"line\" from a geometric\nsense, which is an invisible object represented by an Array of a point\nand a vector. (See the Array class for more information on geometric lines in\nSketchUp.)\n\nThis method is the same as add_edges method, but returns a single edge.","name":"add_line","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_line","type":"instance_method","visibility":"public","parameters":[["point1",["Geom::Point3d"],"Point3d object representing the edge's starting point."],["point2",["Geom::Point3d"],"Point3d object representing the edge's ending point."]],"return":[["Sketchup::Edge"],"a Edge object if successful"]},"Sketchup::Entities#add_ngon":{"description":"The add_ngon method is used to create a multi-sided polygon.","name":"add_ngon","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_ngon","type":"instance_method","visibility":"public","parameters":[["center",["Geom::Point3d"],"A Point3d object representing the center of the polygon."],["normal",["Geom::Vector3d"],"A Vector3d object."],["numsides",["Integer"],"The number of sides for the polygon."],["radius",["Numeric"],"A radius."]],"return":[["Array<Sketchup::Edge>"],"an array of Edges that make up the polygon if\nsuccessful"]},"Sketchup::Entities#add_observer":{"description":"The add_observer method is used to add an observer to the current object.","name":"add_observer","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Entities#add_section_plane":{"description":"The add_section_plane method adds a section plane object to the entities.","name":"add_section_plane","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_section_plane","type":"instance_method","visibility":"public","parameters":[["plane",null,"the geometric plane where the SectionPlane object is to\nbe created. Refer to the Geom module for information on\nhow planes are represented."]],"return":[["Sketchup::SectionPlane","nil"],"the created SectionPlane object if \nsuccessful, nil on failure."]},"Sketchup::Entities#add_text":{"description":"The add_text method adds a note or label text entity to the entities","name":"add_text","namespace":"Sketchup::Entities","path":"Sketchup::Entities#add_text","type":"instance_method","visibility":"public","parameters":[["text",["String"],"The text string to add."],["point",["Geom::Point3d"],"A Point3d object representing the insertion point."],["vector",["Geom::Vector3d"],"(optional)\nvector representing an arrow leader."]],"return":[["Sketchup::Text"],"a Text object if successful"]},"Sketchup::Entities#at":{"description":"The {#at} method is an alias for {#[]}.","name":"at","namespace":"Sketchup::Entities","path":"Sketchup::Entities#at","type":"instance_method","visibility":"public","parameters":[["entity_index",["Integer"],"The index for a specific entity."]],"return":[["Sketchup::Entity","nil"],""]},"Sketchup::Entities#clear!":{"description":"The clear! method is used to remove all entities from the collection of\nentities.","name":"clear!","namespace":"Sketchup::Entities","path":"Sketchup::Entities#clear!","type":"instance_method","visibility":"public","return":[["Boolean"],"true if successful, false if unsuccessful"]},"Sketchup::Entities#count":{"description":"","name":"count","namespace":"Sketchup::Entities","path":"Sketchup::Entities#count","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Entities#each":{"description":"The each method is used to iterate through the entities in the collection of\nentities.","name":"each","namespace":"Sketchup::Entities","path":"Sketchup::Entities#each","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::Entities#erase_entities":{"description":"The erase_entities method is used to erase one or more entities from the\nmodel.","name":"erase_entities","namespace":"Sketchup::Entities","path":"Sketchup::Entities#erase_entities","type":"instance_method","visibility":"public","parameters":[["entities",["Array<Sketchup::Entity>"],"An entity or array of entities."]],"return":[["nil"],""]},"Sketchup::Entities#fill_from_mesh":{"description":"The {#fill_from_mesh} method is used to add faces and edges to the collection\nof entities from a {Geom::PolygonMesh}. It requires that the entities\ncollection to be filled is empty. It has higher performance than\n{#add_faces_from_mesh}, but does less error checking as it builds the\ngeometry.\n\nThe +smooth_flags+ parameter can contain any of the following values if\npassed. The constants were added in SketchUp 2014. For previous versions,\nnumeric values have to be specified instead of the Ruby constants:\n\n- 0: {Geom::PolygonMesh::NO_SMOOTH_OR_HIDE}\n- 1: {Geom::PolygonMesh::HIDE_BASED_ON_INDEX} (Negative point index will hide the edge.)\n- 2: {Geom::PolygonMesh::SOFTEN_BASED_ON_INDEX} (Negative point index will soften the edge.)\n- 4: {Geom::PolygonMesh::AUTO_SOFTEN} (Interior edges are softened.)\n- 8: {Geom::PolygonMesh::SMOOTH_SOFT_EDGES} (All soft edges will also be smooth.)\n\nThe 4rd and 5th parameters will accept a {Sketchup::Material} object or a\nstring name of a material currently in the model.","name":"fill_from_mesh","namespace":"Sketchup::Entities","path":"Sketchup::Entities#fill_from_mesh","type":"instance_method","visibility":"public","parameters":[["weld_vertices",["Boolean"],"This argument has no effect and is kept for\ncompatibility reasons. Points are always\nmerged."],["polygon_mesh",["Geom::PolygonMesh"],""],["smooth_flags",["Integer"],"flags for softening and smoothing of edges."],["b_material",["Sketchup::Material","String"],"material to paint back faces with."],["f_material",["Sketchup::Material","String"],"material to paint front faces with."]],"return":[["Boolean"],""]},"Sketchup::Entities#intersect_with":{"description":"The intersect_with method is used to intersect an entities, component\ninstance, or group object with a entities object.","name":"intersect_with","namespace":"Sketchup::Entities","path":"Sketchup::Entities#intersect_with","type":"instance_method","visibility":"public","parameters":[["transform1",["Geom::Transformation"],"The transformation for this entities object."],["recurse",["Boolean"],"true if you want this entities object to be recursed\n(intersection lines will be put inside of groups and\ncomponents within this entities object)."],["entities1",["Sketchup::Entities"],"The entities object where you want the intersection\nlines to appear."],["entities2",["Sketchup::Entity","Array<Sketchup::Entity>"],"A single entity, or an array of entities."],["transform2",["Geom::Transformation"],"The transformation for entities1."],["hidden",["Boolean"],"true if you want hidden geometry in this entities\nobject to be used in the intersection."]],"return":[["nil"],""]},"Sketchup::Entities#length":{"description":"The {#length} method is used to retrieve the number of entities in the\ncollection of entities.","name":"length","namespace":"Sketchup::Entities","path":"Sketchup::Entities#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Entities#model":{"description":"The model method is used to retrieve the model that contains the collection\nof entities.","name":"model","namespace":"Sketchup::Entities","path":"Sketchup::Entities#model","type":"instance_method","visibility":"public","return":[["Sketchup::Model"],"the model that contains the collection of\nentities if successful."]},"Sketchup::Entities#parent":{"description":"The parent method is used to retrieve the parent or object that contains the\ncollection of entities. A parent can be either a Model or\nComponentDefinition object.","name":"parent","namespace":"Sketchup::Entities","path":"Sketchup::Entities#parent","type":"instance_method","visibility":"public","return":[["Sketchup::ComponentDefinition","Sketchup::Model"],"the object that \ncontains the collection of entities if successful"]},"Sketchup::Entities#remove_observer":{"description":"The remove_observer method is used to remove an observer from the current\nobject.","name":"remove_observer","namespace":"Sketchup::Entities","path":"Sketchup::Entities#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Entities#size":{"description":"The {#size} method is an alias for the {#length} method.","name":"size","namespace":"Sketchup::Entities","path":"Sketchup::Entities#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Entities#transform_by_vectors":{"description":"The transform_by_vectors method is used to apply several vectors to several\nsub-entities all at once.","name":"transform_by_vectors","namespace":"Sketchup::Entities","path":"Sketchup::Entities#transform_by_vectors","type":"instance_method","visibility":"public","parameters":[["sub_entities",["Array<Sketchup::Entity>"],"An array of entities to transform."],["vectors",["Array<Geom::Vector3d>"],"An array of vectors to apply."]],"return":[["Sketchup::Entities"],""]},"Sketchup::Entities#transform_entities":{"description":"The transform_entities method is used to apply a transform to several\nsub-entities all at once.\n\nImportant note: If you apply a transformation to entities that are\nnot in the current edit context (i.e. faces that are inside a group),\nSketchUp will apply the transformation incorrectly, since the geometry\nhas one origin and the current edit context has another. You can correct\nfor this by watching the Model.edit_transform and Model.active_path. See\nModelObserver.onActivePathChanged for more information.","name":"transform_entities","namespace":"Sketchup::Entities","path":"Sketchup::Entities#transform_entities","type":"instance_method","visibility":"public","parameters":[["transform",["Geom::Transformation"],"The Transformation to apply."],["entities",["Array<Sketchup::Entity>"],"An array or series of entities to transform."]],"return":[["Boolean"],"results of the transform."]},"Sketchup::EntitiesObserver":{"description":"This observer interface is implemented to react to {Sketchup::Entities}\ncollection events. To implement this observer, create a Ruby class of this\ntype, override the desired methods, and add an instance of the observer to\nthe objects of interests.","name":"EntitiesObserver","namespace":"Sketchup","path":"Sketchup::EntitiesObserver","type":"class","visibility":"public"},"Sketchup::EntitiesObserver#onActiveSectionPlaneChanged":{"description":"The {#onActiveSectionPlaneChanged} method is invoked when a section plane\nwithin this entities is activated or the active one is deactivated.","name":"onActiveSectionPlaneChanged","namespace":"Sketchup::EntitiesObserver","path":"Sketchup::EntitiesObserver#onActiveSectionPlaneChanged","type":"instance_method","visibility":"public","parameters":[["entities",["Sketchup::Entities"],null]],"return":[["nil"],""]},"Sketchup::EntitiesObserver#onElementAdded":{"description":"The onElementAdded method is invoked when a single element is added\nto the {Sketchup::Entities} collection.","name":"onElementAdded","namespace":"Sketchup::EntitiesObserver","path":"Sketchup::EntitiesObserver#onElementAdded","type":"instance_method","visibility":"public","parameters":[["entities",["Sketchup::Entities"],null],["entity",["Sketchup::Entity"],null]],"return":[["nil"],""]},"Sketchup::EntitiesObserver#onElementModified":{"description":"The {#onElementModified} method is invoked whenever one or more elements in\nthe collection are modified.","name":"onElementModified","namespace":"Sketchup::EntitiesObserver","path":"Sketchup::EntitiesObserver#onElementModified","type":"instance_method","visibility":"public","parameters":[["entities",["Sketchup::Entities"],null],["entity",["Sketchup::Entity"],null]],"return":[["nil"],""]},"Sketchup::EntitiesObserver#onElementRemoved":{"description":"The {#onElementRemoved} method is invoked when a single element is removed\nfrom the {Sketchup::Entities} collection.  Note that the entity has been\ndeleted and should not be used in anyway except to know that the entity has\nbeen deleted.","name":"onElementRemoved","namespace":"Sketchup::EntitiesObserver","path":"Sketchup::EntitiesObserver#onElementRemoved","type":"instance_method","visibility":"public","parameters":[["entities",["Sketchup::Entities"],null],["entity_id",["Sketchup::Entity"],"The id of the entity that was\ndeleted/removed."]],"return":[["nil"],""]},"Sketchup::EntitiesObserver#onEraseEntities":{"description":"The {#onEraseEntities} method is invoked when one or more entities are erased.","name":"onEraseEntities","namespace":"Sketchup::EntitiesObserver","path":"Sketchup::EntitiesObserver#onEraseEntities","type":"instance_method","visibility":"public","parameters":[["entities",["Sketchup::Entities"],null]],"return":[["nil"],""]},"Sketchup::Entity":{"description":"This is the base class for all SketchUp entities. Entities are basically\nanything that can be contained in a model, including Drawingelements\nsuch as Edges, SectionPlanes, Groups, etc. and entities that relate to\nthose Drawingelements, such as Loops, Layers, etc.\n\nKeep in mind that the methods below are available on all subclasses.\nFor example, an Edge's parent class is Drawingelement, and a\nDrawingelement's parent class is Entity. Therefore an Edge has all of the\nmethods defined in Drawingelement and Entity.\n\nThe Object.is_a? method is the common way of determining what sort of Entity\nyou're dealing with.","name":"Entity","namespace":"Sketchup","path":"Sketchup::Entity","type":"class","visibility":"public"},"Sketchup::Entity#add_observer":{"description":"The add_observer method is used to add an observer to the current object.","name":"add_observer","namespace":"Sketchup::Entity","path":"Sketchup::Entity#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Entity#attribute_dictionaries":{"description":"The attribute_dictionaries method is used to retrieve the\nAttributeDictionaries collection attached to the entity.","name":"attribute_dictionaries","namespace":"Sketchup::Entity","path":"Sketchup::Entity#attribute_dictionaries","type":"instance_method","visibility":"public","return":[["Sketchup::AttributeDictionaries","nil"],"the AttributeDictionaries\nobject associated with the entity, or nil if there are\nno attribute_dictionary objects associated with the\nmodel. Care must be taken if nil is returned, for\nexample: invoking attribute_dictionaries.length will\nthrow a NoMethodError exception, not return 0."]},"Sketchup::Entity#attribute_dictionary":{"description":"The attribute_dictionary method is used to retrieve an attribute dictionary\nwith a given name that is attached to an Entity.","name":"attribute_dictionary","namespace":"Sketchup::Entity","path":"Sketchup::Entity#attribute_dictionary","type":"instance_method","visibility":"public","parameters":[["name",["String"],"The name of the attribute dictionary."],["create",["Boolean"],"boolean, if set to true then the attribute\ndictionary will be created if it does not exist."]],"return":[["Sketchup::AttributeDictionary","nil"],"- an AttributeDictionary object\nif successful, or nil if there is no attribute dictionary"]},"Sketchup::Entity#delete_attribute":{"description":"The delete_attribute method is used to delete an attribute from an entity.\n\nIf only the dictionary_name is given, then it deletes the entire\nAttributeDictionary. Otherwise, delete_attribute deletes the attribute with\nthe given key from the given dictionary.","name":"delete_attribute","namespace":"Sketchup::Entity","path":"Sketchup::Entity#delete_attribute","type":"instance_method","visibility":"public"},"Sketchup::Entity#deleted?":{"description":"The deleted? method is used to determine if your entity is still valid (not\ndeleted by another script, for example.)","name":"deleted?","namespace":"Sketchup::Entity","path":"Sketchup::Entity#deleted?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if deleted, false if not deleted"]},"Sketchup::Entity#entityID":{"description":"The entityID method is used to retrieve a unique ID assigned to an entity.\n\nThe entityID is not persistent between sessions.","name":"entityID","namespace":"Sketchup::Entity","path":"Sketchup::Entity#entityID","type":"instance_method","visibility":"public","return":[["Integer"],"the id for the Entity object"]},"Sketchup::Entity#get_attribute":{"description":"The get_attribute method is used to retrieve the value of an attribute in\nthe entity's attribute dictionary.\n\nIf the third parameter, default_value, is not passed and there is no\nattribute that matches the given name, it returns nil.\n\nIf default_value is provided and there is no matching attribute it returns\nthe given value. It does not create an attribute with that name though.","name":"get_attribute","namespace":"Sketchup::Entity","path":"Sketchup::Entity#get_attribute","type":"instance_method","visibility":"public","parameters":[["dict_name",["String"],"The name of an attribute dictionary."],["key",["String"],"An attribute key."],["default_value",["Object"],"A default value to return if no attribute\nis found."]],"return":[["Object"],"the retrieved value"]},"Sketchup::Entity#inspect":{"description":"The to_s method is used to retrieve the string representation of the entity.","name":"inspect","namespace":"Sketchup::Entity","path":"Sketchup::Entity#inspect","type":"instance_method","visibility":"public","return":[["String"],"the string representation of the entity if\nsuccessful"]},"Sketchup::Entity#model":{"description":"The model method is used to retrieve the model for the entity.","name":"model","namespace":"Sketchup::Entity","path":"Sketchup::Entity#model","type":"instance_method","visibility":"public","return":[["Sketchup::Model"],"the model that contains the Entity object"]},"Sketchup::Entity#parent":{"description":"The parent method is used to retrieve the parent of the entity.\n\nThe parent will be a ComponentDefinition, a Group, or a Model, whatever\nthe entity is contained within.","name":"parent","namespace":"Sketchup::Entity","path":"Sketchup::Entity#parent","type":"instance_method","visibility":"public","return":[["Sketchup::ComponentDefinition","Sketchup::Model"],"a Entity object \nrepresenting the parent of this entity"]},"Sketchup::Entity#persistent_id":{"description":"The {#persistent_id} method is used to retrieve a unique persistent id\nassigned to an entity.\n\nThe persistent id persistent between sessions.","name":"persistent_id","namespace":"Sketchup::Entity","path":"Sketchup::Entity#persistent_id","type":"instance_method","visibility":"public","return":[["Integer"],"the id for the {Sketchup::Entity} object"]},"Sketchup::Entity#remove_observer":{"description":"The remove_observer method is used to remove an observer from the current\nobject.","name":"remove_observer","namespace":"Sketchup::Entity","path":"Sketchup::Entity#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Entity#set_attribute":{"description":"The set attribute is used to set the value of an attribute in an attribute\ndictionary with the given name.\n\nThis method will create a new AttributeDictionary if none exists.\n\nNote, a bug prior to SketchUp 2015 would corrupt the model if the key is\nan empty string. This also includes values that will evaluate to empty\nstrings, such as nil.","name":"set_attribute","namespace":"Sketchup::Entity","path":"Sketchup::Entity#set_attribute","type":"instance_method","visibility":"public","parameters":[["dict_name",["String"],"The name of an attribute dictionary."],["key",["String"],"An attribute key."],["value",["Object"],"The value for the attribute."]],"return":[["Object"],"the newly set value if successful"]},"Sketchup::Entity#to_s":{"description":"The to_s method is used to retrieve the string representation of the entity.","name":"to_s","namespace":"Sketchup::Entity","path":"Sketchup::Entity#to_s","type":"instance_method","visibility":"public","return":[["String"],"the string representation of the entity if\nsuccessful"]},"Sketchup::Entity#typename":{"description":"The typename method retrieves the type of the entity, which will be a string\nsuch as \"Face\", \"Edge\", or \"Group\".","name":"typename","namespace":"Sketchup::Entity","path":"Sketchup::Entity#typename","type":"instance_method","visibility":"public","return":[["String"],"the type of the entity"]},"Sketchup::Entity#valid?":{"description":"The valid? method is used to determine if your entity is still valid (not\ndeleted by another script, for example.)\n\nThis method is functionally identical to the deleted? method.","name":"valid?","namespace":"Sketchup::Entity","path":"Sketchup::Entity#valid?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if deleted, false if not deleted"]},"Sketchup::EntityObserver":{"description":"This observer interface is implemented to react to entity events. To\nimplement this observer, create a Ruby class of this type, override the\ndesired methods, and add an instance of the observer to the entity of\ninterests.","name":"EntityObserver","namespace":"Sketchup","path":"Sketchup::EntityObserver","type":"class","visibility":"public"},"Sketchup::EntityObserver#onChangeEntity":{"description":"The {#onChangeEntity} method is invoked when your entity is modified.","name":"onChangeEntity","namespace":"Sketchup::EntityObserver","path":"Sketchup::EntityObserver#onChangeEntity","type":"instance_method","visibility":"public","parameters":[["entity",["Sketchup::Entity"],null]],"return":[["nil"],""]},"Sketchup::EntityObserver#onEraseEntity":{"description":"The {#onEraseEntity} method is invoked when your entity is erased.","name":"onEraseEntity","namespace":"Sketchup::EntityObserver","path":"Sketchup::EntityObserver#onEraseEntity","type":"instance_method","visibility":"public","parameters":[["entity",["Sketchup::Entity"],null]],"return":[["nil"],""]},"Sketchup::ExtensionsManager":{"description":"The ExtensionsManager class provides a way of accessing the\nSketchupExtensions that have been registered via the\nSketchup.register_extension method.\n\nThere is only one ExtensionsManager available. You access it via the\nSketchup.extensions method.","name":"ExtensionsManager","namespace":"Sketchup","path":"Sketchup::ExtensionsManager","type":"class","visibility":"public"},"Sketchup::ExtensionsManager#[]":{"description":"The [] method is used to get an extension by name, index or ID.","name":"[]","namespace":"Sketchup::ExtensionsManager","path":"Sketchup::ExtensionsManager#[]","type":"instance_method","visibility":"public","parameters":[["index_or_name",null,"The index, name or ID of the SketchupExtension object."]],"return":[null,"extension - an SketchupExtension object if\nsuccessful, otherwise nil."]},"Sketchup::ExtensionsManager#count":{"description":"","name":"count","namespace":"Sketchup::ExtensionsManager","path":"Sketchup::ExtensionsManager#count","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::ExtensionsManager#each":{"description":"The each method is used to iterate through extensions.","name":"each","namespace":"Sketchup::ExtensionsManager","path":"Sketchup::ExtensionsManager#each","type":"instance_method","visibility":"public","return":[null,"nil"]},"Sketchup::ExtensionsManager#keys":{"description":"The keys method is used to get a list of keys in the ExtensionsManager,\nwhich are the same as the names of the extensions.","name":"keys","namespace":"Sketchup::ExtensionsManager","path":"Sketchup::ExtensionsManager#keys","type":"instance_method","visibility":"public","return":[null,"keys - Array of string keys"]},"Sketchup::ExtensionsManager#length":{"description":"The {#length} method returns the number of {SketchupExtension} objects inside\nthis ExtensionsManager.","name":"length","namespace":"Sketchup::ExtensionsManager","path":"Sketchup::ExtensionsManager#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::ExtensionsManager#size":{"description":"The {#size} method is an alias of {#length}.","name":"size","namespace":"Sketchup::ExtensionsManager","path":"Sketchup::ExtensionsManager#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Face":{"description":"Faces in SketchUp are flat, 2-sided polygons with 3 or more sides.","name":"Face","namespace":"Sketchup","path":"Sketchup::Face","type":"class","visibility":"public"},"Sketchup::Face#all_connected":{"description":"The all_connected method retrieves all of the entities connected to a face.","name":"all_connected","namespace":"Sketchup::Face","path":"Sketchup::Face#all_connected","type":"instance_method","visibility":"public","return":[["Array<Sketchup::Edge, Sketchup::Face>"],"the entities connected to the face"]},"Sketchup::Face#area":{"description":"The area method is used to retrieve the area of a face in current units.\n\nYou can pass in an optional Transformation (or an array that can represent a\ntransformation), to correct for a parent group's transformation. For example,\nif a face is inside of a group that is scaled to 200%, the area method will\nreturn the unscaled area of the face. So by passing a 200% transformation\nobject to this method, you can account for that to get the \"visual\" area\nof the face.","name":"area","namespace":"Sketchup::Face","path":"Sketchup::Face#area","type":"instance_method","visibility":"public"},"Sketchup::Face#back_material":{"description":"The back_material method is used to retrieve the material assigned to the\nback side of the face.","name":"back_material","namespace":"Sketchup::Face","path":"Sketchup::Face#back_material","type":"instance_method","visibility":"public","return":[["Sketchup::Material","nil"],"a Material object representing the material\non the back of the face (if successful)"]},"Sketchup::Face#back_material=":{"description":"The back_material= method is used to set the material assigned to the back\nside of the face.","name":"back_material=","namespace":"Sketchup::Face","path":"Sketchup::Face#back_material=","type":"instance_method","visibility":"public","parameters":[["material",["Sketchup::Material"],"A Material object or the name of a valid material."]],"return":[["Sketchup::Material"],"the name of the valid material or the new\nMaterial object (if successful)"]},"Sketchup::Face#classify_point":{"description":"The classify_point method is used to determine if a given Point3d is on the\nreferenced Face.\n\nIt is important that return value comparisons be made against the\nsymbolic constants (i.e. {Sketchup::Face::PointUnknown},\n{Sketchup::Face::PointInside}, {Sketchup::Face::PointOnVertex}, etc.) rather\nthan the absolute integer values as these values may change from one\nrelease to the next.","name":"classify_point","namespace":"Sketchup::Face","path":"Sketchup::Face#classify_point","type":"instance_method","visibility":"public","parameters":[["point",["Geom::Point3d"],"A Point3d."]],"return":[["Integer"],"an integer describing where a Point3d is in\nrelation to the referenced Face."]},"Sketchup::Face#edges":{"description":"The edges method is used to get an array of edges that bound the face.","name":"edges","namespace":"Sketchup::Face","path":"Sketchup::Face#edges","type":"instance_method","visibility":"public","return":[["Array<Sketchup::Edge>"],"an array of Edge objects (if successful)"]},"Sketchup::Face#followme":{"description":"The {#followme} method is used to create a shape by making the face follow\nalong an array of edges.","name":"followme","namespace":"Sketchup::Face","path":"Sketchup::Face#followme","type":"instance_method","visibility":"public"},"Sketchup::Face#get_UVHelper":{"description":"The get_UVHelper object is used to retrieve a UVHelper object for use in\ntexture manipulation on a face.","name":"get_UVHelper","namespace":"Sketchup::Face","path":"Sketchup::Face#get_UVHelper","type":"instance_method","visibility":"public","parameters":[["front",["Boolean"],"True if you want the texture coordinates for the front\nface, false if not. Defaults to true."],["back",["Boolean"],"True if you want the texture coordinates for the back\nface, false if not. Defaults to true."],["texturewriter",["Sketchup::TextureWriter"],"An optional TextureWriter object."]],"return":[["Sketchup::UVHelper"],"a UVHelper object"]},"Sketchup::Face#get_glued_instances":{"description":"The get_glued_instances method returns an Array any ComponentInstances\nthat are glued to the face.","name":"get_glued_instances","namespace":"Sketchup::Face","path":"Sketchup::Face#get_glued_instances","type":"instance_method","visibility":"public","return":[["Array<Sketchup::ComponentInstance, Sketchup::Group>"],"An array of ComponentInstance objects that\nare currently glued to the face."]},"Sketchup::Face#get_texture_projection":{"description":"The get_texture_projection method will return a vector representing the\nprojection for either the front or back side of the face.","name":"get_texture_projection","namespace":"Sketchup::Face","path":"Sketchup::Face#get_texture_projection","type":"instance_method","visibility":"public","parameters":[["frontside",["Boolean"],"true for front side, false for back side."]],"return":[["Geom::Vector3d"],"a vector on success, nil on failure."]},"Sketchup::Face#loops":{"description":"The loops method is used to get an array of all of the loops that bound the\nface.","name":"loops","namespace":"Sketchup::Face","path":"Sketchup::Face#loops","type":"instance_method","visibility":"public","return":[["Array<Sketchup::Loop>"],"an array of Loop objects if successful"]},"Sketchup::Face#material":{"description":"The material method is used to retrieve the material assigned to the\nfront of the face. (This method is inherited from the Drawingelement\nparent class.)","name":"material","namespace":"Sketchup::Face","path":"Sketchup::Face#material","type":"instance_method","visibility":"public","return":[["Sketchup::Material","nil"],"a Material object representing the material\non the front of the face (if successful)"]},"Sketchup::Face#material=":{"description":"The material= method is used to set the material assigned to the front\nside of the face. (This method is inherited from the Drawingelement\nparent class.)","name":"material=","namespace":"Sketchup::Face","path":"Sketchup::Face#material=","type":"instance_method","visibility":"public","parameters":[["material",["Sketchup::Material"],"A Material object or the name of a valid material."]],"return":[["Sketchup::Material"],"the name of the valid material or the new\nMaterial object (if successful)"]},"Sketchup::Face#mesh":{"description":"The mesh method creates a polygon mesh that represents the face. See the\n{Geom::PolygonMesh} class for more information.\n\nValid flags are:\n\n- +0+: Include PolygonMeshPoints,\n- +1+: Include PolygonMeshUVQFront,\n- +2+: Include PolygonMeshUVQBack,\n- +4+: Include PolygonMeshNormals.\n\nUse bitwise OR to combine flags. A value of +7+ will include all\nflags, for example.","name":"mesh","namespace":"Sketchup::Face","path":"Sketchup::Face#mesh","type":"instance_method","visibility":"public","parameters":[["flags",["Integer"],"One or more flags used to generate a mesh."]],"return":[["Geom::PolygonMesh"],""]},"Sketchup::Face#normal":{"description":"The normal method is used to retrieve the 3D vector normal to the face in\nthe front direction.","name":"normal","namespace":"Sketchup::Face","path":"Sketchup::Face#normal","type":"instance_method","visibility":"public","return":[["Geom::Vector3d"],"a Vector3d object if successful"]},"Sketchup::Face#outer_loop":{"description":"This method is used to retrieve the outer loop that bounds the face.","name":"outer_loop","namespace":"Sketchup::Face","path":"Sketchup::Face#outer_loop","type":"instance_method","visibility":"public","return":[["Sketchup::Loop"],"a Loop object representing the outer loop (if\nsuccessful)"]},"Sketchup::Face#plane":{"description":"The plane method is used to retrieve the plane of the face. See the Array\nclass for information on how planes are stored.","name":"plane","namespace":"Sketchup::Face","path":"Sketchup::Face#plane","type":"instance_method","visibility":"public","return":[["Array(Float, Float, Float, Float)"],"a plane that contains the face (if successful)"]},"Sketchup::Face#position_material":{"description":"The position_material method is used to position a material on a face.\n\nThe pt_array must contain 2, 4, 6 or 8 points. The points are used in pairs\nto tell where a point in the texture image is positioned on the Face. The\nfirst point in each pair is a 3D point in the model. It should be a point on\nthe Face. The second point in each pair of points is a 2D point that gives\nthe (u,v) coordinates of a point in the image to match up with the 3D point.","name":"position_material","namespace":"Sketchup::Face","path":"Sketchup::Face#position_material","type":"instance_method","visibility":"public","parameters":[["material",["Sketchup::Material"],"a Material object."],["pt_array",["Array<Geom::Point3d>"],"An array of Point3d objects used to position the material."],["o_front",["Boolean"],"true to position the texture on the front of the Face or\nfalse to position it on the back of the Face."]],"return":[["Sketchup::Face","FalseClass"],"the face upon success, false upon failure."]},"Sketchup::Face#pushpull":{"description":"The pushpull method is used to perform a push/pull on a face.\n\nThe distance is measured in the direction that the face normal is pointing.","name":"pushpull","namespace":"Sketchup::Face","path":"Sketchup::Face#pushpull","type":"instance_method","visibility":"public","parameters":[["distance",["Numeric"],"The distance, in current units, to push/pull the face."],["copy",["Boolean"],"Create a new push/pull starting face if true (equivalent\nof pressing CTRL while in SketchUp), do not create a\npush/pull starting face if false."]],"return":[["nil"],""]},"Sketchup::Face#reverse!":{"description":"The reverse! method is used to reverse the face's orientation, meaning the\nfront becomes the back.","name":"reverse!","namespace":"Sketchup::Face","path":"Sketchup::Face#reverse!","type":"instance_method","visibility":"public","return":[["Sketchup::Face","FalseClass"],"the reversed Face object if successful, false if\nunsuccessful"]},"Sketchup::Face#set_texture_projection":{"description":"The set_texture_projection method is used to set the texture projection\ndirection.","name":"set_texture_projection","namespace":"Sketchup::Face","path":"Sketchup::Face#set_texture_projection","type":"instance_method","visibility":"public","parameters":[["vector",["Geom::Vector3d"],"representing the direction of the projection. Use nil\nto remove the projection."],["frontside",["Boolean"],"true for front side, false for back side."]],"return":[["Boolean"],"true on success"]},"Sketchup::Face#vertices":{"description":"The vertices method is used to get an array of all of the vertices that\nbound the face.","name":"vertices","namespace":"Sketchup::Face","path":"Sketchup::Face#vertices","type":"instance_method","visibility":"public","return":[["Array<Sketchup::Vertex>"],"an array of Vertex objects if successful"]},"Sketchup::Face::PointInside":{"description":"Constants","name":"PointInside","namespace":"Sketchup::Face","path":"Sketchup::Face::PointInside","type":"constant","return":null,"visibility":"public"},"Sketchup::Face::PointNotOnPlane":{"description":"Stub value.","name":"PointNotOnPlane","namespace":"Sketchup::Face","path":"Sketchup::Face::PointNotOnPlane","type":"constant","return":null,"visibility":"public"},"Sketchup::Face::PointOnEdge":{"description":"Stub value.","name":"PointOnEdge","namespace":"Sketchup::Face","path":"Sketchup::Face::PointOnEdge","type":"constant","return":null,"visibility":"public"},"Sketchup::Face::PointOnFace":{"description":"Stub value.","name":"PointOnFace","namespace":"Sketchup::Face","path":"Sketchup::Face::PointOnFace","type":"constant","return":null,"visibility":"public"},"Sketchup::Face::PointOnVertex":{"description":"Stub value.","name":"PointOnVertex","namespace":"Sketchup::Face","path":"Sketchup::Face::PointOnVertex","type":"constant","return":null,"visibility":"public"},"Sketchup::Face::PointOutside":{"description":"Stub value.","name":"PointOutside","namespace":"Sketchup::Face","path":"Sketchup::Face::PointOutside","type":"constant","return":null,"visibility":"public"},"Sketchup::Face::PointUnknown":{"description":"Stub value.","name":"PointUnknown","namespace":"Sketchup::Face","path":"Sketchup::Face::PointUnknown","type":"constant","return":null,"visibility":"public"},"Sketchup::FrameChangeObserver":{"description":"This observer interface is implemented to react to changes in camera\nposition (a frame) between one scene page and another. This observer's\ncallback method is called when the user manually makes a scene change,\nor the internal animation feature runs.\n\nThis abstract observer is any object that implements a callback method\n+frameChange+ with 3 arguments: +from_scene+ (the scene that you\ntransition from), +to_scene+ (the scene that you transition toward)\nand a +percent_done+ between +0.0+ and +1.0+ (that indicates the percentage\nof transition between the two scenes.)\n\n  # Basic Class Definition:\n  class MyFrameChangeObserver\n    def frameChange(from_scene, to_scene, percent_done)\n     # Actual code here.\n    end\n  end\n\nThe observer is attached using the {Sketchup::Pages.add_frame_change_observer}\nclass method, which returns an integer id that can be stored and later\nused to detach the observer.\n\n  # Attach an observer to the global Pages object:\n  @id = Sketchup::Pages.add_frame_change_observer(MyFrameChangeObserver.new)\n\nLater, detaching this observer is done by passing this +id+ reference to\nthe {Sketchup::Pages.remove_frame_change_observer} class method.\n\n  # Basic Observer Detachment:\n  Sketchup::Pages.remove_frame_change_observer(@id)","name":"FrameChangeObserver","namespace":"Sketchup","path":"Sketchup::FrameChangeObserver","type":"class","visibility":"public"},"Sketchup::FrameChangeObserver#frameChange":{"description":"This callback method is called during a slide show or creation of an\nanimation after the camera has been set up, but before the frame is\ndisplayed. It gives you a chance to perform your own actions during\nthe animation. The arguments for +frameChange+ method are the scene\npage that you transition from (+from_scene+), the scene page that you\ntransition to (+to_scene+), and a +percent_done+ between +0.0+ and +1.0+\nthat tell you the percentage of the transition between the two scene\npages.\n\nBy watching for +percent_done >= 1.0+, you can activate Ruby code that\nexecutes as soon as the user's camera has finished animating.","name":"frameChange","namespace":"Sketchup::FrameChangeObserver","path":"Sketchup::FrameChangeObserver#frameChange","type":"instance_method","visibility":"public","parameters":[["to_scene",["Sketchup::Page"],"The selected scene page the view is transitioning towards."],["from_scene",["Sketchup::Page","nil"],"The previous scene page the view is transitioning from."],["percent_done",["Float"],"The percentage of transition between the two scene pages."]],"return":[["void"],"Value can be anything, but is ignored by SketchUp."]},"Sketchup::Group":{"description":"A Group class contains methods for manipulating groups of entities.\n\nGroups in SketchUp are very similar to Components, except that there is no\ninstancing of groups. That means that you always will have one and only one\nof each of your groups. (In the actual implementation, SketchUp keeps track\nof groups as a special kind of Component that combines properties of\ndefinitions and instances, which is why you will see deprecated methods\nlike Group.make_unique, and the class of observer you attach to Groups are\nComponentInstance observers.)","name":"Group","namespace":"Sketchup","path":"Sketchup::Group","type":"class","visibility":"public"},"Sketchup::Group#add_observer":{"description":"The add_observer method is used to add a ComponentInstance observer to the\ngroup.","name":"add_observer","namespace":"Sketchup::Group","path":"Sketchup::Group#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Group#copy":{"description":"The copy method is used to create a new Group object that is a copy of the\ngroup.","name":"copy","namespace":"Sketchup::Group","path":"Sketchup::Group#copy","type":"instance_method","visibility":"public","return":[["Sketchup::Group"],"a new Group object"]},"Sketchup::Group#definition":{"description":"The definition method is used to retrieve the component definition for this\ngroup.","name":"definition","namespace":"Sketchup::Group","path":"Sketchup::Group#definition","type":"instance_method","visibility":"public","return":[["Sketchup::ComponentDefinition"],"a ComponentDefinition object if\nsuccessful"]},"Sketchup::Group#description":{"description":"The description method is used to retrieve the description for the group.","name":"description","namespace":"Sketchup::Group","path":"Sketchup::Group#description","type":"instance_method","visibility":"public","return":[["String"],"a string description if successful"]},"Sketchup::Group#description=":{"description":"The description= method is used to set the description for the group.","name":"description=","namespace":"Sketchup::Group","path":"Sketchup::Group#description=","type":"instance_method","visibility":"public","parameters":[["description",["String"],"A string description."]],"return":[["String"],"the new description if successful"]},"Sketchup::Group#entities":{"description":"The entities method is used to retrieve a collection of entities in the\ngroup.","name":"entities","namespace":"Sketchup::Group","path":"Sketchup::Group#entities","type":"instance_method","visibility":"public","return":[["Sketchup::Entities"],"an Entities object if successful"]},"Sketchup::Group#equals?":{"description":"The equals? method is used to determine if a group is geometrically\nequivalent to another group.","name":"equals?","namespace":"Sketchup::Group","path":"Sketchup::Group#equals?","type":"instance_method","visibility":"public","parameters":[["group",["Sketchup::Group"],"The group to compare this group with."]],"return":[["Boolean"],"true if the groups are geometrically\nequivalent. Otherwise false."]},"Sketchup::Group#explode":{"description":"The explode method is used to explode the group into individual entities.","name":"explode","namespace":"Sketchup::Group","path":"Sketchup::Group#explode","type":"instance_method","visibility":"public","return":[["Array<Sketchup::Drawingelement>"],"An array of entity objects if successful, false if\nunsuccessful."]},"Sketchup::Group#guid":{"description":"The guid method is used to get the base 64 encoded unique id\nfor this SketchUp object.","name":"guid","namespace":"Sketchup::Group","path":"Sketchup::Group#guid","type":"instance_method","visibility":"public","return":[["String"],"a unique 22 character string"]},"Sketchup::Group#intersect":{"description":"The intersect method is used to compute the boolean intersection of two\ngroups representing manifold solid volumes (this & arg).  If the specified\nobjects (this and arg) do not represent manifold volumes, this method fails.","name":"intersect","namespace":"Sketchup::Group","path":"Sketchup::Group#intersect","type":"instance_method","visibility":"public","parameters":[["group",["Sketchup::Group","Sketchup::ComponentInstance"],"The group to intersect this group with."]],"return":[["Sketchup::Group","nil"],"The resultant group if the two objects\n(this and arg) represent manifold solids and the\noperation succeeds. Otherwise nil is returned."]},"Sketchup::Group#local_bounds":{"description":"The local_bounds method returns the BoundingBox object that defines the size\nof the group in an untransformed state. Useful for determining the original\nwidth, height, and depth of a group regardless of its current position or\nscale. For components, you can get a similar result by checking\nmy_instance.definition.bounds.","name":"local_bounds","namespace":"Sketchup::Group","path":"Sketchup::Group#local_bounds","type":"instance_method","visibility":"public","return":[["Geom::BoundingBox"],"a BoundingBox object"]},"Sketchup::Group#locked=":{"description":"The locked= method is used to lock a group.","name":"locked=","namespace":"Sketchup::Group","path":"Sketchup::Group#locked=","type":"instance_method","visibility":"public","parameters":[["lock",["Boolean"],""]],"return":[["Boolean"],"true if the group is locked, false if not"]},"Sketchup::Group#locked?":{"description":"The locked? method is used to determine if a group is locked.","name":"locked?","namespace":"Sketchup::Group","path":"Sketchup::Group#locked?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the group is locked, false if not."]},"Sketchup::Group#make_unique":{"description":"The make_unique method is used to force a group to have a unique definition.\n\nCopying a group using the copy tool in SketchUp will create copies of the\ngroup that share a common definition until an instance is edited manually or\nthis method is used. If multiple copies are made, all copies share a\ndefinition until all copies are edited manually, or all copies have this\nmethod used on them. This method ensures that the group uses a unique\ndefinition entry in the drawing database.","name":"make_unique","namespace":"Sketchup::Group","path":"Sketchup::Group#make_unique","type":"instance_method","visibility":"public","return":[["Sketchup::Group"],"the unique group"]},"Sketchup::Group#manifold?":{"description":"The manifold? method is used to determine if a group is manifold.","name":"manifold?","namespace":"Sketchup::Group","path":"Sketchup::Group#manifold?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the group is manifold.\nfalse if the group is not manifold."]},"Sketchup::Group#move!":{"description":"The move! method is used to apply a transformation to the group.\n\nThis method is the same as the transform! method except that it does not\nrecord the move in an undo operation. This method is useful for\ntransparently moving things during an animation.","name":"move!","namespace":"Sketchup::Group","path":"Sketchup::Group#move!","type":"instance_method","visibility":"public","parameters":[["transform",["Geom::Transformation"],"A Transformation object."]],"return":[["Sketchup::Group"],"the transformed Group object if successful"]},"Sketchup::Group#name":{"description":"The name method is used to retrieve the name of the group.","name":"name","namespace":"Sketchup::Group","path":"Sketchup::Group#name","type":"instance_method","visibility":"public","return":[["String"],"The name of the group if successful"]},"Sketchup::Group#name=":{"description":"The name= method is used to set the description for the group.","name":"name=","namespace":"Sketchup::Group","path":"Sketchup::Group#name=","type":"instance_method","visibility":"public","parameters":[["name",["String"],"A string name."]],"return":[["String"],"a new name if successful"]},"Sketchup::Group#outer_shell":{"description":"The outer_shell method is used to compute the outer shell of the two groups\nrepresenting manifold solid volumes (this || arg).  If the specified objects\n(this and arg) do not represent manifold volumes, this method fails.","name":"outer_shell","namespace":"Sketchup::Group","path":"Sketchup::Group#outer_shell","type":"instance_method","visibility":"public","parameters":[["group",["Sketchup::Group","Sketchup::ComponentInstance"],"The group to outer shell this group with."]],"return":[["Sketchup::Group","nil"],"The resultant group if the two objects\n(this and arg) represent manifold solids and the\noperation succeeds otherwise nil is returned."]},"Sketchup::Group#remove_observer":{"description":"The remove_observer method is used to remove a ComponentInstance observer\nfrom the group.","name":"remove_observer","namespace":"Sketchup::Group","path":"Sketchup::Group#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Group#show_differences":{"description":"The show_differences method is used to determine if a group is\ngeometrically equivalent to another group and in addition move the non-\nmatching and matching geometry to new layers.\n\nThis method will move both groups to Layer0.  Geometry that is the same\nin both groups will be moved to a new layer named group_name + \"_same\".\nGeometry that is not the same will be moved to a layer named group_name +\n\"_diff\".\n\nIf verbose is true, a list of all the geometry that is different\nfrom one group to the other is displayed texturally in the Ruby Console.","name":"show_differences","namespace":"Sketchup::Group","path":"Sketchup::Group#show_differences","type":"instance_method","visibility":"public","parameters":[["group",["Sketchup::Group","Sketchup::ComponentInstance"],"The group to be compared with."],["verbose",["Boolean"],"A boolean flag indicating whether to display a textural\nreport of the found differences to the Ruby console."]],"return":[["Boolean"],"true if the groups are geometrically\nequivalent. Otherwise false."]},"Sketchup::Group#split":{"description":"The split method is used to compute the boolean split (map overlay) of the\ntwo groups representing manifold solid volumes (this ^ arg). If the\nspecified objects (this and arg) do not represent manifold volumes,\nthis method fails.\n\n  if the two objects (this and arg) represent manifold\n  solids and the operation succeeds otherwise nil is\n  returned. The 3 groups are as follows:\n  The intersection of volume 1 & volume 2,\n  the difference of volume 1 minus volume 2,\n  and the reverse difference of volume 2 minus volume 1.","name":"split","namespace":"Sketchup::Group","path":"Sketchup::Group#split","type":"instance_method","visibility":"public","parameters":[["group",["Sketchup::Group","Sketchup::ComponentInstance"],"The group to split this group with."]],"return":[["Array(Sketchup::Group, Sketchup::Group, Sketchup::Group)","nil"],"A vector (array) of the three resultant groups"]},"Sketchup::Group#subtract":{"description":"The subtract method is used to compute the boolean difference of the two\ngroups representing manifold solid volumes (this - arg).  If the specified\nobjects (this and arg) do not represent manifold volumes, this method fails.","name":"subtract","namespace":"Sketchup::Group","path":"Sketchup::Group#subtract","type":"instance_method","visibility":"public","parameters":[["group",["Sketchup::Group","Sketchup::ComponentInstance"],"The group to subtract this group from."]],"return":[["Sketchup::Group","nil"],"The resultant group if the two objects\n(this and arg) represent manifold solids and the\noperation succeeds. Otherwise nil is returned."]},"Sketchup::Group#to_component":{"description":"The to_component method is used to convert the group to a component\ninstance.","name":"to_component","namespace":"Sketchup::Group","path":"Sketchup::Group#to_component","type":"instance_method","visibility":"public","return":[["Sketchup::ComponentInstance"],"the new ComponentInstance object"]},"Sketchup::Group#transform!":{"description":"The transform! method is used to apply a transformation to a group.","name":"transform!","namespace":"Sketchup::Group","path":"Sketchup::Group#transform!","type":"instance_method","visibility":"public","parameters":[["transform",["Geom::Transformation"],"A Transformation object."]],"return":[["Sketchup::Group"],"a transformed group object if successful"]},"Sketchup::Group#transformation":{"description":"The transformation method is used to retrieve the transformation for the\ngroup.","name":"transformation","namespace":"Sketchup::Group","path":"Sketchup::Group#transformation","type":"instance_method","visibility":"public","return":[["Geom::Transformation"],"a Transformation object if successful"]},"Sketchup::Group#transformation=":{"description":"The transformation= method is used to set the transformation for the\ngroup.","name":"transformation=","namespace":"Sketchup::Group","path":"Sketchup::Group#transformation=","type":"instance_method","visibility":"public","parameters":[["transform",["Geom::Transformation"],"The Transformation object to apply"]],"return":[["Geom::Transformation"],"the applied transformation"]},"Sketchup::Group#trim":{"description":"The trim method is used to compute the (non-destructive) boolean difference\nof the two groups representing manifold solid volumes (this - arg).  If\nthe specified objects (this and arg) do not represent manifold volumes, this\nmethod fails.","name":"trim","namespace":"Sketchup::Group","path":"Sketchup::Group#trim","type":"instance_method","visibility":"public","parameters":[["group",["Sketchup::Group","Sketchup::ComponentInstance"],"The group to trim this group against."]],"return":[["Sketchup::Group","nil"],"The resultant group if the two objects\n(this and arg) represent manifold solids and the\noperation succeeds otherwise nil is returned."]},"Sketchup::Group#union":{"description":"The union method is used to compute the boolean union of the two groups\nrepresenting manifold solid volumes (this | arg).  If the specified\nobjects (this and arg) do not represent manifold volumes, this method fails.","name":"union","namespace":"Sketchup::Group","path":"Sketchup::Group#union","type":"instance_method","visibility":"public","parameters":[["group",["Sketchup::Group","Sketchup::ComponentInstance"],"The group to union this group with."]],"return":[["Sketchup::Group","nil"],"The resultant group if the two objects\n(this and arg) represent manifold solids and the\noperation succeeds. Otherwise nil is returned."]},"Sketchup::Group#volume":{"description":"The volume method is used to compute the volume of this group if and only\nif this group is manifold.","name":"volume","namespace":"Sketchup::Group","path":"Sketchup::Group#volume","type":"instance_method","visibility":"public","return":[["Float"],"If the group represents a manifold volume,\nvolume will be a positive value. If volume is negative,\nthe group is not manifold."]},"Sketchup::Http":{"description":"The {Sketchup::Http} module provides interfaces to create asynchronous HTTP\nrequests. This is an alternative to the Net::Http module that comes with\nRuby StdLib - which is known to have issues within SketchUp.","name":"Http","namespace":"Sketchup","path":"Sketchup::Http","type":"module","visibility":"public"},"Sketchup::Http::DELETE":{"description":"Constants","name":"DELETE","namespace":"Sketchup::Http","path":"Sketchup::Http::DELETE","type":"constant","return":null,"visibility":"public"},"Sketchup::Http::GET":{"description":"Stub value.","name":"GET","namespace":"Sketchup::Http","path":"Sketchup::Http::GET","type":"constant","return":null,"visibility":"public"},"Sketchup::Http::HEAD":{"description":"Stub value.","name":"HEAD","namespace":"Sketchup::Http","path":"Sketchup::Http::HEAD","type":"constant","return":null,"visibility":"public"},"Sketchup::Http::OPTIONS":{"description":"Stub value.","name":"OPTIONS","namespace":"Sketchup::Http","path":"Sketchup::Http::OPTIONS","type":"constant","return":null,"visibility":"public"},"Sketchup::Http::PATCH":{"description":"Stub value.","name":"PATCH","namespace":"Sketchup::Http","path":"Sketchup::Http::PATCH","type":"constant","return":null,"visibility":"public"},"Sketchup::Http::POST":{"description":"Stub value.","name":"POST","namespace":"Sketchup::Http","path":"Sketchup::Http::POST","type":"constant","return":null,"visibility":"public"},"Sketchup::Http::PUT":{"description":"Stub value.","name":"PUT","namespace":"Sketchup::Http","path":"Sketchup::Http::PUT","type":"constant","return":null,"visibility":"public"},"Sketchup::Http::Request":{"description":"Http::Request objects allows you to send HTTP request to HTTP servers.","name":"Request","namespace":"Sketchup::Http","path":"Sketchup::Http::Request","type":"class","visibility":"public"},"Sketchup::Http::Request#body":{"description":"Gets the http body that is going to be used when sending the request.","name":"body","namespace":"Sketchup::Http::Request","path":"Sketchup::Http::Request#body","type":"instance_method","visibility":"public","return":[["String"],""]},"Sketchup::Http::Request#body=":{"description":"Sets the http body that is going to be used when sending the request.","name":"body=","namespace":"Sketchup::Http::Request","path":"Sketchup::Http::Request#body=","type":"instance_method","visibility":"public","parameters":[["body",["String"],"A String containing the body."]],"return":[["String"],""]},"Sketchup::Http::Request#cancel":{"description":"Cancels the request.","name":"cancel","namespace":"Sketchup::Http::Request","path":"Sketchup::Http::Request#cancel","type":"instance_method","visibility":"public","return":[["true"],""]},"Sketchup::Http::Request#headers":{"description":"Returns the http headers that are going to be used when sending the request.","name":"headers","namespace":"Sketchup::Http::Request","path":"Sketchup::Http::Request#headers","type":"instance_method","visibility":"public","return":[["Hash"],""]},"Sketchup::Http::Request#headers=":{"description":"Sets the http headers that are going to be used when sending the request.","name":"headers=","namespace":"Sketchup::Http::Request","path":"Sketchup::Http::Request#headers=","type":"instance_method","visibility":"public","parameters":[["headers",["Hash"],"A key/value pair hash."]],"return":[["Boolean"],""]},"Sketchup::Http::Request#initialize":{"description":"The new method is used to create a new Sketchup::Http::Request.\n\nThe default port is 80, to use a different port define it in the URL when\ncreating a new Http::Request\n\nKeeping a reference to the request is necessary in order to ensure the use of\nthe response.\n\nThe +method+ parameter accepts any custom http method or one of the\nfollowing:\n* +Sketchup::Http::GET+\n* +Sketchup::Http::POST+\n* +Sketchup::Http::PUT+\n* +Sketchup::Http::DELETE+\n* +Sketchup::Http::HEAD+\n* +Sketchup::Http::OPTIONS+","name":"initialize","namespace":"Sketchup::Http::Request","path":"Sketchup::Http::Request#initialize","type":"instance_method","visibility":"public","parameters":[["url",["String"],"The targetted URL."],["method",["String"],"Optionally, the request method to use, the\ndefault is Sketchup::Http::GET"]],"return":[["Request"],""]},"Sketchup::Http::Request#method":{"description":"Returns the http method that is going to be used when sending the request.","name":"method","namespace":"Sketchup::Http::Request","path":"Sketchup::Http::Request#method","type":"instance_method","visibility":"public","return":[["String"],""]},"Sketchup::Http::Request#method=":{"description":"Sets the http method that is going to be used when sending the request.\nThe value can be any custom http method or one of the following:\n* +Sketchup::Http::GET+\n* +Sketchup::Http::POST+\n* +Sketchup::Http::PUT+\n* +Sketchup::Http::DELETE+\n* +Sketchup::Http::HEAD+\n* +Sketchup::Http::OPTIONS+","name":"method=","namespace":"Sketchup::Http::Request","path":"Sketchup::Http::Request#method=","type":"instance_method","visibility":"public","parameters":[["method",["String"],"A string containing the http method name."]],"return":[["Boolean"],""]},"Sketchup::Http::Request#set_download_progress_callback":{"description":"Adds a download progress callback block that will get called everytime we\nhave received data from the server until the download finishes.","name":"set_download_progress_callback","namespace":"Sketchup::Http::Request","path":"Sketchup::Http::Request#set_download_progress_callback","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Sketchup::Http::Request#set_upload_progress_callback":{"description":"Adds a upload progress callback block that will get called everytime we have\nuploaded data to the server until the upload finishes.","name":"set_upload_progress_callback","namespace":"Sketchup::Http::Request","path":"Sketchup::Http::Request#set_upload_progress_callback","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Sketchup::Http::Request#start":{"description":"Starts the request and optionally add a callback block.","name":"start","namespace":"Sketchup::Http::Request","path":"Sketchup::Http::Request#start","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Sketchup::Http::Request#status":{"description":"Returns the internal status code. It can be one of the following:\n* +Sketchup::Http::STATUS_UNKNOWN+\n* +Sketchup::Http::STATUS_SUCCESS+\n* +Sketchup::Http::STATUS_PENDING+\n* +Sketchup::Http::STATUS_CANCELED+\n* +Sketchup::Http::STATUS_FAILED+","name":"status","namespace":"Sketchup::Http::Request","path":"Sketchup::Http::Request#status","type":"instance_method","visibility":"public","return":[["int"],""]},"Sketchup::Http::Request#url":{"description":"Returns a copy of the Request's URL.","name":"url","namespace":"Sketchup::Http::Request","path":"Sketchup::Http::Request#url","type":"instance_method","visibility":"public","return":[["String"],""]},"Sketchup::Http::Response":{"description":"Http::Response objects allows you to get the response information from the\nserver, you can only receive the Http::Response if you have attached a\ncallback block when calling start from the Http::Request object.","name":"Response","namespace":"Sketchup::Http","path":"Sketchup::Http::Response","type":"class","visibility":"public"},"Sketchup::Http::Response#body":{"description":"Gets the http body that was received from the server as a string encoded\nusing the charset provided in the Content-Type of the server response, if\nno charset is specified, ASCII-8BIT will be used.","name":"body","namespace":"Sketchup::Http::Response","path":"Sketchup::Http::Response#body","type":"instance_method","visibility":"public","return":[["String"],""]},"Sketchup::Http::Response#headers":{"description":"Returns the http headers that were sent by the server.","name":"headers","namespace":"Sketchup::Http::Response","path":"Sketchup::Http::Response#headers","type":"instance_method","visibility":"public","return":[["Hash"],""]},"Sketchup::Http::Response#status_code":{"description":"Returns the HTTP response status code as defined in rfc2616.","name":"status_code","namespace":"Sketchup::Http::Response","path":"Sketchup::Http::Response#status_code","type":"instance_method","visibility":"public","return":[["int"],""]},"Sketchup::Http::STATUS_CANCELED":{"description":"Stub value.","name":"STATUS_CANCELED","namespace":"Sketchup::Http","path":"Sketchup::Http::STATUS_CANCELED","type":"constant","return":null,"visibility":"public"},"Sketchup::Http::STATUS_FAILED":{"description":"Stub value.","name":"STATUS_FAILED","namespace":"Sketchup::Http","path":"Sketchup::Http::STATUS_FAILED","type":"constant","return":null,"visibility":"public"},"Sketchup::Http::STATUS_PENDING":{"description":"Stub value.","name":"STATUS_PENDING","namespace":"Sketchup::Http","path":"Sketchup::Http::STATUS_PENDING","type":"constant","return":null,"visibility":"public"},"Sketchup::Http::STATUS_SUCCESS":{"description":"Stub value.","name":"STATUS_SUCCESS","namespace":"Sketchup::Http","path":"Sketchup::Http::STATUS_SUCCESS","type":"constant","return":null,"visibility":"public"},"Sketchup::Http::STATUS_UNKNOWN":{"description":"Stub value.","name":"STATUS_UNKNOWN","namespace":"Sketchup::Http","path":"Sketchup::Http::STATUS_UNKNOWN","type":"constant","return":null,"visibility":"public"},"Sketchup::Image":{"description":"An Image object represents a raster image placed in the Model.","name":"Image","namespace":"Sketchup","path":"Sketchup::Image","type":"class","visibility":"public"},"Sketchup::Image#explode":{"description":"The explode method is used to explode an image into a face with a texture\non it.\n\nNote that current versions of SketchUp will return an empty array here.\nTo work around this limitation you can iterate over your entities collection\nto determine which new entities were created.\n\nVersions prior to SketchUp 2015 returned an empty array due to a bug.","name":"explode","namespace":"Sketchup::Image","path":"Sketchup::Image#explode","type":"instance_method","visibility":"public","return":[null,"entitiesarray - an Array object of entities if\nsuccessful"]},"Sketchup::Image#height":{"description":"The height method is used to retrieve the height of the image.\n\nThe height is given in inches.","name":"height","namespace":"Sketchup::Image","path":"Sketchup::Image#height","type":"instance_method","visibility":"public","return":[null,"height - the height of the model if successful"]},"Sketchup::Image#height=":{"description":"The height= method is used to set the height of the image.\n\nThe height is set in inches.","name":"height=","namespace":"Sketchup::Image","path":"Sketchup::Image#height=","type":"instance_method","visibility":"public","parameters":[["height",null,"The height, in inches, to set the image."]],"return":[null,"height - the new height if successful"]},"Sketchup::Image#normal":{"description":"The normal method is used to retrieve the 3D Vector that is perpendicular to\nthe plane of the image.","name":"normal","namespace":"Sketchup::Image","path":"Sketchup::Image#normal","type":"instance_method","visibility":"public","return":[null,"vector - a Vector3d object if successful"]},"Sketchup::Image#origin":{"description":"The origin method is used to retrieve the 3D point that defines the origin\nof the image.","name":"origin","namespace":"Sketchup::Image","path":"Sketchup::Image#origin","type":"instance_method","visibility":"public","return":[null,"point - a Point3d object containing the origin location\nif successful"]},"Sketchup::Image#origin=":{"description":"The origin= method is used to set the 3D point as the origin of the image.","name":"origin=","namespace":"Sketchup::Image","path":"Sketchup::Image#origin=","type":"instance_method","visibility":"public","parameters":[["point",null,"A Point3d object with the new origin."]],"return":[null,"point - the Point3d object representing the newly\nestablished origin if successful"]},"Sketchup::Image#path":{"description":"The path method is used to retrieve the path of the file defining the image.","name":"path","namespace":"Sketchup::Image","path":"Sketchup::Image#path","type":"instance_method","visibility":"public","return":[null,"path - the path for the image file if successful"]},"Sketchup::Image#pixelheight":{"description":"The pixelheight method is used to retrieve the height of the image file in\npixels.","name":"pixelheight","namespace":"Sketchup::Image","path":"Sketchup::Image#pixelheight","type":"instance_method","visibility":"public","return":[null,"height - the height of the image in pixels if\nsuccessful"]},"Sketchup::Image#pixelwidth":{"description":"The pixelwidth method is used to retrieve the width of the image file in\npixels.","name":"pixelwidth","namespace":"Sketchup::Image","path":"Sketchup::Image#pixelwidth","type":"instance_method","visibility":"public","return":[null,"width - the width of the image in pixels if successful"]},"Sketchup::Image#size=":{"description":"The size= method is used to set the width and height of the image, in inches.","name":"size=","namespace":"Sketchup::Image","path":"Sketchup::Image#size=","type":"instance_method","visibility":"public","parameters":[["width",null,"The width of the image."],["height",null,"The height of the image."]],"return":[null,"size - the new width and height of the image if\nsuccessful"]},"Sketchup::Image#transform!":{"description":"The transform! method is used to apply a transformation to the image.","name":"transform!","namespace":"Sketchup::Image","path":"Sketchup::Image#transform!","type":"instance_method","visibility":"public","parameters":[["transform",null,"A Transformation object."]],"return":[null,"image - the transformed Image object if successful"]},"Sketchup::Image#transformation":{"description":"The transformation method is used to retrieve the transformation for the\nimage.","name":"transformation","namespace":"Sketchup::Image","path":"Sketchup::Image#transformation","type":"instance_method","visibility":"public","return":[null,"transformation - a Transformation object if successful"]},"Sketchup::Image#transformation=":{"description":"The transformation= method is used to set the transformation for the\nimage.","name":"transformation=","namespace":"Sketchup::Image","path":"Sketchup::Image#transformation=","type":"instance_method","visibility":"public","parameters":[["transform",null,"The Transformation object to apply"]],"return":[null,"image - the newly transformed image"]},"Sketchup::Image#width":{"description":"The width method is used to retrieve the width of the image.\n\nThe width is given in inches.","name":"width","namespace":"Sketchup::Image","path":"Sketchup::Image#width","type":"instance_method","visibility":"public","return":[null,"width - the width of the image if successful"]},"Sketchup::Image#width=":{"description":"The width= method is used to set the width of the image.\n\nThe width is set in inches.","name":"width=","namespace":"Sketchup::Image","path":"Sketchup::Image#width=","type":"instance_method","visibility":"public","parameters":[["width",null,"The width, in inches, to set the image."]],"return":[null,"width - the new width if successful"]},"Sketchup::Image#zrotation":{"description":"The zrotation method is used to get the angle that the image is rotated\nabout the normal vector from an arbitrary X axis.","name":"zrotation","namespace":"Sketchup::Image","path":"Sketchup::Image#zrotation","type":"instance_method","visibility":"public","return":[null,"vector - a Vector3d object if successful"]},"Sketchup::Importer":{"description":"The Importer interface lets you build your own importers for SketchUp. To\nuse this, you create a subclass of Importer and implement all of the\nmethods described below. This will make your importer appear in the list\nthat users see under File > Import, and you can use Ruby to do all of the\nwork of opening the file and creating whatever you need inside SketchUp.\n\nHere is an example of a complete script that imports a .txt file and\ndisplays its contents in a messagebox.","name":"Importer","namespace":"Sketchup","path":"Sketchup::Importer","type":"class","visibility":"public"},"Sketchup::Importer#description":{"description":"This method is called by SketchUp to determine the description that appears\nin the File > Import dialog's pulldown list of valid importers.\n\nThough it is common for the description to include the file extension\nsupported by the importer (such as \"Text Importer (.txt)\"), the actual\nextension is defined in the file_extension method.","name":"description","namespace":"Sketchup::Importer","path":"Sketchup::Importer#description","type":"instance_method","visibility":"public","return":[null,"description - a brief string description"]},"Sketchup::Importer#do_options":{"description":"This method is called by SketchUp when the user clicks on the \"Options\"\nbutton inside the File > Import dialog. You can use it to gather and store\nsettings for your importer.\n\nOnly applicable if the importer supports options, meaning its\nsupports_options method returns true.","name":"do_options","namespace":"Sketchup::Importer","path":"Sketchup::Importer#do_options","type":"instance_method","visibility":"public","return":[null,"id - an id string"]},"Sketchup::Importer#file_extension":{"description":"This method is called by SketchUp to determine a single file extension is\nassociated with your importer. Only files that match this extension will be\nshown to the user as they browse their harddrive for things to import.\n\nRuby importers are only allowed to support a single extension.","name":"file_extension","namespace":"Sketchup::Importer","path":"Sketchup::Importer#file_extension","type":"instance_method","visibility":"public","return":[null,"extension - typically a 3-letter string"]},"Sketchup::Importer#id":{"description":"This method is called by SketchUp to determine a unique identifier for\nyour importer, typically something like \"com.sketchup.importers.dxf\".","name":"id","namespace":"Sketchup::Importer","path":"Sketchup::Importer#id","type":"instance_method","visibility":"public","return":[null,"id - an id string"]},"Sketchup::Importer#load_file":{"description":"This method is called by SketchUp after the user has selected a file to\nimport. This is where you do the real work by opening the file via Ruby's\nFile object and processing it in whatever way you need.\n\nYou must return an integer success code to SketchUp when you are done.\nThese are the codes that SketchUp understands and what will happen when\nSketchUp receives each key.\n\n  - 0 = Import Success (no additional dialog shown)\n  - 1 = Import Failed (no additional dialog shown)\n  - 2 = Import Cancelled by User (SketchUp will show a \"cancelled\" dialog)\n  - 4 = Import File not Found (SketchUp will show a \"not found\" dialog)\n  - 5 = SketchUp version not supported (no additional dialog shown)","name":"load_file","namespace":"Sketchup::Importer","path":"Sketchup::Importer#load_file","type":"instance_method","visibility":"public","parameters":[["file_path",null,"Absolute path to the file the user selected"],["status",null,"The status of the import so far. Contains true."]],"return":[null,"success - an integer status code. See above."]},"Sketchup::Importer#supports_options?":{"description":"This method is called by SketchUp to determine if the \"Options\"\nbutton inside the File > Import dialog should be enabled while your\nimporter is selected.","name":"supports_options?","namespace":"Sketchup::Importer","path":"Sketchup::Importer#supports_options?","type":"instance_method","visibility":"public","return":[["Boolean"],"supports_options - a boolean"]},"Sketchup::Importer::ImportCanceled":{"description":"Constants","name":"ImportCanceled","namespace":"Sketchup::Importer","path":"Sketchup::Importer::ImportCanceled","type":"constant","return":null,"visibility":"public"},"Sketchup::Importer::ImportFail":{"description":"Stub value.","name":"ImportFail","namespace":"Sketchup::Importer","path":"Sketchup::Importer::ImportFail","type":"constant","return":null,"visibility":"public"},"Sketchup::Importer::ImportFileNotFound":{"description":"Stub value.","name":"ImportFileNotFound","namespace":"Sketchup::Importer","path":"Sketchup::Importer::ImportFileNotFound","type":"constant","return":null,"visibility":"public"},"Sketchup::Importer::ImportSuccess":{"description":"Stub value.","name":"ImportSuccess","namespace":"Sketchup::Importer","path":"Sketchup::Importer::ImportSuccess","type":"constant","return":null,"visibility":"public"},"Sketchup::Importer::ImporterNotFound":{"description":"Stub value.","name":"ImporterNotFound","namespace":"Sketchup::Importer","path":"Sketchup::Importer::ImporterNotFound","type":"constant","return":null,"visibility":"public"},"Sketchup::InputPoint":{"description":"The InputPoint used to pick entities that reside under the current cursor\nlocation. InputPoint and PickHelper are similar, but InputPoint also uses\ninferencing.   Only tools react to cursor location. Therefore, most of the\nmethods in this class are only useful in the context of a tool you are\nwriting. For example, if you want to determine the entity that you just\nclicked on with the mouse, you would use InputPoint.pick from within your\nonLMouseButton method in a tool. See the example script linetool.rb for\nexamples of using the InputPoint class.","name":"InputPoint","namespace":"Sketchup","path":"Sketchup::InputPoint","type":"class","visibility":"public"},"Sketchup::InputPoint#==":{"description":"The == method is used to determine if two input points are the same.","name":"==","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#==","type":"instance_method","visibility":"public","parameters":[["inputpoint2",null,"The second input point in the comparison."]],"return":[null,"status - true if the InputPoint objects are the same\nobject. False if the objects are not the same."]},"Sketchup::InputPoint#clear":{"description":"The clear method is used to clear the input point.\n\nThis sets it to an empty state. After calling this, valid? will return\nfalse.","name":"clear","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#clear","type":"instance_method","visibility":"public","return":[null,"inputpoint - the cleared (empty) input point if this\nsuccessful"]},"Sketchup::InputPoint#copy!":{"description":"The copy! method is used to copy the data from a second input point into\nthis input point.","name":"copy!","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#copy!","type":"instance_method","visibility":"public","parameters":[["inputpoint",null,"The second input point."]],"return":[null,"inputpoint - the new input point that received the copy\nif successful"]},"Sketchup::InputPoint#degrees_of_freedom":{"description":"The degrees_of_freedom method retrieves the number of degrees of freedom\nthere are for an input point.\n\nIf you are just getting a point in space, then the degrees_of_freedom will\nbe 3 - meaning that there is nothing about the point that would constrain\nits position.\n\nIf you are on a face, then the degrees_of_freedom will be 2\nmeaning that you can only move on the plane of the face.\n\nIf you are on an Edge or an axis, then the degrees_of_freedom will be 1\nmeaning that you can only move in the direction of the edge or axis.\n\nIf you get an end point of an Edge, or an intersection point, then the\ndegrees_of_freedom will be 0.","name":"degrees_of_freedom","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#degrees_of_freedom","type":"instance_method","visibility":"public","return":[null,"degrees_of_freedom - see comments."]},"Sketchup::InputPoint#depth":{"description":"The depth method retrieves the depth of an inference if it is coming from a\ncomponent.\n\nIf the InputPoint is not getting a position from inside a component, this\nmethod will return 0. Otherwise it returns the depth of the entity in a\nnested component that is providing the position.","name":"depth","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#depth","type":"instance_method","visibility":"public","return":[null,"depth - a number representing the depth of the\ninputpoint (inside groups and components) if successful"]},"Sketchup::InputPoint#display?":{"description":"The display? method is used to determine if the input point has anything to\ndraw.\n\nIf the method returns true, then the draw method will draw something.","name":"display?","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#display?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if the draw method will draw something,\nfalse if the draw method has nothing to draw"]},"Sketchup::InputPoint#draw":{"description":"The draw method is used to draw the input point.\n\nThis is useful for showing an InputPoint from within the draw method of a\ntool that you have implemented in Ruby. Additional examples are available in\nthe Plugins/examples directory.","name":"draw","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#draw","type":"instance_method","visibility":"public","parameters":[["view",null,"The current view."]],"return":[null,"view"]},"Sketchup::InputPoint#edge":{"description":"The edge method is used to retrieve the edge if the input point is getting\nits position from a point on an Edge.","name":"edge","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#edge","type":"instance_method","visibility":"public","return":[null,"edge - an Edge object if successful, or nil if\nunsuccessful"]},"Sketchup::InputPoint#face":{"description":"The face method retrieves the face if the input point is getting its\nposition from a face.\n\nOtherwise it returns nil.","name":"face","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#face","type":"instance_method","visibility":"public","return":[null,"face - a Face object if successful, or nil if\nunsuccessful"]},"Sketchup::InputPoint#initialize":{"description":"The new method is used to create a new InputPoint object.","name":"initialize","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#initialize","type":"instance_method","visibility":"public","parameters":[["pt_or_vertex",null,"An optional Point3d or Vertex where the new InputPoint\nshould be created."]],"return":[null,"inputpoint - the newly created InputPoint object if\nsuccessful"]},"Sketchup::InputPoint#instance_path":{"description":"The {#instance_path} method retrieves the instance path for the picked point.\n\nThe returned instance_path is a copy of what the input point is holding on to\nat the moment you access it. Your copy will not update if you make new picks\nwith the input point.\n\nIf there has been no valid pick it will return `nil`.","name":"instance_path","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#instance_path","type":"instance_method","visibility":"public","return":[["Sketchup::InstancePath","nil"],""]},"Sketchup::InputPoint#pick":{"description":"The pick method is used to get the input point at a specific screen\nposition.\n\nThe first form just uses the screen position to compute the InputPoint. It\nis used when you don't want the InputPoint to be dependent on another\nInputPoint.\n\nThe second form uses the screen position and another InputPoint. It will\nfind additional inferences such as along one of the axis directions from the\nfirst point.","name":"pick","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#pick","type":"instance_method","visibility":"public","parameters":[["view",null,"The current view."],["x",null,"A x value."],["inputpoint",["optional"],"A second input point used as a reference\nfor the pick."],["y",null,"A y value."]],"return":[null,"status - true if a valid InputPoint was picked and it\nis different than it was before."]},"Sketchup::InputPoint#position":{"description":"The position method is used to get the 3D point from the input point.","name":"position","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#position","type":"instance_method","visibility":"public","return":[null,"point - a Point3d object position for the input point\nif successful"]},"Sketchup::InputPoint#tooltip":{"description":"The tooltip method is used to retrieve the string that is the tool tip to\ndisplay for the input point.","name":"tooltip","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#tooltip","type":"instance_method","visibility":"public","return":[null,"tip - a string tooltip or an empty string (if the input\npoint doesn't provide a tooltip)."]},"Sketchup::InputPoint#transformation":{"description":"The transformation method retrieves the Transformation object for the input\npoint.\n\nIf the InputPoint object is getting its position from something inside of a\ncomponent instance, this method returns the Transformation of the component\ninstance. Otherwise it returns the identity Transformation.\n\nNote that the position method on a input point always returns a point that is\ntransformed into model space. If you are using the edge, face or vertex\nmethod on the InputPoint though, you will probably need to use the\ntransformation method to transform the data that you get back from the\nselected entity.","name":"transformation","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#transformation","type":"instance_method","visibility":"public","return":[null,"transformation - the Transformation for the input point\nif successful"]},"Sketchup::InputPoint#valid?":{"description":"The valid? method is used to determine if an input point has valid data.\n\nYou must have called the pick method to set the data before it is valid.","name":"valid?","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#valid?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if the input point has valid data, false\nif it does not have valid data."]},"Sketchup::InputPoint#vertex":{"description":"The vertex method returns a Vertex associated with the InputPoint. If the\nInputPoint is on the end of a line, then it will return the Vertex. If the\nInputPoint does not select any vertices this method returns nil.","name":"vertex","namespace":"Sketchup::InputPoint","path":"Sketchup::InputPoint#vertex","type":"instance_method","visibility":"public","return":[null,"vertex - The associated vertex"]},"Sketchup::InstanceObserver":{"description":"This observer interface is implemented to react to component instance\nevents. To implement this observer, create a Ruby class of this type,\noverride the desired methods, and add an instance of the observer to the\nobjects of interests.\n\nNote that you may also attach {Sketchup::InstanceObserver}s to\n{Sketchup::Group}s.","name":"InstanceObserver","namespace":"Sketchup","path":"Sketchup::InstanceObserver","type":"class","visibility":"public"},"Sketchup::InstanceObserver#onClose":{"description":"The {#onClose} method is called when an instance is \"closed,\" meaning an end\nuser was editing a component's geometry and then exited back into the\nparent's editing space.","name":"onClose","namespace":"Sketchup::InstanceObserver","path":"Sketchup::InstanceObserver#onClose","type":"instance_method","visibility":"public","parameters":[["instance",["Sketchup::ComponentInstance"],"The instance that was just\nclosed"]],"return":[["nil"],""]},"Sketchup::InstanceObserver#onOpen":{"description":"The {#onOpen} method is called when an instance is \"opened,\" meaning an end\nuser has double clicked on it to edit its geometry. This is particularly\nuseful if your plugin is dynamically drawing geometry or performing\ntransformations in global space, since when in \"edit component\" mode all\ntransformations and positions are returned in relation to the current\ncomponent's origin.\n\nThis method will tell you when a user has entered edit mode, and you can\nthen use {Sketchup::Model#active_path} and {Sketchup::Model#edit_transform}\nmethods to determine any corrections you need to make to your\ntransformations.","name":"onOpen","namespace":"Sketchup::InstanceObserver","path":"Sketchup::InstanceObserver#onOpen","type":"instance_method","visibility":"public","parameters":[["instance",["Sketchup::ComponentInstance"],"The instance that was opened"]],"return":[["nil"],""]},"Sketchup::InstancePath":{"description":"The {Sketchup::InstancePath} class represent the instance path to a given\nentity within the model hierarchy.","name":"InstancePath","namespace":"Sketchup","path":"Sketchup::InstancePath","type":"class","visibility":"public"},"Sketchup::InstancePath#==":{"description":"","name":"==","namespace":"Sketchup::InstancePath","path":"Sketchup::InstancePath#==","type":"instance_method","visibility":"public","return":[["Boolean"],"`true` if the instances paths represent the same set of\nentities."]},"Sketchup::InstancePath#[]":{"description":"The elements of an instance path can be accessed like an array.","name":"[]","namespace":"Sketchup::InstancePath","path":"Sketchup::InstancePath#[]","type":"instance_method","visibility":"public","parameters":[["index",["Integer"],null]],"return":[["Sketchup::Entity"],""]},"Sketchup::InstancePath#each":{"description":"The yielded entities will start with the root and end with the leaf.","name":"each","namespace":"Sketchup::InstancePath","path":"Sketchup::InstancePath#each","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::InstancePath#empty?":{"description":"","name":"empty?","namespace":"Sketchup::InstancePath","path":"Sketchup::InstancePath#empty?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Sketchup::InstancePath#include?":{"description":"Returns `true` if the instance path contain the given object.","name":"include?","namespace":"Sketchup::InstancePath","path":"Sketchup::InstancePath#include?","type":"instance_method","visibility":"public","parameters":[["object",["Object"],null]],"return":[["Boolean"],""]},"Sketchup::InstancePath#initialize":{"description":"","name":"initialize","namespace":"Sketchup::InstancePath","path":"Sketchup::InstancePath#initialize","type":"instance_method","visibility":"public","parameters":[["path",["Array<Sketchup::Entity>"],"The leaf can be any entity, but the\nrest must be a group or component instance."]],"return":[["Sketchup::InstancePath"],""]},"Sketchup::InstancePath#leaf":{"description":"The leaf of an instance path is the last element which can be any entity\nthat can be represented in the model. This is normally a\n{Sketchup::Drawingelement}, but could be a {Sketchup::Vertex}.\n\nAn instance can also be a leaf.","name":"leaf","namespace":"Sketchup::InstancePath","path":"Sketchup::InstancePath#leaf","type":"instance_method","visibility":"public","return":[["Sketchup::Entity"],""]},"Sketchup::InstancePath#length":{"description":"{#length} is an alias of {#size}.","name":"length","namespace":"Sketchup::InstancePath","path":"Sketchup::InstancePath#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::InstancePath#persistent_id_path":{"description":"The serialized version of an instance path is the persistent ids of its\nentities concatenated with a period.","name":"persistent_id_path","namespace":"Sketchup::InstancePath","path":"Sketchup::InstancePath#persistent_id_path","type":"instance_method","visibility":"public","return":[["String"],""]},"Sketchup::InstancePath#root":{"description":"The root of an instance path is the element located closest to the model\nroot. This will be a group or component instance. If you have a non-instance\nas a leaf with no other parent component this will return `nil`.","name":"root","namespace":"Sketchup::InstancePath","path":"Sketchup::InstancePath#root","type":"instance_method","visibility":"public","return":[["Sketchup::Group","Sketchup::ComponentInstance","nil"],""]},"Sketchup::InstancePath#size":{"description":"","name":"size","namespace":"Sketchup::InstancePath","path":"Sketchup::InstancePath#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::InstancePath#to_a":{"description":"","name":"to_a","namespace":"Sketchup::InstancePath","path":"Sketchup::InstancePath#to_a","type":"instance_method","visibility":"public","return":[["Array"],"an array representing the instance path."]},"Sketchup::InstancePath#transformation":{"description":"overload transformation\n  @return [Sketchup::Transformation] the combined transformation up to the\n    the leaf entity.","name":"transformation","namespace":"Sketchup::InstancePath","path":"Sketchup::InstancePath#transformation","type":"instance_method","visibility":"public","parameters":[["index",["Integer"],null]],"return":[["Sketchup::Transformation"],"the combined transformation up to the\nthe given index."]},"Sketchup::InstancePath#valid?":{"description":"An instance path is valid if it has at least one element and consist of\ngroups and instances with exception of the leaf which can be any entity.\n\nThis method doesn't check if the path can actually be looked up in the model.","name":"valid?","namespace":"Sketchup::InstancePath","path":"Sketchup::InstancePath#valid?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Sketchup::Layer":{"description":"The Layer class contains methods modifying and extracting information for a\nlayer.\n\nBy default, a SketchUp model has one layer, Layer 0 (zero), which is the base\nlayer. You can't delete or rename Layer 0. Unlike certain other CAD software\npackages, entities associated with different layers in SketchUp still\nintersect with each other. (If you want collections of entities to not\nintersect, place them in Groups instead.)\n\nLayers are commonly used to organize your model and control the visibility\nof related groups and components. For example, you could make all of your\nwall and roof entities different groups, associate layers with those groups,\nand then hide those layers so as to display just the floor plan in the model.\n\nYou can programatically create a new layer by calling the Layers.add method.","name":"Layer","namespace":"Sketchup","path":"Sketchup::Layer","type":"class","visibility":"public"},"Sketchup::Layer#<=>":{"description":"The <=> method is used to compare two layers based on their names. You could\nuse this for sorting if you're building a list of layer names.","name":"<=>","namespace":"Sketchup::Layer","path":"Sketchup::Layer#<=>","type":"instance_method","visibility":"public","parameters":[["layer2",null,"A Layer object."]],"return":[null,"status - -1 if layer1 is less than layer2. 1 if layer2\nis less than layer1. 0 if layer1 and layer2 are\nequal."]},"Sketchup::Layer#==":{"description":"The == method is used to determine if two layers are the same.","name":"==","namespace":"Sketchup::Layer","path":"Sketchup::Layer#==","type":"instance_method","visibility":"public","parameters":[["layer2",null,"A Layer object."]],"return":[null,"status - true if layer1 and layer2 are equal. false if\nlayer1 and layer2 are not equal."]},"Sketchup::Layer#color":{"description":"The color method is used to retrieve the color of the layer.","name":"color","namespace":"Sketchup::Layer","path":"Sketchup::Layer#color","type":"instance_method","visibility":"public","return":[null,"color - the color of the Layer object"]},"Sketchup::Layer#color=":{"description":"The color= method is used to set the name of a layer.","name":"color=","namespace":"Sketchup::Layer","path":"Sketchup::Layer#color=","type":"instance_method","visibility":"public","parameters":[["color",null,"The new color for the Layer object."]],"return":[null,"color"]},"Sketchup::Layer#name":{"description":"The name method is used to retrieve the name of the layer.","name":"name","namespace":"Sketchup::Layer","path":"Sketchup::Layer#name","type":"instance_method","visibility":"public","return":[null,"name - the name of the Layer object"]},"Sketchup::Layer#name=":{"description":"The name= method is used to set the name of a layer.","name":"name=","namespace":"Sketchup::Layer","path":"Sketchup::Layer#name=","type":"instance_method","visibility":"public","parameters":[["name",null,"The new name for the Layer object."]],"return":[null,"name - the newly set name"]},"Sketchup::Layer#page_behavior":{"description":"The page_behavior method is used to retrieve the visibility behavior of the\nlayer for new pages and existing pages. For example, you may want your layer\nto be visible or hidden by default in any new pages (aka Scenes) created by\nthe user.\n\nA page keeps a list of layers that do not have their default behavior.\nIf a layer is not in that list, then it is set to its default visibility\ndetermined by one of these values:\n\nThe behaviour is composed of a combination of these flags:\n  - LAYER_VISIBLE_BY_DEFAULT: 0x0000\n  - LAYER_HIDDEN_BY_DEFAULT: 0x0001\n  - LAYER_USES_DEFAULT_VISIBILITY_ON_NEW_PAGES: 0x0000\n  - LAYER_IS_VISIBLE_ON_NEW_PAGES: 0x0010\n  - LAYER_IS_HIDDEN_ON_NEW_PAGES: 0x0020\n\nThe default visibility for a layer is set by either\n<code>LAYER_VISIBLE_BY_DEFAULT</code> or\n<code>LAYER_HIDDEN_BY_DEFAULT</code>. This is what will be used when a page\ndoes not contain the visibility state of a layer.\n\nThe remaining flags control the visibility of the layer for new pages.","name":"page_behavior","namespace":"Sketchup::Layer","path":"Sketchup::Layer#page_behavior","type":"instance_method","visibility":"public","return":[null,"pagebehavior - an integer representing the current\nbehavior of the layer."]},"Sketchup::Layer#page_behavior=":{"description":"The page_behavior= method is used to control the layer's visibility behavior\non existing and new pages.\n\nThe behavior is composed of a combination of these flags:\n  - LAYER_VISIBLE_BY_DEFAULT: 0x0000\n  - LAYER_HIDDEN_BY_DEFAULT: 0x0001\n  - LAYER_USES_DEFAULT_VISIBILITY_ON_NEW_PAGES: 0x0000\n  - LAYER_IS_VISIBLE_ON_NEW_PAGES: 0x0010\n  - LAYER_IS_HIDDEN_ON_NEW_PAGES: 0x0020\n\nWhen you Update a page (as opposed to creating a new page) the current\nvisibility of the layer is used.\n\nNOTE: Prior to SketchUp 2014 the <code>LAYER_HIDDEN_BY_DEFAULT</code> flag\nwould trigger the validation check in SketchUp that would reset the\n<code>page_behavior</code> of the layer.","name":"page_behavior=","namespace":"Sketchup::Layer","path":"Sketchup::Layer#page_behavior=","type":"instance_method","visibility":"public","parameters":[["pagebehavior",null,"Pagebehavior value."]],"return":[null,"pagebehavior - an integer representing the default\nvisibility of the layer."]},"Sketchup::Layer#visible=":{"description":"The visible= method is used to set if the layer is visible.","name":"visible=","namespace":"Sketchup::Layer","path":"Sketchup::Layer#visible=","type":"instance_method","visibility":"public","parameters":[["is_visible",null,"The new visibility setting."]]},"Sketchup::Layer#visible?":{"description":"The visible? method is used to determine if the layer is visible.","name":"visible?","namespace":"Sketchup::Layer","path":"Sketchup::Layer#visible?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the layer is visible"]},"Sketchup::Layers":{"description":"The Layers collection allows you to see and manage all of the layers in a\nmodel. You get a pointer to the Layers object from within the Model.","name":"Layers","namespace":"Sketchup","path":"Sketchup::Layers","type":"class","visibility":"public"},"Sketchup::Layers#[]":{"description":"The {#[]} method is used to retrieve a layer by index or name.","name":"[]","namespace":"Sketchup::Layers","path":"Sketchup::Layers#[]","type":"instance_method","visibility":"public","parameters":[["index_or_name",["Integer","String"],"A number representing the layer's\nindex in an array of Layer objects, or the name of the layer."]],"return":[["Sketchup::Layer","nil"],""]},"Sketchup::Layers#add":{"description":"The add method is used to add a new layer.\n\nIf you give the name of a Layer that is already defined, it will return the\nexisting Layer rather than adding a new one.","name":"add","namespace":"Sketchup::Layers","path":"Sketchup::Layers#add","type":"instance_method","visibility":"public","parameters":[["layer_name",null,"The name of the added layer."]],"return":[null,"layer - the new Layer object"]},"Sketchup::Layers#add_observer":{"description":"The add_observer method is used to add an observer to the layers collection.","name":"add_observer","namespace":"Sketchup::Layers","path":"Sketchup::Layers#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",null,"An observer."]],"return":[null,"success - true if successful, false if unsuccessful."]},"Sketchup::Layers#at":{"description":"The {#at} method is an alias for {#[]}.","name":"at","namespace":"Sketchup::Layers","path":"Sketchup::Layers#at","type":"instance_method","visibility":"public","return":[["Sketchup::Layer","nil"],""]},"Sketchup::Layers#count":{"description":"","name":"count","namespace":"Sketchup::Layers","path":"Sketchup::Layers#count","type":"instance_method","visibility":"public","return":[null,"integer - the number of layers in the collection"]},"Sketchup::Layers#each":{"description":"The each method is used to iterate through all of the layers.","name":"each","namespace":"Sketchup::Layers","path":"Sketchup::Layers#each","type":"instance_method","visibility":"public"},"Sketchup::Layers#length":{"description":"The {#length} method retrieves the number of layers.","name":"length","namespace":"Sketchup::Layers","path":"Sketchup::Layers#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Layers#purge_unused":{"description":"The purged_unused method is used to remove unused layers.","name":"purge_unused","namespace":"Sketchup::Layers","path":"Sketchup::Layers#purge_unused","type":"instance_method","visibility":"public","return":[null,"success - true if successful, false if unsuccessful."]},"Sketchup::Layers#remove":{"description":"Remove the given layer from the model, optionally removing the geometry.","name":"remove","namespace":"Sketchup::Layers","path":"Sketchup::Layers#remove","type":"instance_method","visibility":"public","parameters":[["layer",null,"Integer index, String name or Layer"],["remove_geometry",null,"Boolean - If true, geometry in the removed layer will\nbe removed as well. If false (which is the default),\nthis geometry will be placed on Layer 0."]],"return":[null,"boolean - true if successful, false if unsuccessful."]},"Sketchup::Layers#remove_observer":{"description":"The remove_observer method is used to remove an observer from the current\nobject.","name":"remove_observer","namespace":"Sketchup::Layers","path":"Sketchup::Layers#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",null,"An observer."]],"return":[null,"success - true if successful, false if unsuccessful."]},"Sketchup::Layers#size":{"description":"The {#size} method is an alias of {#length}.","name":"size","namespace":"Sketchup::Layers","path":"Sketchup::Layers#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Layers#unique_name":{"description":"The unique_name method can be used to get a string that will be a unique\nlayer name inside this collection.","name":"unique_name","namespace":"Sketchup::Layers","path":"Sketchup::Layers#unique_name","type":"instance_method","visibility":"public","parameters":[["base_name",["optional"],"The base name to build the unique name from."]],"return":[null,"name - the unique name"]},"Sketchup::LayersObserver":{"description":"This observer interface is implemented to react to layers events. To\nimplement this observer, create a Ruby class of this type, override the\ndesired methods, and add an instance of the observer to the objects of\ninterests.","name":"LayersObserver","namespace":"Sketchup","path":"Sketchup::LayersObserver","type":"class","visibility":"public"},"Sketchup::LayersObserver#onCurrentLayerChanged":{"description":"The {#onCurrentLayerChanged} method is called when the user selects a\ndifferent active layer.","name":"onCurrentLayerChanged","namespace":"Sketchup::LayersObserver","path":"Sketchup::LayersObserver#onCurrentLayerChanged","type":"instance_method","visibility":"public","parameters":[["layers",["Sketchup::Layers"],null],["layer",["Sketchup::Layer"],null]],"return":[["nil"],""]},"Sketchup::LayersObserver#onLayerAdded":{"description":"The {#onLayerAdded} method is called when a new layer is added to a model.","name":"onLayerAdded","namespace":"Sketchup::LayersObserver","path":"Sketchup::LayersObserver#onLayerAdded","type":"instance_method","visibility":"public","parameters":[["layers",["Sketchup::Layers"],null],["layer",["Sketchup::Layer"],null]],"return":[["nil"],""]},"Sketchup::LayersObserver#onLayerChanged":{"description":"The {#onLayerChanged} method is called when a layer is changed.","name":"onLayerChanged","namespace":"Sketchup::LayersObserver","path":"Sketchup::LayersObserver#onLayerChanged","type":"instance_method","visibility":"public","parameters":[["layers",["Sketchup::Layers"],null],["layer",["Sketchup::Layer"],null]],"return":[["nil"],""]},"Sketchup::LayersObserver#onLayerRemoved":{"description":"The {#onLayerRemoved} method is called when a layer is removed from a model.","name":"onLayerRemoved","namespace":"Sketchup::LayersObserver","path":"Sketchup::LayersObserver#onLayerRemoved","type":"instance_method","visibility":"public","parameters":[["layers",["Sketchup::Layers"],null],["layer",["Sketchup::Layer"],null]],"return":[["nil"],""]},"Sketchup::LayersObserver#onRemoveAllLayers":{"description":"The {#onRemoveAllLayers} method is called when all layer are removed from a\nmodel.","name":"onRemoveAllLayers","namespace":"Sketchup::LayersObserver","path":"Sketchup::LayersObserver#onRemoveAllLayers","type":"instance_method","visibility":"public","parameters":[["layers",["Sketchup::Layers"],null]],"return":[["nil"],""]},"Sketchup::Licensing":{"description":"The +Sketchup::Licensing+ module contains methods for\nextensions purchased from Extension Warehouse to check their licensing status.\n\nIt is advised to place these calls inside encrypted Ruby (.rbe) files. This\nAPI is also exposed via the SketchUp C API. Extensions that already use\nnative code should prefer using the native API, which should be more secure\nthan their Ruby API counterparts.\n\nFor more details, see:\n{Developer Center Licensing Tutorial}[https://extensions.sketchup.com/en/developer_center/tutorial_licensing]","name":"Licensing","namespace":"Sketchup","path":"Sketchup::Licensing","type":"module","visibility":"public"},"Sketchup::Licensing.get_extension_license":{"description":"Acquires a license for a given extension.","name":"get_extension_license","namespace":"Sketchup::Licensing","path":"Sketchup::Licensing.get_extension_license","type":"module_function","visibility":"public","parameters":[["extension_id",["String"],"The Extension Warehouse UUID for the desired extension."]],"return":[["ExtensionLicense"],"An object representing\nlicensing state for the extension. Do not store this object, retrieve\nit again when needed since licensing state may have changed."]},"Sketchup::Licensing::EXPIRED":{"description":"Constants","name":"EXPIRED","namespace":"Sketchup::Licensing","path":"Sketchup::Licensing::EXPIRED","type":"constant","return":null,"visibility":"public"},"Sketchup::Licensing::ExtensionLicense":{"description":"The Sketchup::Licensing::ExtensionLicense class is used to store extension\nlicense information. An instance of this class is returned by\nSketchup::Licensing.get_extension_license. Note that this is a temporary\nobject representing the extension licensing state for the moment it was\nreturned. It will not reflect any licensing state changes that may occur.","name":"ExtensionLicense","namespace":"Sketchup::Licensing","path":"Sketchup::Licensing::ExtensionLicense","type":"class","visibility":"public"},"Sketchup::Licensing::ExtensionLicense#days_remaining":{"description":"The days_remaining method is used to get the number of days remaining until\nlicense expiration.","name":"days_remaining","namespace":"Sketchup::Licensing::ExtensionLicense","path":"Sketchup::Licensing::ExtensionLicense#days_remaining","type":"instance_method","visibility":"public","return":[null,"Integer - Number of days until license expiration. Zero\nif a permanent license or not licensed."]},"Sketchup::Licensing::ExtensionLicense#error_description":{"description":"The error_description method is used to obtain error information in case of\nfailure to acquire a license. This is meant to aid in debugging only.\nExtensions should not rely on any exact error description.","name":"error_description","namespace":"Sketchup::Licensing::ExtensionLicense","path":"Sketchup::Licensing::ExtensionLicense#error_description","type":"instance_method","visibility":"public","return":[null,"String - error description."]},"Sketchup::Licensing::ExtensionLicense#licensed?":{"description":"The licensed? method is used to decide whether the extension is licensed to\nrun or not.","name":"licensed?","namespace":"Sketchup::Licensing::ExtensionLicense","path":"Sketchup::Licensing::ExtensionLicense#licensed?","type":"instance_method","visibility":"public","return":[["Boolean"],"Boolean - true if the extension is allowed to run, false\nif it is not licensed and should quit."]},"Sketchup::Licensing::ExtensionLicense#state":{"description":"The state method returns a constant indicating the specific licensing state.\nThese should be used for informational purposes only and not to decide if\nthe extension is licensed to run. For that, please use the licensed? method.","name":"state","namespace":"Sketchup::Licensing::ExtensionLicense","path":"Sketchup::Licensing::ExtensionLicense#state","type":"instance_method","visibility":"public","return":[null,"Integer - One of Sketchup::Licensing::LICENSED,\nSketchup::Licensing::EXPIRED, Sketchup::Licensing::TRIAL,\nSketchup::Licensing::TRIAL_EXPIRED,\nSketchup::Licensing::NOT_LICENSED"]},"Sketchup::Licensing::LICENSED":{"description":"Stub value.","name":"LICENSED","namespace":"Sketchup::Licensing","path":"Sketchup::Licensing::LICENSED","type":"constant","return":null,"visibility":"public"},"Sketchup::Licensing::NOT_LICENSED":{"description":"Stub value.","name":"NOT_LICENSED","namespace":"Sketchup::Licensing","path":"Sketchup::Licensing::NOT_LICENSED","type":"constant","return":null,"visibility":"public"},"Sketchup::Licensing::TRIAL":{"description":"Stub value.","name":"TRIAL","namespace":"Sketchup::Licensing","path":"Sketchup::Licensing::TRIAL","type":"constant","return":null,"visibility":"public"},"Sketchup::Licensing::TRIAL_EXPIRED":{"description":"Stub value.","name":"TRIAL_EXPIRED","namespace":"Sketchup::Licensing","path":"Sketchup::Licensing::TRIAL_EXPIRED","type":"constant","return":null,"visibility":"public"},"Sketchup::Loop":{"description":"Loop is a low level topology class that will not need to be used often. A\nLoop is a chain of Edges that bound a Face.","name":"Loop","namespace":"Sketchup","path":"Sketchup::Loop","type":"class","visibility":"public"},"Sketchup::Loop#convex?":{"description":"Determine if the loop is convex.","name":"convex?","namespace":"Sketchup::Loop","path":"Sketchup::Loop#convex?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if convex, false if not convex."]},"Sketchup::Loop#edges":{"description":"Get an array of the edges that define the loop in an ordered sequence.","name":"edges","namespace":"Sketchup::Loop","path":"Sketchup::Loop#edges","type":"instance_method","visibility":"public","return":[null,"edges - an array of Edge objects if successful."]},"Sketchup::Loop#edgeuses":{"description":"Get an array of the EdgeUse objects that define this loop in an ordered\nsequence.","name":"edgeuses","namespace":"Sketchup::Loop","path":"Sketchup::Loop#edgeuses","type":"instance_method","visibility":"public","return":[null,"edgeuses - an array of EdgeUse objects if successful."]},"Sketchup::Loop#face":{"description":"Get the Face object that is bounded by this loop.","name":"face","namespace":"Sketchup::Loop","path":"Sketchup::Loop#face","type":"instance_method","visibility":"public","return":[null,"face - a Face object if successful"]},"Sketchup::Loop#outer?":{"description":"Determine if this is an outer loop. Each face has one outer loop, and will\nhave one loop for each hole.","name":"outer?","namespace":"Sketchup::Loop","path":"Sketchup::Loop#outer?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if the loop is an outer loop, false if it\nis not an outer loop."]},"Sketchup::Loop#vertices":{"description":"Get an array of the vertices that define the loop in an ordered sequence.","name":"vertices","namespace":"Sketchup::Loop","path":"Sketchup::Loop#vertices","type":"instance_method","visibility":"public","return":[null,"vertices - an array of Vertex objects if successful."]},"Sketchup::Material":{"description":"The Material class represents a texture or color that can be applied to\nDrawingelements. It is most often applied to Faces.\n\nYou can pass any object that can be used as a material to a method that\nrequires a material. Objects include actual materials, color, and classes\nthat can be converted to a color.\n\nThe following are valid (assuming the existence of a Material mat1.)","name":"Material","namespace":"Sketchup","path":"Sketchup::Material","type":"class","visibility":"public"},"Sketchup::Material#<=>":{"description":"The <=> method is used to compare two materials based on name. The number\nreturned relates to the \"string distance\" between the names.","name":"<=>","namespace":"Sketchup::Material","path":"Sketchup::Material#<=>","type":"instance_method","visibility":"public","parameters":[["material2",["Sketchup::Material"],"A Material object."]],"return":[["Integer"],"0 if they are equal, positive number if\nmaterial1 > material2, negative if material1 < material2"]},"Sketchup::Material#==":{"description":"The == method is used to test if two materials are the same.","name":"==","namespace":"Sketchup::Material","path":"Sketchup::Material#==","type":"instance_method","visibility":"public","parameters":[["material2",["Sketchup::Material"],"A Material object."]],"return":[["Boolean"],"true if the materials are the same, false if\nthey are different"]},"Sketchup::Material#alpha":{"description":"The alpha method is used to get the opacity of the material.\n\nThe value will be between 0.0 and 1.0. A value of 0.0 means that the material is\ncompletely transparent. A value of 1.0 means that the Material is completely\nopaque.","name":"alpha","namespace":"Sketchup::Material","path":"Sketchup::Material#alpha","type":"instance_method","visibility":"public","return":[["Float"],"a number between 0 and 1"]},"Sketchup::Material#alpha=":{"description":"The alpha= method is used to set the opacity of the material.\n\nThe value must be between 0.0 and 1.0. A value of 0.0 means that the material is\ncompletely transparent. A value of 1.0 means that the Material is completely\nopaque.","name":"alpha=","namespace":"Sketchup::Material","path":"Sketchup::Material#alpha=","type":"instance_method","visibility":"public","parameters":[["alpha",["Float"],"An opacity value."]],"return":[["Float"],"the newly set opacity value"]},"Sketchup::Material#color":{"description":"The color method is used to retrieve the color of the material.\n\nIf it uses a Texture, this will return the average color.","name":"color","namespace":"Sketchup::Material","path":"Sketchup::Material#color","type":"instance_method","visibility":"public","return":[["Sketchup::Color"],"a Color object"]},"Sketchup::Material#color=":{"description":"The color= method is used to set the color of the material.\n\nIf the Material has a texture, then this turns it into a colorized\ntexture.\n\nTo reset the color of a Material with a texture, set the color\nto nil.","name":"color=","namespace":"Sketchup::Material","path":"Sketchup::Material#color=","type":"instance_method","visibility":"public","parameters":[["color",["Sketchup::Color","String","nil"],"A Color object."]],"return":[["Sketchup::Color","String","nil"],"the newly set Color object"]},"Sketchup::Material#colorize_deltas":{"description":"The colorize_deltas method retrieves the HLS delta for colorized materials.","name":"colorize_deltas","namespace":"Sketchup::Material","path":"Sketchup::Material#colorize_deltas","type":"instance_method","visibility":"public","return":[["Array(Float, Float, Float)"],"An array of floats representing the HLS delta."]},"Sketchup::Material#colorize_type":{"description":"The colorize_type method retrieves the type of colorization of the material.\nThis value is only relevant when the materialType is set to 2\n(colorized textured).\nTypes include:\n\n  - 0 = shift (Sketchup::Material::COLORIZE_SHIFT),\n  - 1 = tint (Sketchup::Material::COLORIZE_TINT),","name":"colorize_type","namespace":"Sketchup::Material","path":"Sketchup::Material#colorize_type","type":"instance_method","visibility":"public","return":[["Integer"],"the colorize type for the Material object."]},"Sketchup::Material#colorize_type=":{"description":"The colorize_type method set the type of colorization of the material.\nThis value is only relevant when the materialType is set to 2\n(colorized textured).\nTypes include:\n\n  - 0 = shift (Sketchup::Material::COLORIZE_SHIFT),\n  - 1 = tint (Sketchup::Material::COLORIZE_TINT),","name":"colorize_type=","namespace":"Sketchup::Material","path":"Sketchup::Material#colorize_type=","type":"instance_method","visibility":"public","parameters":[["type",["Integer"],"- the new colorize type for the Material object."]],"return":[["Integer"],"the colorize type for the Material object."]},"Sketchup::Material#display_name":{"description":"The display_name method retrieves the name that is displayed within SketchUp\nfor the material.\n\nThis should be used when presenting the name in the UI, but the returned name\ncannot be used as a key in model.materials.","name":"display_name","namespace":"Sketchup::Material","path":"Sketchup::Material#display_name","type":"instance_method","visibility":"public","return":[["String"],"the display name for the material"]},"Sketchup::Material#materialType":{"description":"The materialType method retrieves the type of the material. Types include:\n\n  - 0 = solid (Sketchup::Material::MATERIAL_SOLID),\n  - 1 = textured (Sketchup::Material::MATERIAL_TEXTURED),\n  - 2 = colorized textured (Sketchup::Material::MATERIAL_COLORIZED_TEXTURED).\n\nThe constants where added in SketchUp 2015.","name":"materialType","namespace":"Sketchup::Material","path":"Sketchup::Material#materialType","type":"instance_method","visibility":"public","return":[["Integer"],"the material type for the Material object. See\nsummary for details."]},"Sketchup::Material#name":{"description":"The name method retrieves the name of the material. This is the\ninternal name of the object which should be used for retrieving\nthe material from the model's material list.\n\nUse .display_name to display the name in the UI.","name":"name","namespace":"Sketchup::Material","path":"Sketchup::Material#name","type":"instance_method","visibility":"public","return":[["String"],"the name of the Material object"]},"Sketchup::Material#name=":{"description":"Sets the name of the material.","name":"name=","namespace":"Sketchup::Material","path":"Sketchup::Material#name=","type":"instance_method","visibility":"public","parameters":[["str",["String"],"the new material name"]],"return":[["String"],"the newly set material name."]},"Sketchup::Material#save_as":{"description":"The {#save_as} method is used to write a material to a SKM file.\n\nYou must remember to append \".skm\" to the filename as this will not be done\nautomatically.","name":"save_as","namespace":"Sketchup::Material","path":"Sketchup::Material#save_as","type":"instance_method","visibility":"public","parameters":[["filename",["String"],"the path to the SKM file to load."]],"return":[["Boolean"],"`true` if successful"]},"Sketchup::Material#texture":{"description":"The texture method retrieves the texture of the material.","name":"texture","namespace":"Sketchup::Material","path":"Sketchup::Material#texture","type":"instance_method","visibility":"public","return":[["Sketchup::Texture","nil"],"the Texture object within the Material.\nReturns nil if the Material does not have a texture."]},"Sketchup::Material#texture=":{"description":"The texture= method sets the texture for the material.\n\nSetting the texture to +nil+ will turn it into a solid color","name":"texture=","namespace":"Sketchup::Material","path":"Sketchup::Material#texture=","type":"instance_method","visibility":"public"},"Sketchup::Material#use_alpha?":{"description":"The use_alpha? method tells if the material uses transparency.\n\nNote that this is not affected by the alpha value of the color object. Only\nthe .alpha value and transparent texture will make this method return true.","name":"use_alpha?","namespace":"Sketchup::Material","path":"Sketchup::Material#use_alpha?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the material use alpha transparency, otherwise false."]},"Sketchup::Material#write_thumbnail":{"description":"The write_thumbnail method writes a bitmap thumbnail to the given file name.","name":"write_thumbnail","namespace":"Sketchup::Material","path":"Sketchup::Material#write_thumbnail","type":"instance_method","visibility":"public","parameters":[["filename",["String"],"The file name for the thumbnail."],["resolution",["Integer"],"The resolution of the thumbnail."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Material::COLORIZE_SHIFT":{"description":"Constants","name":"COLORIZE_SHIFT","namespace":"Sketchup::Material","path":"Sketchup::Material::COLORIZE_SHIFT","type":"constant","return":null,"visibility":"public"},"Sketchup::Material::COLORIZE_TINT":{"description":"Stub value.","name":"COLORIZE_TINT","namespace":"Sketchup::Material","path":"Sketchup::Material::COLORIZE_TINT","type":"constant","return":null,"visibility":"public"},"Sketchup::Material::MATERIAL_COLORIZED_TEXTURED":{"description":"Stub value.","name":"MATERIAL_COLORIZED_TEXTURED","namespace":"Sketchup::Material","path":"Sketchup::Material::MATERIAL_COLORIZED_TEXTURED","type":"constant","return":null,"visibility":"public"},"Sketchup::Material::MATERIAL_SOLID":{"description":"Stub value.","name":"MATERIAL_SOLID","namespace":"Sketchup::Material","path":"Sketchup::Material::MATERIAL_SOLID","type":"constant","return":null,"visibility":"public"},"Sketchup::Material::MATERIAL_TEXTURED":{"description":"Stub value.","name":"MATERIAL_TEXTURED","namespace":"Sketchup::Material","path":"Sketchup::Material::MATERIAL_TEXTURED","type":"constant","return":null,"visibility":"public"},"Sketchup::Materials":{"description":"A collection of Materials objects. Each model contains a Materials collection\nthat can be accessed via Model.materials.","name":"Materials","namespace":"Sketchup","path":"Sketchup::Materials","type":"class","visibility":"public"},"Sketchup::Materials#[]":{"description":"The {#[]} method is used to retrieve a material by index or name.\n\nThe {#at} method is an alias of {#[]}","name":"[]","namespace":"Sketchup::Materials","path":"Sketchup::Materials#[]","type":"instance_method","visibility":"public"},"Sketchup::Materials#add":{"description":"Add a new Material.  When called with no arguments, this will generate a\nnew unique name for the new Material.  If a name is given, it will check\nto see if there is already a material with that name.  If there is already\na material with the given name, then a new unique name is generated using\nthe given name as a base.","name":"add","namespace":"Sketchup::Materials","path":"Sketchup::Materials#add","type":"instance_method","visibility":"public","parameters":[["name",["String"],"The name of the new material."]],"return":[["Sketchup::Material"],"a Material object"]},"Sketchup::Materials#add_observer":{"description":"The add_observer method is used to add an observer to the materials\ncollection.","name":"add_observer","namespace":"Sketchup::Materials","path":"Sketchup::Materials#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Materials#at":{"description":"The {#[]} method is used to retrieve a material by index or name.\n\nThe {#at} method is an alias of {#[]}","name":"at","namespace":"Sketchup::Materials","path":"Sketchup::Materials#at","type":"instance_method","visibility":"public"},"Sketchup::Materials#count":{"description":"","name":"count","namespace":"Sketchup::Materials","path":"Sketchup::Materials#count","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Materials#current":{"description":"The current method is used to get the current material, i.e. the material\nthat the user has selected in the Materials dialog.","name":"current","namespace":"Sketchup::Materials","path":"Sketchup::Materials#current","type":"instance_method","visibility":"public","return":[["Sketchup::Material"],"a Material object."]},"Sketchup::Materials#current=":{"description":"The current= method is used to set the current material.","name":"current=","namespace":"Sketchup::Materials","path":"Sketchup::Materials#current=","type":"instance_method","visibility":"public","parameters":[["material",["Sketchup::Material"],"A Material object."]],"return":[["Sketchup::Material"],""]},"Sketchup::Materials#each":{"description":"The each method is used to iterate through all of the materials.","name":"each","namespace":"Sketchup::Materials","path":"Sketchup::Materials#each","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::Materials#length":{"description":"The number of materials in the collection.","name":"length","namespace":"Sketchup::Materials","path":"Sketchup::Materials#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Materials#load":{"description":"The {#load} method is used to load a material from file into the model.\n\nIf a matching material exist in the model that will be returned instead.","name":"load","namespace":"Sketchup::Materials","path":"Sketchup::Materials#load","type":"instance_method","visibility":"public","parameters":[["filename",["String"],"the path to the SKM file to load."]],"return":[["Sketchup::Material"],"the new loaded material, or existing material."]},"Sketchup::Materials#purge_unused":{"description":"The purge_unused method is used to remove unused materials.","name":"purge_unused","namespace":"Sketchup::Materials","path":"Sketchup::Materials#purge_unused","type":"instance_method","visibility":"public","return":[["Sketchup::Materials"],"The Materials object."]},"Sketchup::Materials#remove":{"description":"Remove a given material.\n\nNOTE: On SketchUp versions prior to 2014 there is a bug in this method that\ncould potentially lead to file corruption. If you call Materials.remove on a\nmaterial that is painted onto any entity in the active model (e.g. faces,\nedges, groups, ...), then calling this method will not successfully unpaint\nthe entity and remove the material from the model.\nYou must first unpaint all of the entities that respond to .material\nand .back_material before calling Materials.remove.","name":"remove","namespace":"Sketchup::Materials","path":"Sketchup::Materials#remove","type":"instance_method","visibility":"public","parameters":[["material",["Sketchup::Material"],"The material to remove."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Materials#remove_observer":{"description":"The remove_observer method is used to remove an observer from the materials\ncollection.","name":"remove_observer","namespace":"Sketchup::Materials","path":"Sketchup::Materials#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Materials#size":{"description":"The number of materials in the collection.\n\nThe {#size} method is an alias for {#length}.","name":"size","namespace":"Sketchup::Materials","path":"Sketchup::Materials#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::MaterialsObserver":{"description":"This observer interface is implemented to react to materials events. To\nimplement this observer, create a Ruby class of this type, override the\ndesired methods, and add an instance of the observer to the objects of\ninterests.","name":"MaterialsObserver","namespace":"Sketchup","path":"Sketchup::MaterialsObserver","type":"class","visibility":"public"},"Sketchup::MaterialsObserver#onMaterialAdd":{"description":"The {#onMaterialAdd} method is invoked whenever a new material is added.","name":"onMaterialAdd","namespace":"Sketchup::MaterialsObserver","path":"Sketchup::MaterialsObserver#onMaterialAdd","type":"instance_method","visibility":"public","parameters":[["materials",["Sketchup::Materials"],null],["material",["Sketchup::Material"],null]],"return":[["nil"],""]},"Sketchup::MaterialsObserver#onMaterialChange":{"description":"The {#onMaterialChange} method is invoked whenever a material's texture image\nis altered.","name":"onMaterialChange","namespace":"Sketchup::MaterialsObserver","path":"Sketchup::MaterialsObserver#onMaterialChange","type":"instance_method","visibility":"public","parameters":[["materials",["Sketchup::Materials"],null],["material",["Sketchup::Material"],null]],"return":[["nil"],""]},"Sketchup::MaterialsObserver#onMaterialRefChange":{"description":"The {#onMaterialRefChange} method is invoked whenever the number of entities\nthat a material is painted on changes. This could be due to the user\nmanually painting something, but it could also be when faces are split,\npasted, push-pulled, deleted, etc.","name":"onMaterialRefChange","namespace":"Sketchup::MaterialsObserver","path":"Sketchup::MaterialsObserver#onMaterialRefChange","type":"instance_method","visibility":"public","parameters":[["materials",["Sketchup::Materials"],null],["material",["Sketchup::Material"],null]],"return":[["nil"],""]},"Sketchup::MaterialsObserver#onMaterialRemove":{"description":"The {#onMaterialRemove} method is invoked whenever a material is deleted.","name":"onMaterialRemove","namespace":"Sketchup::MaterialsObserver","path":"Sketchup::MaterialsObserver#onMaterialRemove","type":"instance_method","visibility":"public","parameters":[["materials",["Sketchup::Materials"],null],["material",["Sketchup::Material"],null]],"return":[["nil"],""]},"Sketchup::MaterialsObserver#onMaterialSetCurrent":{"description":"The {#onMaterialSetCurrent} method is invoked whenever a different material\nis selected in the Materials dialog.\n\nThe materials parameter might be Nil when the material is picked from the\nmaterials libraries and not yet added to the model.","name":"onMaterialSetCurrent","namespace":"Sketchup::MaterialsObserver","path":"Sketchup::MaterialsObserver#onMaterialSetCurrent","type":"instance_method","visibility":"public","parameters":[["materials",["Sketchup::Materials"],null],["material",["Sketchup::Material"],null]],"return":[["nil"],""]},"Sketchup::MaterialsObserver#onMaterialUndoRedo":{"description":"The {#onMaterialUndoRedo} method is invoked whenever a material is altered\nand then those changes are undone or redone.","name":"onMaterialUndoRedo","namespace":"Sketchup::MaterialsObserver","path":"Sketchup::MaterialsObserver#onMaterialUndoRedo","type":"instance_method","visibility":"public","parameters":[["material",["Sketchup::Material"],null],["materials",["Sketchup::Materials"],null]],"return":[["nil"],""]},"Sketchup::Menu":{"description":"An interface to a menu.","name":"Menu","namespace":"Sketchup","path":"Sketchup::Menu","type":"class","visibility":"public"},"Sketchup::Menu#add_item":{"description":"The {#add_item} method is used to add a menu item to the specified menu.\n\nThis method takes a block that defines the action to perform when the menu\nitem is selected.\n\nThe item id that is returned can be used when adding an optional\nvalidation procedure for the menu item.","name":"add_item","namespace":"Sketchup::Menu","path":"Sketchup::Menu#add_item","type":"instance_method","visibility":"public"},"Sketchup::Menu#add_separator":{"description":"The add_separator method is used to add a menu separator to a menu.","name":"add_separator","namespace":"Sketchup::Menu","path":"Sketchup::Menu#add_separator","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::Menu#add_submenu":{"description":"The add_submenu method is used to add a sub-menu to a menu.","name":"add_submenu","namespace":"Sketchup::Menu","path":"Sketchup::Menu#add_submenu","type":"instance_method","visibility":"public","parameters":[["title",["String"],"The title of the sub menu."]],"return":[["Sketchup::Menu"],"a Menu object"]},"Sketchup::Menu#set_validation_proc":{"description":"The set_validation_proc method is used to identify the menu validation\nprocedure. Your procedure should return either MF_ENABLED, MF_DISABLED,\nMF_CHECKED, MF_UNCHECKED, or MF_GRAYED.","name":"set_validation_proc","namespace":"Sketchup::Menu","path":"Sketchup::Menu#set_validation_proc","type":"instance_method","visibility":"public","parameters":[["menu",["String"],"A string name of the menu to add."]],"return":[["Integer"],"a unique numerical item id for the menu"]},"Sketchup::Model":{"description":"This is the interface to a SketchUp model. The model is the 3D drawing that\nthe user is working with, and it serves as the \"entry point\" for most Ruby\nAPI interactions. The Sketchup.active_model method gives you a handle to the\ncurrent model, and from there you can use the model-level methods to start\ngetting information and making changes.\n\nConstants:\nProduct Family\n- Model::ProTrial\n- Model::ProLicensed\n- Model::MakeTrial\n- Model::MakeTrialExpired","name":"Model","namespace":"Sketchup","path":"Sketchup::Model","type":"class","visibility":"public"},"Sketchup::Model#abort_operation":{"description":"The abort_operation method aborts the current operation started with the\nstart_operation method.\n\nThe abort_operation method is normally called from inside of a rescue clause\nto cancel an operation if something goes wrong.","name":"abort_operation","namespace":"Sketchup::Model","path":"Sketchup::Model#abort_operation","type":"instance_method","visibility":"public","return":[["Boolean"],"true if successful, false if unsuccessful"]},"Sketchup::Model#active_entities":{"description":"Returns an {Sketchup::Entities} object which contains\nall of the entities in the active model, component, or group (if you are\nwithin a group or component edit session.)","name":"active_entities","namespace":"Sketchup::Model","path":"Sketchup::Model#active_entities","type":"instance_method","visibility":"public","return":[["Sketchup::Entities"],""]},"Sketchup::Model#active_layer":{"description":"The active_layer method retrieves the active Layer.\n\nThe default layer in SketchUp is layer 0.","name":"active_layer","namespace":"Sketchup::Model","path":"Sketchup::Model#active_layer","type":"instance_method","visibility":"public","return":[["Sketchup::Layer"],"a layer object containing the currently active\nlayer"]},"Sketchup::Model#active_layer=":{"description":"The {#active_layer=} method sets the active {Sketchup::Layer} object.","name":"active_layer=","namespace":"Sketchup::Model","path":"Sketchup::Model#active_layer=","type":"instance_method","visibility":"public","parameters":[["layer",["Sketchup::Layer"],"The layer to be set as the active layer."]],"return":[["Sketchup::Layer"],""]},"Sketchup::Model#active_path":{"description":"Returns an array containing the sequence of entities the user has\ndouble-clicked on for editing. This allows one to determine whether they are\nin component edit mode and where in the model they are.\n\nFor example, if a user has double-clicked into a component to\nedit its geometry, and then double clicked into a sub-group to edit that,\nthe active_path might contain:\n\n<code>[<Sketchup::ComponentInstance>, <Sketchup::Group>]</code>","name":"active_path","namespace":"Sketchup::Model","path":"Sketchup::Model#active_path","type":"instance_method","visibility":"public","return":[["Array<Sketchup::Drawingelement>","nil"],"array of entities showing where the user is\ncurrently editing."]},"Sketchup::Model#active_view":{"description":"The active_view method returns the active View object for this model.","name":"active_view","namespace":"Sketchup::Model","path":"Sketchup::Model#active_view","type":"instance_method","visibility":"public","return":[["Sketchup::View"],"a view object"]},"Sketchup::Model#add_note":{"description":"Add a text note to the Model.  The position of the note is given as relative\nwindow positions between 0 and 1.  For example, the following command\nwould create a note that start 1/10 of the ways down the screen from the\nupper left corner of the window.","name":"add_note","namespace":"Sketchup::Model","path":"Sketchup::Model#add_note","type":"instance_method","visibility":"public","parameters":[["note",["String"],"A string note."],["x",["Numeric"],"A distance along the x axis between 0 and 1."],["y",["Numeric"],"A distance along the y axis between 0 and 1."]],"return":[["Sketchup::Text"],"a note object or an exception if it is\nunsuccessful."]},"Sketchup::Model#add_observer":{"description":"The add_observer method is used to add an observer to the current object.","name":"add_observer","namespace":"Sketchup::Model","path":"Sketchup::Model#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Model#attribute_dictionaries":{"description":"The attribute_dictionaries method retrieves the AttributeDictionaries object\nthat is associated with the Model.","name":"attribute_dictionaries","namespace":"Sketchup::Model","path":"Sketchup::Model#attribute_dictionaries","type":"instance_method","visibility":"public","return":[["Sketchup::AttributeDictionaries"],"the AttributeDictionaries\nobject associated with the entity, or nil if there are\nno attribute_dictionary objects associated with the\nmodel. Care must be taken if nil is returned, for\nexample: invoking attribute_dictionaries.length will\nthrow a NoMethodError exception, not return 0."]},"Sketchup::Model#attribute_dictionary":{"description":"Returns the Sketchup::AttributeDictionary object that is specified by\nname.  If the model does not have an attribute dictionary that\ncorresponds to name, returns either nil, or a creates an attribute\ndictionary.  If the optional second argument is true, and there is no\nattribute dictionary that corresponds to name, a new attribute\ndictionary is created.","name":"attribute_dictionary","namespace":"Sketchup::Model","path":"Sketchup::Model#attribute_dictionary","type":"instance_method","visibility":"public","parameters":[["name",["String"],"The name of the dictionary you are attempting to\nretrieve."],["create",["Boolean"],"if set to true an attribute dictionary of the\ngiven \"name\" will be created if not found."]],"return":[["Sketchup::AttributeDictionary"],"an attribute dictionary object if\nsuccessful, nil if unsuccessful"]},"Sketchup::Model#axes":{"description":"The axes method returns the drawing axes for the model.","name":"axes","namespace":"Sketchup::Model","path":"Sketchup::Model#axes","type":"instance_method","visibility":"public","return":[["Sketchup::Axes"],"the axes for the model."]},"Sketchup::Model#behavior":{"description":"The behavior method retrieves the behavior of the model.","name":"behavior","namespace":"Sketchup::Model","path":"Sketchup::Model#behavior","type":"instance_method","visibility":"public","return":[["Sketchup::Behavior"],"behavior object for the model if successful"]},"Sketchup::Model#bounds":{"description":"The bounds method retrieves the bounding box of the model.","name":"bounds","namespace":"Sketchup::Model","path":"Sketchup::Model#bounds","type":"instance_method","visibility":"public","return":[["Geom::BoundingBox"],"bounding box for the model if successful"]},"Sketchup::Model#classifications":{"description":"The classifications method is used to retrieve the Classifications object\nfor this model.","name":"classifications","namespace":"Sketchup::Model","path":"Sketchup::Model#classifications","type":"instance_method","visibility":"public","return":[["Sketchup::Classifications"],"a Classifications object."]},"Sketchup::Model#close":{"description":"The close method is used to close this model. On Mac OS, only the active\nmodel can be closed. On Windows, since there can be only one document open,\nthis method will perform a File/New operation.","name":"close","namespace":"Sketchup::Model","path":"Sketchup::Model#close","type":"instance_method","visibility":"public","parameters":[["ignore_changes",["Boolean"],"boolean - if true, model changes will be\nignored and save prompts will be suppressed.\nIf false, changes will not be ignored and save\nprompts will be displayed normally."]],"return":[["nil"],""]},"Sketchup::Model#close_active":{"description":"The close_active method is used to close the currently active (open) group\nor component.\n\nNote: before SketchUp 2014 this method had a bug where it didn't create an\nundo operation and that could lead to corrupted geometry when undo/redo was\nused after invoking this method.","name":"close_active","namespace":"Sketchup::Model","path":"Sketchup::Model#close_active","type":"instance_method","visibility":"public","return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Model#commit_operation":{"description":"The commit_operation method commits an operation for undo.\n\nThe commit_operation method is normally called at the end of a method to\ncommit the operation that the method performs.","name":"commit_operation","namespace":"Sketchup::Model","path":"Sketchup::Model#commit_operation","type":"instance_method","visibility":"public","return":[["Boolean"],"true if successful, false if unsuccessful"]},"Sketchup::Model#definitions":{"description":"The definitions method retrieves a definition list containing all of the\ncomponent definitions in the model.\n\nThe returned definitions can be empty.","name":"definitions","namespace":"Sketchup::Model","path":"Sketchup::Model#definitions","type":"instance_method","visibility":"public","return":[["Sketchup::DefinitionList"],"a definitions list if successful."]},"Sketchup::Model#description":{"description":"The description method retrieves a description of the model as found in the\nModel Info > Files panel.\n\nThe returned description can be empty. The default description for all models\nis empty.","name":"description","namespace":"Sketchup::Model","path":"Sketchup::Model#description","type":"instance_method","visibility":"public","return":[["String"],"a description if successful."]},"Sketchup::Model#description=":{"description":"The {#description=} method sets the description of the model.","name":"description=","namespace":"Sketchup::Model","path":"Sketchup::Model#description=","type":"instance_method","visibility":"public","parameters":[["description",["String"],"the description string to be set."]],"return":[["String"],""]},"Sketchup::Model#edit_transform":{"description":"Returns the transformation of the current component edit session. If a user\nhas double-clicked to edit a component's geometry, this will\nreturn the transformation of that component, relative to its parent's\norigin. This allows one to correctly calculate \"local\" transformations of\na given entity regardless of whether the user is in edit mode.","name":"edit_transform","namespace":"Sketchup::Model","path":"Sketchup::Model#edit_transform","type":"instance_method","visibility":"public","return":[["Geom::Transformation"],"the current edit Transformation"]},"Sketchup::Model#entities":{"description":"The entities method returns an Entities object containing an array of\nentities in the model.\n\nIf no entities are in your model, this method returns an empty Entities\nobject (an empty array)","name":"entities","namespace":"Sketchup::Model","path":"Sketchup::Model#entities","type":"instance_method","visibility":"public","return":[["Sketchup::Entities"],"an Entities object if successful"]},"Sketchup::Model#export":{"description":"The export method is used to export a given file format. It knows which\nformat to export based on the file extension you place on the file name.\nFor example, a filename of \"thing.obj\" will export an OBJ file, whereas\n\"thing.dae\" will export a COLLADA file.\n\nFor SketchUp Pro 7.1+, valid extensions include dae, kmz, 3ds, dwg,\ndxf, fbx, obj, wrl, and xsi. SketchUp Free only supports dae and kmz.\n\nFormat Support Changes:\n* SketchUp 7.1 added COLLADA (.dae) export capability.\n* SketchUp Pro 2016+ includes PDF export capability.\n\nThe optional second parameter can be either:\n- a boolean flag, which instructs the exporter to display a summary dialog after export\n- a hash of options specific to the given exporter, which may include a summary dialog flag.\n\nThe following describes the options that can be defined in the hash for the\nvarious exporters.\n\nAll exporters\n- show_summary (default = false)\n\nDAE (COLLADA)\n- triangulated_faces (default = true)\n- doublesided_faces (default = true)\n- edges (default = false)\n- author_attribution (default = false)\n- texture_maps (default = true)\n- selectionset_only (default = false)\n- preserve_instancing (default = true)\n\nPDF\nWINDOWS OPTIONS\n- output_profile_lines (default = true)\n- output_section_lines (default = true)\n- edge_extensions (default = true)\n- match_screen_profiles (default = true)\n- match_screen_section (default = true)\n- match_screen_extensions (default = true)\n- full_scale (default = true)\n- map_fonts (default = true)\n- drawing_units (default = Length::Inches)\n- extension_units (default = Length::Feet)\n- height_units (default = Length::Feet)\n- model_units (default = Length::Feet)\n- width_units (default = Length::Feet)\n- extension_length (default = 0.0)\n- line_width (default = 0.0)\n- line_width_section (default = 0.0)\n- length_in_drawing (default = 1.0)\n- length_in_model (default = 1.0)\n- window_height (default = 1.0)\n\nMAC OPTIONS\n- line_weight (default = 0.5)\n- imageWidth (default = 50)\n- imageHeight (default = 50)\n\nReturns true or false indicating success or failure.","name":"export","namespace":"Sketchup::Model","path":"Sketchup::Model#export","type":"instance_method","visibility":"public","parameters":[["filename",["String"],"The name of the file to export."],["options",["Boolean","Hash"],"Either a true/false value or a hash table. See above\nfor details."]],"return":[["Boolean"],"true if successful, false if unsuccessful"]},"Sketchup::Model#find_entity_by_id":{"description":"Finds and returns entities by their entityID or GUID.\n\nGUIDs looked up are only relevant to Group and ComponentInstance as these\nGUIDs are persistent. ComponentDefinition and Model GUIDs are not persistent\nand are not looked up.\n\nWhen given an array of IDs, an array is returned with a 1:1 mapping to the\ninput arguments. This array may contain nil values if some ids were not\nfound. You cannot look up a mix of entityIDs and GUIDs in the same call.","name":"find_entity_by_id","namespace":"Sketchup::Model","path":"Sketchup::Model#find_entity_by_id","type":"instance_method","visibility":"public","parameters":[["ids_or_array",["Array<Integer, String>"],"Pass either a series of ids or a single array containing\nids. Ids must either be entityID Integers or GUID\nStrings."]],"return":[["Array<Sketchup::Entity, nil>"],"Returns an array with Entity  objects for each id\nfound and nil otherwise. Single Entity or nil when\ncalled with a single id."]},"Sketchup::Model#find_entity_by_persistent_id":{"description":"Finds and returns entities by their persistent id.\n\nWhen given an array of IDs, an array is returned with a 1:1 mapping to the\ninput arguments. This array may contain `nil` values if some ids were not\nfound.","name":"find_entity_by_persistent_id","namespace":"Sketchup::Model","path":"Sketchup::Model#find_entity_by_persistent_id","type":"instance_method","visibility":"public","parameters":[["ids_or_array",["Array<Integer>"],"Pass either a series of ids or a\nsingle array containing persistent ids."]],"return":[["Array<Sketchup::Entity, nil>"],"Returns an array with\n{Sketchup::Entity} objects for each id found and nil otherwise."]},"Sketchup::Model#georeferenced?":{"description":"This methods determines if the model is georeferenced.","name":"georeferenced?","namespace":"Sketchup::Model","path":"Sketchup::Model#georeferenced?","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Sketchup::Model#get_attribute":{"description":"The get_attribute method gets the value of an attribute that in the\nAttributeDictionary with the given name. If no value is associated\nwith key, or if the model does not have an attribute dictionary\nspecified by name, the optional third parameter will be returned.","name":"get_attribute","namespace":"Sketchup::Model","path":"Sketchup::Model#get_attribute","type":"instance_method","visibility":"public","parameters":[["dictname",["String"],"The name of the dictionary containing the value."],["key",["String"],"The key containing the value."],["defaultvalue",["optional"],"default value that will be returned if a\nvalue does not exist."]],"return":[["Object","nil"],"the value for a given key in the given\ndictionary if a value exists; the default value if a\ndefaultvalue is provided and the value does not exist;\nnil if the value does not exist and no defaultvalue is\nprovided."]},"Sketchup::Model#get_datum":{"description":"the get_datum method retrieves the datum, in the form of a string, used in\nUTM conversions.","name":"get_datum","namespace":"Sketchup::Model","path":"Sketchup::Model#get_datum","type":"instance_method","visibility":"public","return":[["String"],"a datum represented as a string if successful."]},"Sketchup::Model#get_product_family":{"description":"Returns a value which indicates the product family of the installed SketchUp\napplication.\nAs of SketchUp 2013, the return values are:\n- +0+ = Unknown\n- +1+ = Pro Trial\n- +2+ = Pro\n- +3+ = Pro Expired\n- +4+ = Make Trial\n- +5+ = Make Expired\n- +6+ = Make\n- +7+ = Pro License Unavailable\n\nThe Model class defines some of these values as constants as of SketchUp\n2016.","name":"get_product_family","namespace":"Sketchup::Model","path":"Sketchup::Model#get_product_family","type":"instance_method","visibility":"public","return":[["Integer"],"the product family number."]},"Sketchup::Model#guid":{"description":"The guid method retrieves the globally unique identifier, in the form of a\nstring, for the Model. The guid will change after the model is modified and\nsaved. The Model guid is stored with the SketchUp file; it will not change if the\nfile is moved to another computer.","name":"guid","namespace":"Sketchup::Model","path":"Sketchup::Model#guid","type":"instance_method","visibility":"public","return":[["String"],"a globally unique identifier, in the form of a\nstring, for the model"]},"Sketchup::Model#import":{"description":"The import method is used to load a file by recognizing the file extension\nand calling appropriate importer.","name":"import","namespace":"Sketchup::Model","path":"Sketchup::Model#import","type":"instance_method","visibility":"public","parameters":[["filename",["String"],"The name of the file to import."],["show_summary",["Boolean"],"true if you want to show a summary window, false if you\ndo not want to show a summary window."]],"return":[["Boolean"],"true if successful, false if unsuccessful"]},"Sketchup::Model#instance_path_from_pid_path":{"description":"The {#instance_path_from_pid_path} method returns a instance path given a\nstring with persistent ids representing the path to the entity.","name":"instance_path_from_pid_path","namespace":"Sketchup::Model","path":"Sketchup::Model#instance_path_from_pid_path","type":"instance_method","visibility":"public","parameters":[["pid_path",["String"],"a string with persistent ids delimited by period."]],"return":[["Sketchup::InstancePath"],""]},"Sketchup::Model#latlong_to_point":{"description":"The latlong_to_point method converts a latitude and longitude to a Point3d\nobject in the model. It does not actually work with a LatLong object, but\noperates on a 2-element array. The returned point will always be on the\nground (z=0).","name":"latlong_to_point","namespace":"Sketchup::Model","path":"Sketchup::Model#latlong_to_point","type":"instance_method","visibility":"public","parameters":[["lnglat_array",["Array(Numeric, Numeric)"],"A 2-element array containing first the longitude then\nthe latitude."]],"return":[["Geom::Point3d"],"a point3d object if successful, false if\nunsuccessful."]},"Sketchup::Model#layers":{"description":"The layers method retrieves a collection of all Layers objects in the model.","name":"layers","namespace":"Sketchup::Model","path":"Sketchup::Model#layers","type":"instance_method","visibility":"public","return":[["Sketchup::Layers"],"a Layers object containing a collection of\nlayers in the model"]},"Sketchup::Model#list_datums":{"description":"This method retrieves an Array of all of the datums recognized by SketchUp.","name":"list_datums","namespace":"Sketchup::Model","path":"Sketchup::Model#list_datums","type":"instance_method","visibility":"public","return":[["Array<String>"],"An Array object containing the datums\nsupported by SketchUp"]},"Sketchup::Model#materials":{"description":"The materials method returns a collection of all of the materials in the\nmodel.","name":"materials","namespace":"Sketchup::Model","path":"Sketchup::Model#materials","type":"instance_method","visibility":"public","return":[["Sketchup::Materials"],"materials collection."]},"Sketchup::Model#mipmapping=":{"description":"This method can be used to turn mipmapping on or off.","name":"mipmapping=","namespace":"Sketchup::Model","path":"Sketchup::Model#mipmapping=","type":"instance_method","visibility":"public","parameters":[["mipmap",["Boolean"],"whether mipmapping is turned on or off."]],"return":[["Boolean"],"the new mipmapping setting"]},"Sketchup::Model#mipmapping?":{"description":"This method can be used to find out if mipmapping is on or off.","name":"mipmapping?","namespace":"Sketchup::Model","path":"Sketchup::Model#mipmapping?","type":"instance_method","visibility":"public","return":[["Boolean"],"the current mipmapping setting"]},"Sketchup::Model#modified?":{"description":"The modified? method determines if the Model has been modified since the\nlast save.","name":"modified?","namespace":"Sketchup::Model","path":"Sketchup::Model#modified?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the model has been modified since last\nsave (and requires a save), false if the model has not\nbeen modified."]},"Sketchup::Model#name":{"description":"The name method retrieves the string name of the model.","name":"name","namespace":"Sketchup::Model","path":"Sketchup::Model#name","type":"instance_method","visibility":"public","return":[["String"],"string name of the model"]},"Sketchup::Model#name=":{"description":"The name= method sets the string name of the model.","name":"name=","namespace":"Sketchup::Model","path":"Sketchup::Model#name=","type":"instance_method","visibility":"public","parameters":[["name",["String"],"new name of the model"]],"return":[["String"],"the new name"]},"Sketchup::Model#number_faces":{"description":"Returns the number faces in a model.","name":"number_faces","namespace":"Sketchup::Model","path":"Sketchup::Model#number_faces","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Model#options":{"description":"The options method retrieves the options manager that defines the options\nsettings for the model.\n\nUse the string keys instead of numerical indicies when accessing the options\nas the indicies are not consistent between SketchUp versions.","name":"options","namespace":"Sketchup::Model","path":"Sketchup::Model#options","type":"instance_method","visibility":"public","return":[["Sketchup::OptionsManager"],"an OptionsManager object containing\none or more options providers if successful."]},"Sketchup::Model#pages":{"description":"The pages method retrieves a Pages object containing all of the pages in the\nModel.","name":"pages","namespace":"Sketchup::Model","path":"Sketchup::Model#pages","type":"instance_method","visibility":"public","return":[["Sketchup::Pages"],"returns a Pages object with 0 or more pages."]},"Sketchup::Model#path":{"description":"The path method retrieves the path of the file from which the model was\nopened.\n\nAn empty string is returned for a new model (one which has not been saved\nand opened.)","name":"path","namespace":"Sketchup::Model","path":"Sketchup::Model#path","type":"instance_method","visibility":"public","return":[["String"],"an string containing the path for the currently\nopened model."]},"Sketchup::Model#place_component":{"description":"The place_component method places a new component in the Model using the\ncomponent placement tool.","name":"place_component","namespace":"Sketchup::Model","path":"Sketchup::Model#place_component","type":"instance_method","visibility":"public","parameters":[["componentdef",["Sketchup::ComponentDefinition"],"A component definition object containing the\ndefinition (blueprint) for the component."],["repeat",["Boolean"],"If set to true, stay in the component\nplacement tool and place multiple components."]],"return":[["Sketchup::Model","nil"],"The model object on success or Nil"]},"Sketchup::Model#point_to_latlong":{"description":"The point_to_latlong method converts a point in the model to a LatLong so\nthat you can get its latitude and longitude.\n\nThis method uses the location information set in ShadowInfo.\n\nNOTE: SketchUp 6.0 and higher has a change where this method returns a\nPoint3d instead of a LatLong, where the x and y values contain the LatLong\ncoordinates.","name":"point_to_latlong","namespace":"Sketchup::Model","path":"Sketchup::Model#point_to_latlong","type":"instance_method","visibility":"public","parameters":[["point",["Geom::Point3d"],"A Point3d object."]],"return":[["Geom::Point3d","Geom::LatLong"],"a LatLong or Point3d object. See\ndetails for information."]},"Sketchup::Model#point_to_utm":{"description":"This method converts a Point3d object in the Model to UTM coordinates.\n\nThis method uses the location information set in ShadowInfo. See also UTM.","name":"point_to_utm","namespace":"Sketchup::Model","path":"Sketchup::Model#point_to_utm","type":"instance_method","visibility":"public","parameters":[["point",["Geom::Point3d"],"A Point3d object."]],"return":[["Geom::UTM"],"a UTM object"]},"Sketchup::Model#raytest":{"description":"The raytest method is used to cast a ray (line) through the model and return\nthe first thing that the ray hits.\n\nA ray is a two element array containing a point and a vector\n[Geom::Point3d(), Geom::Vector3d()]. The point defines the start point of\nthe ray and the vector defines the direction. If direction can not be\nnormalized (e.g. direction = [0, 0, 0]), direction is taken as a point the\nray intersects.","name":"raytest","namespace":"Sketchup::Model","path":"Sketchup::Model#raytest","type":"instance_method","visibility":"public","parameters":[["wysiwyg_flag",["Boolean"],"An optional boolean, added in SU8 M1, indicating\nwhether or not to consider hidden geometry in intersect\ncomputations.  If this flag is not specified, it\ndefaults to true (WYSIWYG) - i.e. hidden geometry is\nnot intersected against."],["ray",["Array(Geom::Point3d, Geom::Vector3d)"],"A two element array containing a point and a vector."]],"return":[["Array(Geom::Point3d, Sketchup::Drawingelement)","nil"],"an array of two values. The first value is a\nPoint3d where the item that the ray passed through\nexists. The second element is the instance path array\nof the entity that the ray hit. For example, if the ray\nhits a face that contained by a component instance the\ninstance path would be [Component1]. If the ray hit a\nface that is contained by a component instance, which\nis contained by another component instance and so on,\nthe instance path would be [Component1, Component2,\nComponent3...]."]},"Sketchup::Model#remove_observer":{"description":"The remove_observer method is used to remove an observer from the current\nobject.","name":"remove_observer","namespace":"Sketchup::Model","path":"Sketchup::Model#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Model#rendering_options":{"description":"The rendering_options method retrieves the RenderingOptions object for this\nModel.","name":"rendering_options","namespace":"Sketchup::Model","path":"Sketchup::Model#rendering_options","type":"instance_method","visibility":"public","return":[["Sketchup::RenderingOptions"],"a RenderingOptions object"]},"Sketchup::Model#save":{"description":"This method is used to save the model to a file.","name":"save","namespace":"Sketchup::Model","path":"Sketchup::Model#save","type":"instance_method","visibility":"public","parameters":[["filename",["String"],"The name of the file to save.\nStarting with SketchUp 2014, this parameter is optional.\nIf not provided or an empty string, model will be saved\nto the file to which it is associated. It must have\nalready been saved to a file."],["version",["Integer"],"(SketchUp 2014+)\nOptional SketchUp file format to save.\nIf not provided, latest file format will be used.\nPossible values are:\nSketchup::Model::VERSION_3, Sketchup::Model::VERSION_4,\nSketchup::Model::VERSION_5, Sketchup::Model::VERSION_6,\nSketchup::Model::VERSION_7, Sketchup::Model::VERSION_8,\nSketchup::Model::VERSION_2013,\nSketchup::Model::VERSION_2014,\nSketchup::Model::VERSION_2015,\nSketchup::Model::VERSION_2016,\nSketchup::Model::VERSION_2017"]],"return":[["Boolean"],"true if successful, false if unsuccessful"]},"Sketchup::Model#save_copy":{"description":"This method is used to save the copy of the current model to a file.","name":"save_copy","namespace":"Sketchup::Model","path":"Sketchup::Model#save_copy","type":"instance_method","visibility":"public","parameters":[["filename",["String"],"The name of the file to save the model copy."],["version",["Integer"],"(SketchUp 2014+)\nOptional SketchUp file format to save.\nIf not provided, latest file format will be used.\nPossible values are:\nSketchup::Model::VERSION_3, Sketchup::Model::VERSION_4,\nSketchup::Model::VERSION_5, Sketchup::Model::VERSION_6,\nSketchup::Model::VERSION_7, Sketchup::Model::VERSION_8,\nSketchup::Model::VERSION_2013,\nSketchup::Model::VERSION_2014,\nSketchup::Model::VERSION_2015,\nSketchup::Model::VERSION_2016,\nSketchup::Model::VERSION_2017"]],"return":[["Boolean"],"true if successful, false if unsuccessful"]},"Sketchup::Model#save_thumbnail":{"description":"The save_thumbnail method is used to save a thumbnail image to a file.\nThe image format is specified by the file extension of filename.  Supported\nformats are bmp, jpg, png, tif, pct, and gif.","name":"save_thumbnail","namespace":"Sketchup::Model","path":"Sketchup::Model#save_thumbnail","type":"instance_method","visibility":"public","parameters":[["filename",["String"],"The name of the file, with extension, to save the\nthumbnail as."]],"return":[["Boolean"],"true if successful, false if unsuccessful"]},"Sketchup::Model#select_tool":{"description":"This method is used to select a SketchUp Tool object s the active tool. You\nmust implement the SketchUp Tool interface to create a tool prior to calling\nthis method.\n\nThe select tool is activated if you pass nil to the select_tool method. You\nmust implement the SketchUp Tool interface to create a tool, prior to calling\nthis method, and then instance the tool implementation and pass the object to\nthis method. If you attempt to set the select_tool to nil in the initialize\nmethod of a tool you have written, it will be ignored.","name":"select_tool","namespace":"Sketchup::Model","path":"Sketchup::Model#select_tool","type":"instance_method","visibility":"public","parameters":[["tool",["Object"],"The Tool object you want to select."]],"return":[["Sketchup::Model"],"The Model object."]},"Sketchup::Model#selection":{"description":"This method retrieves a Selection object for the model, containing the\ncurrently selected entities. The entries in the selection list are not\nnecessarily in the same order in which the user selected them.","name":"selection","namespace":"Sketchup::Model","path":"Sketchup::Model#selection","type":"instance_method","visibility":"public","return":[["Sketchup::Selection"],"A Selection object with 0 or more entities\nthat are currently selected."]},"Sketchup::Model#set_attribute":{"description":"This method is used to set the value of an attribute in an attribute\ndictionary with the given name.\n\nThis method can be used create a new AttributeDictionary object, if needed.","name":"set_attribute","namespace":"Sketchup::Model","path":"Sketchup::Model#set_attribute","type":"instance_method","visibility":"public","parameters":[["attrdictname",["String"],"The name of the attribute dictionary whose attribute\nyou wish to set."],["key",["String"],"The attribute name."],["value",["Object"],"The value to set."]],"return":[["Object"],"the value that was set"]},"Sketchup::Model#set_datum":{"description":"This method sets the datum used in conversions between the internal\ncoordinate system and UTM.\n\nThe default datum is WGS84. You can use the method list_datums to get a list\nof all of the datums supported in SketchUp. If you pass an invalid datum to\nset_datum, set_datum returns the default datum.","name":"set_datum","namespace":"Sketchup::Model","path":"Sketchup::Model#set_datum","type":"instance_method","visibility":"public","parameters":[["datum",["String"],""]],"return":[["nil"],""]},"Sketchup::Model#shadow_info":{"description":"This method is used to retrieve the shadow information for the Model.","name":"shadow_info","namespace":"Sketchup::Model","path":"Sketchup::Model#shadow_info","type":"instance_method","visibility":"public","return":[["Sketchup::ShadowInfo"],"a ShadowInfo object."]},"Sketchup::Model#start_operation":{"description":"The {#start_operation} method is used to notify SketchUp that a new\noperation (which can be undone) is starting.\n\nThe +op_name+ argument is a description for the operation that is displayed\nadjacent to the Edit > Undo menu item. Make sure to provide a user friendly\nname for your operation.\n\nStarting with SketchUp 7.0, there are three additional booleans that one can\npass in when starting an operation. It is recommended to always set\n+disable_ui+ to +true+. It's left to +false+ for default for compatibility\nreasons.","name":"start_operation","namespace":"Sketchup::Model","path":"Sketchup::Model#start_operation","type":"instance_method","visibility":"public","parameters":[["transparent",["Boolean"],"if set to true, then this operation will\nappend to the previous operation. This is particularly useful for\ncreating observers that react to user actions without littering the\nundo stack with extra steps that Ruby is performing."],["next_transparent",["Boolean"],"<b>Deprecated!</b> if set to true, then\nwhatever operation comes after this one will be appended into one\ncombined operation, allowing the user the undo both actions with a\nsingle undo command. This flag is a highly difficult one, since there\nare so many ways that a SketchUp user can interrupt a given operation\nwith one of their own. <b>Use extreme caution</b> and test thoroughly\nwhen setting this to true."],["disable_ui",["Boolean"],"if set to true, then SketchUp's tendency to\nupdate the user interface after each geometry change will be\nsuppressed. This can result in much faster Ruby code execution if the\noperation involves updating the model in any way."],["op_name",["String"],"name of the operation visible in the UI"]],"return":[["Boolean"],"+true+ if successful, +false+ if unsuccessful"]},"Sketchup::Model#styles":{"description":"The styles method retrieves the styles associated with the model.","name":"styles","namespace":"Sketchup::Model","path":"Sketchup::Model#styles","type":"instance_method","visibility":"public","return":[["Sketchup::Styles"],"the Styles object if successful"]},"Sketchup::Model#tags":{"description":"The tags method retrieves the string tags of the model.","name":"tags","namespace":"Sketchup::Model","path":"Sketchup::Model#tags","type":"instance_method","visibility":"public","return":[["String"],"string tags of the model"]},"Sketchup::Model#tags=":{"description":"The tags= method sets the string tags of the model.","name":"tags=","namespace":"Sketchup::Model","path":"Sketchup::Model#tags=","type":"instance_method","visibility":"public","parameters":[["tags",["String"],"new tags of the model"]],"return":[["String"],"the new tags"]},"Sketchup::Model#title":{"description":"The tile method retrieves the name of the model. If the model is saved on\ndisk, returns the file name without extension. Otherwise returns an empty\nstring.","name":"title","namespace":"Sketchup::Model","path":"Sketchup::Model#title","type":"instance_method","visibility":"public","return":[["String"],"the title of the model or an empty string (if\nthe title is not set)"]},"Sketchup::Model#tools":{"description":"The tools method is used to retrieve the current Tools object.","name":"tools","namespace":"Sketchup::Model","path":"Sketchup::Model#tools","type":"instance_method","visibility":"public","return":[["Sketchup::Tools"],"a Tools object."]},"Sketchup::Model#utm_to_point":{"description":"The utm_to_point method converts a position given in UTM coordinates to a\nPoint3d in the Model.","name":"utm_to_point","namespace":"Sketchup::Model","path":"Sketchup::Model#utm_to_point","type":"instance_method","visibility":"public","parameters":[["utm",["Geom::UTM"],"A UTM object."]],"return":[["Geom::Point3d"],"A Point3d object."]},"Sketchup::Model#valid?":{"description":"Determine if a model is a valid Sketchup::Model object. Returns false\nif the model has been closed.\n\nThis is useful on the mac where one can have multiple models open at the\nsame time. In such a case, this method can tell you if the user has closed\nthe model before you perform operations on it.","name":"valid?","namespace":"Sketchup::Model","path":"Sketchup::Model#valid?","type":"instance_method","visibility":"public","return":[["Boolean"],"true or false depending on model validity"]},"Sketchup::Model::Make":{"description":"Constants","name":"Make","namespace":"Sketchup::Model","path":"Sketchup::Model::Make","type":"constant","return":null,"visibility":"public"},"Sketchup::Model::MakeTrial":{"description":"Stub value.","name":"MakeTrial","namespace":"Sketchup::Model","path":"Sketchup::Model::MakeTrial","type":"constant","return":null,"visibility":"public"},"Sketchup::Model::ProLicensed":{"description":"Stub value.","name":"ProLicensed","namespace":"Sketchup::Model","path":"Sketchup::Model::ProLicensed","type":"constant","return":null,"visibility":"public"},"Sketchup::Model::ProTrial":{"description":"Stub value.","name":"ProTrial","namespace":"Sketchup::Model","path":"Sketchup::Model::ProTrial","type":"constant","return":null,"visibility":"public"},"Sketchup::Model::VERSION_2013":{"description":"Stub value.","name":"VERSION_2013","namespace":"Sketchup::Model","path":"Sketchup::Model::VERSION_2013","type":"constant","return":null,"visibility":"public"},"Sketchup::Model::VERSION_2014":{"description":"Stub value.","name":"VERSION_2014","namespace":"Sketchup::Model","path":"Sketchup::Model::VERSION_2014","type":"constant","return":null,"visibility":"public"},"Sketchup::Model::VERSION_2015":{"description":"Stub value.","name":"VERSION_2015","namespace":"Sketchup::Model","path":"Sketchup::Model::VERSION_2015","type":"constant","return":null,"visibility":"public"},"Sketchup::Model::VERSION_2016":{"description":"Stub value.","name":"VERSION_2016","namespace":"Sketchup::Model","path":"Sketchup::Model::VERSION_2016","type":"constant","return":null,"visibility":"public"},"Sketchup::Model::VERSION_2017":{"description":"Stub value.","name":"VERSION_2017","namespace":"Sketchup::Model","path":"Sketchup::Model::VERSION_2017","type":"constant","return":null,"visibility":"public"},"Sketchup::Model::VERSION_3":{"description":"Stub value.","name":"VERSION_3","namespace":"Sketchup::Model","path":"Sketchup::Model::VERSION_3","type":"constant","return":null,"visibility":"public"},"Sketchup::Model::VERSION_4":{"description":"Stub value.","name":"VERSION_4","namespace":"Sketchup::Model","path":"Sketchup::Model::VERSION_4","type":"constant","return":null,"visibility":"public"},"Sketchup::Model::VERSION_5":{"description":"Stub value.","name":"VERSION_5","namespace":"Sketchup::Model","path":"Sketchup::Model::VERSION_5","type":"constant","return":null,"visibility":"public"},"Sketchup::Model::VERSION_6":{"description":"Stub value.","name":"VERSION_6","namespace":"Sketchup::Model","path":"Sketchup::Model::VERSION_6","type":"constant","return":null,"visibility":"public"},"Sketchup::Model::VERSION_7":{"description":"Stub value.","name":"VERSION_7","namespace":"Sketchup::Model","path":"Sketchup::Model::VERSION_7","type":"constant","return":null,"visibility":"public"},"Sketchup::Model::VERSION_8":{"description":"Stub value.","name":"VERSION_8","namespace":"Sketchup::Model","path":"Sketchup::Model::VERSION_8","type":"constant","return":null,"visibility":"public"},"Sketchup::ModelObserver":{"description":"This observer interface is implemented to react to model events. To\nimplement this observer, create a Ruby class of this type, override the\ndesired methods, and add an instance of the observer to the model.\n\nNote that the observers related to transactions (aka undoable operations)\nare primarily for reporting and debugging. Performing any edit operations\nof your own (such as modifying the model) inside the observer callback\nshould be avoided, as it could cause crashes or model corruption. The most\ncommon use for these callbacks is to help debug problems where your\nRuby script's {Sketchup::Model#start_operation} and\n{Sketchup::Model#commit_operation} calls are somehow conflicting with\nSketchUp's native undo operations. You can set up an observer set to watch\nprecisely what is going on.","name":"ModelObserver","namespace":"Sketchup","path":"Sketchup::ModelObserver","type":"class","visibility":"public"},"Sketchup::ModelObserver#onActivePathChanged":{"description":"The {#onActivePathChanged} method is invoked when the user opens or closes a\n{Sketchup::ComponentInstance} or {Sketchup::Group} for editing.\n\nWhen the user opens an instance for editing the positions and transformations\nof the entities in the opened instance will be relative to global world\ncoordinates instead of the local coordinates relative to their parent.\n\nSee {Sketchup::Model#active_path} and {Sketchup::Model#edit_transform} for\nmethods that report the current edit origin vs. the global origin, etc.\n\nBy using this observer callback, you can keep track of the various nested\ntransformations as your users double click to drill into and out of\ncomponent edits.","name":"onActivePathChanged","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onActivePathChanged","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onAfterComponentSaveAs":{"description":"The {#onAfterComponentSaveAs} method is invoked when the user context-clicks >\nSave As on a component instance. It is called just after the component is\nwritten to disk, so you can restore the component to some state before\nreturning control to the user.","name":"onAfterComponentSaveAs","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onAfterComponentSaveAs","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onBeforeComponentSaveAs":{"description":"The {#onBeforeComponentSaveAs} method is invoked when the user\ncontext-clicks > Save As on a component instance. It is called just before\nthe component is written to disk, so you can make changes within the handler\nand it will make it into the save.\n\nFor example, you may decide that you want to add some attribute to every\ncomponent that is saved out, but you do not want that attribute sticking\naround inside the current model. Within {#onBeforeComponentSaveAs} you could\nadd the attribute, and within {#onAfterComponentSaveAs} you could delete that\nattribute.\n\nThe callback is not sent the component that is to be saved, but the\nmodel's selection will contain it.","name":"onBeforeComponentSaveAs","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onBeforeComponentSaveAs","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onDeleteModel":{"description":"The {#onDeleteModel} method is invoked when a model is deleted.","name":"onDeleteModel","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onDeleteModel","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onEraseAll":{"description":"The {#onEraseAll} method is invoked when everything in a model is erased.","name":"onEraseAll","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onEraseAll","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onExplode":{"description":"The {#onExplode method} is invoked whenever a component anywhere in this\nmodel is exploded. This is an easier way to watch explode events vs.\nattaching an InstanceObserver to every instance in the model.\n\nSince the callback does not return what was exploded, one solution is to\nplace a selection observer that keeps track of which entities whose\nexplosion you are interested in are in the selection. Since SketchUp's\nuser interface only provides a means of exploding the selection, this\nmethod is a reliable way to know what was just exploded.\n\nAnother method would be to watch\n{Sketchup::ComponentDefinition.count_instances} to determine what just\nchanged, as any components that were exploded will now be less an instance.","name":"onExplode","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onExplode","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onPidChanged":{"description":"The {#onPidChanged} method is invoked when a persistent id in the model\nchanges. For example when entities are grouped.","name":"onPidChanged","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onPidChanged","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null],["old_pid",["Integer"],null],["new_pid",["Integer"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onPlaceComponent":{"description":"The {#onPlaceComponent} method is invoked when a component is \"placed\" into\nthe model, meaning it is dragged from the Component Browser.","name":"onPlaceComponent","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onPlaceComponent","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onPostSaveModel":{"description":"The {#onPostSaveModel} method is invoked after a model has been saved to disk.","name":"onPostSaveModel","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onPostSaveModel","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onPreSaveModel":{"description":"The {#onPreSaveModel} method is invoked before a model is saved to disk.","name":"onPreSaveModel","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onPreSaveModel","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onSaveModel":{"description":"The {#onSaveModel} method is invoked after a model has been saved to disk.","name":"onSaveModel","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onSaveModel","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onTransactionAbort":{"description":"The {#onTransactionAbort} method is invoked when a transaction is aborted.","name":"onTransactionAbort","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onTransactionAbort","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onTransactionCommit":{"description":"The {#onTransactionCommit} method is invoked when a transaction is completed.","name":"onTransactionCommit","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onTransactionCommit","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onTransactionEmpty":{"description":"The {#onTransactionEmpty} method is invoked when a transaction\n(aka an undoable operation) starts and then is committed without anything\nbeing altered in between.","name":"onTransactionEmpty","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onTransactionEmpty","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onTransactionRedo":{"description":"The {#onTransactionRedo} method is invoked when the user \"redoes\" a\ntransaction (aka undo operation.) You can programmatically fire a redo by\ncalling +Sketchup.sendAction(\"editRedo\")+.","name":"onTransactionRedo","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onTransactionRedo","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onTransactionStart":{"description":"The {#onTransactionStart} method is invoked when a transaction\n(aka an undoable operation) starts.","name":"onTransactionStart","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onTransactionStart","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::ModelObserver#onTransactionUndo":{"description":"The {#onTransactionUndo method} is invoked when the user \"undoes\" a\ntransaction (aka undo operation.) You can programmatically fire an undo by\ncalling +Sketchup.sendAction(\"editUndo\")+.","name":"onTransactionUndo","namespace":"Sketchup::ModelObserver","path":"Sketchup::ModelObserver#onTransactionUndo","type":"instance_method","visibility":"public","parameters":[["model",["Sketchup::Model"],null]],"return":[["nil"],""]},"Sketchup::OptionsManager":{"description":"The OptionsManager class manages various kinds of OptionsProviders on a\nModel.","name":"OptionsManager","namespace":"Sketchup","path":"Sketchup::OptionsManager","type":"class","visibility":"public"},"Sketchup::OptionsManager#[]":{"description":"The [] method is used to get an option provider by name or index.\n\nFor example, to get the UnitsOptions on the Model, you could use the\ncommand:","name":"[]","namespace":"Sketchup::OptionsManager","path":"Sketchup::OptionsManager#[]","type":"instance_method","visibility":"public"},"Sketchup::OptionsManager#count":{"description":"","name":"count","namespace":"Sketchup::OptionsManager","path":"Sketchup::OptionsManager#count","type":"instance_method","visibility":"public","return":[null,"integer - number of OptionsProvider objects if\nsuccessful"]},"Sketchup::OptionsManager#each":{"description":"The each method is used to iterate through options providers.","name":"each","namespace":"Sketchup::OptionsManager","path":"Sketchup::OptionsManager#each","type":"instance_method","visibility":"public","return":[null,"nil"]},"Sketchup::OptionsManager#keys":{"description":"The keys method is used to get a list of keys in the OptionsManager.","name":"keys","namespace":"Sketchup::OptionsManager","path":"Sketchup::OptionsManager#keys","type":"instance_method","visibility":"public","return":[null,"keys - Array of string keys"]},"Sketchup::OptionsManager#length":{"description":"The {#length} method is an alias of {#size}.","name":"length","namespace":"Sketchup::OptionsManager","path":"Sketchup::OptionsManager#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::OptionsManager#size":{"description":"The {#size} method returns the number of {OptionsProvider} objects inside\nthis {OptionsManager}.","name":"size","namespace":"Sketchup::OptionsManager","path":"Sketchup::OptionsManager#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::OptionsProvider":{"description":"An OptionsProvider class provides various kinds of options on a Model. You\nget an OptionsProvider from the OptionsManager. The options are given as\nname/value pairs.","name":"OptionsProvider","namespace":"Sketchup","path":"Sketchup::OptionsProvider","type":"class","visibility":"public"},"Sketchup::OptionsProvider#[]":{"description":"The [] method is used to get a value by name or index of the key.","name":"[]","namespace":"Sketchup::OptionsProvider","path":"Sketchup::OptionsProvider#[]","type":"instance_method","visibility":"public"},"Sketchup::OptionsProvider#[]=":{"description":"The []= method is used to set the value of a specific key.\n\nCreates a new attribute for the given key if needed.","name":"[]=","namespace":"Sketchup::OptionsProvider","path":"Sketchup::OptionsProvider#[]=","type":"instance_method","visibility":"public","parameters":[["key",null,"The valid key."],["value",null,"The value to be set."]],"return":[null,"value - the value that was set if successful, or false\nif unsuccessful."]},"Sketchup::OptionsProvider#add_observer":{"description":"The add_observer method is used to add an observer to the current object.","name":"add_observer","namespace":"Sketchup::OptionsProvider","path":"Sketchup::OptionsProvider#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",null,"An observer."]],"return":[null,"true if successful, false if unsuccessful."]},"Sketchup::OptionsProvider#count":{"description":"","name":"count","namespace":"Sketchup::OptionsProvider","path":"Sketchup::OptionsProvider#count","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::OptionsProvider#each":{"description":"The {#each} method is used to iterate through all of the options.","name":"each","namespace":"Sketchup::OptionsProvider","path":"Sketchup::OptionsProvider#each","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::OptionsProvider#each_key":{"description":"The {#each_key} method is used to iterate through all of the attribute keys.","name":"each_key","namespace":"Sketchup::OptionsProvider","path":"Sketchup::OptionsProvider#each_key","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::OptionsProvider#each_pair":{"description":"The {#each} method is used to iterate through all of the options.","name":"each_pair","namespace":"Sketchup::OptionsProvider","path":"Sketchup::OptionsProvider#each_pair","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::OptionsProvider#each_value":{"description":"The each_value method is used to iterate through all of the attribute\nvalues.\n\nThrows an exception if there are no keys.","name":"each_value","namespace":"Sketchup::OptionsProvider","path":"Sketchup::OptionsProvider#each_value","type":"instance_method","visibility":"public","return":[null,"nil"]},"Sketchup::OptionsProvider#has_key?":{"description":"The {#has_key?} method is an alias for {#key?}.","name":"has_key?","namespace":"Sketchup::OptionsProvider","path":"Sketchup::OptionsProvider#has_key?","type":"instance_method","visibility":"public","parameters":[["name",["String"],"The name of the key you are looking for."]],"return":[["Boolean"],""]},"Sketchup::OptionsProvider#key?":{"description":"The {#key?} method is used to determine if the options provider has a\nspecific key.","name":"key?","namespace":"Sketchup::OptionsProvider","path":"Sketchup::OptionsProvider#key?","type":"instance_method","visibility":"public","parameters":[["name",["String"],"The name of the key you are looking for."]],"return":[["Boolean"],""]},"Sketchup::OptionsProvider#keys":{"description":"The keys method is used to retrieve an array with all of the attribute keys.","name":"keys","namespace":"Sketchup::OptionsProvider","path":"Sketchup::OptionsProvider#keys","type":"instance_method","visibility":"public","return":[null,"keys - an array of keys within the options provider if\nsuccessful"]},"Sketchup::OptionsProvider#length":{"description":"The {#length} method is an alias of {#size}.","name":"length","namespace":"Sketchup::OptionsProvider","path":"Sketchup::OptionsProvider#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::OptionsProvider#name":{"description":"The name method is used to retrieve the name of an options provider.","name":"name","namespace":"Sketchup::OptionsProvider","path":"Sketchup::OptionsProvider#name","type":"instance_method","visibility":"public","return":[null,"name - the name of the options provider if successful"]},"Sketchup::OptionsProvider#remove_observer":{"description":"The remove_observer method is used to remove an observer from the current\nobject.","name":"remove_observer","namespace":"Sketchup::OptionsProvider","path":"Sketchup::OptionsProvider#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",null,"An observer."]],"return":[null,"true if successful, false if unsuccessful."]},"Sketchup::OptionsProvider#size":{"description":"The {#size} method is used to retrieve the size (number of elements) of an\noptions provider.","name":"size","namespace":"Sketchup::OptionsProvider","path":"Sketchup::OptionsProvider#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::OptionsProviderObserver":{"description":"This observer interface is implemented to react to operations provider\nevents. What this means is that you can watch as the user changes SketchUp\noptions and react to them. The following {Sketchup::OptionsProviders} are\ndefined in the API:\n\n- <code>\"UnitsOptions\"</code>\n- <code>\"PrintOptions\"</code>\n- <code>\"PageOptions\"</code>\n- <code>\"SlideshowOptions\"</code>\n- <code>\"NamedOptions\"</code>\n\nEach of these has a list of specific options that the user can set. See the\n{Sketchup::OptionsManager} and {Sketchup::OptionsProvider} classes for more\ndetails.\n\nTo implement this observer, create a Ruby class of this type,\noverride the desired methods, and add an instance of the observer to the\nobjects of interests.","name":"OptionsProviderObserver","namespace":"Sketchup","path":"Sketchup::OptionsProviderObserver","type":"class","visibility":"public"},"Sketchup::OptionsProviderObserver#onOptionsProviderChanged":{"description":"The {#onOptionsProviderChanged} method is invoked when a property of an\n{Sketchup::OptionsProvider} changes.","name":"onOptionsProviderChanged","namespace":"Sketchup::OptionsProviderObserver","path":"Sketchup::OptionsProviderObserver#onOptionsProviderChanged","type":"instance_method","visibility":"public","parameters":[["provider",["Sketchup::OptionsProvider"],null],["name",["String"],"The name of the specific option that was changed."]],"return":[["nil"],""]},"Sketchup::Page":{"description":"The Page class contains methods to extract information and modify the\nproperties of an individual page.\n\nNote that inside the SketchUp user interface pages are called \"Scenes\".","name":"Page","namespace":"Sketchup","path":"Sketchup::Page","type":"class","visibility":"public"},"Sketchup::Page#axes":{"description":"The axes method returns the drawing axes for the page.","name":"axes","namespace":"Sketchup::Page","path":"Sketchup::Page#axes","type":"instance_method","visibility":"public","return":[null,"Axes - the axes for the page."]},"Sketchup::Page#camera":{"description":"The camera method retrieves the camera for a particular page.","name":"camera","namespace":"Sketchup::Page","path":"Sketchup::Page#camera","type":"instance_method","visibility":"public","return":[null,"camera - a Camera object if successful, nil if the page\ndoes not save camera information"]},"Sketchup::Page#delay_time":{"description":"The delay_time method retrieves the amount of time, in seconds, that a page\nwill be displayed before transition to another page during a tour.\n\nThe default delay time can be modified in the Model Info > Animation panel\nof the SketchUp User Interface. If this method returns -1, the default\ndelay time is used.","name":"delay_time","namespace":"Sketchup::Page","path":"Sketchup::Page#delay_time","type":"instance_method","visibility":"public","return":[null,"time - the number of seconds of delay"]},"Sketchup::Page#delay_time=":{"description":"The delay_time= method sets the amount of time, in seconds, that a page will\nbe displayed before transitioning to another page during a tour. If you set\nthe delay for a page to be -1, the default delay time will be used.\n\nThe default delay time can be modified in the Model Info > Animation panel\nof the SketchUp User Interface.","name":"delay_time=","namespace":"Sketchup::Page","path":"Sketchup::Page#delay_time=","type":"instance_method","visibility":"public","parameters":[["seconds",null,"The number of seconds to set as the delay time."]],"return":[null,"time - the number of seconds of delay"]},"Sketchup::Page#description":{"description":"The description method retrieves the description for a page as found in the\nScenes manager dialog.","name":"description","namespace":"Sketchup::Page","path":"Sketchup::Page#description","type":"instance_method","visibility":"public","return":[null,"description - a textual description for the page."]},"Sketchup::Page#description=":{"description":"The description method sets the description for a page as found in the\nScenes manager dialog.","name":"description=","namespace":"Sketchup::Page","path":"Sketchup::Page#description=","type":"instance_method","visibility":"public","parameters":[["description",null,"A string description for the page."]],"return":[null,"description - the new string description for the page"]},"Sketchup::Page#hidden_entities":{"description":"The hidden_entities method retrieves all hidden entities within a page.","name":"hidden_entities","namespace":"Sketchup::Page","path":"Sketchup::Page#hidden_entities","type":"instance_method","visibility":"public","return":[null,"entities - an Entities object containing hidden\nentities on the page."]},"Sketchup::Page#label":{"description":"The label method retrieves the label for a page from the page tab.","name":"label","namespace":"Sketchup::Page","path":"Sketchup::Page#label","type":"instance_method","visibility":"public","return":[null,"label - a string label for the page tab"]},"Sketchup::Page#layers":{"description":"The layers method retrieves the non-visible layers associated with a page.","name":"layers","namespace":"Sketchup::Page","path":"Sketchup::Page#layers","type":"instance_method","visibility":"public","return":[null,"layers - an array with zero or more Layers objects."]},"Sketchup::Page#name":{"description":"The name method retrieves the name for a page from the page tab.","name":"name","namespace":"Sketchup::Page","path":"Sketchup::Page#name","type":"instance_method","visibility":"public","return":[null,"label - a string name for the page tab"]},"Sketchup::Page#name=":{"description":"The name= method sets the name for a page's tab.","name":"name=","namespace":"Sketchup::Page","path":"Sketchup::Page#name=","type":"instance_method","visibility":"public","parameters":[["name",null,"The name of the page to be set."]],"return":[null,"name - the name that you have set"]},"Sketchup::Page#rendering_options":{"description":"The rendering_options method retrieves a RenderingOptions object for the\npage.","name":"rendering_options","namespace":"Sketchup::Page","path":"Sketchup::Page#rendering_options","type":"instance_method","visibility":"public","return":[null,"renderingoptions - a RenderingOptions object"]},"Sketchup::Page#set_visibility":{"description":"The set_visibility method sets the visibility for a layer on a page.","name":"set_visibility","namespace":"Sketchup::Page","path":"Sketchup::Page#set_visibility","type":"instance_method","visibility":"public","parameters":[["layer",null,"The layer whose visibility you are setting."],["visibility",null,"true if you want items on the layer to be visible, false if you do not want items visible."]],"return":[null,"page - the page whose visibility was set."]},"Sketchup::Page#shadow_info":{"description":"The shadow_info method retrieves the ShadowInfo object for the page.","name":"shadow_info","namespace":"Sketchup::Page","path":"Sketchup::Page#shadow_info","type":"instance_method","visibility":"public","return":[null,"shadowinfo - a ShadowInfo object if successful, nil if\nthe page does not save shadow information"]},"Sketchup::Page#style":{"description":"The style method retrieves the style associated with the page.","name":"style","namespace":"Sketchup::Page","path":"Sketchup::Page#style","type":"instance_method","visibility":"public","return":[null,"style - the Style object if successful"]},"Sketchup::Page#transition_time":{"description":"Get the amount of time that it takes to transition to this page during a\nslideshow or animation export.  If this value is -1, it means to use the\ndefault transition time.","name":"transition_time","namespace":"Sketchup::Page","path":"Sketchup::Page#transition_time","type":"instance_method","visibility":"public","return":[null,"transitiontime - the amount of time it takes to\ntransition to this page during a slideshow or animation\nexport."]},"Sketchup::Page#transition_time=":{"description":"The transition_time= method is used to set the transition time.","name":"transition_time=","namespace":"Sketchup::Page","path":"Sketchup::Page#transition_time=","type":"instance_method","visibility":"public","parameters":[["trans_time",null,"The transition time in seconds."]],"return":[null,"transitiontime - the new transition time"]},"Sketchup::Page#update":{"description":"The update method performs an update on the page properties based on the\ncurrent view that the user has. Which parts of the Page get updated are\ncontrolled via an integer whose bits represent which parts to update. You\ncan determine the integer you need to pass by adding these numbers together:\n\n  - 1 - Camera Location,\n  - 2 - Drawing Style,\n  - 4 - Shadow Settings,\n  - 8 - Axes Location,\n  - 16 - Hidden Geometry,\n  - 32 - Visible Layers,\n  - 64 - Active Section Planes.\n\nThe bit code values are added together to provide the flags value.  For\nexample, to update the Camera Location, Axes Location, and Active Section\nPlanes properties, the flag would be 73 (1 + 8 + 64).","name":"update","namespace":"Sketchup::Page","path":"Sketchup::Page#update","type":"instance_method","visibility":"public","parameters":[["flags",null,"Integer representing the sum of the bit flags."]],"return":[null,"status - true if successful, false if unsuccessful"]},"Sketchup::Page#use_axes=":{"description":"The use_axes= method sets the page's axes property.","name":"use_axes=","namespace":"Sketchup::Page","path":"Sketchup::Page#use_axes=","type":"instance_method","visibility":"public","parameters":[["pagesettings",null,"true if you want your page to save this property, false\nif you do not want your page to save this property."]],"return":[null,"status - true if you are saving the property, false if\nyou are not saving the property."]},"Sketchup::Page#use_axes?":{"description":"The use_axes? method determines whether you are storing the axes property\nwith the page.","name":"use_axes?","namespace":"Sketchup::Page","path":"Sketchup::Page#use_axes?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if you are storing the this property with\nthe page, false if you are not storing this property\nwith the page."]},"Sketchup::Page#use_camera=":{"description":"The use_camera= method sets the page's camera property.","name":"use_camera=","namespace":"Sketchup::Page","path":"Sketchup::Page#use_camera=","type":"instance_method","visibility":"public","parameters":[["setting",null,"true if you want your page to save this property, false\nif you do not want your page to save this property."]],"return":[null,"status - true if you are saving the property, false if\nyou are not saving the property."]},"Sketchup::Page#use_camera?":{"description":"The use_camera? method determines whether you are storing the camera\nproperty with the page.","name":"use_camera?","namespace":"Sketchup::Page","path":"Sketchup::Page#use_camera?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if you are storing the this property with\nthe page, false if you are not storing this property\nwith the page."]},"Sketchup::Page#use_hidden=":{"description":"The use_hidden= method sets the page's hidden property.","name":"use_hidden=","namespace":"Sketchup::Page","path":"Sketchup::Page#use_hidden=","type":"instance_method","visibility":"public","parameters":[["setting",null,"true if you want your page to save this property, false\nif you do not want your page to save this property."]],"return":[null,"status - true if you are saving the property, false if\nyou are not saving the property."]},"Sketchup::Page#use_hidden?":{"description":"The use_hidden? method determines whether you are storing the hidden\nproperty with the page.","name":"use_hidden?","namespace":"Sketchup::Page","path":"Sketchup::Page#use_hidden?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if you are storing the this property with\nthe page, false if you are not storing this property\nwith the page."]},"Sketchup::Page#use_hidden_layers=":{"description":"The use_hidden_layers= method sets the page's hidden layers\nproperty.","name":"use_hidden_layers=","namespace":"Sketchup::Page","path":"Sketchup::Page#use_hidden_layers=","type":"instance_method","visibility":"public","parameters":[["setting",null,"true if you want your page to save this property, false\nif you do not want your page to save this property."]],"return":[null,"status - true if you are saving the property, false if\nyou are not saving the property."]},"Sketchup::Page#use_hidden_layers?":{"description":"The use_hidden_layers? method determines whether you are storing the hidden\nlayers property with the page.","name":"use_hidden_layers?","namespace":"Sketchup::Page","path":"Sketchup::Page#use_hidden_layers?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if you are storing the this property with\nthe page, false if you are not storing this property\nwith the page."]},"Sketchup::Page#use_rendering_options=":{"description":"The use_rendering_optoins= method sets the page's display\nsettings property.","name":"use_rendering_options=","namespace":"Sketchup::Page","path":"Sketchup::Page#use_rendering_options=","type":"instance_method","visibility":"public","parameters":[["setting",null,"true if you want your page to save this property, false\nif you do not want your page to save this property."]],"return":[null,"status - true if you are saving the property, false\nif you are not saving the property."]},"Sketchup::Page#use_rendering_options?":{"description":"The use_rendering_options? method determines whether you are storing the\nrendering options property with the page.","name":"use_rendering_options?","namespace":"Sketchup::Page","path":"Sketchup::Page#use_rendering_options?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if you are storing the this property with\nthe page, false if you are not storing this property\nwith the page."]},"Sketchup::Page#use_section_planes=":{"description":"The use_section_planes= method sets the page's section planes\nproperty.","name":"use_section_planes=","namespace":"Sketchup::Page","path":"Sketchup::Page#use_section_planes=","type":"instance_method","visibility":"public","parameters":[["setting",null,"true if you want your page to save this property, false\nif you do not want your page to save this property."]],"return":[null,"status - true if you are saving the property, false if\nyou are not saving the property."]},"Sketchup::Page#use_section_planes?":{"description":"The use_section_planes? method determines whether you are storing the\nsection planes property with the page.","name":"use_section_planes?","namespace":"Sketchup::Page","path":"Sketchup::Page#use_section_planes?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if you are storing the this property with\nthe page, false if you are not storing this property\nwith the page."]},"Sketchup::Page#use_shadow_info=":{"description":"The use_shadow_info= method sets the page's shadow info property.","name":"use_shadow_info=","namespace":"Sketchup::Page","path":"Sketchup::Page#use_shadow_info=","type":"instance_method","visibility":"public","parameters":[["setting",null,"true if you want your page to save this property, false\nif you do not want your page to save this property."]],"return":[null,"status - true if you are saving the property, false if\nyou are not saving the property."]},"Sketchup::Page#use_shadow_info?":{"description":"The use_shadow_info? method determines whether you are storing the shadow\ninfo property with the page.","name":"use_shadow_info?","namespace":"Sketchup::Page","path":"Sketchup::Page#use_shadow_info?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if you are storing the this property with\nthe page, false if you are not storing this property\nwith the page."]},"Sketchup::Page#use_style=":{"description":"The use_style= method sets the style to be used by the page.","name":"use_style=","namespace":"Sketchup::Page","path":"Sketchup::Page#use_style=","type":"instance_method","visibility":"public","parameters":[["style",null,"The Style object to use."]],"return":[null,"nil"]},"Sketchup::Page#use_style?":{"description":"The use_style? method determines whether storing a style with the page.","name":"use_style?","namespace":"Sketchup::Page","path":"Sketchup::Page#use_style?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if you are storing the this property with\nthe page, false if you are not storing this property\nwith the page."]},"Sketchup::Pages":{"description":"The Pages class contains methods for manipulating a collection of Pages\n(scenes) in a model.\n\nYou get a handle to this collection by calling Model.pages.","name":"Pages","namespace":"Sketchup","path":"Sketchup::Pages","type":"class","visibility":"public"},"Sketchup::Pages#[]":{"description":"The [] method retrieves a page by either name or index.","name":"[]","namespace":"Sketchup::Pages","path":"Sketchup::Pages#[]","type":"instance_method","visibility":"public","parameters":[["index_or_name",null,"The index or the string name of the specific page."]],"return":[null,"page - a Page object if successful"]},"Sketchup::Pages#add":{"description":"The add method is used to add an empty Page object to the collection.\n\nIf no name is given, then a new name is generated using the default name for\nnew Pages. If a name is given, then a new Page with that name is\nadded.\n\nIf the flags parameter is given, it controls which properties are saved with\nthe Page. See the Page.update method for a description of the flags that can\nbe set.\n\nIf index is given, it specifies the position in the page list that the new\npage is added.  Otherwise the new page is added to the end.","name":"add","namespace":"Sketchup::Pages","path":"Sketchup::Pages#add","type":"instance_method","visibility":"public","parameters":[["name",null,"The name of the specific page."],["flags",["optional"],"Bit flags in integer form."],["index",["optional"],"Index of where to inset."]],"return":[null,"nil"]},"Sketchup::Pages#add_matchphoto_page":{"description":"The add_matchphoto_page method is used to add a photomatch page to the\nmodel. This is an advanced feature that was added to support internal\nSketchUp work, so it is unlikely to be useful to you.","name":"add_matchphoto_page","namespace":"Sketchup::Pages","path":"Sketchup::Pages#add_matchphoto_page","type":"instance_method","visibility":"public","parameters":[["image_name",null,"String image name."],["camera",["optional"],"Camera object."],["page_name",["optional"],"String page name."]],"return":[null,"page - the new photomatch page."]},"Sketchup::Pages#add_observer":{"description":"The add_observer method is used to add an observer to the Pages object.\nSee the PagesObserver interface for more details.","name":"add_observer","namespace":"Sketchup::Pages","path":"Sketchup::Pages#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",null,"An observer."]],"return":[null,"true if successful, false if unsuccessful."]},"Sketchup::Pages#count":{"description":"","name":"count","namespace":"Sketchup::Pages","path":"Sketchup::Pages#count","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Pages#each":{"description":"The each method is used to iterate through pages.","name":"each","namespace":"Sketchup::Pages","path":"Sketchup::Pages#each","type":"instance_method","visibility":"public","return":[null,"nil"]},"Sketchup::Pages#erase":{"description":"The erase method is used to remove a page from the collection.","name":"erase","namespace":"Sketchup::Pages","path":"Sketchup::Pages#erase","type":"instance_method","visibility":"public","parameters":[["page",null,"The page you wish to delete."]],"return":[null,"true if successful, false if unsuccessful."]},"Sketchup::Pages#length":{"description":"The {#length} method is an alias for {#size}.","name":"length","namespace":"Sketchup::Pages","path":"Sketchup::Pages#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Pages#parent":{"description":"The parent method is used to determine the model for the Pages collection.","name":"parent","namespace":"Sketchup::Pages","path":"Sketchup::Pages#parent","type":"instance_method","visibility":"public","return":[null,"model - the model that contains the pages if successful"]},"Sketchup::Pages#remove_observer":{"description":"The remove_observer method is used to remove an observer from the current\nobject. See the PagesObserver interface for more details.","name":"remove_observer","namespace":"Sketchup::Pages","path":"Sketchup::Pages#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",null,"An observer."]],"return":[null,"true if successful, false if unsuccessful."]},"Sketchup::Pages#selected_page":{"description":"The selected_page method is used to retrieve the currently selected page.","name":"selected_page","namespace":"Sketchup::Pages","path":"Sketchup::Pages#selected_page","type":"instance_method","visibility":"public","return":[null,"page - the currently selected Page object if successful"]},"Sketchup::Pages#selected_page=":{"description":"The selected_page method is used to set the currently selected page. Once\nyou set this, SketchUp will animate to that page as if the user had clicked\non its scene tab.","name":"selected_page=","namespace":"Sketchup::Pages","path":"Sketchup::Pages#selected_page=","type":"instance_method","visibility":"public","parameters":[["page",["Sketchup::Page"],null]],"return":[null,"status - true if successful"]},"Sketchup::Pages#show_frame_at":{"description":"The show_frame_at method is used to show a frame in animation (of the slide\nshow) at a given time in seconds.","name":"show_frame_at","namespace":"Sketchup::Pages","path":"Sketchup::Pages#show_frame_at","type":"instance_method","visibility":"public","parameters":[["seconds",null,"The time in seconds."]],"return":[null,"nil"]},"Sketchup::Pages#size":{"description":"The {#size} method is used to retrieve the number of pages.","name":"size","namespace":"Sketchup::Pages","path":"Sketchup::Pages#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Pages#slideshow_time":{"description":"The slideshow_time method is used to get the amount of time that a slideshow\nof all of the pages will take. This takes into account the transition time\nfor each Page and the amount of time that each Page is displayed.","name":"slideshow_time","namespace":"Sketchup::Pages","path":"Sketchup::Pages#slideshow_time","type":"instance_method","visibility":"public","return":[null,"status - true if successful"]},"Sketchup::Pages.add_frame_change_observer":{"description":"The {.add_frame_change_observer} method is used to add a new frame change\nobserver that is called with each frame of an animation, meaning the\nend user has clicked on a Scene tab (aka Page) inside SketchUp and\nthe camera is animating to that scene.\n\nThe method returns an integer id that can be stored and later used to remove\nthe observer with the {Sketchup::Pages.remove_frame_change_observer} method.","name":"add_frame_change_observer","namespace":"Sketchup::Pages","path":"Sketchup::Pages.add_frame_change_observer","type":"class_method","visibility":"public","parameters":[["object",["#frameChange"],"An object that implements the\n{Sketchup::FrameChangeObserver#frameChange} method."]],"return":[["Integer"],"A unique id of the observer"]},"Sketchup::Pages.remove_frame_change_observer":{"description":"The #{remove_frame_change_observer} method is used to remove a frame change\nobserver","name":"remove_frame_change_observer","namespace":"Sketchup::Pages","path":"Sketchup::Pages.remove_frame_change_observer","type":"class_method","visibility":"public","parameters":[["observer_id",["Integer"],"The unique id returned by {.add_frame_change_observer}"]],"return":[["Boolean"],""]},"Sketchup::PagesObserver":{"description":"This observer interface is implemented to react to pages events. To\nimplement this observer, create a Ruby class of this type, override the\ndesired methods, and add an instance of the observer to the objects of\ninterests.","name":"PagesObserver","namespace":"Sketchup","path":"Sketchup::PagesObserver","type":"class","visibility":"public"},"Sketchup::PagesObserver#onContentsModified":{"description":"The {#onContentsModified} method is invoked whenever the pages change.","name":"onContentsModified","namespace":"Sketchup::PagesObserver","path":"Sketchup::PagesObserver#onContentsModified","type":"instance_method","visibility":"public","parameters":[["pages",["Sketchup::Pages"],null]],"return":[["nil"],""]},"Sketchup::PagesObserver#onElementAdded":{"description":"The {#onElementAdded} method is invoked when an element is added to a\n{Sketchup::Pages} object.","name":"onElementAdded","namespace":"Sketchup::PagesObserver","path":"Sketchup::PagesObserver#onElementAdded","type":"instance_method","visibility":"public","parameters":[["pages",["Sketchup::Pages"],null],["page",["Sketchup::Page"],null]],"return":[["nil"],""]},"Sketchup::PagesObserver#onElementRemoved":{"description":"The {#onElementRemoved} method is invoked when an element is removed from a\n{Sketchup::Pages} object.","name":"onElementRemoved","namespace":"Sketchup::PagesObserver","path":"Sketchup::PagesObserver#onElementRemoved","type":"instance_method","visibility":"public","parameters":[["pages",["Sketchup::Pages"],null],["page",["Sketchup::Page"],null]],"return":[["nil"],""]},"Sketchup::PickHelper":{"description":"The PickHelper class is used to pick entities that reside under the current\ncursor location. PickHelper and InputPoint are similar, but InputPoint also\nuses inferencing. You can retrieve a PickHelper object using the pick_helper\nmethod on a View object.\n\nEntities that are picked (found under the\ncursor when a mouse or keyboard event occurs), are called Pick Records and\nare placed in an indexed list.","name":"PickHelper","namespace":"Sketchup","path":"Sketchup::PickHelper","type":"class","visibility":"public"},"Sketchup::PickHelper#all_picked":{"description":"The all_picked method is used to get an array of entities from the\nactive entities from all the pick paths. Duplicates might occur if\nthere are multiple pick paths for entities that ends in a group or\ncomponent.\n\nFor example, if the pick hits at the border of an edge and face\ninside a group there will be two pick paths - one for the face and\none for the edge. Since this method returns entities from the active\nentities it would return an array with the group two times.","name":"all_picked","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#all_picked","type":"instance_method","visibility":"public","return":[null,"elements - the array of elements in the pick."]},"Sketchup::PickHelper#best_picked":{"description":"The best_picked method is used to retrieve the \"best\" entity picked (entity\nthat you would have picked if you were using the select tool).\n\nReturns nil if nothing was picked. You must have called do_pick\nbefore calling this method.","name":"best_picked","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#best_picked","type":"instance_method","visibility":"public","return":[null,"entity - the best picked entity"]},"Sketchup::PickHelper#boundingbox_pick":{"description":"Used to pick a set of entities from a model from a BoundingBox. The pick\ncriteria can be for completely-contained or partially-contained entities,\nsimilar to how the Selection tool works.","name":"boundingbox_pick","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#boundingbox_pick","type":"instance_method","visibility":"public","parameters":[["bounding_box",null,"BoundingBox object defining the volume to use for picking"],["pick_type",null,"PICK_INSIDE to select entities completely contained or\nPICK_CROSSING to select entities partially contained."],["transformation",["optional"],"Transformation that will be applied to the\nvolume defined by the BoundingBox that allows for a\nrotation."]],"return":[null,"The number of Entity objects picked"]},"Sketchup::PickHelper#count":{"description":"The count method is used to count the number of entities picked (number of\npick records)","name":"count","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#count","type":"instance_method","visibility":"public","return":[null,"number - the number of entities picked"]},"Sketchup::PickHelper#depth_at":{"description":"The depth_at method retrieves the depth of one of the currently picked\nentities in the list of pick records.","name":"depth_at","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#depth_at","type":"instance_method","visibility":"public","parameters":[["index",null,"A number from 0 to number of items picked minus one."]],"return":[null,"integer - the depth of the entity if successful"]},"Sketchup::PickHelper#do_pick":{"description":"The do_pick method is used to perform the initial pick. This method is\ngenerally called before any other methods in the PickHelper class.\n\nReturns the number of entities picked. The x and y values are the screen\ncoordinates of the point at which would want to do a pick.","name":"do_pick","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#do_pick","type":"instance_method","visibility":"public","parameters":[["x",null,"X screen coordinate for the pick."],["y",null,"Y screen coordinate for the pick."],["aperture",null,"The size of the pick-aperture."]],"return":[null,"Integer - The number of Entity objects picked"]},"Sketchup::PickHelper#element_at":{"description":"The element_at method is used to retrieve a specific entity in the list of\npicked elements. This element will be from the active entities.\n\nUse count() to get the number of possible pick paths.","name":"element_at","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#element_at","type":"instance_method","visibility":"public","parameters":[["index",null,"A number from 0 to number of items picked minus one."]],"return":[null,"entity - the entity at the index position in the list\nof picked entities."]},"Sketchup::PickHelper#init":{"description":"The init method is used to initialize the PickHelper for testing points.\n\nYou do not normally need to call this method, but you can use this if you\nwant to call test_point or pick_segment on a lot of points.\n\nIf the optional aperture is given, it is given in pixels.","name":"init","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#init","type":"instance_method","visibility":"public","parameters":[["x",null,"X screen coordinate for the pick."],["y",null,"Y screen coordinate for the pick."],["aperture",["optional"],"aperture in pixels."]],"return":[null,"p - the (receiver) PickHelper Object"]},"Sketchup::PickHelper#leaf_at":{"description":"The leaf_at method retrieves the deepest thing in a pick path.\n\nFor example, if you have a face that is within a component that is within\nanother component, leaf_at returns the face.\n\nUse count() to get the number of possible pick paths.","name":"leaf_at","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#leaf_at","type":"instance_method","visibility":"public","parameters":[["index",null,"A number from 0 to number of items picked minus one."]],"return":[null,"entity - the leaf entity"]},"Sketchup::PickHelper#path_at":{"description":"The path_at method is used to retrieve the entire path for an entity in the\npick list (as an array).\n\nIf one of the pick paths end in a face nested in a group nested in a\ncomponent this method will return an array of these entities. The Group\nwill be first and the face will be last.\n\nThe first item in the array will be from the active entities and the last\nitem will be a drawing element that is not a group, component or image.","name":"path_at","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#path_at","type":"instance_method","visibility":"public","parameters":[["index",null,"A number from 0 to number of items picked minus one."]],"return":[null,"array - an array of entities including the leaf"]},"Sketchup::PickHelper#pick_segment":{"description":"The pick_segment method is used to pick a segment of a polyline curve that\nis defined by an array of points.\n\nIf you click on a point in a polyline curve, the index of\nthe point in the curve is returned (starting at 0). If you click on a\nsegment in the polyline curve, the index of the segment is returned.\nSegments start at index -1 (for the segment connecting the first two points)\nand increase by a factor of -1 (for example, the segment connecting second\nand third point is -2).\n\nThere is no need to invoke do_pick for this and the results are unrelated.","name":"pick_segment","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#pick_segment","type":"instance_method","visibility":"public","parameters":[["array_or_list",null,"A series of Point3d objects in the polyline as a list\nof parameters or an array containing Point3d objects."],["x",["optional"],"screen mouse position in pixels."],["aperture",["optional but requires x and y"],"aperture in pixels."],["y",["optional(required if x given)"],"screen mouse position\nin pixels."]],"return":[null,"index - an index of the point in the array if you\nclicked on a point or an index of a segment if you\nclicked on a segment (if successful)"]},"Sketchup::PickHelper#picked_edge":{"description":"The picked_edge method is used to retrieve the \"best\" Edge picked.\n\nReturns nil if there were no edges picked. You must have called do_pick\nbefore calling this method.","name":"picked_edge","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#picked_edge","type":"instance_method","visibility":"public","return":[null,"edge - an Edge object if successful"]},"Sketchup::PickHelper#picked_element":{"description":"The picked_element method retrieves the best drawing element, that is not an\nedge or a face, picked.\n\nReturns nil if nothing was picked. You must have called do_pick\nbefore calling this method.","name":"picked_element","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#picked_element","type":"instance_method","visibility":"public","parameters":[["index",null,null]],"return":[null,"element - a drawing element that is not an edge or face\nif successful"]},"Sketchup::PickHelper#picked_face":{"description":"The picked_face method is used to retrieve the best face picked.\n\nReturns nil if there were no faces picked. You must have called do_pick\nbefore calling this method.","name":"picked_face","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#picked_face","type":"instance_method","visibility":"public","return":[null,"face - a Face object if successful"]},"Sketchup::PickHelper#test_point":{"description":"The test_point method is used to test a point to see if it would be selected\nusing the default or given pick aperture.\n\nIn the first form, you must have initialized the PickHelper using the init\nmethod. This is more efficient if you want to test a lot of points using the\nsame screen point.\n\nIn the second and third forms, it initializes the\nPickHelper using a screen point and an optional pick aperture that you pass\nin as the 2nd-4th arguments.\n\nThere is no need to invoke do_pick for this and the results are unrelated.","name":"test_point","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#test_point","type":"instance_method","visibility":"public","parameters":[["point",null,"Screen point."],["x",["optional"],"x position of pick."],["aperture",["optional"],"aperture in pixels."],["y",["optional"],"y position of pick."]],"return":[null,"would_be_selected - true or false"]},"Sketchup::PickHelper#transformation_at":{"description":"The transformation_at method is used to get a transformation at a specific\npick path index in the pick helper.\n\nThe transformation combines the transformation of all groups, components and\nimages in the pick path. This transformation can be used to transform the\ncoordinates of the leaf entity into the coordinates of the active entities.","name":"transformation_at","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#transformation_at","type":"instance_method","visibility":"public","parameters":[["index",null,"The index where the transformation should be retrieved."]],"return":[null,"transformation - the transformation found"]},"Sketchup::PickHelper#view":{"description":"The view method is used to get the view associated with the PickHelper.","name":"view","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#view","type":"instance_method","visibility":"public","return":[null,"view - the associated view"]},"Sketchup::PickHelper#window_pick":{"description":"Used to pick a set of entities from a model based on a screen coordinate\nrectangular area defined by two points. The pick criteria can be for\ncompletely-contained or partially-contained entities, similar to how\nthe Selection tool works. The z value of the points passed in are ignored.","name":"window_pick","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper#window_pick","type":"instance_method","visibility":"public","parameters":[["start_point",null,"First screen coordinate point."],["end_point",null,"Second screen coordinate point."],["pick_type",null,"PICK_INSIDE to select entities completely contained or\nPICK_CROSSING to select entities partially contained."]],"return":[null,"The number of Entity objects picked"]},"Sketchup::PickHelper::PICK_CROSSING":{"description":"Constants","name":"PICK_CROSSING","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper::PICK_CROSSING","type":"constant","return":null,"visibility":"public"},"Sketchup::PickHelper::PICK_INSIDE":{"description":"Stub value.","name":"PICK_INSIDE","namespace":"Sketchup::PickHelper","path":"Sketchup::PickHelper::PICK_INSIDE","type":"constant","return":null,"visibility":"public"},"Sketchup::RegionalSettings":{"description":"The {Sketchup::RegionalSettings} module contains methods getting information about the\nuser's locale settings.\n\nNote that when you convert between units and strings you don't need to parse\nit yourself and you can instead use {String#to_l} and {Length#to_s}.","name":"RegionalSettings","namespace":"Sketchup","path":"Sketchup::RegionalSettings","type":"module","visibility":"public"},"Sketchup::RegionalSettings.decimal_separator":{"description":"Returns the decimal character for the current user's locale.","name":"decimal_separator","namespace":"Sketchup::RegionalSettings","path":"Sketchup::RegionalSettings.decimal_separator","type":"module_function","visibility":"public","return":[["String"],"the decimal separator character"]},"Sketchup::RegionalSettings.list_separator":{"description":"Returns the list separator character for the current user's locale.","name":"list_separator","namespace":"Sketchup::RegionalSettings","path":"Sketchup::RegionalSettings.list_separator","type":"module_function","visibility":"public","return":[["String"],"the list separator character"]},"Sketchup::RenderingOptions":{"description":"The RenderingOptions class contains method to extract the rendering\ninformation for a model. The majority of the rendering information returned\nexists in the Styles dialog. The following\nrendering information keys are maintained in SketchUp:\n\n- +BackgroundColor+\n- +BandColor+\n- +ConstructionColor+\n- +DepthQueWidth+\n- +DisplayColorByLayer+\n- +DisplayFog+\n- +DisplayInstanceAxes+\n- +DisplayWatermarks+\n- +DrawDepthQue+\n- +DrawGround+\n- +DrawHidden+\n- +DrawHorizon+\n- +DrawLineEnds+\n- +DrawProfilesOnly+\n- +DrawSilhouettes+\n- +DrawUnderground+\n- +EdgeColorMode+\n- +EdgeDisplayMode+\n- +EdgeType+\n- +ExtendLines+\n- +FaceBackColor+\n- +FaceColorMode+\n- +FaceFrontColor+\n- +FogColor+\n- +FogEndDist+\n- +FogStartDist+\n- +FogUseBkColor+\n- +ForegroundColor+\n- +GroundColor+\n- +GroundTransparency+\n- +HideConstructionGeometry+\n- +HighlightColor+\n- +HorizonColor+\n- +InactiveHidden+\n- +InstanceHidden+\n- +JitterEdges+\n- +LineEndWidth+\n- +LineExtension+\n- +LockedColor+\n- +MaterialTransparency+\n- +ModelTransparency+\n- +RenderMode+\n- +SectionActiveColor+\n- +SectionCutWidth+\n- +SectionDefaultCutColor+\n- +SectionInactiveColor+\n- +ShowViewName+\n- +SilhouetteWidth+\n- +SkyColor+\n- +Texture+\n- +TransparencySort+ SketchUp 2017 treats Medium transparency as Faster.\n\nAdded in SketchUp 7:\n- +DisplayDims+\n- +DisplaySketchAxes+\n- +DisplayText+\n\nAdded in SketchUp 8:\n- +InactiveFade+\n- +InstanceFade+\n\nAdded in SketchUp 2014:\n- +DisplaySectionPlanes+\n\nAdded in SketchUp 2015:\n- +DisplaySectionCuts+\n- +DrawBackEdges+\n- +SectionCutDrawEdges+","name":"RenderingOptions","namespace":"Sketchup","path":"Sketchup::RenderingOptions","type":"class","visibility":"public"},"Sketchup::RenderingOptions#[]":{"description":"The set value [] method is used to get the value in the array of\nrendering options.","name":"[]","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions#[]","type":"instance_method","visibility":"public","parameters":[["key",["String"],"The key of the rendering option value to set."]],"return":[["Object","nil"],"the value that was found."]},"Sketchup::RenderingOptions#[]=":{"description":"The set value []= method is used to set the value in the array of\nrendering options.","name":"[]=","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions#[]=","type":"instance_method","visibility":"public","parameters":[["key",["String"],"The key of the rendering option value to set."],["value",["Object"],"The value to be set."]],"return":[["Object"],"the value that was set"]},"Sketchup::RenderingOptions#add_observer":{"description":"The add_observer method is used to add an observer to the current object.","name":"add_observer","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::RenderingOptions#count":{"description":"The {#count} method is inherited from the +Enumerable+ mix-in module.","name":"count","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions#count","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::RenderingOptions#each":{"description":"The {#each} method iterates through all of the rendering options key/value\npairs.","name":"each","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions#each","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::RenderingOptions#each_key":{"description":"The each_key method iterates through all of the rendering options keys.","name":"each_key","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions#each_key","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::RenderingOptions#each_pair":{"description":"The {#each_pair} method is an alias for {#each}.","name":"each_pair","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions#each_pair","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::RenderingOptions#keys":{"description":"The keys method returns an array with all of the attribute keys.","name":"keys","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions#keys","type":"instance_method","visibility":"public","return":[["Array<String>"],"an array of keys"]},"Sketchup::RenderingOptions#length":{"description":"The {#length} method returns the number of options in the rendering options\ncollection.","name":"length","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::RenderingOptions#remove_observer":{"description":"The remove_observer method is used to remove an observer from the current\nobject.","name":"remove_observer","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::RenderingOptions#size":{"description":"The {#size} method is an alias for {#length}.","name":"size","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::RenderingOptions.each_key":{"description":"The each_key method iterates through all of the rendering options keys.","name":"each_key","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions.each_key","type":"class_method","visibility":"public","return":[["nil"],""]},"Sketchup::RenderingOptions.keys":{"description":"The keys method returns an array with all of the attribute keys.","name":"keys","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions.keys","type":"class_method","visibility":"public","return":[["Array<String>"],"an array of keys"]},"Sketchup::RenderingOptions::ROPAssign":{"description":"Constants","name":"ROPAssign","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPAssign","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPDrawHidden":{"description":"Stub value.","name":"ROPDrawHidden","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPDrawHidden","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPEditComponent":{"description":"Stub value.","name":"ROPEditComponent","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPEditComponent","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetBackgroundColor":{"description":"Stub value.","name":"ROPSetBackgroundColor","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetBackgroundColor","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetConstructionColor":{"description":"Stub value.","name":"ROPSetConstructionColor","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetConstructionColor","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetDepthQueEdges":{"description":"Stub value.","name":"ROPSetDepthQueEdges","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetDepthQueEdges","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetDepthQueWidth":{"description":"Stub value.","name":"ROPSetDepthQueWidth","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetDepthQueWidth","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetDisplayColorByLayer":{"description":"Stub value.","name":"ROPSetDisplayColorByLayer","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetDisplayColorByLayer","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetDisplayDims":{"description":"Stub value.","name":"ROPSetDisplayDims","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetDisplayDims","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetDisplayFog":{"description":"Stub value.","name":"ROPSetDisplayFog","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetDisplayFog","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetDisplayInstanceAxes":{"description":"Stub value.","name":"ROPSetDisplayInstanceAxes","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetDisplayInstanceAxes","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetDisplaySketchAxes":{"description":"Stub value.","name":"ROPSetDisplaySketchAxes","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetDisplaySketchAxes","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetDisplayText":{"description":"Stub value.","name":"ROPSetDisplayText","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetDisplayText","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetDisplayWatermarks":{"description":"Stub value.","name":"ROPSetDisplayWatermarks","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetDisplayWatermarks","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetDrawBackEdges":{"description":"Stub value.","name":"ROPSetDrawBackEdges","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetDrawBackEdges","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetDrawGround":{"description":"Stub value.","name":"ROPSetDrawGround","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetDrawGround","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetDrawHorizon":{"description":"Stub value.","name":"ROPSetDrawHorizon","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetDrawHorizon","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetDrawUnderground":{"description":"Stub value.","name":"ROPSetDrawUnderground","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetDrawUnderground","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetEdgeColorMode":{"description":"Stub value.","name":"ROPSetEdgeColorMode","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetEdgeColorMode","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetEdgeDisplayMode":{"description":"Stub value.","name":"ROPSetEdgeDisplayMode","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetEdgeDisplayMode","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetEdgeType":{"description":"Stub value.","name":"ROPSetEdgeType","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetEdgeType","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetExtendEdges":{"description":"Stub value.","name":"ROPSetExtendEdges","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetExtendEdges","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetExtendLines":{"description":"Stub value.","name":"ROPSetExtendLines","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetExtendLines","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetFaceColor":{"description":"Stub value.","name":"ROPSetFaceColor","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetFaceColor","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetFaceColorMode":{"description":"Stub value.","name":"ROPSetFaceColorMode","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetFaceColorMode","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetFogColor":{"description":"Stub value.","name":"ROPSetFogColor","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetFogColor","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetFogDist":{"description":"Stub value.","name":"ROPSetFogDist","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetFogDist","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetFogHint":{"description":"Stub value.","name":"ROPSetFogHint","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetFogHint","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetFogUseBkColor":{"description":"Stub value.","name":"ROPSetFogUseBkColor","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetFogUseBkColor","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetForegroundColor":{"description":"Stub value.","name":"ROPSetForegroundColor","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetForegroundColor","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetGroundColor":{"description":"Stub value.","name":"ROPSetGroundColor","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetGroundColor","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetGroundTransparency":{"description":"Stub value.","name":"ROPSetGroundTransparency","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetGroundTransparency","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetHideConstructionGeometry":{"description":"Stub value.","name":"ROPSetHideConstructionGeometry","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetHideConstructionGeometry","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetHighlightColor":{"description":"Stub value.","name":"ROPSetHighlightColor","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetHighlightColor","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetJitterEdges":{"description":"Stub value.","name":"ROPSetJitterEdges","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetJitterEdges","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetLineEndEdges":{"description":"Stub value.","name":"ROPSetLineEndEdges","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetLineEndEdges","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetLineEndWidth":{"description":"Stub value.","name":"ROPSetLineEndWidth","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetLineEndWidth","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetLineExtension":{"description":"Stub value.","name":"ROPSetLineExtension","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetLineExtension","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetLockedColor":{"description":"Stub value.","name":"ROPSetLockedColor","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetLockedColor","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetMaterialTransparency":{"description":"Stub value.","name":"ROPSetMaterialTransparency","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetMaterialTransparency","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetModelTransparency":{"description":"Stub value.","name":"ROPSetModelTransparency","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetModelTransparency","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetPhotomatchBackgroundOpacity":{"description":"Stub value.","name":"ROPSetPhotomatchBackgroundOpacity","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetPhotomatchBackgroundOpacity","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetPhotomatchDrawBackground":{"description":"Stub value.","name":"ROPSetPhotomatchDrawBackground","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetPhotomatchDrawBackground","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetPhotomatchDrawOverlay":{"description":"Stub value.","name":"ROPSetPhotomatchDrawOverlay","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetPhotomatchDrawOverlay","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetPhotomatchOverlayOpacity":{"description":"Stub value.","name":"ROPSetPhotomatchOverlayOpacity","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetPhotomatchOverlayOpacity","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetProfileEdges":{"description":"Stub value.","name":"ROPSetProfileEdges","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetProfileEdges","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetProfileWidth":{"description":"Stub value.","name":"ROPSetProfileWidth","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetProfileWidth","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetProfilesOnlyEdges":{"description":"Stub value.","name":"ROPSetProfilesOnlyEdges","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetProfilesOnlyEdges","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetRenderMode":{"description":"Stub value.","name":"ROPSetRenderMode","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetRenderMode","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetSectionActiveColor":{"description":"Stub value.","name":"ROPSetSectionActiveColor","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetSectionActiveColor","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetSectionCutWidth":{"description":"Stub value.","name":"ROPSetSectionCutWidth","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetSectionCutWidth","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetSectionDefaultCutColor":{"description":"Stub value.","name":"ROPSetSectionDefaultCutColor","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetSectionDefaultCutColor","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetSectionDisplayMode":{"description":"Stub value.","name":"ROPSetSectionDisplayMode","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetSectionDisplayMode","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetSectionInactiveColor":{"description":"Stub value.","name":"ROPSetSectionInactiveColor","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetSectionInactiveColor","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetSkyColor":{"description":"Stub value.","name":"ROPSetSkyColor","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetSkyColor","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetTexture":{"description":"Stub value.","name":"ROPSetTexture","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetTexture","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetTransparencyObsolete":{"description":"Stub value.","name":"ROPSetTransparencyObsolete","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetTransparencyObsolete","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPSetXRayOpacity":{"description":"Stub value.","name":"ROPSetXRayOpacity","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPSetXRayOpacity","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptions::ROPTransparencySortMethod":{"description":"Stub value.","name":"ROPTransparencySortMethod","namespace":"Sketchup::RenderingOptions","path":"Sketchup::RenderingOptions::ROPTransparencySortMethod","type":"constant","return":null,"visibility":"public"},"Sketchup::RenderingOptionsObserver":{"description":"This observer interface is implemented to react to rendering options events.\nTo implement this observer, create a Ruby class of this type, implement the\ndesired methods, and add an instance of the observer to the objects of\ninterests.","name":"RenderingOptionsObserver","namespace":"Sketchup","path":"Sketchup::RenderingOptionsObserver","type":"class","visibility":"public"},"Sketchup::RenderingOptionsObserver#onRenderingOptionsChanged":{"description":"The onRenderingOptionsChanged method is invoked whenever the user changes\ntheir rendering options.","name":"onRenderingOptionsChanged","namespace":"Sketchup::RenderingOptionsObserver","path":"Sketchup::RenderingOptionsObserver#onRenderingOptionsChanged","type":"instance_method","visibility":"public","parameters":[["type",["Integer"],"A number indicating which option was changed\nrepresented by one of the constants defined in\n{Sketchup::RenderingOptions}."],["rendering_options",["Sketchup::RenderingOptions"],null]]},"Sketchup::SectionPlane":{"description":"The SectionPlane class represents a section plane in a SketchUp model. Note\nthat prior to SketchUp 2014 there was no way to create a SectionPlane object\nusing Ruby. For older versions of SketchUp, you must manually create a\nsection plane with the Section Plane Tool in SketchUp and then query the\nentities array to find the SectionPlane object.","name":"SectionPlane","namespace":"Sketchup","path":"Sketchup::SectionPlane","type":"class","visibility":"public"},"Sketchup::SectionPlane#activate":{"description":"The activate method is used to make the section plane the active one of its\nparent component/group.","name":"activate","namespace":"Sketchup::SectionPlane","path":"Sketchup::SectionPlane#activate","type":"instance_method","visibility":"public","return":[null,"self if successful"]},"Sketchup::SectionPlane#active?":{"description":"The active? method indicates whether the section plane is active or not.","name":"active?","namespace":"Sketchup::SectionPlane","path":"Sketchup::SectionPlane#active?","type":"instance_method","visibility":"public","return":[["Boolean"],"boolean - true if active"]},"Sketchup::SectionPlane#get_plane":{"description":"The get_plane method is used to retrieve the plane that the section plane is\non.","name":"get_plane","namespace":"Sketchup::SectionPlane","path":"Sketchup::SectionPlane#get_plane","type":"instance_method","visibility":"public","return":[null,"plane - a plane. See the Geom module and Array class\nfor further information on planes."]},"Sketchup::SectionPlane#set_plane":{"description":"The set_plane method is used to set the plane that the section plane is\non.","name":"set_plane","namespace":"Sketchup::SectionPlane","path":"Sketchup::SectionPlane#set_plane","type":"instance_method","visibility":"public","parameters":[["plane",null,"An array representing the new plane,"]],"return":[null,"section_plane - the updated SectionPlane."]},"Sketchup::Selection":{"description":"A set of the currently selected entities. Use the Model.selection method\nto get a Selection object.  Note that the order of entities\n(<code>selection[0]</code>, <code>selection[1]</code> and so on) in the set\nis in no particular order and should not be assumed to be in the same order\nas the user selected the entities.","name":"Selection","namespace":"Sketchup","path":"Sketchup::Selection","type":"class","visibility":"public"},"Sketchup::Selection#[]":{"description":"The {#[]} method is used to retrieve an {Sketchup::Entity} from the selection\nby index. Index 0 is the first entity in the selection.\n\nThis method is not very efficient. If you need to look at every entity in\nthe selection, consider using {#each} instead of using this method\nto manually grab each one.","name":"[]","namespace":"Sketchup::Selection","path":"Sketchup::Selection#[]","type":"instance_method","visibility":"public","parameters":[["index",["Integer"],"The index of the Entity object to retrieve."]],"return":[["Sketchup::Entitiy","nil"],""]},"Sketchup::Selection#add":{"description":"The add method is used to add entities to the selection.  Entities that are\nadded to the Selection are visually indicated by the selection bounding box.\n\nYou can pass it individual Entities or an Array of Entities:\nNote that the add, remove, and toggle methods are all aliases for one\nanother. So if you call remove on an entity that is not selected, it will\nbe toggled to be selected, not removed! Be cautious when writing your code to\nnot make the assumption about the currently selected state of a given entity.","name":"add","namespace":"Sketchup::Selection","path":"Sketchup::Selection#add","type":"instance_method","visibility":"public","parameters":[["ents_or_array",["Array<Sketchup::Entity>"],"List or Array of Entity objects."]],"return":[["Integer"],"the number of Entity objects added"]},"Sketchup::Selection#add_observer":{"description":"The add_observer method is used to add an observer to the selection object.","name":"add_observer","namespace":"Sketchup::Selection","path":"Sketchup::Selection#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Selection#at":{"description":"The {#at} method is an alias for {#[]}.","name":"at","namespace":"Sketchup::Selection","path":"Sketchup::Selection#at","type":"instance_method","visibility":"public","parameters":[["index",["Integer"],"The index of the Entity object to retrieve."]],"return":[["Sketchup::Entitiy","nil"],""]},"Sketchup::Selection#clear":{"description":"The clear method is used to clear the selection.","name":"clear","namespace":"Sketchup::Selection","path":"Sketchup::Selection#clear","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::Selection#contains?":{"description":"The {contains?} method is and alias of {#include?}.","name":"contains?","namespace":"Sketchup::Selection","path":"Sketchup::Selection#contains?","type":"instance_method","visibility":"public","parameters":[["entity",["Sketchup::Entity"],""]],"return":[["Boolean"],""]},"Sketchup::Selection#count":{"description":"","name":"count","namespace":"Sketchup::Selection","path":"Sketchup::Selection#count","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Selection#each":{"description":"The each method is used to iterate through all of the selected entities.\n\nIf you want to do something with all of the selected Entities, this is more\nefficient than using [].","name":"each","namespace":"Sketchup::Selection","path":"Sketchup::Selection#each","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::Selection#empty?":{"description":"The empty? method is used to determine if there are entities in the\nselection.","name":"empty?","namespace":"Sketchup::Selection","path":"Sketchup::Selection#empty?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the selection is empty. False if the\nselection is not empty."]},"Sketchup::Selection#first":{"description":"The first method is used to retrieve the first selected entity\n\nReturns nil if nothing is selected. This method is useful when you know that\nonly a single entity is selected, or you are only interested in the first\nselected entity.","name":"first","namespace":"Sketchup::Selection","path":"Sketchup::Selection#first","type":"instance_method","visibility":"public","return":[["Sketchup::Entity"],"the first selected Entity object if successful"]},"Sketchup::Selection#include?":{"description":"The {include?} method is used to determine if a given {Sketchup::Entity} is\nin the selection.","name":"include?","namespace":"Sketchup::Selection","path":"Sketchup::Selection#include?","type":"instance_method","visibility":"public","parameters":[["entity",["Sketchup::Entity"],""]],"return":[["Boolean"],""]},"Sketchup::Selection#is_curve?":{"description":"The is_curve? method is used to determine if the selection contains all\nedges that belong to a single curve.","name":"is_curve?","namespace":"Sketchup::Selection","path":"Sketchup::Selection#is_curve?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the selection contains all edges that\nbelong to a single curve. False if the selection does\nnot contain all edges that belong to a single curve."]},"Sketchup::Selection#is_surface?":{"description":"The is_surface? method is used to determine if the selection contains only\nall of the faces that are part of a single curved surface.","name":"is_surface?","namespace":"Sketchup::Selection","path":"Sketchup::Selection#is_surface?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the selection contains all faces that\nbelong to a single curved surface. False if the\nselection does not contain all faces that belong to a\nsingle curved surface."]},"Sketchup::Selection#length":{"description":"The {#length} method is used to retrieve the number of selected entities.","name":"length","namespace":"Sketchup::Selection","path":"Sketchup::Selection#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Selection#model":{"description":"The model method retrieves the model for the selection.","name":"model","namespace":"Sketchup::Selection","path":"Sketchup::Selection#model","type":"instance_method","visibility":"public","return":[["Sketchup::Model"],"the model that includes the selection if\nsuccessful"]},"Sketchup::Selection#nitems":{"description":"The {#nitems} method is an alias for {#length}.","name":"nitems","namespace":"Sketchup::Selection","path":"Sketchup::Selection#nitems","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Selection#remove":{"description":"The remove method is used to remove entities from the selection.\n\nYou can pass it individual Entities or an Array of Entities:\nNote that the add, remove, and toggle methods are all aliases for one\nanother. So if you call remove on an entity that is not selected, it will\nbe toggled to be selected, not removed! Be cautious when writing your code to\nnot make the assumption about the currently selected state of a given entity.","name":"remove","namespace":"Sketchup::Selection","path":"Sketchup::Selection#remove","type":"instance_method","visibility":"public","parameters":[["ents_or_array",["Array<Sketchup::Entity>"],"List or Array of Entity objects."]],"return":[["Integer"],"the number of Entity objects removed"]},"Sketchup::Selection#remove_observer":{"description":"The remove_observer method is used to remove an observer from the selection\nobject.","name":"remove_observer","namespace":"Sketchup::Selection","path":"Sketchup::Selection#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::Selection#shift":{"description":"The shift method is used to remove the first entity from the selection and\nreturns it.","name":"shift","namespace":"Sketchup::Selection","path":"Sketchup::Selection#shift","type":"instance_method","visibility":"public","return":[["Sketchup::Entity"],"the first Entity object in the selection set\nif successful"]},"Sketchup::Selection#single_object?":{"description":"The single_object? method is used to determine if the selection contains a\nsingle object.\n\nIt can either be a single Entity or a group of Entities for which is_curve?\nor is_surface? will return true.","name":"single_object?","namespace":"Sketchup::Selection","path":"Sketchup::Selection#single_object?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the selection contains a single\nobject. False if the selection does not contain a\nsingle object."]},"Sketchup::Selection#size":{"description":"The {#size} method is an alias for {#length}.","name":"size","namespace":"Sketchup::Selection","path":"Sketchup::Selection#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Selection#toggle":{"description":"The toggle method is used to change whether an entity is part of the\nselection. Entities that are not already selected\nare added. Entities that are already selected are removed.\n\nYou can pass it individual Entities or an Array of Entities:\nNote that the add, remove, and toggle methods are all aliases for one\nanother. So if you call remove on an entity that is not selected, it will\nbe toggled to be selected, not removed! Be cautious when writing your code to\nnot make the assumption about the currently selected state of a given entity.","name":"toggle","namespace":"Sketchup::Selection","path":"Sketchup::Selection#toggle","type":"instance_method","visibility":"public","parameters":[["ents_or_array",["Array<Sketchup::Entity>"],"List or Array of Entity objects."]],"return":[["Integer"],"the number of Entity objects changed"]},"Sketchup::SelectionObserver":{"description":"This observer interface is implemented to react to selection events. To\nimplement this observer, create a Ruby class of this type, override the\ndesired methods, and add an instance of the observer to the objects of\ninterests.","name":"SelectionObserver","namespace":"Sketchup","path":"Sketchup::SelectionObserver","type":"class","visibility":"public"},"Sketchup::SelectionObserver#onSelectionAdded":{"description":"","name":"onSelectionAdded","namespace":"Sketchup::SelectionObserver","path":"Sketchup::SelectionObserver#onSelectionAdded","type":"instance_method","visibility":"public","parameters":[["selection",["Sketchup::Selection"],null],["entity",["Sketchup::Entity"],null]],"return":[["nil"],""]},"Sketchup::SelectionObserver#onSelectionBulkChange":{"description":"The {#onSelectionBulkChange} method is called whenever items are added or\nremoved from the selection set.\n\nThe {#onSelectionBulkChange} callback will not trigger if the selection\nis cleared by clicking on empty model space. Use the {#onSelectionCleared}\nmethod to catch this case.","name":"onSelectionBulkChange","namespace":"Sketchup::SelectionObserver","path":"Sketchup::SelectionObserver#onSelectionBulkChange","type":"instance_method","visibility":"public","parameters":[["selection",["Sketchup::Selection"],null]],"return":[["nil"],""]},"Sketchup::SelectionObserver#onSelectionCleared":{"description":"The {#onSelectionCleared} method is called when the selection is completely\nemptied.","name":"onSelectionCleared","namespace":"Sketchup::SelectionObserver","path":"Sketchup::SelectionObserver#onSelectionCleared","type":"instance_method","visibility":"public","parameters":[["selection",["Sketchup::Selection"],null]],"return":[["nil"],""]},"Sketchup::SelectionObserver#onSelectionRemoved":{"description":"","name":"onSelectionRemoved","namespace":"Sketchup::SelectionObserver","path":"Sketchup::SelectionObserver#onSelectionRemoved","type":"instance_method","visibility":"public","parameters":[["entity",["Sketchup::Entity"],null],["selection",["Sketchup::Selection"],null]],"return":[["nil"],""]},"Sketchup::Set":{"description":"The set class represents a collection of unique objects. This class is useful\nfor keeping track of a group of related entities, kind of like a selection\nset that stays around for as long as you need it to.\n\nTo make a set of your own, create an empty one using Sketchup::Set.new, and\nthen add items to it.","name":"Set","namespace":"Sketchup","path":"Sketchup::Set","type":"class","visibility":"public"},"Sketchup::Set#clear":{"description":"The clear method is used to clear all objects out of the set.","name":"clear","namespace":"Sketchup::Set","path":"Sketchup::Set#clear","type":"instance_method","visibility":"public","return":[null,"set - an empty Set object"]},"Sketchup::Set#contains?":{"description":"The {#contains?} method is an alias for {#include?}.","name":"contains?","namespace":"Sketchup::Set","path":"Sketchup::Set#contains?","type":"instance_method","visibility":"public","parameters":[["entity",["Sketchup::Entity"],null]],"return":[["Boolean"],""]},"Sketchup::Set#delete":{"description":"The delete object is used to delete or remove an object from the set.","name":"delete","namespace":"Sketchup::Set","path":"Sketchup::Set#delete","type":"instance_method","visibility":"public","parameters":[["object",null,"The object to be deleted."]],"return":[null,"object - the object that was deleted."]},"Sketchup::Set#each":{"description":"The each method is used to iterate through all of the objects in the set.","name":"each","namespace":"Sketchup::Set","path":"Sketchup::Set#each","type":"instance_method","visibility":"public"},"Sketchup::Set#empty?":{"description":"The empty? method is used to determine whether the set is empty.","name":"empty?","namespace":"Sketchup::Set","path":"Sketchup::Set#empty?","type":"instance_method","visibility":"public","return":[["Boolean"],"status - true if the set is empty, false if it is not\nempty."]},"Sketchup::Set#include?":{"description":"The {#include?} method is used to determine if the set includes a particular\nobject.","name":"include?","namespace":"Sketchup::Set","path":"Sketchup::Set#include?","type":"instance_method","visibility":"public","parameters":[["entity",["Sketchup::Entity"],null]],"return":[["Boolean"],""]},"Sketchup::Set#insert":{"description":"The insert method is used to insert an object into the set.","name":"insert","namespace":"Sketchup::Set","path":"Sketchup::Set#insert","type":"instance_method","visibility":"public","parameters":[["object",null,"The object to be inserted into the set."]],"return":[null,"size - the number of objects in the set"]},"Sketchup::Set#length":{"description":"The {#length} method is an alias for {#size}.","name":"length","namespace":"Sketchup::Set","path":"Sketchup::Set#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Set#size":{"description":"The {#size} method is used to determine the number of objects in the set.","name":"size","namespace":"Sketchup::Set","path":"Sketchup::Set#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Set#to_a":{"description":"The to_a method is used to get an Array of the entities in your Set.","name":"to_a","namespace":"Sketchup::Set","path":"Sketchup::Set#to_a","type":"instance_method","visibility":"public","return":[null,"array - The Array of the entities in the Set."]},"Sketchup::ShadowInfo":{"description":"The ShadowInfo class contains method to extract the shadow information for a\nmodel. The majority of the shadow information returned exists in the Model\nInfo > Location and Model Info > Shadows dialogs inside SketchUp.\n\nThe following shadow information keys are maintained in SketchUp:\n\n- +City+ (in Model Info > Geo-location > Set Manual Location...) Note that 'City' is called 'Location' in the UI\n- +Country+ (in Model Info > Geo-location > Set Manual Location...)\n- +Dark+ (in Window > Shadows)\n- +DayOfYear+\n- +DaylightSavings+\n- +DisplayNorth+ (in View > Toolbars > Solar North) Note that 'Toolbar' is called 'Tool Palettes' on Mac\n- +DisplayOnAllFaces+ (in Window > Shadows)\n- +DisplayOnGroundPlane+ (in Window > Shadows)\n- +DisplayShadows+ (in Window > Shadows)\n- +EdgesCastShadows+ (in Window > Shadows)\n- +Latitude+ (in Model Info > Geo-location > Set Manual Location...)\n- +Light+ (in Window > Shadows)\n- +Longitude+ (in Model Info > Geo-location > Set Manual Location...)\n- +North+ Angle (in View > Toolbars > Solar North) Note that 'Toolbar' is called 'Tool Palettes' on Mac\n- +ShadowTime+ (in Window > Shadows)\n- +ShadowTime_time_t+ (ShadowTime in Epoch time)\n- +SunDirection+ (Generated based on ShadowTime)\n- +SunRise+ (Generated based on ShadowTime)\n- +SunRise_time_t+ (SunRise in Epoch time)\n- +SunSet+ (Generated based on ShadowTime)\n- +SunSet_time_t+ (SunSet in Epoch time)\n- +TZOffset+ (in Window > Shadows)\n- +UseSunForAllShading+ (in Window > Shadows)\n\nYou access the ShadowInfo object by calling Model.shadow_info:","name":"ShadowInfo","namespace":"Sketchup","path":"Sketchup::ShadowInfo","type":"class","visibility":"public"},"Sketchup::ShadowInfo#[]":{"description":"The [] method retrieves a value from the array of keys","name":"[]","namespace":"Sketchup::ShadowInfo","path":"Sketchup::ShadowInfo#[]","type":"instance_method","visibility":"public","parameters":[["key",["String"],"The key of the shadowinfo value to retrieve."]],"return":[["Object","nil"],"the value that is retrieved."]},"Sketchup::ShadowInfo#[]=":{"description":"The set value []= method is used to set the value in the array of shadow\ninfo options.","name":"[]=","namespace":"Sketchup::ShadowInfo","path":"Sketchup::ShadowInfo#[]=","type":"instance_method","visibility":"public","parameters":[["key",["String"],"The key of the shadowinfo value to set."],["value",["Object"],"The value to be set."]],"return":[["Object"],"the value that was set if successful, or false\nif unsuccessful."]},"Sketchup::ShadowInfo#add_observer":{"description":"The add_observer method is used to add an observer to the current object.","name":"add_observer","namespace":"Sketchup::ShadowInfo","path":"Sketchup::ShadowInfo#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::ShadowInfo#count":{"description":"The count method is inherited from the Enumerable mix-in module.","name":"count","namespace":"Sketchup::ShadowInfo","path":"Sketchup::ShadowInfo#count","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::ShadowInfo#each":{"description":"The {#each} method iterates through all of the shadow information key/value\npairs.","name":"each","namespace":"Sketchup::ShadowInfo","path":"Sketchup::ShadowInfo#each","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::ShadowInfo#each_key":{"description":"The each_key method iterates through all of the shadow information keys.","name":"each_key","namespace":"Sketchup::ShadowInfo","path":"Sketchup::ShadowInfo#each_key","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::ShadowInfo#each_pair":{"description":"The #{each_pair} method is an alias for {#each}.","name":"each_pair","namespace":"Sketchup::ShadowInfo","path":"Sketchup::ShadowInfo#each_pair","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::ShadowInfo#keys":{"description":"The keys method is a class method that returns an array with all of the\nattribute keys","name":"keys","namespace":"Sketchup::ShadowInfo","path":"Sketchup::ShadowInfo#keys","type":"instance_method","visibility":"public","return":[["Array<String>"],"an array of keys"]},"Sketchup::ShadowInfo#length":{"description":"The {#length} method returns the number of options in the shadow options\ncollection","name":"length","namespace":"Sketchup::ShadowInfo","path":"Sketchup::ShadowInfo#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::ShadowInfo#remove_observer":{"description":"The remove_observer method is used to remove an observer from the current\nobject.","name":"remove_observer","namespace":"Sketchup::ShadowInfo","path":"Sketchup::ShadowInfo#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::ShadowInfo#size":{"description":"The {#size} method is an alias for {#length}.","name":"size","namespace":"Sketchup::ShadowInfo","path":"Sketchup::ShadowInfo#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::ShadowInfo.each_key":{"description":"The each_key method iterates through all of the shadow information keys.","name":"each_key","namespace":"Sketchup::ShadowInfo","path":"Sketchup::ShadowInfo.each_key","type":"class_method","visibility":"public","return":[["nil"],""]},"Sketchup::ShadowInfo.keys":{"description":"The keys method is a class method that returns an array with all of the\nattribute keys","name":"keys","namespace":"Sketchup::ShadowInfo","path":"Sketchup::ShadowInfo.keys","type":"class_method","visibility":"public","return":[["Array<String>"],"an array of keys"]},"Sketchup::ShadowInfoObserver":{"description":"This observer interface is implemented to react to changes to the shadow\nsettings. To implement this observer, create a Ruby class of this type,\noverride the desired methods, and add an instance of the observer to the\n{Sketchup::ShadowInfo} object.","name":"ShadowInfoObserver","namespace":"Sketchup","path":"Sketchup::ShadowInfoObserver","type":"class","visibility":"public"},"Sketchup::ShadowInfoObserver#onShadowInfoChanged":{"description":"The {#onShadowInfoChanged} method is invoked whenever the user alters a\nsetting inside the Shadows and Model Info dialogs. The type parameter\ncontains a number identifying which option was altered. Here are the types to\nexpect:\n\n- 0 = Time/Date sliders\n- 1 = Display Shadows checkbox\n- 2 = Light/Dark sliders\n- 3 = Geographic Location (in Model Info > Location)\n- 4 = Solar Orientation (in Model Info > Location)\n- 7 = Use Sun for Shading checkbox\n- 8 = Display from Edges checkbox\n- 9 = Display on Ground checkbox\n- 10 = Display on Faces checkbox","name":"onShadowInfoChanged","namespace":"Sketchup::ShadowInfoObserver","path":"Sketchup::ShadowInfoObserver#onShadowInfoChanged","type":"instance_method","visibility":"public","parameters":[["shadow_info",["Sketchup::ShadowInfo"],null],["type",["Integer"],"A number identifying which setting was changed."]],"return":[["nil"],""]},"Sketchup::Style":{"description":"The Style class contains methods for modifying information about a specific\nstyle. Styles are a collection of display settings that tell SketchUp how to\ndraw the model.","name":"Style","namespace":"Sketchup","path":"Sketchup::Style","type":"class","visibility":"public"},"Sketchup::Style#description":{"description":"The {#description} method gets the description for a {Sketchup::Style}.","name":"description","namespace":"Sketchup::Style","path":"Sketchup::Style#description","type":"instance_method","visibility":"public","return":[["String"],"description"]},"Sketchup::Style#description=":{"description":"The {#description=} method sets the description for a {Sketchup::Style}.","name":"description=","namespace":"Sketchup::Style","path":"Sketchup::Style#description=","type":"instance_method","visibility":"public","parameters":[["description",["String"],null]]},"Sketchup::Style#name":{"description":"The {#name} method gets the name for a {Sketchup::Style}.","name":"name","namespace":"Sketchup::Style","path":"Sketchup::Style#name","type":"instance_method","visibility":"public","return":[["String"],""]},"Sketchup::Style#name=":{"description":"The {#name=} method sets the name for a {Sketchup::Style}.","name":"name=","namespace":"Sketchup::Style","path":"Sketchup::Style#name=","type":"instance_method","visibility":"public","parameters":[["name",["String"],null]]},"Sketchup::Styles":{"description":"The Styles class contains methods for manipulating a collection of styles in\na model. Typically, you will access this via the active_model:","name":"Styles","namespace":"Sketchup","path":"Sketchup::Styles","type":"class","visibility":"public"},"Sketchup::Styles#[]":{"description":"The {#[]} method is used to retrieves a style by either name or index.","name":"[]","namespace":"Sketchup::Styles","path":"Sketchup::Styles#[]","type":"instance_method","visibility":"public"},"Sketchup::Styles#active_style":{"description":"The #{active_style} method is used to retrieve the active style.","name":"active_style","namespace":"Sketchup::Styles","path":"Sketchup::Styles#active_style","type":"instance_method","visibility":"public","return":[["Sketchup::Style"],""]},"Sketchup::Styles#active_style_changed":{"description":"The {#active_style_changed} method tells you if the active style has been\nedited by the user since it was last saved.","name":"active_style_changed","namespace":"Sketchup::Styles","path":"Sketchup::Styles#active_style_changed","type":"instance_method","visibility":"public","return":[["Boolean"],""]},"Sketchup::Styles#add_style":{"description":"The {#add_style} method is used to create and load a style from the given\nfile.","name":"add_style","namespace":"Sketchup::Styles","path":"Sketchup::Styles#add_style","type":"instance_method","visibility":"public","parameters":[["filename",["String"],null],["select",["Boolean"],"+true+ if you want to set the style to be the\nactive style."]],"return":[["Boolean"],""]},"Sketchup::Styles#count":{"description":"","name":"count","namespace":"Sketchup::Styles","path":"Sketchup::Styles#count","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Styles#each":{"description":"The {#each} method is used to iterate through styles.","name":"each","namespace":"Sketchup::Styles","path":"Sketchup::Styles#each","type":"instance_method","visibility":"public","return":[["nil"],""]},"Sketchup::Styles#length":{"description":"The {#length} method is an alias of {#size}.","name":"length","namespace":"Sketchup::Styles","path":"Sketchup::Styles#length","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Styles#parent":{"description":"The {#parent} method is used to return the model for the styles.","name":"parent","namespace":"Sketchup::Styles","path":"Sketchup::Styles#parent","type":"instance_method","visibility":"public","return":[["Sketchup::Model"],""]},"Sketchup::Styles#purge_unused":{"description":"The {#purge_unused} method is used to remove unused styles from the model.","name":"purge_unused","namespace":"Sketchup::Styles","path":"Sketchup::Styles#purge_unused","type":"instance_method","visibility":"public","return":[["true"],""]},"Sketchup::Styles#selected_style":{"description":"The {#selected_style} method is used to retrieve the currently selected style.","name":"selected_style","namespace":"Sketchup::Styles","path":"Sketchup::Styles#selected_style","type":"instance_method","visibility":"public","return":[["Sketchup::Style"],"style"]},"Sketchup::Styles#selected_style=":{"description":"The {#selected_style=} method is used to set the currently selected style.","name":"selected_style=","namespace":"Sketchup::Styles","path":"Sketchup::Styles#selected_style=","type":"instance_method","visibility":"public","parameters":[["style",["Sketchup::Style"],null]],"return":[["false"],""]},"Sketchup::Styles#size":{"description":"The {#size} method is used to retrieve the number of styles in the\ncollection.","name":"size","namespace":"Sketchup::Styles","path":"Sketchup::Styles#size","type":"instance_method","visibility":"public","return":[["Integer"],""]},"Sketchup::Styles#update_selected_style":{"description":"The {#update_selected_style} method commits the current style settings to the\nstyle selected in the Style Browser.","name":"update_selected_style","namespace":"Sketchup::Styles","path":"Sketchup::Styles#update_selected_style","type":"instance_method","visibility":"public","return":[["true"],""]},"Sketchup::Text":{"description":"The Text class contains method to manipulate a Text entity object.","name":"Text","namespace":"Sketchup","path":"Sketchup::Text","type":"class","visibility":"public"},"Sketchup::Text#arrow_type":{"description":"The arrow_type method retrieves the current arrow type used for the leader\ntext.\n\nValid arrow types are 0 for none, 2 for dot, 3 for closed arrow, 4 for open\narrow.","name":"arrow_type","namespace":"Sketchup::Text","path":"Sketchup::Text#arrow_type","type":"instance_method","visibility":"public","return":[["Integer"],"a numerical representation for the type of\narrow."]},"Sketchup::Text#arrow_type=":{"description":"The arrow_type= method sets the arrow type used for leader text.\n\nValid arrow types are 0 for none, 2 for dot, 3 for closed arrow, 4 for open\narrow.","name":"arrow_type=","namespace":"Sketchup::Text","path":"Sketchup::Text#arrow_type=","type":"instance_method","visibility":"public","parameters":[["type",["Integer"],"A numerical representation of the type of arrow to be\nset."]],"return":[["Integer"],"a numerical representation for the type of\narrow."]},"Sketchup::Text#display_leader=":{"description":"The display_leader= method accepts true or false for whether to display the\nleader.\n\nLeader text that is not displayed is set to Hidden type.","name":"display_leader=","namespace":"Sketchup::Text","path":"Sketchup::Text#display_leader=","type":"instance_method","visibility":"public","parameters":[["status",["Boolean"],"true if you want to display the leader text, false if\nyou do not want to display the leader text."]],"return":[["Boolean"],"the status that you set."]},"Sketchup::Text#display_leader?":{"description":"The display_leader? method returns the status of the leader.","name":"display_leader?","namespace":"Sketchup::Text","path":"Sketchup::Text#display_leader?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the leader is being displayed, false\nif it is not displayed."]},"Sketchup::Text#has_leader?":{"description":"The has_leader method is used to determine if the Text object has a leader.","name":"has_leader?","namespace":"Sketchup::Text","path":"Sketchup::Text#has_leader?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the Text object has a leader. False if\nthe Text object does not have a leader."]},"Sketchup::Text#leader_type":{"description":"The leader_type method retrieves the currently set leader type.","name":"leader_type","namespace":"Sketchup::Text","path":"Sketchup::Text#leader_type","type":"instance_method","visibility":"public","return":[["Integer"],"a numerical value representing the currently\nset leader type."]},"Sketchup::Text#leader_type=":{"description":"The leader_type = method sets the leader type.\n\nValid leader types are 0 for none, 1 for View-based, and 2 for Pushpin","name":"leader_type=","namespace":"Sketchup::Text","path":"Sketchup::Text#leader_type=","type":"instance_method","visibility":"public","parameters":[["type",["Integer"],"A numerical value representing the leader type to be\nset."]],"return":[["Integer"],"a numerical value representing the leader type\nyou just set."]},"Sketchup::Text#line_weight":{"description":"The line_weight method returns a line weight in number of pixels.\n\nDefalt line weight is 1.","name":"line_weight","namespace":"Sketchup::Text","path":"Sketchup::Text#line_weight","type":"instance_method","visibility":"public","return":[["Integer"],"the line weight in pixels"]},"Sketchup::Text#line_weight=":{"description":"The line_weight= method sets the line weight in pixels.\n\nDefault line weight is 1.","name":"line_weight=","namespace":"Sketchup::Text","path":"Sketchup::Text#line_weight=","type":"instance_method","visibility":"public","parameters":[["weight",["Integer"],"The line weight to be set (in pixels)."]],"return":[["Integer"],"The line weight that has been set."]},"Sketchup::Text#point":{"description":"The point method is used to get the point associated with the text.","name":"point","namespace":"Sketchup::Text","path":"Sketchup::Text#point","type":"instance_method","visibility":"public","return":[["Geom::Point3d"],"a Point3d object."]},"Sketchup::Text#point=":{"description":"The point= method is used to set the point associated with the text.","name":"point=","namespace":"Sketchup::Text","path":"Sketchup::Text#point=","type":"instance_method","visibility":"public","parameters":[["point3d",["Geom::Point3d"],"A Point3d object."]],"return":[["Geom::Point3d"],"true if successful, false if unsuccessful."]},"Sketchup::Text#set_text":{"description":"The set_text method is used to set the text within a Text object without\nrecording an Undo operation.","name":"set_text","namespace":"Sketchup::Text","path":"Sketchup::Text#set_text","type":"instance_method","visibility":"public","parameters":[["textstring",["String"],"The string to be set within the Text object."]],"return":[["Sketchup::Text"],"the Text object"]},"Sketchup::Text#text":{"description":"The text method is used to retrieve the string version of a Text object.","name":"text","namespace":"Sketchup::Text","path":"Sketchup::Text#text","type":"instance_method","visibility":"public","return":[["String"],"the string representation of the Text\nobject"]},"Sketchup::Text#text=":{"description":"The text= method is used to set the string version of a Text object.","name":"text=","namespace":"Sketchup::Text","path":"Sketchup::Text#text=","type":"instance_method","visibility":"public","parameters":[["textstring",["String"],""]],"return":[["String"],"the newly set text"]},"Sketchup::Text#vector":{"description":"The vector method is used to get the vector associated with the text.","name":"vector","namespace":"Sketchup::Text","path":"Sketchup::Text#vector","type":"instance_method","visibility":"public","return":[["Geom::Vector3d"],"a Vector3d object."]},"Sketchup::Text#vector=":{"description":"The vector= method is used to set the vector associated with the text.","name":"vector=","namespace":"Sketchup::Text","path":"Sketchup::Text#vector=","type":"instance_method","visibility":"public","parameters":[["vector",["Geom::Vector3d"],"A Vector3d object."]],"return":[["Geom::Vector3d"],""]},"Sketchup::Texture":{"description":"The Texture class contains methods for obtaining information about textures\nthat are part of your materials in your model (within the In-Model section\nof the Materials Browser). Remember, textures are repeatable images that\n\"tile\" when painted on a surface.","name":"Texture","namespace":"Sketchup","path":"Sketchup::Texture","type":"class","visibility":"public"},"Sketchup::Texture#average_color":{"description":"The average_color method retrieves a color object with the average color\nfound in the texture.","name":"average_color","namespace":"Sketchup::Texture","path":"Sketchup::Texture#average_color","type":"instance_method","visibility":"public","return":[["Sketchup::Color","nil"],"a color object (if successful), nil if\nunsuccessful."]},"Sketchup::Texture#filename":{"description":"The filename method retrieves the entire path, including the file, for a\ntexture object.","name":"filename","namespace":"Sketchup::Texture","path":"Sketchup::Texture#filename","type":"instance_method","visibility":"public","return":[["String"],"a string representation of the path and\nfilename used for the texture."]},"Sketchup::Texture#height":{"description":"The height method is used to get the height of a repeatable texture image,\nin inches.","name":"height","namespace":"Sketchup::Texture","path":"Sketchup::Texture#height","type":"instance_method","visibility":"public","return":[["Integer"],"the height, in inches, of the texture pattern"]},"Sketchup::Texture#image_height":{"description":"The image_height method retrieves the height of the repeatable texture\nimage, in pixels.","name":"image_height","namespace":"Sketchup::Texture","path":"Sketchup::Texture#image_height","type":"instance_method","visibility":"public","return":[["Integer"],"the height, in pixels, of the texture\npattern"]},"Sketchup::Texture#image_width":{"description":"The image_width method retrieves the width of the repeatable texture image,\nin pixels.","name":"image_width","namespace":"Sketchup::Texture","path":"Sketchup::Texture#image_width","type":"instance_method","visibility":"public","return":[["Integer"],"the width, in pixels, of the texture\npattern"]},"Sketchup::Texture#size=":{"description":"The size= method allows you to set the size of the repeatable texture image,\nin inches,","name":"size=","namespace":"Sketchup::Texture","path":"Sketchup::Texture#size=","type":"instance_method","visibility":"public","parameters":[["size",["Integer","Array(Integer, Integer)"],"The size, in inches, of the texture. This number will\napply to height and width to keep aspect ratio.\nYou can also pass as a parameter an array of two\nnumeric values which will set width and height\nregardless of maintaining the height/width ratio."]],"return":[["Integer","Array(Integer, Integer)"],"the size, in inches, of the texture. This number\nwill apply to height and width to keep aspect ratio.\nIf you have passed in an array of two numbers for width\nand height, the same array will be returned if\nsuccessful."]},"Sketchup::Texture#valid?":{"description":"The valid? method ensures that a texture is valid.","name":"valid?","namespace":"Sketchup::Texture","path":"Sketchup::Texture#valid?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if valid, false if invalid."]},"Sketchup::Texture#width":{"description":"The width method is used to get the width of a repeatable texture image,\nin inches.","name":"width","namespace":"Sketchup::Texture","path":"Sketchup::Texture#width","type":"instance_method","visibility":"public","return":[["Integer"],"the width, in inches, of the texture pattern"]},"Sketchup::Texture#write":{"description":"Writes the texture to file with option to preserve the color adjustments made\nby the material.","name":"write","namespace":"Sketchup::Texture","path":"Sketchup::Texture#write","type":"instance_method","visibility":"public","parameters":[["filename",["String"],"String - The filename to write the texture to."],["colorize",["Boolean"],"Boolean - Allows for the texture to\nbe exported with the color adjustments."]],"return":[["Boolean"],"true if the method succeeded"]},"Sketchup::TextureWriter":{"description":"The TextureWriter class is used primarily for writing the textures used in a\nSketchUp model out to files as part of an export for use in another\napplication. These methods are usually invoked in this order:\n\n  - 1. load - load one or more textures from a model into the TextureWriter.\n  - 2. write_all or write - write the texture(s) to file.","name":"TextureWriter","namespace":"Sketchup","path":"Sketchup::TextureWriter","type":"class","visibility":"public"},"Sketchup::TextureWriter#count":{"description":"The {#length} method is used to determine the number of textures loaded into\nthe texture writer.\n\nThe {#count} method is an alias for {#length}.","name":"count","namespace":"Sketchup::TextureWriter","path":"Sketchup::TextureWriter#count","type":"instance_method","visibility":"public","return":[["Integer"],"length - the number of textures loaded in the texture\nwriter"]},"Sketchup::TextureWriter#filename":{"description":"The filename method is used to retrieve the original filename for a\nparticular texture.","name":"filename","namespace":"Sketchup::TextureWriter","path":"Sketchup::TextureWriter#filename","type":"instance_method","visibility":"public","parameters":[["handle",["Integer"],"The index or handle of the texture in the texture\nwriter."]],"return":[["String"],"filename - the filename of the texture on the file system.\nTextures can be generated without filenames, so if the\ntexture doesn't have a name write_all will save the\ntexture to an image file named \"i.png\". Where i is the\nfirst integer greater than zero which was not already used\nfor a png file name."]},"Sketchup::TextureWriter#handle":{"description":"The handle method is used to retrieve a handle or index for a specific\ntexture in the texture writer.","name":"handle","namespace":"Sketchup::TextureWriter","path":"Sketchup::TextureWriter#handle","type":"instance_method","visibility":"public"},"Sketchup::TextureWriter#length":{"description":"The {#length} method is used to determine the number of textures loaded into\nthe texture writer.\n\nThe {#count} method is an alias for {#length}.","name":"length","namespace":"Sketchup::TextureWriter","path":"Sketchup::TextureWriter#length","type":"instance_method","visibility":"public","return":[["Integer"],"length - the number of textures loaded in the texture\nwriter"]},"Sketchup::TextureWriter#load":{"description":"The load method is used to load one or more textures into the texture writer\nfor writing out to a file.","name":"load","namespace":"Sketchup::TextureWriter","path":"Sketchup::TextureWriter#load","type":"instance_method","visibility":"public"},"Sketchup::TextureWriter#write":{"description":"The write method is used to write an individual textures, within the texture\nwriter, to a file. An entity's texture must have been loaded into the texture\nwriter before this method can be used to write it's texture.\n\nThis method will return one of the following status messages. (These are\nconstants that are defined by the API.)\n\n  - 0 = FILE_WRITE_OK\n  - 1 = FILE_WRITE_FAILED_INVALID_TIFF\n  - 2 = FILE_WRITE_FAILED_UNKNOWN","name":"write","namespace":"Sketchup::TextureWriter","path":"Sketchup::TextureWriter#write","type":"instance_method","visibility":"public"},"Sketchup::TextureWriter#write_all":{"description":"The write_all method is used to write all of the textures within the texture\nwriter to files. It will return one of three status numbers:\n\n  - 0 = FILE_WRITE_OK\n  - 1 = FILE_WRITE_FAILED_INVALID_TIFF\n  - 2 = FILE_WRITE_FAILED_UNKNOWN","name":"write_all","namespace":"Sketchup::TextureWriter","path":"Sketchup::TextureWriter#write_all","type":"instance_method","visibility":"public","parameters":[["dirname",["String"],"The directory to write to."],["filename_format",["Boolean"],"true to use 8.3 DOS name format."]],"return":[["Integer"],"status - one of three status messages (see comments.)"]},"Sketchup::Tool":{"description":"Tool is the interface that you implement to create a SketchUp tool.\nSee the file Plugins/Examples/linetool.rb (in your SketchUp install\ndirectory) for an example of how to create a custom tool in Ruby.\n\nTo create a new tool in Ruby, you must define a new class that implements\nthe methods for the events that you want to respond to. You do not have\nto implement methods for every possible event that a Tool can respond to.\n\nOnce you have defined a tool class, you select that tool by creating an\ninstance of it and passing it to {Sketchup::Model#select_tool}. For\nexample:\n\n  class MyTool\n    def activate\n      puts 'Your tool has been activated.'\n    end\n  end\n\n  my_tool = MyTool.new\n  Sketchup.active_model.select_tool(my_tool)\n\nThe following table contains several constants you can use when check for\ncertain key presses inside the keyboard handling callbacks:\n\n- +CONSTRAIN_MODIFIER_KEY+ = Shift Key\n- +CONSTRAIN_MODIFIER_MASK+ = Shift Key\n- +COPY_MODIFIER_KEY+ = Alt/Option on Mac, Ctrl on PC\n- +COPY_MODIFIER_MASK+ = Alt/Option on Mac, Ctrl on PC\n- +ALT_MODIFIER_KEY+ = Command on Mac, Alt on PC\n- +ALT_MODIFIER_MASK+ = Command on Mac, Alt on PC","name":"Tool","namespace":"Sketchup","path":"Sketchup::Tool","type":"class","visibility":"public"},"Sketchup::Tool#activate":{"description":"The activate method is called by SketchUp when the tool is selected.\nIt is a good place to put most of your initialization, such as instance\nvariables to track the state of the tool.","name":"activate","namespace":"Sketchup::Tool","path":"Sketchup::Tool#activate","type":"instance_method","visibility":"public","return":[null,"nil"]},"Sketchup::Tool#deactivate":{"description":"The deactivate method is called when the tool is deactivated because a\ndifferent tool was selected.","name":"deactivate","namespace":"Sketchup::Tool","path":"Sketchup::Tool#deactivate","type":"instance_method","visibility":"public","parameters":[["view",null,"A View object where the method was invoked."]],"return":[null,"nil"]},"Sketchup::Tool#draw":{"description":"The {#draw} method is called by SketchUp whenever the view is refreshed to\nallow the tool to do its own drawing. If the tool has some temporary graphics\nthat it wants displayed while it is active, it should implement this method\nand draw to the {Sketchup::View}.","name":"draw","namespace":"Sketchup::Tool","path":"Sketchup::Tool#draw","type":"instance_method","visibility":"public","parameters":[["view",["Sketchup::View"],"A View object where the method was invoked."]],"return":[null,"nil"]},"Sketchup::Tool#enableVCB?":{"description":"The enableVCB? method is used to tell SketchUp whether to allow the user to\nenter text into the VCB (value control box, aka the \"measurements\" panel).\nIf you do not implement this method, then the vcb is disabled by default.","name":"enableVCB?","namespace":"Sketchup::Tool","path":"Sketchup::Tool#enableVCB?","type":"instance_method","visibility":"public","return":[["Boolean"],"enable - true if you want the VCB enabled"]},"Sketchup::Tool#getExtents":{"description":"In order to accurately draw things, SketchUp needs to know the extents of\nwhat it is drawing. If the tool is doing its own drawing, it may need to\nimplement this method to tell SketchUp the extents of what it will be\ndrawing. If you don't implement this method, you may find that part of what\nthe tool is drawing gets clipped to the extents of the rest of the\nmodel.\n\nThis must return a BoundingBox. In a typical implementation, you\nwill create a new BoundingBox, add points to set the extents of the drawing\nthat the tool will do and then return it.","name":"getExtents","namespace":"Sketchup::Tool","path":"Sketchup::Tool#getExtents","type":"instance_method","visibility":"public","return":[null,"BoundingBox - a BoundingBox object"]},"Sketchup::Tool#getInstructorContentDirectory":{"description":"The getInstructorContentDirectory method is used to tell SketchUp the\ndirectory containing your Tool's instructor content. To use this, create\na custom instructor directory, put an index.html file inside of it, and then\nreturn that path via this method. If the SketchUp user has the Instructor\nwindow open when they activate your tool, they will see your html file.\n\nNOTE: Prior to SketchUp 2014 this method would assume the path was relative\nto the SketchUp resource folder. From 2014 and onwards you can specify the\nabsolute path to an HTML file or the absolute path to a directory containing\nan index.html file.","name":"getInstructorContentDirectory","namespace":"Sketchup::Tool","path":"Sketchup::Tool#getInstructorContentDirectory","type":"instance_method","visibility":"public","return":[null,"directory - the string directory where the Instructor\ncontent exists."]},"Sketchup::Tool#getMenu":{"description":"The getMenu method is called by SketchUp to let the tool provide its own\ncontext menu. Most tools will not want to implement this method and,\ninstead, use the normal context menu found on all entities.\n\nIf you do implement this method, the argument is a Menu. You should use the\nadd_item method to build the context menu.\n\nYour tool will use a standard context menu by default if you do not\nimplement this method. Implement this method if you want a context-click to\ndisplay something other than this default context menu.\n\nIn SketchUp 2015 the flags, x, y and view parameters were added. They are\nneeded if you need to pick the entities under the mouse position. The new\nparameters are optional, but if you need to use one you must include them\nall.","name":"getMenu","namespace":"Sketchup::Tool","path":"Sketchup::Tool#getMenu","type":"instance_method","visibility":"public","parameters":[["flags",["optional"],"A bit mask that tells the state of the\nmodifier keys and other mouse buttons at the time.\nAdded in SU2015."],["menu",null,"A Menu object."],["x",["optional"],"The X coordinate on the screen where the\nevent occurred. Added in SU2015."],["view",["optional"],"A View object where the method was invoked.\nAdded in SU2015."],["y",["optional"],"The Y coordinate on the screen where the\nevent occurred. Added in SU2015."]],"return":[null,"nil"]},"Sketchup::Tool#onCancel":{"description":"The onCancel method is called by SketchUp to cancel the current operation of\nthe tool. The typical response will be to reset the tool to its initial\nstate.\n\nThe reason identifies the action that triggered the call. The reason can be\none of the following values:\n\n- +0+: the user canceled the current operation by hitting the escape key.\n- +1+: the user re-selected the same tool from the toolbar or menu.\n- +2+: the user did an undo while the tool was active.","name":"onCancel","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onCancel","type":"instance_method","visibility":"public","parameters":[["reason",null,"A reason value (see comments)."],["view",null,"A View object where the method was invoked."]],"return":[null,"nil"]},"Sketchup::Tool#onKeyDown":{"description":"The onKeyDown method is called by SketchUp when the user presses a key on\nthe keyboard. If you want to get input from the VCB, you should implement\nonUserText rather than this method.\n\nThis method is can be used for special keys such as the Shift key, Ctrl key,\nand so on, or for just determining which key a user pressed. This method is\nactually called for all keys that are pressed.\n\nThere are several\n\"virtual keys\" defined as constants you can use.  Their use is cross\nplatform. They are:\n\n- +VK_ALT+\n- +VK_COMMAND+\n- +VK_CONTROL+\n- +VK_DELETE+\n- +VK_DOWN+\n- +VK_END+\n- +VK_HOME+\n- +VK_INSERT+\n- +VK_LEFT+\n- +VK_MENU+\n- +VK_NEXT+\n- +VK_PRIOR+\n- +VK_RIGHT+\n- +VK_SHIFT+\n- +VK_SPACE+\n- +VK_UP+\n\nV6: There is a bug on Windows where the typematic effect does\nnot work. Typematic effects work fine on a Mac.","name":"onKeyDown","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onKeyDown","type":"instance_method","visibility":"public","parameters":[["key",null,"The key that was pressed."],["repeat",null,"A value of 1 for a single press of a key.  A value of 2\nif the user has pressed a key and is holding it down."],["view",null,"A View object where the method was invoked."],["flags",null,"A bit mask that tells the state of the modifier keys at\nthe time of the onKeyDown."]],"return":[null,"nil"]},"Sketchup::Tool#onKeyUp":{"description":"The onKeyUp method is called by SketchUp when the user releases a key on the\nkeyboard.","name":"onKeyUp","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onKeyUp","type":"instance_method","visibility":"public","parameters":[["key",null,"The key that was pressed."],["repeat",null,"A value of 1 for a single press of a key.  A value of 2\nif the user has pressed a key and is holding it down."],["view",null,"A View object where the method was invoked."],["flags",null,"A bit mask that tells the state of the modifier keys at\nthe time of the onKeyUp."]],"return":[null,"nil"]},"Sketchup::Tool#onLButtonDoubleClick":{"description":"The onLButtonDoubleClick is called by SketchUp when the user double clicks\nwith the left mouse button.","name":"onLButtonDoubleClick","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onLButtonDoubleClick","type":"instance_method","visibility":"public","parameters":[["flags",null,"A bit mask that tells the state of the modifier keys\nand other mouse buttons at the time."],["x",null,"The X coordinate on the screen where the event occurred."],["view",null,"A View object where the method was invoked."],["y",null,"The Y coordinate on the screen where the event occurred."]],"return":[null,"nil"]},"Sketchup::Tool#onLButtonDown":{"description":"The onLButtonDown method is called by SketchUp when the left mouse button is\npressed. Most tools will implement this method.","name":"onLButtonDown","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onLButtonDown","type":"instance_method","visibility":"public","parameters":[["flags",null,"A bit mask that tells the state of the modifier keys and\nother mouse buttons at the time."],["x",null,"The X coordinate on the screen where the event occurred."],["view",null,"A View object where the method was invoked."],["y",null,"The Y coordinate on the screen where the event occurred."]],"return":[null,"nil"]},"Sketchup::Tool#onLButtonUp":{"description":"The onLButtonUp method is called by SketchUp when the left mouse button is\nreleased.","name":"onLButtonUp","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onLButtonUp","type":"instance_method","visibility":"public","parameters":[["flags",null,"A bit mask that tells the state of the modifier keys and\nother mouse buttons at the time."],["x",null,"The X coordinate on the screen where the event occurred."],["view",null,"A View object where the method was invoked."],["y",null,"The Y coordinate on the screen where the event occurred."]],"return":[null,"nil"]},"Sketchup::Tool#onMButtonDoubleClick":{"description":"NOTE: Though this method has been documented in the Ruby API for many years,\nit has never worked properly. We are leaving this documentation in place\nfor now in the hopes of fixing the implementation, but you won't have any\nluck trying to use it in SU7 and earlier.\n\nThe onMButtonDoubleClick method is called by SketchUp when the middle mouse\nbutton (on a three button mouse) is double-clicked.\n\nOnly implement this method if you want SketchUp to react to a middle mouse\nbutton being double-clicked.","name":"onMButtonDoubleClick","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onMButtonDoubleClick","type":"instance_method","visibility":"public","parameters":[["flags",null,"A bit mask that tells the state of the modifier keys and\nother mouse buttons at the time."],["x",null,"The X coordinate on the screen where the event occurred."],["view",null,"A View object where the method was invoked."],["y",null,"The Y coordinate on the screen where the event occurred."]],"return":[null,"nil"]},"Sketchup::Tool#onMButtonDown":{"description":"The onMButtonDown method is called by SketchUp when the middle mouse button\n(on a three button mouse) is down.\n\nThe Orbit tool is activated by default when the middle mouse button is down.\nImplement this method if you want a middle mouse button to do something\nother than invoke the Orbit tool.","name":"onMButtonDown","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onMButtonDown","type":"instance_method","visibility":"public","parameters":[["flags",null,"A bit mask that tells the state of the modifier keys and\nother mouse buttons at the time."],["x",null,"The X coordinate on the screen where the event occurred."],["view",null,"A View object where the method was invoked."],["y",null,"The Y coordinate on the screen where the event occurred."]],"return":[null,"nil"]},"Sketchup::Tool#onMButtonUp":{"description":"The onMButtonUp method is called by SketchUp when the middle mouse button\n(on a three button mouse) is released.\n\nSketchUp returns to the previous tool from the Orbit tool when the middle\nmouse button is released. Implement this method if you want a middle mouse\nbutton to do something other than return to the previous tool when in the\nOrbit tool.","name":"onMButtonUp","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onMButtonUp","type":"instance_method","visibility":"public","parameters":[["flags",null,"A bit mask that tells the state of the modifier keys and\nother mouse buttons at the time."],["x",null,"The X coordinate on the screen where the event occurred."],["view",null,"A View object where the method was invoked."],["y",null,"The Y coordinate on the screen where the event occurred."]],"return":[null,"nil"]},"Sketchup::Tool#onMouseEnter":{"description":"The onMouseEnter method is called by SketchUp when the mouse enters the View\nobject.","name":"onMouseEnter","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onMouseEnter","type":"instance_method","visibility":"public","parameters":[["view",null,"A View object where the method was invoked."]],"return":[null,"nil"]},"Sketchup::Tool#onMouseLeave":{"description":"The onMouseLeave method is called by SketchUp when the mouse leaves the View\nobject.","name":"onMouseLeave","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onMouseLeave","type":"instance_method","visibility":"public","parameters":[["view",null,"A View object where the method was invoked."]],"return":[null,"nil"]},"Sketchup::Tool#onMouseMove":{"description":"The onMouseMove method is called by SketchUp whenever the mouse is moved.\nYou will often want to implement this method.\n\nTry to make this method as efficient as possible because this method is\ncalled often.","name":"onMouseMove","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onMouseMove","type":"instance_method","visibility":"public","parameters":[["flags",null,"A bit mask that tells the state of the modifier keys and\nother mouse buttons at the time."],["x",null,"The X coordinate on the screen where the event occurred."],["view",null,"A View object where the method was invoked."],["y",null,"The Y coordinate on the screen where the event occurred."]],"return":[null,"nil"]},"Sketchup::Tool#onRButtonDoubleClick":{"description":"The onRButtonDoubleClick is called by SketchUp when the user double clicks\nwith the right mouse button.","name":"onRButtonDoubleClick","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onRButtonDoubleClick","type":"instance_method","visibility":"public","parameters":[["flags",null,"A bit mask that tells the state of the modifier keys and\nother mouse buttons at the time."],["x",null,"The X coordinate on the screen where the event occurred."],["view",null,"A View object where the method was invoked."],["y",null,"The Y coordinate on the screen where the event occurred."]],"return":[null,"nil"]},"Sketchup::Tool#onRButtonDown":{"description":"The onRButtonDown method is called by SketchUp when the user presses\nthe right mouse button. Implement this method, along with the tool.getMenu\nmethod, when you want your tool to do something other than display the\ndefault context menu when the right mouse button is clicked.","name":"onRButtonDown","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onRButtonDown","type":"instance_method","visibility":"public","parameters":[["flags",null,"A bit mask that tells the state of the modifier keys and\nother mouse buttons at the time."],["x",null,"The X coordinate on the screen where the event occurred."],["view",null,"A View object where the method was invoked."],["y",null,"The Y coordinate on the screen where the event occurred."]],"return":[null,"nil"]},"Sketchup::Tool#onRButtonUp":{"description":"The onRButtonUp method is called by SketchUp when the user releases the\nright mouse button.","name":"onRButtonUp","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onRButtonUp","type":"instance_method","visibility":"public","parameters":[["flags",null,"A bit mask that tells the state of the modifier keys and\nother mouse buttons at the time."],["x",null,"The X coordinate on the screen where the event occurred."],["view",null,"A View object where the method was invoked."],["y",null,"The Y coordinate on the screen where the event occurred."]],"return":[null,"nil"]},"Sketchup::Tool#onReturn":{"description":"The onReturn method is called by SketchUp when the user hit the Return key\nto complete an operation in the tool. This method will rarely need to be\nimplemented.","name":"onReturn","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onReturn","type":"instance_method","visibility":"public","parameters":[["view",null,"A View object where the method was invoked."]],"return":[null,"nil"]},"Sketchup::Tool#onSetCursor":{"description":"The onSetCursor method is called by SketchUp when the tool wants to set the\ncursor.","name":"onSetCursor","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onSetCursor","type":"instance_method","visibility":"public","return":[null,"nil"]},"Sketchup::Tool#onUserText":{"description":"The onUserText method is called by SketchUp when the user has typed text\ninto the VCB and hit return.","name":"onUserText","namespace":"Sketchup::Tool","path":"Sketchup::Tool#onUserText","type":"instance_method","visibility":"public","parameters":[["text",null,"The text string that was typed into the VCB."],["view",null,"A View object where the method was invoked."]],"return":[null,"nil"]},"Sketchup::Tool#resume":{"description":"The resume method is called by SketchUp when the tool becomes active again\nafter being suspended.","name":"resume","namespace":"Sketchup::Tool","path":"Sketchup::Tool#resume","type":"instance_method","visibility":"public","parameters":[["view",null,"A View object where the method was invoked."]],"return":[null,"nil"]},"Sketchup::Tool#suspend":{"description":"The suspend method is called by SketchUp when the tool temporarily becomes\ninactive because another tool has been activated. This typically happens\nwhen a viewing tool is activated, such as when orbit is active due to the\nmiddle mouse button.","name":"suspend","namespace":"Sketchup::Tool","path":"Sketchup::Tool#suspend","type":"instance_method","visibility":"public","parameters":[["view",null,"A View object where the method was invoked."]],"return":[null,"nil"]},"Sketchup::Tools":{"description":"The Tools class contains methods to manipulate a collection of SketchUp\ntools. You access this collection by calling the Model.tools method.","name":"Tools","namespace":"Sketchup","path":"Sketchup::Tools","type":"class","visibility":"public"},"Sketchup::Tools#active_tool_id":{"description":"The active_tool_id method is used to retrieve the active tool's id.","name":"active_tool_id","namespace":"Sketchup::Tools","path":"Sketchup::Tools#active_tool_id","type":"instance_method","visibility":"public","return":[null,"id - the active tool's id."]},"Sketchup::Tools#active_tool_name":{"description":"The active_tool_name method is used to retrieve the active tool's name.","name":"active_tool_name","namespace":"Sketchup::Tools","path":"Sketchup::Tools#active_tool_name","type":"instance_method","visibility":"public","return":[null,"name = the active tool's name."]},"Sketchup::Tools#add_observer":{"description":"The add_observer method is used to add an observer to the current object.","name":"add_observer","namespace":"Sketchup::Tools","path":"Sketchup::Tools#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",null,"An observer."]],"return":[null,"status - true if successful, false if unsuccessful."]},"Sketchup::Tools#model":{"description":"The model method is used to get the model associated with this tools object.","name":"model","namespace":"Sketchup::Tools","path":"Sketchup::Tools#model","type":"instance_method","visibility":"public","return":[null,"model - the Model object associated with this tools\ncollection."]},"Sketchup::Tools#pop_tool":{"description":"The pop_tool method is used to pop the last pushed tool on the tool stack.","name":"pop_tool","namespace":"Sketchup::Tools","path":"Sketchup::Tools#pop_tool","type":"instance_method","visibility":"public","return":[null,"the last pushed Tool object, if it is a Ruby tool. If a\nnative tool is active, selects the default native tool\nand returns nil."]},"Sketchup::Tools#push_tool":{"description":"The push_tool method is used to push (aka activate) a user-defined tool.\nSee the Tool interface for details on creating your own SketchUp tool.","name":"push_tool","namespace":"Sketchup::Tools","path":"Sketchup::Tools#push_tool","type":"instance_method","visibility":"public","parameters":[["tool",null,"A user."]],"return":[null,"status - true if successful, false if unsuccessful."]},"Sketchup::Tools#remove_observer":{"description":"The remove_observer method is used to remove an observer from the current\nobject.","name":"remove_observer","namespace":"Sketchup::Tools","path":"Sketchup::Tools#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",null,"An observer."]],"return":[null,"true if successful, false if unsuccessful."]},"Sketchup::ToolsObserver":{"description":"This observer interface is implemented to react to tool events. To implement\nthis observer, create a Ruby class of this type, override the desired\nmethods, and add an instance of the observer to the {Sketchup::Tools} object.\n\nSome of the code below mentions +tool_names+ and +tool_ids+. Here is a list\nof the common tool IDs and names:\n\n- +21013+ = 3DTextTool\n- +21065+ = ArcTool\n- +10523+ = CameraDollyTool\n- +10508+ = CameraOrbitTool\n- +10525+ = CameraPanTool\n- +21169+ = PositionCameraTool\n- +10520+ = CameraWalkTool\n- +10509+ = CameraZoomTool\n- +10526+ = CameraZoomWindowTool\n- +21096+ = CircleTool\n- +21013+ = ComponentTool\n- +21126+ = ComponentCSTool\n- +21410+ = DimensionTool\n- +21019+ = EraseTool\n- +21031+ = FreehandTool\n- +21525+ = ExtrudeTool\n- +21126+ = SketchCSTool\n- +21048+ = MoveTool\n- +21024+ = MeasureTool\n- +21100+ = OffsetTool\n- +21074+ = PaintTool\n- +21013+ = PasteTool\n- +21095+ = PolyTool\n- +21515+ = PositionTextureTool\n- +21041+ = PushPullTool\n- +21057+ = ProtractorTool\n- +21094+ = RectangleTool\n- +21129+ = RotateTool\n- +21236+ = ScaleTool\n- +21022+ = SelectionTool\n- +21337+ = SectionPlaneTool\n- +21020+ = SketchTool\n- +21405+ = TextTool","name":"ToolsObserver","namespace":"Sketchup","path":"Sketchup::ToolsObserver","type":"class","visibility":"public"},"Sketchup::ToolsObserver#onActiveToolChanged":{"description":"Once you subclass {Sketchup::ToolsObserver} with your unique class, you can\noverride the {#onActiveToolChanged} method to receive tool change\nnotifications.","name":"onActiveToolChanged","namespace":"Sketchup::ToolsObserver","path":"Sketchup::ToolsObserver#onActiveToolChanged","type":"instance_method","visibility":"public","parameters":[["tool_id",["Integer"],"The ID of the tool. This is a predefined number\nunique to a given tool. For example, the Materials Browser is tool_id\n21074."],["tool_name",["String"],"The name of the tool."],["tools",["Sketchup::Tools"],"A Tools object."]],"return":[["nil"],""]},"Sketchup::ToolsObserver#onToolStateChanged":{"description":"The {#onToolStateChanged} method is called each time the user performs an\naction with a tool. The actual state that is returned is an internal number\nthat varies tool to tool. If you want to watch existing tools for every\ninteraction, you will need to experiment with the tool state to determine\nwhich states you care about. There is little consistency tool to tool.","name":"onToolStateChanged","namespace":"Sketchup::ToolsObserver","path":"Sketchup::ToolsObserver#onToolStateChanged","type":"instance_method","visibility":"public","parameters":[["tool_state",["Integer"],"A number identifying the state the tool just\nentered."],["tools",["Sketchup::Tools"],"A Tools object."],["tool_id",["Integer"],"The ID of the tool. This is a predefined number\nunique to a given tool. For example, the Materials Browser is tool_id\n21074."],["tool_name",["String"],"The name of the tool."]],"return":[["nil"],""]},"Sketchup::UVHelper":{"description":"The UV Helper class contains methods allowing you to determine the location\n(UV coordinates) of a texture on a face. This class is particularly useful\nin determining how textures that have been manipulated using the Texture\nTweaker should appear when exported to another file type\n\nUse the Face.get_UVHelper method to create a UVHelper for a given face.\nSee the TextureWriter class as well.","name":"UVHelper","namespace":"Sketchup","path":"Sketchup::UVHelper","type":"class","visibility":"public"},"Sketchup::UVHelper#get_back_UVQ":{"description":"The get_back_UVQ method is used to get the UV coordinates for the back of a\nface.","name":"get_back_UVQ","namespace":"Sketchup::UVHelper","path":"Sketchup::UVHelper#get_back_UVQ","type":"instance_method","visibility":"public","parameters":[["point",null,"A Point3d object containing one of the 3D vertexes of\nthe face."]],"return":[null,"point - a Point3d containing the UV coordinates where\nthe X value is the U value, the Y value is the V value\nand the Z value is a Q value (which is not used)."]},"Sketchup::UVHelper#get_front_UVQ":{"description":"The get_front_UVQ method is used to get the UV coordinates for a front of a\nface.","name":"get_front_UVQ","namespace":"Sketchup::UVHelper","path":"Sketchup::UVHelper#get_front_UVQ","type":"instance_method","visibility":"public","parameters":[["point",null,"A Point3d object containing one of the 3D vertexes of\nthe face."]],"return":[null,"point - a Point3d containing the UV coordinates where\nthe X value is the U value, the Y value is the V value\nand the Z value is a Q value (which is not used)."]},"Sketchup::Vertex":{"description":"A Vertex. A Vertex represents the end of an Edge or a point inside a Face.","name":"Vertex","namespace":"Sketchup","path":"Sketchup::Vertex","type":"class","visibility":"public"},"Sketchup::Vertex#common_edge":{"description":"The common_edge method is used to find a common edge that is defined by this\nvertex and another vertex","name":"common_edge","namespace":"Sketchup::Vertex","path":"Sketchup::Vertex#common_edge","type":"instance_method","visibility":"public","parameters":[["vertex2",["Sketchup::Vertex"],"A Vertex object."]],"return":[["Sketchup::Edge","nil"],"an Edge object common to both vertices if\nsuccessful. Returns nil if there is no edge between the\ntwo vertices."]},"Sketchup::Vertex#curve_interior?":{"description":"The curve_interior? method is used to determine if this vertex is on the\ninterior of a Curve.","name":"curve_interior?","namespace":"Sketchup::Vertex","path":"Sketchup::Vertex#curve_interior?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if it is used by exactly two edges which\nare both part of the same curve."]},"Sketchup::Vertex#edges":{"description":"The edges method is used to retrieve an Array of edges that use the Vertex.","name":"edges","namespace":"Sketchup::Vertex","path":"Sketchup::Vertex#edges","type":"instance_method","visibility":"public","return":[["Array<Sketchup::Edge>"],"an Array of edge objects if successful"]},"Sketchup::Vertex#faces":{"description":"The faces method is used to retrieve an Array of faces that use the vertex.","name":"faces","namespace":"Sketchup::Vertex","path":"Sketchup::Vertex#faces","type":"instance_method","visibility":"public","return":[["Array<Sketchup::Face>"],"an Array of faces that use the vertex if\nsuccessful"]},"Sketchup::Vertex#loops":{"description":"The loops method is used to retrieve an Array of loops that use the vertex.","name":"loops","namespace":"Sketchup::Vertex","path":"Sketchup::Vertex#loops","type":"instance_method","visibility":"public","return":[["Array<Sketchup::Loop>"],"an Array of loops that use the vertex if\nsuccessful"]},"Sketchup::Vertex#position":{"description":"The position method is used to retrieve the Point3d position of a vertex.","name":"position","namespace":"Sketchup::Vertex","path":"Sketchup::Vertex#position","type":"instance_method","visibility":"public","return":[["Geom::Point3d"],"a Point3d object representing the position of\nthe vertex if successful"]},"Sketchup::Vertex#used_by?":{"description":"The used_by? method is used to determine if the Vertex is used by a given\nEdge or Face.","name":"used_by?","namespace":"Sketchup::Vertex","path":"Sketchup::Vertex#used_by?","type":"instance_method","visibility":"public","parameters":[["face_or_edge",["Sketchup::Edge","Sketchup::Face"],"A Face or Edge ot test against."]],"return":[["Boolean"],"true if the Vertex is used in the given entity."]},"Sketchup::View":{"description":"This class contains methods to manipulate the current point of view of the\nmodel. The drawing methods here (draw_line, draw_polyline, etc) are meant to\nbe invoked within a tool's Tool.draw method. Calling them outside Tool.draw\nwill have no effect.\n\nYou access the View by calling the Model.active_view method.","name":"View","namespace":"Sketchup","path":"Sketchup::View","type":"class","visibility":"public"},"Sketchup::View#add_observer":{"description":"The add_observer method is used to add an observer to the current object.","name":"add_observer","namespace":"Sketchup::View","path":"Sketchup::View#add_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::View#animation=":{"description":"The animation= method is used to set an animation that is displayed for a\nview. See Animation for details on how to create an animation object.","name":"animation=","namespace":"Sketchup::View","path":"Sketchup::View#animation=","type":"instance_method","visibility":"public","parameters":[["animation",["#nextFrame"],"An Animation object."]],"return":[["#nextFrame"],"the newly set Animation object"]},"Sketchup::View#average_refresh_time":{"description":"The average_refresh_time is used to set the average time used to refresh the\ncurrent model in the view. This can be used to estimate the frame rate for\nan animation.","name":"average_refresh_time","namespace":"Sketchup::View","path":"Sketchup::View#average_refresh_time","type":"instance_method","visibility":"public","return":[["Float"],"the time in seconds"]},"Sketchup::View#camera":{"description":"The camera method is used to retrieve the camera for the view.","name":"camera","namespace":"Sketchup::View","path":"Sketchup::View#camera","type":"instance_method","visibility":"public","return":[["Sketchup::Camera"],"a Camera object"]},"Sketchup::View#camera=":{"description":"The camera= method is used to set the camera for the view. If a transition\ntime is given, then it will animate the transition from the current camera\nto the new one.","name":"camera=","namespace":"Sketchup::View","path":"Sketchup::View#camera=","type":"instance_method","visibility":"public"},"Sketchup::View#center":{"description":"The center method is used to retrieve the coordinates of the center of the\nview in pixels. It is returned as an array of 2 values for x and y.","name":"center","namespace":"Sketchup::View","path":"Sketchup::View#center","type":"instance_method","visibility":"public","return":[["Geom::Point3d"],"the center of the view"]},"Sketchup::View#corner":{"description":"The corner method is used to retrieve the coordinates of one of the corners\nof the view. The argument is an index between 0 and 3 that identifies which\ncorner you want. This method returns an array with two integers which are\nthe coordinates of the corner of the view in the view space. If the view\nuses a Camera with a fixed aspect ratio, then the corners are the corners of\nthe viewing are of the camera which might be different than the actual\ncorners of the view itself.\n\nThe index numbers are as follows:\n - 0: top left,\n - 1: top right,\n - 2: bottom left,\n - 3: bottom right.","name":"corner","namespace":"Sketchup::View","path":"Sketchup::View#corner","type":"instance_method","visibility":"public","parameters":[["index",["Integer"],"A value between (or including) 0 and 3 identifying the\ncorner whose coordinate you want to retrieve."]],"return":[["Array(Integer, Integer)"],"a 2d array [w,h] representing the screen point"]},"Sketchup::View#draw":{"description":"The {#draw} method is used to do basic drawing. This method can only be\ncalled from within the {Tool#draw} method of a tool that you implement in\nRuby.\n\nThe following constants are all OpenGL terms and have been externalized to\nRuby. Here is a summary of their meanings:\n\n[GL_POINTS]\n  Treats each vertex as a single point. Vertex n defines point n. N\n  points are drawn.\n\n[GL_LINES]\n  Treats each pair of vertices as\n  an independent line segment. Vertices 2n-1 and 2n define line n. N/2 lines\n  are drawn.\n\n[GL_LINE_STRIP]\n  Draws a connected group of line\n  segments from the first vertex to the last. Vertices n and n+1 define\n  line n. N-1 lines are drawn.\n\n[GL_LINE_LOOP]\n  Draws a connected group of line segments from the first vertex to the last,\n  then back to the first. Vertices n and n+1 define line n. The last line,\n  however, is defined by vertices N and 1. N lines are drawn.\n\n[GL_TRIANGLES]\n  Treats each triplet of vertices as an independent\n  triangle. Vertices 3n-2, 3n-1, and 3n define triangle n. N/3 triangles are\n  drawn.\n\n[GL_TRIANGLE_STRIP]\n  Draws a connected group of triangles. One triangle is defined for each\n  vertex presented after the first two vertices. For odd n, vertices n, n+1,\n  and n+2 define triangle n. For even n, vertices n+1, n, and n+2 define\n  triangle n. N-2 triangles are drawn.\n\n[GL_TRIANGLE_FAN]\n  Draws a connected group of triangles.\n  One triangle is defined for each vertex presented after the first two\n  vertices. Vertices 1, n+1, and n+2 define triangle n. N-2 triangles are\n  drawn.\n\n[GL_QUADS]\n  Treats each group of four vertices as an\n  independent quadrilateral. Vertices 4n-3, 4n-2, 4n-1, and 4n define\n  quadrilateral n. N/4 quadrilaterals are drawn.\n\n[GL_QUAD_STRIP]\n  Draws a connected group of quadrilaterals. One quadrilateral is\n  defined for each pair of vertices presented after the first pair.\n  Vertices 2n-1, 2n, 2n+2, and 2n+1 define quadrilateral n. N/2-1\n  quadrilaterals are drawn. Note that the order in which vertices are used to\n  construct a quadrilateral from strip data is different from that used with\n  independent data.\n\n[GL_POLYGON]\n  Draws a single, convex polygon. Vertices 1\n  through N define this polygon.","name":"draw","namespace":"Sketchup::View","path":"Sketchup::View#draw","type":"instance_method","visibility":"public","parameters":[["openglenum",["Integer"],"The item you are going to draw, one of the constants\nfrom the comments, such as +GL_LINES+."],["points",["Array<Geom::Point3d>"],""]],"return":[["Sketchup::View"],""]},"Sketchup::View#draw2d":{"description":"The {#draw2d} method is used to draw in screen space (using 2D screen\ncoordinates) instead of 3D space.\n\nThe second parameter is an {Array} of {Geom::Point3d} objects (or several\nindividual {Geom::Point3d} objects). These {Geom::Point3d} objects are in\nscreen space, not 3D space.\nThe X value corresponds to the number of pixels from the left edge of the\ndrawing area. The Y value corresponds to the number of pixels down from\nthe top of the drawing area. The Z value is not used.","name":"draw2d","namespace":"Sketchup::View","path":"Sketchup::View#draw2d","type":"instance_method","visibility":"public","parameters":[["points",["Array<Geom::Point3d>"],""],["openglenum",["Integer"],"An OpenGL enumerator (unsigned integer). See\ncomments in the {#draw} method for a list of constants."]],"return":[["Sketchup::View"],"returns the View object."]},"Sketchup::View#draw_line":{"description":"The draw_lines method is used to draw disconnected lines.\n\nYou must have an even number of points. This method is usually  invoked\nwithin the draw method of a tool.","name":"draw_line","namespace":"Sketchup::View","path":"Sketchup::View#draw_line","type":"instance_method","visibility":"public"},"Sketchup::View#draw_lines":{"description":"The draw_lines method is used to draw disconnected lines.\n\nYou must have an even number of points. This method is usually  invoked\nwithin the draw method of a tool.","name":"draw_lines","namespace":"Sketchup::View","path":"Sketchup::View#draw_lines","type":"instance_method","visibility":"public"},"Sketchup::View#draw_points":{"description":"This method is used to draw points.\n\nThis method is usually invoked within the draw method of a tool.","name":"draw_points","namespace":"Sketchup::View","path":"Sketchup::View#draw_points","type":"instance_method","visibility":"public","parameters":[["pts",["Array<Geom::Point3d>"],"An array of Point3d objects."],["pointsize",["Integer"],"(optional)\nSize of the point in pixels."],["pointcolor",["Sketchup::Color"],"(optional)\nColor of the point."],["pointstyle",["Integer"],"(optional)\nStyle of the point. 1 = open square,\n2 = filled square, 3 = \"+\", 4 = \"X\", 5 = \"*\",\n6 = open triangle, 7 = filled triangle."]],"return":[["Sketchup::View"],"a View object"]},"Sketchup::View#draw_polyline":{"description":"The draw_polyline method is used to draw a series of connected line segments\nfrom pt1 to pt2 to pt3, and so on.\n\nThis method is usually invoked within the draw method of a tool.","name":"draw_polyline","namespace":"Sketchup::View","path":"Sketchup::View#draw_polyline","type":"instance_method","visibility":"public"},"Sketchup::View#draw_text":{"description":"This method is used to draw text on the screen and is usually invoked within\nthe draw method of a tool.","name":"draw_text","namespace":"Sketchup::View","path":"Sketchup::View#draw_text","type":"instance_method","visibility":"public","parameters":[["options",["Hash"],"The text can be customized by providing a hash or\nnamed arguments of options. Available from SketchUp 2016."],["text",["String"],"The text string to draw."],["point",["Geom::Point3d"],"A Point3d object representing a 2D coordinate\nin view space."]],"return":[["Sketchup::View"],""]},"Sketchup::View#drawing_color=":{"description":"The drawing_color method is used to set the color that is used for drawing\nto the view.\n\nThis method is usually invoked within the draw method of a tool.","name":"drawing_color=","namespace":"Sketchup::View","path":"Sketchup::View#drawing_color=","type":"instance_method","visibility":"public","parameters":[["color",["Sketchup::Color","String"],"A Color object."]],"return":[["Sketchup::View"],""]},"Sketchup::View#dynamic=":{"description":"The dynamic= method allows you to degrade visual quality while improving\nperformance when a model is large and view refresh time is slow. For\nexample, if you were using a Ruby script to animate the camera through\na large scene, you may want to set dynamic to true during that time.\n\nSee also camera.rb which is part of the film and stage ruby\nscripts.","name":"dynamic=","namespace":"Sketchup::View","path":"Sketchup::View#dynamic=","type":"instance_method","visibility":"public","parameters":[["value",["Boolean"],"true or false"]],"return":[["Boolean"],""]},"Sketchup::View#field_of_view":{"description":"The field_of_view method is used get the view's field of view setting, in\ndegrees.","name":"field_of_view","namespace":"Sketchup::View","path":"Sketchup::View#field_of_view","type":"instance_method","visibility":"public","return":[["Float"],"the field of view"]},"Sketchup::View#field_of_view=":{"description":"The field_of_view= method is used set the view's field of view setting,\nin degrees.","name":"field_of_view=","namespace":"Sketchup::View","path":"Sketchup::View#field_of_view=","type":"instance_method","visibility":"public","parameters":[["fov",["Numeric"],"the field of view"]],"return":[["Numeric"],""]},"Sketchup::View#guess_target":{"description":"The guess_target method is used to guess at what the user is looking at when\nyou have a perspective view.\n\nThis method is useful when writing a viewing tool. See also camera.rb which\nis part of the film and stage ruby scripts.","name":"guess_target","namespace":"Sketchup::View","path":"Sketchup::View#guess_target","type":"instance_method","visibility":"public","return":[["Geom::Point3d"],"a Point3d object representing the point in the\nmodel that the user is likely interested in."]},"Sketchup::View#inference_locked?":{"description":"The inference_locked? method is used to determine if inference locking is on\nfor the view.","name":"inference_locked?","namespace":"Sketchup::View","path":"Sketchup::View#inference_locked?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if locked, false if unlocked"]},"Sketchup::View#inputpoint":{"description":"The inputpoint method is used to retrieve an input point.\n\nThis will normally be used inside one of the mouse event handling methods in\na tool. Usually, it is preferable to create the InputPoint first and then\nuse the pick method on it.","name":"inputpoint","namespace":"Sketchup::View","path":"Sketchup::View#inputpoint","type":"instance_method","visibility":"public","parameters":[["x",["Numeric"],"A x value."],["y",["Numeric"],"A y value."],["inputpoint1",["Sketchup::InputPoint"],"An InputPoint object."]],"return":[["Sketchup::InputPoint"],""]},"Sketchup::View#invalidate":{"description":"The invalidate method is used mark the view as in need of a redraw.","name":"invalidate","namespace":"Sketchup::View","path":"Sketchup::View#invalidate","type":"instance_method","visibility":"public","return":[["Sketchup::View"],"the invalidated View object"]},"Sketchup::View#last_refresh_time":{"description":"The last_refresh_time method is used to retrieve the time for the last full\nview refresh.","name":"last_refresh_time","namespace":"Sketchup::View","path":"Sketchup::View#last_refresh_time","type":"instance_method","visibility":"public","return":[["Float"],"time in milliseconds"]},"Sketchup::View#line_stipple=":{"description":"The line_stipple= method is used to set the line pattern to use for drawing.\nThe stipple pattern is given as a string.\nValid strings are:\n  \".\" (Dotted Line),\n  \"-\" (Short Dashes Line),\n  \"_\" (Long Dashes Line),\n  \"-.-\" (Dash Dot Dash Line),\n  \"\" (Solid Line).\n\nThis method is usually invoked within the draw method of a tool.","name":"line_stipple=","namespace":"Sketchup::View","path":"Sketchup::View#line_stipple=","type":"instance_method","visibility":"public","parameters":[["pattern",["String"],"A string stipple pattern, such as \"-.-\""]],"return":[["Sketchup::View"],"the View object"]},"Sketchup::View#line_width=":{"description":"The line_width= method is used to set the line width to use for drawing. The\nvalue is a Double indicating the desired width in pixels.\n\nThis method is usually invoked within the draw method of a tool.","name":"line_width=","namespace":"Sketchup::View","path":"Sketchup::View#line_width=","type":"instance_method","visibility":"public","parameters":[["width",["Integer"],"The width in pixels."]],"return":[["Integer"],""]},"Sketchup::View#lock_inference":{"description":"The lock_inference method is used to lock or unlock an inference.\n\nThis method will typically be called from inside a tool class when the user\npresses the shift key.\n\nWith no arguments it unlocks all inferences. With one or two arguments, it\nlocks the inference based on the given InputPoint(s).","name":"lock_inference","namespace":"Sketchup::View","path":"Sketchup::View#lock_inference","type":"instance_method","visibility":"public","parameters":[["inputpoint",["Sketchup::InputPoint"],"(optional)\n1st InputPoint to inference to."],["inputpoint2",["Sketchup::InputPoint"],"(optional)\n2nd InputPoint to inference to."]],"return":[["Sketchup::View"],"a View object"]},"Sketchup::View#model":{"description":"The model method is used to retrieve the model for the current view.","name":"model","namespace":"Sketchup::View","path":"Sketchup::View#model","type":"instance_method","visibility":"public","return":[["Sketchup::Model"],"the model for this view"]},"Sketchup::View#pick_helper":{"description":"The pick_helper method is used to retrieve a pick helper for the view. See\nthe PickHelper class for information on pick helpers.\n\nThis call returns an initialized PickHelper.","name":"pick_helper","namespace":"Sketchup::View","path":"Sketchup::View#pick_helper","type":"instance_method","visibility":"public"},"Sketchup::View#pickray":{"description":"The pickray method is used to retrieve a ray passing through a given screen\nposition in the viewing direction.","name":"pickray","namespace":"Sketchup::View","path":"Sketchup::View#pickray","type":"instance_method","visibility":"public"},"Sketchup::View#pixels_to_model":{"description":"The pixels_to_model method is used to compute a model size from a pixel size\nat a given point.\n\nThis method is useful for deciding how big to draw something based on a\ndesired size in pixels.","name":"pixels_to_model","namespace":"Sketchup::View","path":"Sketchup::View#pixels_to_model","type":"instance_method","visibility":"public","parameters":[["pixels",["Numeric"],"The pixel size."],["point",["Geom::Point3d"],"A Point3d object where the size will be calculated from."]],"return":[["Float"],"the model size"]},"Sketchup::View#refresh":{"description":"The refresh method is used to immediately force a redraw of the view.","name":"refresh","namespace":"Sketchup::View","path":"Sketchup::View#refresh","type":"instance_method","visibility":"public","return":[["Sketchup::View"],"the refreshed View object"]},"Sketchup::View#remove_observer":{"description":"The remove_observer method is used to remove an observer from the current\nobject.","name":"remove_observer","namespace":"Sketchup::View","path":"Sketchup::View#remove_observer","type":"instance_method","visibility":"public","parameters":[["observer",["Object"],"An observer."]],"return":[["Boolean"],"true if successful, false if unsuccessful."]},"Sketchup::View#screen_coords":{"description":"The screen_coords method is used to retrieve the screen coordinates of the\ngiven point on the screen.\n\nThe x and y values returned correspond to the x and y screen coordinates.\nIgnore the z values.  If the referenced point is not in the current\nviewport,  the x and/or y value may be negative.","name":"screen_coords","namespace":"Sketchup::View","path":"Sketchup::View#screen_coords","type":"instance_method","visibility":"public","parameters":[["point3d",["Geom::Point3d"],"A Point3d object."]],"return":[["Geom::Point3d"],"A Point3d containing the screen position"]},"Sketchup::View#set_color_from_line":{"description":"Set the drawing color for the view based on the direction of a line that you\nwant to draw. These colors will match the axes colors in the SketchUp model\n(typically blue for straight up and down, etc.)\n\nThis method is usually invoked within the draw method of a tool.","name":"set_color_from_line","namespace":"Sketchup::View","path":"Sketchup::View#set_color_from_line","type":"instance_method","visibility":"public","parameters":[["point1",["Geom::Point3d"],"Point3d object representing first point in the line."],["point2",["Geom::Point3d"],"Point3d object representing second point in the line."]],"return":[["Sketchup::View"],"a View object"]},"Sketchup::View#show_frame":{"description":"The show_frame method is used to show a frame of an Animation object in the\ncurrent view.\n\nYou can supply an optional delay in seconds to wait before showing the next\nframe. This can be useful to control the speed at which the animation runs.","name":"show_frame","namespace":"Sketchup::View","path":"Sketchup::View#show_frame","type":"instance_method","visibility":"public","parameters":[["delay",["Numeric"],"An optional delay in seconds."]],"return":[["Sketchup::View"],""]},"Sketchup::View#tooltip=":{"description":"Set a tooltip to display in the view. This is useful for displaying tooltips\nin a tool that you write in Ruby.","name":"tooltip=","namespace":"Sketchup::View","path":"Sketchup::View#tooltip=","type":"instance_method","visibility":"public","parameters":[["string",["String"],"The string tooltip."]],"return":[["String"],"the new tooltip string"]},"Sketchup::View#vpheight":{"description":"The vpheight method is used to retrieve the height of the viewport for the\nview.","name":"vpheight","namespace":"Sketchup::View","path":"Sketchup::View#vpheight","type":"instance_method","visibility":"public","return":[["Integer"],"the height of the viewport in pixels."]},"Sketchup::View#vpwidth":{"description":"The vpwidth method is used to retrieve the width of the viewport for the\nview.","name":"vpwidth","namespace":"Sketchup::View","path":"Sketchup::View#vpwidth","type":"instance_method","visibility":"public","return":[["Integer"],"the width of the viewport in pixels."]},"Sketchup::View#write_image":{"description":"The write_image method is used to write the current view to an image file.\n\nAll arguments except for the filename are optional.\n\nIf antialias is specified, it should be either true or false.\n\nIf a hash is passed as the first parameter, then the contents of that hash\ndefine how the image is exported.\nThe keys are:\n - filename        The filename for the saved image.\n - width           (optional) Width in pixels (max 16000).\n - height          (optional) Height in pixels (max 16000).\n - antialias       (optional) true or false\n - compression     (optional) Float compression factor for JPEG images,\n                   between 0.0 and 1.0\n - transparent     true or false","name":"write_image","namespace":"Sketchup::View","path":"Sketchup::View#write_image","type":"instance_method","visibility":"public","parameters":[["width",["Integer"],"(optional)\nWidth in pixels."],["filename_or_hash",["String","Hash"],"The filename for the saved image or a hash\ncontaining a set of keys."],["height",["Integer"],"(optional)\nHeight in pixels."],["compression",["Float"],"(optional)\nFloat compression factor for JPEG images,\nbetween 0.0 and 1.0"],["antialias",["Boolean"],"(optional)\ntrue or false"]],"return":[["Boolean"],""]},"Sketchup::View#zoom":{"description":"The zoom method is used to zoom in or out by some zoom factor.","name":"zoom","namespace":"Sketchup::View","path":"Sketchup::View#zoom","type":"instance_method","visibility":"public","parameters":[["zoom_or_ents",["Numeric","Sketchup::Selection","Sketchup::Entity","Array<Sketchup::Entity>"],"A Float zoom factor from 1.0 or larger or an Array or\ncollection of entities to \"zoom extents\" around."]],"return":[["Sketchup::View"],"the zoomed View object"]},"Sketchup::View#zoom_extents":{"description":"The zoom_extents method is used to zoom to the extents about the entire\nmodel, as if the user has selected the zoom extents command from the menu.","name":"zoom_extents","namespace":"Sketchup::View","path":"Sketchup::View#zoom_extents","type":"instance_method","visibility":"public","return":[["Sketchup::View"],"the zoomed View object"]},"Sketchup::ViewObserver":{"description":"This observer interface is implemented to react to view events. To implement\nthis observer, create a Ruby class of this type, override the desired\nmethods, and add an instance of the observer to the view object.","name":"ViewObserver","namespace":"Sketchup","path":"Sketchup::ViewObserver","type":"class","visibility":"public"},"Sketchup::ViewObserver#onViewChanged":{"description":"The {#onViewChanged} method is called whenever the view is altered, such as\nwhen the user uses the Pan, Orbit, or Zoom tools are used.","name":"onViewChanged","namespace":"Sketchup::ViewObserver","path":"Sketchup::ViewObserver#onViewChanged","type":"instance_method","visibility":"public","parameters":[["view",["Sketchup::View"],null]],"return":[["nil"],""]},"LanguageHandler":{"description":"The LanguageHandler class contains methods used to help make SketchUp\nextensions easier to localize across different languages. It looks for\ntranslated resources within the Resources folder in the extension's directory\nstructure. All translated resources should be located within the appropriate\nlanguage folder and encoded in UTF-8. The strings file should include\n\"key\"=\"value\" string pairs in the following format:","name":"LanguageHandler","namespace":"","path":"LanguageHandler","type":"class","visibility":"public"},"LanguageHandler#[]":{"description":"Looks up and returns the localized version of a given string, based on the\nlanguage SketchUp is currently running in, and the available translations\nin the Resources folder.","name":"[]","namespace":"LanguageHandler","path":"LanguageHandler#[]","type":"instance_method","visibility":"public","parameters":[["key",["String"],"The key for the string to be retrieved."]],"return":[["String"],"the localized string."]},"LanguageHandler#initialize":{"description":"The new method is used to create a new LanguageHandler object.","name":"initialize","namespace":"LanguageHandler","path":"LanguageHandler#initialize","type":"instance_method","visibility":"public","parameters":[["filename",["String"],"The name of the file that contains the localized strings\nwith their keys in UTF-8 encoding."]],"return":[["LanguageHandler"],"the new LanguageHandler object"]},"LanguageHandler#resource_path":{"description":"Returns a string containing the path to the given filename if it can be found\nin the Resources folder.","name":"resource_path","namespace":"LanguageHandler","path":"LanguageHandler#resource_path","type":"instance_method","visibility":"public","return":[["String"],"the location of the file in the Resources folder."]},"LanguageHandler#strings":{"description":"Returns a Hash object containing the localization dictionary.","name":"strings","namespace":"LanguageHandler","path":"LanguageHandler#strings","type":"instance_method","visibility":"public","return":[["Hash"],"the localization dictionary."]},"SketchupExtension":{"description":"The SketchupExtension class contains methods allowing you to create and\nmanipulate SketchUp extensions. Extensions are Ruby scripts that can be\nloaded and unloaded using the Extension manager (Extensions panel of the\nPreferences dialog box). Generally you should register your ruby scripts as\nan extension to give SketchUp users the ability to disable it through the\nuser interface.\n\nThe idea here is to take the ruby script that actually creates your\nfunctionality and place it in a folder somewhere outside of the /Plugins\nfolder, most commonly a subdirectory like /Plugins/MyExtension. Then\nyou create a new ruby script inside the /Plugins directory that will\nset up the extension entry and load your original script if the user\nhas your extension turned on.\n\nHere is an example extension loading script. For this example, the\nfollowing code would be saved in /Plugins/StairTools.rb, and the\nactual plugin itself would live in /Plugins/StairTools/core.rb.\n\nYou can find two example extensions that ship with SketchUp,\nsu_dynamiccomponents.rb and su_sandboxtools.rb, under the /Plugins/ folder.","name":"SketchupExtension","namespace":"","path":"SketchupExtension","type":"class","visibility":"public"},"SketchupExtension#check":{"description":"Loads the extension, meaning the underlying ruby script is immediately\ninterpreted. This is the equivalent of checking the extension's checkbox\nin the Preferences > Extensions list.","name":"check","namespace":"SketchupExtension","path":"SketchupExtension#check","type":"instance_method","visibility":"public","return":[["Boolean"],"whether the load succeeded"]},"SketchupExtension#copyright":{"description":"The copyright method returns the copyright string which appears beneath\nan extension inside the Extensions Manager dialog.","name":"copyright","namespace":"SketchupExtension","path":"SketchupExtension#copyright","type":"instance_method","visibility":"public","return":[["String"],"the Extension copyright"]},"SketchupExtension#copyright=":{"description":"The copyright= method sets the copyright string which appears beneath\nan extension inside the Extensions Manager dialog.","name":"copyright=","namespace":"SketchupExtension","path":"SketchupExtension#copyright=","type":"instance_method","visibility":"public","parameters":[["copyright",["String"],"The copyright to set"]],"return":[["String"],"the new copyright"]},"SketchupExtension#creator":{"description":"The creator method returns the creator string which appears beneath\nan extension inside the Extensions Manager dialog.","name":"creator","namespace":"SketchupExtension","path":"SketchupExtension#creator","type":"instance_method","visibility":"public","return":[["String"],"the Extension creator"]},"SketchupExtension#creator=":{"description":"The creator= method sets the creator string which appears beneath\nan extension inside the Extensions Manager dialog.","name":"creator=","namespace":"SketchupExtension","path":"SketchupExtension#creator=","type":"instance_method","visibility":"public","parameters":[["creator",["String"],"The creator to set"]],"return":[["String"],"the new creator"]},"SketchupExtension#description":{"description":"The description method returns the long description which appears beneath\nan extension inside the Extensions Manager dialog.","name":"description","namespace":"SketchupExtension","path":"SketchupExtension#description","type":"instance_method","visibility":"public","return":[["String"],"the Extension description"]},"SketchupExtension#description=":{"description":"The description= method sets the long description which appears beneath\nan extension inside the Extensions Manager dialog.","name":"description=","namespace":"SketchupExtension","path":"SketchupExtension#description=","type":"instance_method","visibility":"public","parameters":[["description",["String"],"The description string to set."]],"return":[["String"],"the Extension description"]},"SketchupExtension#extension_path":{"description":"The extension_path method returns the file system path to the extension's\nouter rb file.","name":"extension_path","namespace":"SketchupExtension","path":"SketchupExtension#extension_path","type":"instance_method","visibility":"public","return":[["String"],"the file system path to the extension"]},"SketchupExtension#id":{"description":"The id method returns the Extension Warehouse ID string.","name":"id","namespace":"SketchupExtension","path":"SketchupExtension#id","type":"instance_method","visibility":"public","return":[["String"],"the Extension Warehouse ID"]},"SketchupExtension#initialize":{"description":"The new method is used to create a new SketchupExtension object. Note\nthat once the extension object is created, it will not appear in the\nExtension Manager dialog until your register it with the\nSketchup.register_extension method.","name":"initialize","namespace":"SketchupExtension","path":"SketchupExtension#initialize","type":"instance_method","visibility":"public","parameters":[["title",["String"],"The name of the extension"],["path",["String"],"The relative path to the script that loads your\nplugin."]],"return":[["Sketchup::Extension"],"the new Extension object"]},"SketchupExtension#load_on_start?":{"description":"Returns whether the extension is set to load when SketchUp starts up.","name":"load_on_start?","namespace":"SketchupExtension","path":"SketchupExtension#load_on_start?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the extension loads on startup."]},"SketchupExtension#loaded?":{"description":"Returns whether the extension is currently loaded, meaning the actual ruby\nscript that implements the extension has been evaluated.","name":"loaded?","namespace":"SketchupExtension","path":"SketchupExtension#loaded?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the extension has been loaded"]},"SketchupExtension#name":{"description":"The name method returns the name which appears for\nan extension inside the Extensions Manager dialog.","name":"name","namespace":"SketchupExtension","path":"SketchupExtension#name","type":"instance_method","visibility":"public","return":[["String"],"the Extension name"]},"SketchupExtension#name=":{"description":"The name= method sets the name which appears for\nan extension inside the Extensions Manager dialog.","name":"name=","namespace":"SketchupExtension","path":"SketchupExtension#name=","type":"instance_method","visibility":"public","parameters":[["name",["String"],"The new name"]],"return":[["String"],"the Extension name"]},"SketchupExtension#registered?":{"description":"Returns whether the extension has been registered via\nSketchup.register_extension.","name":"registered?","namespace":"SketchupExtension","path":"SketchupExtension#registered?","type":"instance_method","visibility":"public","return":[["Boolean"],"true if the extension has been registered."]},"SketchupExtension#uncheck":{"description":"Unloads the extension. This is the equivalent of unchecking the extension's\ncheckbox in the Preferences > Extensions list.\n\nNote that technically the extension is not \"unloaded\" in the sense that it\nstops running during the current SketchUp session, but the next time the\nuser restarts SketchUp, the extension will not be active.","name":"uncheck","namespace":"SketchupExtension","path":"SketchupExtension#uncheck","type":"instance_method","visibility":"public","return":[["Boolean"],"whether the unload succeeded"]},"SketchupExtension#version":{"description":"The version method returns the version which appears beneath\nan extension inside the Extensions Manager dialog.","name":"version","namespace":"SketchupExtension","path":"SketchupExtension#version","type":"instance_method","visibility":"public","return":[["String"],"the Extension version"]},"SketchupExtension#version=":{"description":"The version method sets the version which appears beneath\nan extension inside the Extensions Manager dialog.","name":"version=","namespace":"SketchupExtension","path":"SketchupExtension#version=","type":"instance_method","visibility":"public","parameters":[["version",["String"],"The version string to set."]],"return":[["String"],"the Extension version"]},"SketchupExtension#version_id":{"description":"The version_id method returns the Extension Warehouse Version ID string.","name":"version_id","namespace":"SketchupExtension","path":"SketchupExtension#version_id","type":"instance_method","visibility":"public","return":[["String"],"the Extension Warehouse Version ID string"]}}
